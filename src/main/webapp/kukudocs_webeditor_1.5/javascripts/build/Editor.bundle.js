/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	var Router = null;
	var Dom = null;

	var MenuController = null;

	var UI = null;
	var Toolbar = null;
	var Menubar = null;
	var Filter = null;
	var Util = null;

	var Define = null;
	var Layout = null;

	var licenseErrorMsg = 'Invalid License';
	var Sha = __webpack_require__(2);

	function KuKudocsEditor(element, options) {
	    this.rootElement = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.$chromePasteIframe = null;

	    this.options = {
	        //lic Resource 위치 URL
	        licPathURL : '/kukudocs_webeditor_1.5/kukudocs.lic',

	        //에디터 최소 높이설정
	        minHeight : 0,
	        maxHeight : 0,

	        //Editor 설정시 초기 HTML 설정
	        initHTML : '',

	        //Editor 가로크기
	        width : '600px',

	        //Editor 세로크기
	        height : '700px',

	        //Hidden Menu 설정
	        hiddenMenu : [], /* Menu Option Hidden list */

	        //도움말 URL 설정
	        helpURL : '/help.html',

	        //Editor Public Resource URL
	        publicPathURL : './',

	        //Loading Image Resource URL
	        loadingImageURL : '/kukudocs_webeditor_1.5/images/load.gif',

	        //Error Image Resource URL
	        errorImageURL : '/kukudocs_webeditor_1.5/images/error.png',

	        //Video Image Resource URL
	        playImageURL : '/kukudocs_webeditor_1.5/images/play.png',

	        //Emoticon Images Root URL
	        emoticonPathURL : '/kukudocs_webeditor_1.5/images/emoticon/',

	        //Emoticon URL List
	        emoticonList : [], //['emoticonURL1', 'emoticonURL2'] /* emoticon url list */,

	        //HTML Mode 사용유무
	        useHtmlMode : true,

	        //Text Mode 사용유무
	        useTextMode : true,

	        //Preview Mode 사용유무
	        usePreviewMode : true,

	        //Editor Resize 기능 사용유무
	        useEditorResize : true,

	        //MenuBar 사용유무
	        useMenuBar : false,

	        //Footer Menu 사용유무
	        useFooterMenu : true,

	        //File Upload Action URL
	        fileUploadURL : '/fileUpload',

	        //Image Upload Action URL
	        imageUploadURL : '', // '/fileUpload'

	        //Video Upload Action URL
	        videoUploadURL : '', // '/fileUpload'

	        //Editor Load 완료시 호출 Callback Function
	        Editor_Complete : null,

	        //Event 발생시 Callback Function
	        Key_event : null,   // Key_event : { keydown : Key_down_event, keyup : Key_up_event },
	        Mouse_event : null, // Mouse_event: { mousedown : Mouse_Down_event, mouseup : Mouse_Up_event },


	        //Kaoni Cell Lock Attibute 설정
	        cell_lock_name : '',

	        //Toolbar에 Table/Cell Lock 기능 사용 설정
	        useLockMenu : false,

	        //Table / Cell Lock Image URL 설정
	        lockImageURL : '/kukudocs_webeditor_1.5/images/lock.png',

	        //Template 양식 Items
	        // templateList : [],
	        templateList : [
	            { name : '부서양식',
	                items : [
	                    { name : '회의록', type : 'url', value : './template/meeting_log.html' },
	                    { name : '보고서', type : 'url', value : './template/report.html' }
	                ]
	            },
	            { name : '인사', items : [ { name : '휴가신청서', type : 'url', value : './template/vacation.html' } ] }
	        ],

	        //Toolbar Menu 정렬
	        customAlignMenu : [], //customAlignMenu : [ ['headingGroup', 'fontFamilyGroup'], 'fontSizeGroup'],

	        //사용할 Font Size 설정
	        fontSize : [], //fontSize : [ {name: "8pt",  value: "8pt"}, {name: "9pt",  value: "9pt"}],

	        //사용할 Font Family 설정
	        fontFamily : [], //fontFamily : [ {name: "굴림", value: "굴림"}, {name: "돋움", value: "돋움"}],

	        //줄간격 설정 옵션
	        lineHeight : [], //lineHeight : [ {name: "1.0", value: "1"}, {name: "1.5", value: "1.5"}, ....],

	        //기본 Font Size
	        defaultFontSize : '11pt',

	        //기본 Font Family 설정
	        defaultFontFamily : '맑은 고딕',

	        //Image Uoload시 Full URL Path 설정
	        useFullURLPath : false,

	        //Language Resource 위치 URL
	        languagePathURL : '/kukudocs_webeditor_1.5/lang/',

	        //사용할 Language 설정
	        defaultLanguage : 'kr',

	        //되돌리기 / 되살리기 History Stack Limit 설정
	        undoRedoLimit : 1000,

	        //Custom Button Menu 아이템 설정
	        customButtonMenuItem : [],
	        // customButtonMenuItem : [
	        //     { id : "customButton1", name : "customButton1", style : "background:url('./images/drag_table.png'); background-size:20px 18px;", action : function(){ alert('Custom Menu1 !!');} },
	        //     { id : "customButton2", name : "customButton2", style : "background:url('./images/drag_table.png'); background-size:20px 18px;", action : function(){ alert('Custom Menu2 !!');} }
	        // ],

	        //표 위아래 문단 추가 버튼의 스타일 지정
	        customMagicLineStyle : '', //customMagicLineStyle : 'background-color:#0000ff;',

	        //표 생성시 기본 가로 사이즈 지정
	        defaultTableWidth : 0, //defaultTableWidth : 500




	        //New Options
	        tableSelectImageURL : '/kukudocs_webeditor_1.5/images/cross_arrow.png',
	        tableMoveHandlerImageURL : '/kukudocs_webeditor_1.5/images/movehandler.png',
	        tableMoveImageURL : '/kukudocs_webeditor_1.5/images/drag_table.png',
	        defaultEditorStylePath : '/kukudocs_webeditor_1.5/stylesheets/editor_style.css',

	        //Doc Type 지정 옵션
	        defaultDocType : null, //{docType : 'xhtml1.1', publicId : '-//W3C//DTD XHTML 1.1//EN', systemId : 'http://www.w3c.org/TR/xhtml11/DTD/xhtml11.dtd'},

	        //Default Character Set 지정
	        defaultCharset : 'utf-8',

	        //Script 제거
	        useSecurityScript : true,

	        //개발 주석 코드 제거
	        removeDevComments : true,

	        //DOM의 on-Event 제거
	        useSecurityEvent : true,

	        //제거하지 않을 Event의 Type들 지정
	        notRemoveEventTypes : [], // ['onclick','mousedown' .... n];

	        //Tab Size 지정
	        tabSpaceSize : 4,

	        //Chrome Filter Paste Options
	        usePasteFilterForChrome : true,

	        //HTML & Image Confirm Option
	        usePasteConfirmForChrome : true,

	        //First Focus
	        useFirstFocus : true,

	        //Only Table Context Menu
	        useOnlyTableContentMenu : true,



	        //Color Picker 값 수정
	        colorPicker : {
	            defaultColor  :  "000000",
	            noneColor  :     "ffffff",
	            simpleColor :   ["ffffff", "000000", "eeece1", "1f497d", "4f81bd", "c0504d", "9bbb59", "8064a2", "4bacc6", "f79646"],
	            standardColor : ["f2f2f2", "808080", "ddd9c3", "c6d9f1", "dce6f2", "f2dcdb", "ebf1de", "e6e0ec", "dbeee0", "fdeada",
	                             "d9d9d9", "595959", "c4bd97", "8eb4e3", "b9cde5", "e6b9b8", "d7e4bd", "ccc1da", "b7dee8", "fcd5b5",
	                             "bfbfbf", "404040", "948a54", "558ed5", "95b3d7", "d99694", "c3d69b", "b3a2c7", "93cddd", "fac090",
	                             "a6a6a6", "262626", "4a452a", "17375e", "376092", "953735", "77933c", "604a7b", "31859c", "e46c0a",
	                             "808080", "0d0d0d", "1e1c11", "10243f", "254061", "632523", "4f6228", "403152", "215968", "984807"],
	            normalColor   : ["c00000", "ff0000", "ffc000", "ffff00", "92d050", "00b050", "00b0f0", "0000ff", "002060", "7030a0"]
	        },

	        //Chrome 전용 / <p>태그 하위에 <table>존재 하지 못하도록 하는 HTML5 표준설정 옵션
	        useAdjustForChrome : true,

	        //Cell None Border Visualize
	        useNoneBorderVisualize : false,

	        // Paste시 Content의 Font-family 제거 + Beta
	        usePasteRemoveFontFamily : false,

	        // HTML Mode에서 Text만 별도로 Indent 처리 할지 여부 설정
	        useHtmlModeTextIndent : true,

	        // Dialog의 이동범위를 Editor 영역 안으로 지정 여부 [Default : true]
	        useDialogMoveConfineEditor : true,



	        //_Private Option(Border Visualize On/Off Flag) [Default : false]
	        isNoneBorderVisualize : false,

	        //_Private Option(Attribute Value Encoding On/Off Flag) [Default : false]
	        useAttributesEncoding : false,

	        //_Private Option(Html Mode Auto Positioning On/Off Flag) [Default : false]
	        useHtmlModeAutoPosition : false,

	        licenseKey: [],

	        //_Private Option : ExecCommandS 함수에 태그를 대신하여 스타일 형태로 적용시 [Default : true]
	        useExecCommandStyleWithCSS: true,

	        ieExecCommandEHnadling: true,

	        //_Private Option : 초기 모드 [Default : 'editor']
	        useFirstMode : 'editor',

	        useRemoveWhitespaceEmptyTag: false,

	        //다이얼로그 초기값 설정
	        setInitDialogValue: {
	            table: {
	                rowInput: 3,
	                colInput: 3,
	                width:300,
	                height:null
	            },
	            image: {
	                width: null,
	                height: null,
	                className: null,
	                ml:null,
	                mr:null,
	                mt:null,
	                mb:null
	            }
	        },

	        isValidReg : {
	            url: /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i
	        },

	        byteLimitSize : (1024 * 1024 * 5),
	        limitSizeText : "5 MB",

	        info : {
	            companyName : '(주)Kukudocs',
	            licenseName : 'Standard Edition',
	            productKey : 'EXAMPLE_PRODUCT'
	        }

	    };

	    this.ui = null;
	    this.router = null;
	    this.event = null;
	    this.menuController = null;
	    this.toolbar = null;
	    this.clientFilter = null;
	    var _this = this;

	    window.console = window.console || (function(){
	        var c = {}; c.log = c.warn = c.debug = c.info = c.error = c.time = c.dir = c.profile = c.clear = c.exception = c.trace = c.assert = function(){};
	        return c;
	    })();



	    //Editor Check
	    if (typeof element == 'string') {
	        this.rootElement = $('#' + element);
	    } else if (element instanceof Node) {
	        this.rootElement = $(element);
	    }

	    if (!(this.rootElement && this.rootElement.length)) {
	        // Error
	        alert("Not found editor element");
	        return null;
	    }

	    if (this.rootElement[0].nodeName == 'TEXTAREA') {
	        this.rootElement.hide();
	    }



	    this.optionInitialize(options);

	    var language = this.options.defaultLanguage;

	    if (!language) {

	        language = this.getUrlParam('lang');

	        if (!language) {
	            language = navigator.language || navigator.userLanguage;

	            var languageSplits = language.split('-');

	            if (languageSplits.length) {
	                language = languageSplits[0];
	                this.options.defaultLanguage = language;
	            }
	        }
	    }

	    var startEditor = function(isFirstStart, lang) {
	        $.getJSON(_this.options.languagePathURL + lang + '.json')
	            .done(function(data) {
	                window.kukuResource = data;
	                licenseErrorMsg = window.kukuResource.licenseErrorMsg;

	                Define = __webpack_require__(3);

	                __webpack_require__(4);

	                if (_this.invalidBrowserCheck()) {
	                    return;
	                }

	                Util = __webpack_require__(5);
	                UI = __webpack_require__(11);


	                Dom = __webpack_require__(13);
	                Router = __webpack_require__(16);
	                MenuController = __webpack_require__(39);

	                Toolbar = __webpack_require__(71);
	                Menubar = __webpack_require__(72);

	                Filter = __webpack_require__(35);
	                Layout = __webpack_require__(73);

	                _this.init(element, options);

	                // console.log( "second success" );
	            })
	            .fail(function(e) {

	                if (isFirstStart) {
	                    startEditor(false, _this.options.defaultLanguage);
	                } else {
	                    // console.log( "error", JSON.parse(e.responseText));
	                    alert('Resource Loaded Error : Not found Resource');
	                }
	            })
	            .always(function() {
	                // console.log( "complete" );
	            });
	    };

	    startEditor(true, language);
	}

	KuKudocsEditor.prototype.invalidBrowserCheck = function() {
	    var isUnsupport = false;
	    if ($.browser.msie && $.browser.version < 10) {
	        alert(window.kukuResource.invalidBrowserError);
	        isUnsupport = true;
	    }

	    if (!$.browser.chrome) {
	        this.options.useAdjustForChrome = false;
	    }

	    return isUnsupport;
	};

	KuKudocsEditor.prototype.optionInitialize = function(options) {
	    var keys = Object.keys(this.options);

	    if (options) {
	        for (var key in options) {
	            if (keys.indexOf(key) !== -1) {
	                this.options[key] = options[key];
	            }
	        }
	    }

	    if (this.options.publicPathURL) {
	        this.options.loadingImageURL = this.options.publicPathURL + this.options.loadingImageURL;
	        this.options.errorImageURL = this.options.publicPathURL + this.options.errorImageURL;
	        this.options.playImageURL = this.options.publicPathURL + this.options.playImageURL;
	        this.options.emoticonPathURL = this.options.publicPathURL + this.options.emoticonPathURL;

	        this.options.tableSelectImageURL = this.options.publicPathURL + this.options.tableSelectImageURL;
	        this.options.tableMoveHandlerImageURL = this.options.publicPathURL + this.options.tableMoveHandlerImageURL;
	        this.options.tableMoveImageURL = this.options.publicPathURL + this.options.tableMoveImageURL;

	        this.options.lockImageURL = this.options.publicPathURL + this.options.lockImageURL;
	    }

	    if (!this.options.emoticonList || !this.options.emoticonList.length) {
	        this.options.emoticonList = [];

	        var emoticonPath = this.options.emoticonPathURL;
	        var emoticonType = '.png';
	        var emoticonList = ['face', 'food', 'nature', 'animal', 'object'];

	        var faceList = [];
	        var foodList = [];
	        var natureList = [];
	        var animalList = [];
	        var objectlList = [];

	        for (var i = 0; i < 10; i++) {
	            faceList.push(emoticonPath + emoticonList[0] + i + emoticonType);
	            foodList.push(emoticonPath + emoticonList[1] + i + emoticonType);
	            natureList.push(emoticonPath + emoticonList[2] + i + emoticonType);
	            animalList.push(emoticonPath + emoticonList[3] + i + emoticonType);
	            objectlList.push(emoticonPath + emoticonList[4] + i + emoticonType);
	        }

	        this.options.emoticonList = this.options.emoticonList.concat(faceList, foodList, natureList, animalList, objectlList);
	    }
	};

	KuKudocsEditor.prototype.init = function(element, options) {
	    this.createEditor();
	};

	KuKudocsEditor.prototype.createEditor = function() {
	    var _this = this;

	    if (this.options.useLockMenu) {
	        if (!this.options.cell_lock_name) {
	            this.options.hiddenMenu.push('table_lock');
	            this.options.hiddenMenu.push('cell_lock');

	            console.log(window.kukuResource.alertMessage.notSetCellLockNameError);
	        }
	    } else {
	        this.options.hiddenMenu.push('table_lock');
	        this.options.hiddenMenu.push('cell_lock');
	    }

	    if (this.options.useNoneBorderVisualize) {
	        this.options.isNoneBorderVisualize = true;
	    } else {
	        this.options.hiddenMenu.push('border_visualize');
	    }

	    //Layout 생성 function
	    this.editorElement = Layout.createLayout(this.rootElement, this.options);

	    //Toolbar Layout
	    this.toolbarElement = this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR);

	    //Editor Layout
	    this.editorViewElement = this.editorElement.find('.' + Define.CLASS.EDITOR_AREA);

	    //Footer Layout
	    this.footerElement = this.editorElement.find('.' + Define.CLASS.EDITOR_FOOTER);

	    //Editor View Wrapping Nodes
	    this.contentsElements = $(this.editorViewElement[0].childNodes);


	    if (this.options.useAdjustForChrome) {
	        this.$chromePasteIframe = this.editorElement.find('.' + Define.CLASS.CHROME_PASTE_ADJUST);
	        this.$chromePasteIframe[0].srcdoc = '<!DOCTYPE html>';
	    }

	    Define.setDefaultParagraph();

	    if ($.browser.mozilla) {
	        // $(document).on('load', function() {
	            setTimeout(function(){
	                _this.setEditorComponent();
	            }, 1000);
	        // });
	    } else {
	        if (this.options.useAdjustForChrome) {
	            setTimeout(function(){
	                _this.setEditorComponent();
	            },100);
	        } else {
	            this.setEditorComponent();
	        }
	    }
	};

	KuKudocsEditor.prototype.setEditorComponent = function(element, options) {
	    var _this = this;

	    //Iframe Editor Area
	    this.editorIframe = this.editorViewElement.find('.' + Define.CLASS.CONTENT_VIEW);

	    this.editorWindow = this.editorIframe[0].contentWindow;
	    this.editorDocument = this.editorWindow.document;

	    if (($.browser.msie && $.browser.version < 11)) {
	        $(this.editorWindow).on('load', function() {
	            _this.setEditorLoad();
	        });
	    } else {
	        this.setEditorLoad();
	    }
	};

	KuKudocsEditor.prototype.setEditorLoad = function() {
	    var _this = this;

	    var $body = $(document.body);

	    this.editorContentView = $(this.editorDocument.body);
	    this.$dom = new Dom(this.editorContentView, this);

	    this.setEditorInitialize();

	    this.htmlContentView = this.editorElement.find('.' + Define.CLASS.HTML_CONTENTS);
	    this.textContentView = this.editorElement.find('.' + Define.CLASS.TEXT_CONTENTS);
	    this.previewContentView = null;

	    var $previewContents = this.editorElement.find('.' + Define.CLASS.PREVIEW_CONTENTS);

	    if ($previewContents.length) {
	        if ($previewContents[0].contentWindow && $previewContents[0].contentWindow.document) {
	            this.previewContentView = $($previewContents[0].contentWindow.document.body);
	        }
	    }

	    if (this.options.defaultFontSize || this.options.defaultFontFamily) {
	        if (this.options.defaultFontSize) {
	            this.editorContentView.css('font-size', this.options.defaultFontSize);

	            if (this.previewContentView) {
	                this.previewContentView.css('font-size', this.options.defaultFontSize);
	            }
	        }

	        if (this.options.defaultFontFamily) {
	            this.editorContentView.css('font-family', this.options.defaultFontFamily);

	            if (this.previewContentView) {
	                this.previewContentView.css('font-family', this.options.defaultFontFamily);
	            }
	        }
	    }

	    $(window).on('resize', $.proxy(function(e){
	        this.setResize();
	    }, this));

	    this.setParseSize();

	    this.editorElement.css('visibility', '');

	    if (!$('#' + Define.ID.KK_EXPORT).length) {
	        var $exportIframe = $('<iframe style="display: none;" id="' + Define.ID.KK_EXPORT + '">');
	        $body.append($exportIframe);
	    }

	    this.appendMaking();

	    setTimeout(function(){
	        if (!$.browser.mozilla) {
	            Util.makePageBreakImage(_this.editorDocument);
	        }
	    }, 500);

	    this.operationSetting();
	};

	KuKudocsEditor.prototype.appendMaking = function() {

	    if (window.isMaking) {
	        return;
	    }

	    var license = "Generated by Kukudocs (" + Define.EDITOR_INFO.VERSION +  ")";
	    var homepage = Define.EDITOR_INFO.HOMEPAGE;

	    var making = "" +
	        "<!--          ,,:::::,,, \n" +
	        "         ,:ssSHS2H552H2522ssi, \n" +
	        "      :isssssssssssrsrsrssss22s, \n" +
	        "    :rrrir;rrsssssrsrsrsrrrrrssX, \n" +
	        "  ,ii:i:iirrrrsssrsrsrsrsrrrrrsS: \n" +
	        "  :;:::::iirrrrsrsssrsrsrsrss22r \n" +
	        "  ,i::::iiiirrsssrsrsrsss222si \n" +
	        "   ::::i:ii;irrssssss225sr, \n" +
	        "   ,i,:::iiirrrsss552r: \n" +
	        "   ,i::::iiiirss2s:                " + license + " \n" +
	        "    i:::::iir:,                    " + homepage + " \n" +
	        "    ,i:::i:,  iSH2ri,, \n" +
	        "    ,i::,  :SB@MMMMMBMM9X2r: \n" +
	        "     i:  rB@BM99X9SXSXSX999G92 \n" +
	        "     , i@B@GG999XXX5H5S25222HGG \n" +
	        "      X@BMGG9G99XXSXHS2522225G5 \n" +
	        "      @BBGGGG9G99XXSSHS5HH9GGr \n" +
	        "      r@B@B@MMGGGG999GGMMMSr \n" +
	        "        :sGB@B@B@@@BM9Sr: \n -->";

	    var $making = $(making);

	    //$(document).find('html').before($making);

	    window.isMaking = true;
	};

	KuKudocsEditor.prototype.operationSetting = function() {

	    //TODO:Remove Module 예정.
	    var _this = this;
	    this.clientFilter = new Filter(this.$dom, this.options, this.editorElement, this.editorContentView, this.editorDocument);

	    this.ui = new UI(this.editorElement, this.options);

	    this.toolbar = new Toolbar(this.editorElement, this.editorContentView, this.options);

	    //Widget Setting

	    var initHTML = '';

	    if (this.rootElement[0].nodeName === 'TEXTAREA') {
	        initHTML = this.rootElement.val();
	    }

	    initHTML = initHTML || this.options.initHTML || Define.DEFAULT_PARAGRAPH_HTML;

	    var context = this;

	    setTimeout(function(){
	        try {
	            //TODO : Filter 적용 예정.

	            var setEditorOperation = function(initHTML){
	                context.editorContentView[0].innerHTML = initHTML || Define.DEFAULT_PARAGRAPH_HTML ;

	                setTimeout(function(){
	                    if (context.options.useNoneBorderVisualize && context.options.isNoneBorderVisualize) {
	                        Util.setNoneBorderVisualize(context.editorContentView.find(Define.CELL_TYPE.join(',')));
	                    } else {
	                        Util.removeAllNoneBorderVisualize(context.editorContentView.find(Define.CELL_TYPE.join(',')));
	                    }

	                    if (context.options.useFirstFocus) {
	                        context.$dom.selection.setContentEditable(true);
	                        context.editorContentView.focus();

	                    } else {
	                        context.$dom.selection.setContentEditable(true);

	                        if (!($.browser.msie && $.browser.version < 11)) {
	                            context.editorContentView.blur();
	                        }
	                    }

	                    if ($.browser.mobile && ($.browser.platform == 'iphone' || $.browser.platform == 'ipad')) {
	                        var $html = $(context.editorDocument.documentElement);

	                        var htmlStyle = $html.attr('style') || '';

	                        $html.attr('style', (htmlStyle ? htmlStyle + ';' : '') + 'overflow : hidden !important');
	                    }

	                    // context.$dom.selection.selectAll();
	                    // context.$dom.selection.getSelectedParagraph(null, true);

	                    var range = context.$dom.selection.setFirstCollapse(context.options.useFirstFocus);
	                    context.router.doStatusHighlight(range.startContainer, !context.options.useFirstFocus);

	                    context.router.setClearAllHistories();

	                    if (context.options.Editor_Complete) {
	                        if (context.options.useAdjustForChrome) {
	                            setTimeout(function(){
	                                context.options.Editor_Complete();
	                            }, 200);
	                        } else {
	                            context.options.Editor_Complete();
	                        }
	                    }
	                }, 10);
	            };

	            initHTML = context.router.getHtmlFilterString(initHTML);

	            if (context.options.useAdjustForChrome) {
	                setTimeout(function(){
	                    var chromeDocument = context.getChromeIframeDocument();
	                    var chromeBody = chromeDocument.body;

	                    chromeBody.innerHTML = initHTML;

	                    // var opNodes = chromeDocument.getElementsByTagName('o:p');
	                    //
	                    // if (opNodes.length) {
	                    //     var $opNodes = $(opNodes);
	                    //     $opNodes.replaceWith(function(){
	                    //         return '<span>' + this.innerHTML + '</span>';
	                    //     });
	                    // }

	                    initHTML = chromeBody.innerHTML;

	                    setEditorOperation(initHTML);
	                }, 100);
	            } else {
	                setEditorOperation(initHTML);
	            }

	        } catch(e) {
	            if (context.options.Editor_Complete) {
	                if (context.options.useAdjustForChrome) {
	                    setTimeout(function(){
	                        context.options.Editor_Complete();
	                    }, 200);
	                } else {
	                    context.options.Editor_Complete();
	                }
	            }
	            // console.log(e);
	        }
	    }, 50);

	    context.router = new Router(context.editorElement, context.editorContentView, context.$dom, context.options, context);

	    context.menuController = new MenuController(context.editorElement, context.editorContentView, context.$dom, context.router, context);

	    context.toolbar.init(context.menuController, context.$dom);

	    if (context.options.useMenuBar){
	        context.menuBar = new Menubar(this.editorElement);

	        context.menuBar.init(context.menuController, this.options);
	    }

	    context.setResize();

	    $.getJSON(_this.options.licPathURL)
	        .done(function(data) {
	            window.KukudocsLicense = data;
	            _this.expired();
	        })
	        .fail(function(e) {
	            if(e.statusText === 'Not Found') {
	                _this.expired("라이센스 파일이 없습니다.");
	            }
	            else {
	                _this.expired("라이센스 파일 오류");
	            }

	        })
	        .always(function() {
	            // console.log( "complete" );
	        });

	};

	KuKudocsEditor.prototype.getDomainLc = function(LInfo) {
	    var results = false;
	    var sObj = new Sha(LInfo[3], "TEXT");
	    var tempDomin = LInfo[0].replace(/(http(s)?:\/\/)/g, "");
	    tempDomin = tempDomin.replace("/", "");

	    sObj.update(tempDomin);
	    sObj.update(Date.parse(LInfo[1].toString()));
	    sObj.update(LInfo[4]);

	    if(LInfo[2] === sObj.getHash("HEX")) {
	        results = LInfo;
	    } else {
	        results = false;
	    }

	    return results;

	};

	KuKudocsEditor.prototype.expired = function(err) {

	    var dlc;
	    var inValidLicense = false;
	    var today = Date.parse(new Date());
	    var _this = this;
	    var ka, kao, kaArr;

	    var kukudocsLicense = window.KukudocsLicense;

	    if(!err && typeof kukudocsLicense.serial === 'object' && kukudocsLicense.serial.length > 0) {
	        var isLic = kukudocsLicense.serial.some(function(key) {

	            try {
	                kaArr = window.atob(key).split('+');
	                ka = kaArr[0].split('@@');
	                return (ka[0] != '' && ka.length === 5 && ( location.hostname.indexOf(ka[0]) > -1 || ka[0].indexOf("kukudocs.com") == 0 ));
	            }
	            catch (e) {
	                isLic = false;
	            }

	        });

	        if(isLic) {
	            dlc = _this.getDomainLc(ka);
	            kao = kaArr[1];
	        }

	        if(kao) {
	            this.router.licOptions = JSON.parse(kao);
	        }

	        if(dlc) {
	            if(Date.parse(dlc[1]) < today - 86400000) {
	                inValidLicense = true;
	                licenseErrorMsg = "라이센스 기간이 완료되었습니다.";
	            }
	        }
	        else {
	            inValidLicense = true;
	            licenseErrorMsg = "유효한 라이센스가 아닙니다.";
	        }

	    }
	    else {
	        inValidLicense = true;
	        licenseErrorMsg = err? err : "라이센스를 입력해 주세요.";
	    }



	    if (inValidLicense) {
	        // alert(window.kukuResource.licenseErrorMsg);
	        console.log(licenseErrorMsg);

	        var style = {
	            'text-align': 'center',
	            'position': 'absolute',
	            'padding' : '10px',
	            'bottom': '50px',
	            'right': '50px',
	            'z-index': '10000000',
	            'font-size': '15px',
	            'background': '#ff0000',
	            'color': '#ffffff',
	            'font-weight': 'bold'
	        };

	        var $alertMessage = $('<div/>');

	        $alertMessage.css(style);
	        $alertMessage.html(licenseErrorMsg.replace('\n', '<br>'));

	        var count = 6;
	        var $timerMessage = $('<span></span>');

	        $alertMessage.append($timerMessage);

	        $(document.body).append($alertMessage);

	        var intervalFn = setInterval(function(){
	            if (count == 0) {
	                $alertMessage.remove();
	                clearInterval(intervalFn);
	            }

	            count--;

	            $timerMessage.html('(' + count +')');
	        }, 1000);
	    }
	};



	KuKudocsEditor.prototype.setParseSize = function() {
	    this.intHeight = 0;
	    this.intWidth = 0;

	    if (typeof this.options.height == 'number') {
	        this.intHeight = this.options.height;
	    } else {
	        if (this.options.height.indexOf('%') < 0) {
	            this.intHeight = parseInt(this.options.height);
	        }
	    }

	    if (typeof this.options.width == 'number') {
	        this.intWidth = this.options.width;
	    } else {
	        if (this.options.width.indexOf('%') < 0) {
	            this.intWidth = parseInt(this.options.width);
	        }
	    }
	};

	KuKudocsEditor.prototype.setResize = function(currentWidth, currentHeight) {
	    var bufferPadding = 6;

	    var $parentNode = this.editorElement.parent();
	    var footerHeightSize = this.footerElement.height();

	    var bufferBorderSize = 2;

	    if (footerHeightSize === 0) {
	        bufferPadding = 1;
	    }

	    if (this.editorElement.hasClass(Define.CLASS.FULL_SCREEN)) {
	        this.editorElement.width(window.innerWidth - bufferBorderSize);
	        this.editorElement.height(window.innerHeight - bufferBorderSize);
	    } else {

	        var width = 0;
	        var height = 0;

	        if (currentWidth) {
	            this.editorElement.width(currentWidth);
	        } else {
	            if (this.options.width === '100%') {
	                var scrollWidth = $parentNode[0].scrollWidth;
	                var clientWidth = $parentNode[0].clientWidth;

	                if (scrollWidth === clientWidth) {
	                    width = scrollWidth;
	                } else {
	                    $parentNode.css('overflow', 'hidden');
	                    width = $parentNode[0].clientWidth;
	                    $parentNode.css('overflow', '');
	                }

	                this.editorElement.width(width - bufferBorderSize);
	            } else {
	                if (this.intWidth > 0) {
	                    width = this.intWidth;

	                    this.editorElement.width(width - bufferBorderSize);
	                } else {
	                    this.editorElement.width(this.options.width);
	                }
	            }
	        }

	        if (currentHeight) {
	            this.editorElement.height(currentHeight);
	        } else {
	            if (this.options.height === '100%') {
	                var scrollHeight = $parentNode[0].scrollHeight;
	                var clientHeight = $parentNode[0].clientHeight;

	                if (scrollHeight === clientHeight) {
	                    height = scrollHeight;
	                } else {
	                    $parentNode.css('overflow', 'hidden');
	                    height = $parentNode[0].clientHeight;
	                    $parentNode.css('overflow', '');
	                }

	                this.editorElement.height(height - bufferBorderSize);
	            } else {
	                if (this.intHeight > 0) {
	                    height = this.intHeight;

	                    this.editorElement.height(height - bufferBorderSize);
	                } else {
	                    this.editorElement.height(this.options.height);
	                }
	            }
	        }
	    }

	    var editorHeight = this.editorElement.height() - (this.toolbarElement.height() + footerHeightSize) - bufferPadding;

	    this.editorViewElement.height(editorHeight);

	    Layout.resizeToolbarMenu();
	    // this.toolbar.settingToolbar();
	};

	KuKudocsEditor.prototype.setEditorInitialize = function() {
	    var eWindow = this.editorWindow;
	    var eDocument = this.editorDocument;

	    if (this.options.defaultDocType) {
	        var newDoctype = eDocument.implementation.createDocumentType(
	            this.options.defaultDocType.docType,
	            this.options.defaultDocType.publicId,
	            this.options.defaultDocType.systemId
	        );

	        eDocument.insertBefore(newDoctype, eDocument.childNodes[0]);
	    }

	    var $head = $(eDocument).find('head');

	    if (this.options.defaultCharset) {
	        var $metaNode = this.$dom.selection.createElement('meta');
	        $metaNode.attr({
	            'http-equiv' : 'Content-Type',
	            'content' : 'text/html',
	            'charset' : this.options.defaultCharset
	        });

	        $head.append($metaNode);
	    }

	    if (this.options.defaultEditorStylePath) {
	        var $linkNode = this.$dom.selection.createElement('link');
	        $linkNode.attr({
	            'id' : Define.ID.EDITOR_STYLE,
	            'type' : 'text/css',
	            'rel' : 'stylesheet',
	            'href' : this.options.defaultEditorStylePath
	        });

	        $head.append($linkNode);
	    }

	    if (this.options.useLockMenu && this.options.cell_lock_name && this.options.lockImageURL) {

	        var $styleNode = this.$dom.selection.createElement('style');

	        $styleNode.attr({
	            type : 'text/css'
	        });

	        var lockStyleHTML = '' +
	            'table[' + this.options.cell_lock_name + '] {' +
	                'position : relative;' +
	                'z-index : -1;' +
	            '}' +

	            'table[' + this.options.cell_lock_name + ']::after {' +
	                'background : url(' + this.options.lockImageURL + ') no-repeat 0 0;' +
	                'background-size : 10px 10px;' +
	                'position : absolute;' +
	                'content : "";' +
	                'width:10px;' +
	                'height:10px;' +
	                'top : -10px;' +
	                'right : -10px;' +
	            '}' +


	            'td[' + this.options.cell_lock_name + '],' +
	            'th[' + this.options.cell_lock_name + '] {' +
	                'position : relative;' +
	                'z-index : -1;' +
	            '}' +

	            'td[' + this.options.cell_lock_name + ']::after,' +
	            'th[' + this.options.cell_lock_name + ']::after {' +
	                'background : url(' + this.options.lockImageURL + ') no-repeat 0 0;' +
	                'background-size : 10px 10px;' +
	                'position : absolute;' +
	                'content : "";' +
	                'width:10px;' +
	                'height:10px;' +
	                'top : 0px;' +
	                'right : 0px;' +
	            '}';

	        $styleNode.html(lockStyleHTML);

	        $head.append($styleNode);
	    }

	    if ($.browser.mozilla) {
	        eDocument.designMode = "off";
	        eDocument.execCommand("enableObjectResizing", false, "false");
	        eDocument.execCommand("enableInlineTableEditing", false, "false");
	    }

	    this.editorContentView.attr('spellcheck', false);

	    if (!$.browser.msie || ($.browser.msie && $.browser.version > 10)) {
	        if(this.options.useExecCommandStyleWithCSS) {
	            eDocument.execCommand('styleWithCSS', false, true);
	        }
	        eDocument.execCommand('defaultParagraphSeparator', false, 'p');
	    }
	};

	/* URL Parameter 정보 가져오기 */
	KuKudocsEditor.prototype.getUrlParam = function(name){
	    var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
	    if (results==null){
	        return null;
	    }
	    else{
	        return decodeURI(results[1]) || 0;
	    }
	};

	/* Private API (For Chrome Paste Iframe) */
	KuKudocsEditor.prototype.getChromeIframeDocument = function(){
	    if (this.options.useAdjustForChrome && this.$chromePasteIframe) {
	        return this.$chromePasteIframe[0].contentWindow.document;
	    }
	};






















	/* Core API */

	KuKudocsEditor.prototype._getElementObject = function(element) {
	    var $element = null;

	    if (element instanceof Node){
	        $element = $(element);
	    } else if (typeof element === 'string'){
	        $element = this.editorContentView.find('#' + element);
	    }

	    return $element;
	};

	KuKudocsEditor.prototype._getDomObject = function() {
	    return this.$dom;
	};

	KuKudocsEditor.prototype.getRootElement = function() {
	    return this.editorElement;
	};

	KuKudocsEditor.prototype.getToolbarElement = function() {
	    return this.toolbarElement;
	};

	KuKudocsEditor.prototype.getEditorElement = function() {
	    return this.editorViewElement;
	};

	KuKudocsEditor.prototype.getFooterElement = function() {
	    return this.footerElement;
	};

	KuKudocsEditor.prototype.getContentViewElement = function() {
	    return this.editorContentView;
	};

	KuKudocsEditor.prototype.getEditorWidth = function() {
	    return this.editorElement[0].offsetWidth;
	};

	KuKudocsEditor.prototype.getEditorHeight = function() {
	    return this.editorElement[0].offsetHeight;
	};

	KuKudocsEditor.prototype.getEditorContentWidth = function() {
	    return this.editorContentView[0].offsetWidth;
	};

	KuKudocsEditor.prototype.getEditorContentHeight = function() {
	    return this.editorContentView[0].offsetHeight;
	};












	/* Option API */
	KuKudocsEditor.prototype.getOptions = function() {
	    return this.options;
	};

	KuKudocsEditor.prototype.getHelpURL = function() {
	    return this.options.helpURL;
	};

	KuKudocsEditor.prototype.setHelpURL = function(helpURL) {
	    this.options.helpURL = helpURL;
	};

	KuKudocsEditor.prototype.getPublicPathURL = function() {
	    return this.options.publicPathURL;
	};

	KuKudocsEditor.prototype.setPublicPathURL = function(publicPathURL) {
	    this.options.publicPathURL = publicPathURL;
	};

	KuKudocsEditor.prototype.getLoadingImageURL = function() {
	    return this.options.loadingImageURL;
	};

	KuKudocsEditor.prototype.setLoadingImageURL = function(loadingImageURL) {
	    this.options.loadingImageURL = loadingImageURL;
	};

	KuKudocsEditor.prototype.getErrorImageURL = function() {
	    return this.options.errorImageURL;
	};

	KuKudocsEditor.prototype.setErrorImageURL = function(errorImageURL) {
	    this.options.errorImageURL = errorImageURL;
	};

	KuKudocsEditor.prototype.getPlayImageURL = function() {
	    return this.options.playImageURL;
	};

	KuKudocsEditor.prototype.setPlayImageURL = function(playImageURL) {
	    this.options.playImageURL = playImageURL;
	};

	KuKudocsEditor.prototype.getFileUploadURL = function() {
	    return this.options.fileUploadURL;
	};

	KuKudocsEditor.prototype.setFileUploadURL = function(fileUploadURL) {
	    this.options.fileUploadURL = fileUploadURL;
	};

	KuKudocsEditor.prototype.getImageUploadURL = function() {
	    return this.options.imageUploadURL;
	};

	KuKudocsEditor.prototype.setImageUploadURL = function(imageUploadURL) {
	    this.options.imageUploadURL = imageUploadURL;
	};

	KuKudocsEditor.prototype.getVideoUploadURL = function() {
	    return this.options.videoUploadURL;
	};

	KuKudocsEditor.prototype.setVideoUploadURL = function(videoUploadURL) {
	    this.options.videoUploadURL = videoUploadURL;
	};

	KuKudocsEditor.prototype.getEmoticonList = function() {
	    return this.options.emoticonList;
	};

	KuKudocsEditor.prototype.setEmoticonList = function(emoticonList) {
	    this.options.emoticonList = emoticonList;
	};

	KuKudocsEditor.prototype.setTemplateList = function(templateList) {
	    this.options.templateList = templateList;
	};

	KuKudocsEditor.prototype.getTemplateList = function() {
	    return this.options.templateList;
	};

	KuKudocsEditor.prototype.getEditorComplete = function() {
	    return this.options.Editor_Complete;
	};

	KuKudocsEditor.prototype.setEditorComplete = function(Editor_Complete) {
	    this.options.Editor_Complete = Editor_Complete;
	};

	KuKudocsEditor.prototype.getKeyEvent = function() {
	    return this.options.Key_event;
	};

	KuKudocsEditor.prototype.setKeyEvent = function(Key_event) {
	    this.options.Key_event = Key_event;
	};

	KuKudocsEditor.prototype.getMouseEvent = function() {
	    return this.options.Mouse_event;
	};

	KuKudocsEditor.prototype.setMouseEvent = function(Mouse_event) {
	    this.options.Mouse_event = Mouse_event;
	};

	KuKudocsEditor.prototype.getCellLockName = function() {
	    return this.options.cell_lock_name;
	};

	KuKudocsEditor.prototype.setCellLockName = function(cell_lock_name) {
	    this.options.cell_lock_name = cell_lock_name;
	};

	KuKudocsEditor.prototype.getUseFooterMenu = function() {
	    return this.options.useFooterMenu;
	};

	KuKudocsEditor.prototype.setUseFooterMenu = function(useFooterMenu) {
	    this.options.useFooterMenu = useFooterMenu;

	    var methodName = this.options.useFooterMenu ? 'removeClass' : 'addClass';

	    this.footerElement[methodName](Define.CLASS.EDITOR_FOOTER_DISABLED);

	    this.setResize();
	};

	KuKudocsEditor.prototype.getElementText = function(element) {
	    var hrReplaceText = '\n----------------------------------------------------------------------\n';

	    var $element = $(element);

	    var textValue = '';

	    if ($element.length) {
	        $element.find('style').remove();
	        $element.find('hr').replaceWith(function(){
	            var contents = this.innerHTML;

	            return '<div>' + hrReplaceText + '</div>' + (contents ? '<div>' + contents + '</div>' : '');
	        });

	        var htmlString = $element.html();

	        for (var i = 0; i < Define.PARAGRAPH_NODES.length; i++) {

	            var regexExpression = '</' + Define.PARAGRAPH_NODES[i] + '>';
	            var regexp = new RegExp(regexExpression, 'ig');

	            htmlString = htmlString.replace(regexp, regexExpression + '\n');
	        }

	        textValue = $('<div/>').html(htmlString).text();
	    }

	    return textValue;

	};

	KuKudocsEditor.prototype.setAnotherContents = function() {

	    if (this.options.useHtmlMode || this.options.usePreviewMode || this.options.useTextMode) {
	        var commonHTML = '';

	        var activeFooterMenu = this.getFooterMode();

	        if (activeFooterMenu) {
	            var $clipboardDivWrap = $('<div/>');

	            if (activeFooterMenu == 'html' || activeFooterMenu == 'preview') {
	                var $clone = this.editorContentView.clone();

	                if (this.options.useHtmlMode || this.options.usePreviewMode) {
	                    var videoTypeNode = $clone.find('img[' + Define.ATTR.DATA_VIDEO_SOURCE + ']');

	                    if (videoTypeNode.length) {
	                        videoTypeNode.replaceWith(function(){
	                            var style = $(this).attr(Define.ATTR.STYLE);
	                            var decodingHTML = decodeURIComponent($(this).attr(Define.ATTR.DATA_VIDEO_SOURCE));
	                            var $decodingHTML = $(decodingHTML);

	                            $decodingHTML.attr(Define.ATTR.STYLE, style);
	                            $decodingHTML.find('object, embed').attr(Define.ATTR.STYLE, style);

	                            if ($decodingHTML.is('embed')) {
	                                $decodingHTML.attr(Define.ATTR.SRC, $decodingHTML[0].src);
	                            } else {
	                                $decodingHTML.find('source, embed').attr(Define.ATTR.SRC, function(){
	                                    return this.src;
	                                });

	                                $decodingHTML.find('object').attr(Define.ATTR.DATA, function(){
	                                    return this.data;
	                                });
	                            }

	                            return $decodingHTML[0].outerHTML;
	                        });
	                    }

	                    Util.removeAllNoneBorderVisualize($clone.find(Define.CELL_TYPE.join(',')));

	                    if(this.clientFilter.doAdjustCopyDatas) {
	                        commonHTML = this.clientFilter.doAdjustCopyDatas($clone[0].childNodes);
	                    }
	                    else {
	                        commonHTML = $('.kk_editorView .kk_contentView').contents().find("body").html();
	                    }



	                    if (activeFooterMenu == 'html') {
	                        if (this.options.useHtmlMode) {
	                            $clipboardDivWrap.html(commonHTML);

	                            var prettyHtml = Util.prettyHtml($clipboardDivWrap[0], this.options.useHtmlModeTextIndent);

	                            if (prettyHtml){
	                                this.htmlContentView.val(prettyHtml.trim());
	                            }else{
	                                this.htmlContentView.val($clipboardDivWrap.html());
	                            }
	                        }
	                    }

	                    if (activeFooterMenu == 'preview') {
	                        $('.kk_editor_toolbar').addClass('kk_disabled');
	                        if (this.options.usePreviewMode) {
	                            if (this.previewContentView) {
	                                this.previewContentView.html(commonHTML);
	                            }
	                        }
	                    }
	                }
	            } else if (activeFooterMenu == 'text') {
	                if (this.options.useTextMode) {
	                    var $clone = this.editorContentView.clone();

	                    commonHTML = this.clientFilter.doAdjustCopyDatas($clone[0].childNodes);

	                    $clipboardDivWrap.html(commonHTML);

	                    var textValue = '';
	                    var $paragraphs = $clipboardDivWrap.find(Define.PARAGRAPH_NODES.join(','));

	                    if ($paragraphs.length) {
	                        $paragraphs.each(function(){
	                            textValue += this.textContent + '\n';
	                        });
	                    } else if ($clipboardDivWrap.text()){
	                        textValue = $clipboardDivWrap.text();
	                    }

	                    this.textContentView.val(textValue);
	                }
	            }

	            $clipboardDivWrap.remove();
	        }
	    }
	};

	KuKudocsEditor.prototype.getFooterMode = function() {
	    var activeEditorMode = this.footerElement.find("." + Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);

	    var mode = '';

	    //Html Mode
	    if (activeEditorMode.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_HTML)){
	        mode = 'html';
	    } else if (activeEditorMode.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_TEXT)){
	        mode = 'text';
	    } else if (activeEditorMode.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW)){
	        mode = 'preview';
	    } else if (activeEditorMode.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_EDITOR)){
	        mode = 'editor';
	    }

	    return mode;
	};











	/* Kaoni API */

	/**
	 *  현재 커서위치의 Element 가져오기
	 *
	 *  @param { String } tagName
	 *
	 *  @return { Null || Element || Array } currentElement
	 *
	 *  */
	KuKudocsEditor.prototype.GetCurrentElement = function(tagName){

	    var parentList = tagName? [tagName] : Define.CELL_TYPE;

	    this.$dom.selection.restoreRange();

	    var range = this.$dom.selection.getRange();

	    var startContainer = range.startContainer;

	    var $currentElement = $(startContainer).closest(parentList.join(','));

	    if ($currentElement.length === 0) {
	        $currentElement = null;

	    } else if ($currentElement.length) {
	        $currentElement = $currentElement[0];
	    }

	    return $currentElement;
	};

	/* 지정한 ID의 Element가져오기 */
	KuKudocsEditor.prototype.GetElement = function(ElementID){
	    var foundElement = this.editorContentView.find('#' + ElementID);

	    if (foundElement.length) {
	        return foundElement[0];
	    }

	    return null;
	};

	/* 에디터 사이즈 조정 */
	KuKudocsEditor.prototype.SetEditorSize = function(width, height){
	    this.options.width = width;
	    this.options.height = height;

	    this.setParseSize();
	    this.setResize();
	};

	/* 에디터 사이즈 조정(Width만 조정) */
	KuKudocsEditor.prototype.SetEditorWidth = function(width){
	    this.options.width = width;

	    this.setParseSize();
	    this.setResize();
	};

	/* 에디터 사이즈 조정(Height만 조정) */
	KuKudocsEditor.prototype.SetEditorHeight = function(height){
	    this.options.height = height;

	    this.setParseSize();
	    this.setResize();
	};

	/* 에디터 사이즈 가져오기 */
	KuKudocsEditor.prototype.GetEditorSize = function(){
	    return {
	        width : this.getEditorWidth(),
	        height : this.getEditorHeight()
	    };
	};

	/* 에디터 모드 지정 */
	KuKudocsEditor.prototype.SetEditMode = function(modeType){

	    var selectedFooterMenuClass = null;

	    switch(modeType) {
	        case Define.EDITOR_MODE :
	            selectedFooterMenuClass = Define.CLASS.EDITOR_FOOTER_MENU_EDITOR;

	            break;

	        case Define.HTML_MODE :
	            selectedFooterMenuClass = Define.CLASS.EDITOR_FOOTER_MENU_HTML;

	            break;

	        case Define.TEXT_MODE :
	            selectedFooterMenuClass = Define.CLASS.EDITOR_FOOTER_MENU_TEXT;

	            break;

	        case Define.PREVIEW_MODE :
	            selectedFooterMenuClass = Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW;

	            break;
	    }

	    if (selectedFooterMenuClass) {
	        var $selectedFooterMenu = this.footerElement.find('.' + selectedFooterMenuClass);

	        this.menuController.event.changeModeMenu($selectedFooterMenu, true);
	    }
	};

	KuKudocsEditor.prototype.GetEditMode = function(modeType){
	    var $selectedFooterMenu = this.footerElement.find('.kk_footer_menu_active');
	    return $selectedFooterMenu[0].text.toLowerCase();
	};

	/* Body 컨텐츠의 HTML 가져오기 */
	KuKudocsEditor.prototype.GetEditorContent = function(isWrapping, isBackground){

	    var activeEditorMode = this.footerElement.find("." + Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);

	    //Html Mode
	    if (activeEditorMode.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_HTML)){
	        var htmlContents = this.htmlContentView.val();
	        htmlContents = this.router.getHtmlFilterString(htmlContents);

	        if (isWrapping) {
	            var fontSizeStyle = "";
	            var fontFamilyStyle = "";

	            if (this.options.defaultFontSize) {
	                fontSizeStyle = 'font-size:'+ this.options.defaultFontSize + ';';
	            }

	            if (this.options.defaultFontFamily) {
	                fontFamilyStyle = 'font-family: \'' + this.options.defaultFontFamily + '\';';
	            }

	            htmlContents = '<div style="' + fontSizeStyle + fontFamilyStyle + '">' + htmlContents + '</div>';
	        }

	        return htmlContents;

	    } else {

	        Util.setInputChecked(this.editorContentView);

	        var $contentCloneNode = this.editorContentView.clone();

	        Util.paragraphReRenderHTMLForIE($contentCloneNode[0]);

	        $contentCloneNode.find('[' + Define.ATTR.KK_SELECTED_TD + ']').removeAttr(Define.ATTR.KK_SELECTED_TD);

	        Util.videoImageToObjectNode($contentCloneNode);

	        var fontSizeStyle = "";
	        var fontFamilyStyle = "";

	        if (this.options.defaultFontSize) {
	            fontSizeStyle = 'font-size:'+ this.options.defaultFontSize + ';';
	        }

	        if (this.options.defaultFontFamily) {
	            fontFamilyStyle = 'font-family: \'' + this.options.defaultFontFamily + '\';';
	        }

	        $contentCloneNode.attr('style', fontSizeStyle + fontFamilyStyle);

	        if (!isBackground) {
	            $contentCloneNode.css({
	                'background-image' : '',
	                'background-attachment' : '',
	                'background-repeat' : '',
	                'background-position' : '',
	                'background-color' : ''
	            });
	        }

	        $contentCloneNode.removeAttr(Define.ATTR.CONTENT_EDIT_ABLE).removeAttr('spellcheck');
	        $contentCloneNode = $contentCloneNode.changeTagName('div');

	        Util.removeAllNoneBorderVisualize($contentCloneNode.find(Define.CELL_TYPE.join(',')));

	        return isWrapping ? $contentCloneNode[0].outerHTML : $contentCloneNode[0].innerHTML;
	    }
	};

	/* Body 컨텐츠의 TEXT 가져오기 */
	KuKudocsEditor.prototype.GetEditorTextContent = function(){

	    var activeEditorMode = this.footerElement.find("." + Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);
	    var $element = null;

	    //Html Mode
	    if (activeEditorMode.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_HTML)){
	        $element = $('<div>' + this.htmlContentView.val() + '</div>');
	    } else {
	        $element = this.editorContentView.clone();
	    }

	    return this.getElementText($element);
	};

	/**
	 *  에디터 내의 내용을 HTML파일 형태로 가져오기
	 *
	 *  @return { String } htmlString
	 *  */
	KuKudocsEditor.prototype.GetContentHTMLFile = function(){
	    return this._GetContentHTMLFile(true);
	};
	KuKudocsEditor.prototype._GetContentHTMLFile = function(){


	    /* DocType 설정 */

	    var doctype = Util.getHtmlDocType(this.editorDocument);

	    var doctypeString = '';

	    if (doctype) {
	        doctypeString = "<!DOCTYPE "
	            + doctype.name
	            + (doctype.publicId ? ' PUBLIC "' + doctype.publicId + '"' : '')
	            + (!doctype.publicId && doctype.systemId ? ' SYSTEM' : '')
	            + (doctype.systemId ? ' "' + doctype.systemId + '"' : '')
	            + '>\n';
	    }



	    /* Language 설정 */
	    var language = Util.getHtmlLanguageType(this.editorDocument);

	    var htmlString = '<html' + (language ? ' lang="' + language + '" xml:lang="' + language + '"' : '') + '>\n';



	    /* ======================= Head Start ======================= */

	    var headString = '<head>\n';

	    /* Title 설정 */
	    var titleString = Util.getHtmlTitle(this.editorDocument);

	    if (titleString) {
	        headString += '<title>' + titleString + '</title>\n';
	    }

	    /* Encoding 설정 */
	    var encodingInfo = Util.getHtmlEncoding(this.editorDocument);

	    if (encodingInfo.metaTypeHTML4.length || encodingInfo.metaTypeHTML5.length) {

	        if (encodingInfo.metaTypeHTML4[0] == encodingInfo.metaTypeHTML5[0]) {
	            headString += encodingInfo.metaTypeHTML4[0].outerHTML + '\n';
	        } else {
	            if (encodingInfo.metaTypeHTML4.length) {
	                headString += encodingInfo.metaTypeHTML4[0].outerHTML + '\n';
	            }

	            if (encodingInfo.metaTypeHTML5.length) {
	                headString += encodingInfo.metaTypeHTML5[0].outerHTML + '\n';
	            }
	        }
	    }


	    /* Style 설정 */
	    var styleString = '';
	    $.each(this.editorDocument.styleSheets, function(sheetIndex, sheet) {
	        if (sheet.id != Define.ID.EDITOR_STYLE) {
	            $.each(sheet.cssRules || sheet.rules, function(ruleIndex, rule) {
	                styleString += rule.cssText;
	            });
	        }
	    });

	    if (styleString) {
	        styleString = '<style>' + styleString + '</style>\n';
	    }

	    headString += styleString;

	    headString += '</head>\n';


	    /* ======================= Head End ======================= */



	    /* ======================= Body Start ======================= */
	    var $editorCloneNode = this.editorContentView.clone();

	    Util.paragraphReRenderHTMLForIE($editorCloneNode[0]);

	    $editorCloneNode.removeAttr(Define.ATTR.CONTENT_EDIT_ABLE);

	    Util.videoImageToObjectNode($editorCloneNode);

	    Util.removeAllNoneBorderVisualize($editorCloneNode.find(Define.CELL_TYPE.join(',')));

	    var bodyString = $editorCloneNode[0].outerHTML;

	    if(this.options.removeDevComments){
	        bodyString = this.router.removeDevComments(bodyString);
	    }

	    /* ======================= Body End ======================= */


	    var exportHTML = doctypeString + htmlString + headString + bodyString + '</html>';

	    return exportHTML;
	};

	/**
	 * Body 컨텐츠의 HTML 넣기
	 *
	 * @param { String } htmlString
	 * @return { boolean }
	 */
	KuKudocsEditor.prototype.SetEditorContent = function(htmlString, cb){
	    var htmlContents = '';
	    var isSuccess = false;
	    var _this = this;


	    var editorHTML = (htmlString || Define.DEFAULT_PARAGRAPH_HTML);

	    editorHTML = this.router.getHtmlFilterString(editorHTML);

	    if (this.options.useAdjustForChrome) {
	        var chromeDocument = this.getChromeIframeDocument();
	        chromeDocument.body.innerHTML = editorHTML;
	        editorHTML = chromeDocument.body.innerHTML;
	    }

	    setTimeout(function(){
	        _this.menuController.event.keyboardEvent.isCellLock = false;

	        _this.editorContentView[0].innerHTML = editorHTML;
	        Util.paragraphReRenderHTMLForIE(_this.editorContentView[0]);

	        Util.objectNodeToVideoImage(_this.editorContentView, _this.router.options.playImageURL);

	        if (_this.options.useNoneBorderVisualize && _this.options.isNoneBorderVisualize) {
	            Util.setNoneBorderVisualize(_this.editorContentView.find(Define.CELL_TYPE.join(',')));
	        } else {
	            Util.removeAllNoneBorderVisualize(_this.editorContentView.find(Define.CELL_TYPE.join(',')));
	        }

	        _this.setAnotherContents();

	        if (_this.options.useFirstFocus) {
	            _this.$dom.selection.setContentEditable(true);
	            _this.editorContentView.focus();

	        } else {
	            // _this.$dom.selection.setContentEditable(false); //가온아이 contentEditable false 삭제

	            if (!($.browser.msie && $.browser.version < 11)) {
	                _this.editorContentView.blur();
	            }
	        }

	        var range = _this.$dom.selection.setFirstCollapse(_this.options.useFirstFocus);
	        _this.router.doStatusHighlight(range.startContainer, !_this.options.useFirstFocus);

	        _this.router.setClearAllHistories();

	        $(_this.editorContentView[0]).find('select').change(function() {
	            var $target = $(this);
	            var val = $target.val();
	            $target.find('option').attr('selected', false);
	            $target.val(val);
	            $target.find('option[value = ' + val +']').attr('selected', true);
	        });
	        if(typeof cb === 'function') {
	            cb();
	        }


	    }, 10);

	    isSuccess = true;

	    return isSuccess;
	};

	/**
	 * 지정한 Element에 Attribute 가져오기
	 *
	 * @param { Element || String } element
	 * @param { String } attributeName
	 * @return { String } result
	 */
	KuKudocsEditor.prototype.GetAttribute = function(element, attributeName){

	    var $element = this._getElementObject(element);
	    var result = '';

	    if ($element && $element.length) {
	        result = $element.attr(attributeName);
	    }

	    return result;
	};

	/**
	 * 지정한 Element에 Attribute 지정
	 *
	 * @param { Element || String } element
	 * @param { String } AttributeName
	 * @param { String } AttributeValue
	 * @return { boolean }
	 */
	KuKudocsEditor.prototype.SetAttribute = function(element, AttributeName, AttributeValue){
	    var $element = this._getElementObject(element);
	    var isSuccess = false;

	    if ($element && $element.length) {
	        $element.attr(AttributeName, AttributeValue);
	        isSuccess = $element.attr(AttributeName) === AttributeValue;
	    }

	    return isSuccess;
	};

	/**
	 * Body 컨텐츠의 TEXT 넣기
	 *
	 * @param { String } textString
	 * @return { boolean }
	 */
	KuKudocsEditor.prototype.SetEditorTextContent = function(textString){
	    var htmlContents = '';

	    var isSuccess = false;

	    var _this = this;

	    setTimeout(function(){
	        textString = $('<div/>').text(textString).html();

	        if (textString) {
	            var plain = textString;
	            plain = plain.replace(/\u000a\u000d/gi, "</span></p>" + Define.DEFAULT_PARAGRAPH_HTML + Define.DEFAULT_P_STYLE + "<span>");
	            plain = plain.replace(/\u000a/gi, "</span></p>" + Define.DEFAULT_P_STYLE + "<span>");

	            var plainText = Define.DEFAULT_P_STYLE + "<span>" + plain + "</span></p>";
	        }

	        _this.editorContentView[0].innerHTML = (htmlContents || Define.DEFAULT_PARAGRAPH_HTML);

	        _this.setAnotherContents();

	        _this.router.setClearAllHistories();
	        _this.router.changedUndoRedoButtonEnable();
	        _this.$dom.selection.setContentEditable(true);
	    }, 10);

	    isSuccess = true;

	    return isSuccess;
	};

	/**
	 *  지정한 Element에 커서 이동
	 *
	 *  @param { Element || String } element
	 *
	 *  */
	KuKudocsEditor.prototype.SetFocus = function(element){
	    var $element = this._getElementObject(element);

	    if ($element && $element.length) {
	        var selection = this.$dom.selection;
	        selection.setContentEditable(true);
	        selection.editorFocus();
	        selection.applyNewRange($element[0], 0, $element[0], 0);
	    }
	};

	/**
	 *  지정한 ID의 Element가 존재하는지 체크
	 *
	 *  @param { String } elementID
	 *
	 *  @return { Boolean } isExists
	 *
	 *  */
	KuKudocsEditor.prototype.IsExistsElement = function(elementID){
	    var $element = this.editorContentView.find('#' + elementID);
	    var isExists = false;

	    if ($element && $element.length) {
	        isExists = true;
	    }

	    return isExists;
	};

	/**
	 * 지정된 ID의 쓰기금지 적용이 되어있는지 여부
	 *
	 * @param { String } elementID
	 *
	 * @return { Boolean } isCellLock
	 *
	 *
	 * */
	KuKudocsEditor.prototype.IsCellLockByID = function(elementID){
	    var isCellLock = false;

	    if (this.options.cell_lock_name) {
	        var $cell = this.editorContentView.find('#' + elementID);

	        if ($cell.length) {
	            if ($cell.is(Define.CELL_TYPE.join(',') + ',DIV')){

	                var cell = $cell[0];

	                var free = cell.getAttribute(this.options.cell_lock_name);

	                if (free === "" || free === this.options.cell_lock_name) {
	                    isCellLock = true;
	                }
	            }
	        }
	    }

	    return isCellLock;
	};

	/**
	 * 선택한 Element의 쓰기금지 적용이 되어있는지 여부
	 *
	 * @return { Boolean } isCellLock
	 *
	 * */
	KuKudocsEditor.prototype.IsCellLockByFocus = function(){
	    var isCellLock = false;

	    if (this.options.cell_lock_name) {
	        var cellNode = [];

	        this.$dom.selection.restoreRange();

	        var range = this.$dom.selection.getRange();
	        var targetNode = range.startContainer;

	        if (targetNode) {
	            cellNode = $(targetNode).closest(Define.CELL_TYPE.join(','));

	            if (!cellNode.length) {
	                cellNode =  $(targetNode).closest('div');
	            }
	        }

	        if (cellNode.length) {
	            var cell = cellNode[0];

	            var free = cell.getAttribute(this.options.cell_lock_name);

	            if (free === "" || free === this.options.cell_lock_name) {
	                isCellLock = true;
	            }
	        }
	    }

	    return isCellLock;
	};

	/**
	 *  지정된 ID의 CellLock 적용(true)/미적용(false) 처리
	 *
	 *  @param { String } elementID
	 *  @param { Boolean } isLock
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetCellLockByID = function(elementID, isLock){
	    var isSuccess = false;

	    if (this.options.cell_lock_name) {
	        var $cell = this.editorContentView.find('#' + elementID);

	        if ($cell.length) {
	            if ($cell.is(Define.CELL_TYPE.join(',') + ',DIV')) {
	                if (isLock) {
	                    $cell.attr(this.options.cell_lock_name, this.options.cell_lock_name);
	                    this.menuController.event.keyboardEvent.isCellLock = true;

	                } else {
	                    $cell.removeAttr(this.options.cell_lock_name);
	                    this.menuController.event.keyboardEvent.isCellLock = false;
	                }

	                isSuccess = true;
	            }
	        }
	    }

	    return isSuccess;
	};

	/**
	 *  선택한 Element의 CellLock 적용(true)/미적용(false) 처리
	 *
	 *  @param { Boolean } isLock
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetCellLockByFocus = function(isLock){
	    var isSuccess = false;

	    if (this.options.cell_lock_name) {
	        var cellNode = [];

	        this.$dom.selection.restoreRange();

	        var range = this.$dom.selection.getRange();
	        var targetNode = range.startContainer;

	        if (targetNode) {
	            cellNode = $(targetNode).closest(Define.CELL_TYPE.join(','));

	            if (!cellNode.length) {
	                cellNode =  $(targetNode).closest('div');
	            }
	        }

	        if (cellNode.length) {
	            var $cell = $(cellNode[0]);

	            if (isLock) {
	                $cell.attr(this.options.cell_lock_name, this.options.cell_lock_name);
	                this.menuController.event.keyboardEvent.isCellLock = true;
	            } else {
	                $cell.removeAttr(this.options.cell_lock_name);
	                this.menuController.event.keyboardEvent.isCellLock = false;

	            }

	            isSuccess = true;
	        }
	    }

	    return isSuccess;
	};

	/**
	 *  BODY태그의 AttValue 설정하기
	 *
	 *  @param { String } attributeName
	 *  @param { String } attributeValue
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetAttributeValueByBody = function(attributeName, attributeValue){
	    this.editorContentView.attr(attributeName, attributeValue);

	    return this.editorContentView.attr(attributeName) === attributeValue;
	};

	/**
	 *  BODY태그의 AttValue 가져오기
	 *
	 *  @param { String } attributeName
	 *
	 *  @return { String } attributeValue
	 *
	 *  */
	KuKudocsEditor.prototype.GetAttributeValueByBody = function(attributeName){
	    return this.editorContentView.attr(attributeName) || '';
	};

	/**
	 *  선택한 Element의 AttValue 설정하기
	 *
	 *  @param { String } attributeName
	 *  @param { String } attributeValue
	 *  @param { String } tagName
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetAttributeValueByFocus = function(attributeName, attributeValue, tagName){

	    var isSuccess = false;

	    var focusNode = this.GetCurrentElement(tagName);

	    if (focusNode) {
	        var $focusNode = $(focusNode);

	        $focusNode.attr(attributeName, attributeValue);

	        attributeValue = $focusNode.attr(attributeName);

	        isSuccess = $focusNode.attr(attributeName) === attributeValue;
	    }

	    return isSuccess;
	};

	/**
	 *  선택한 Element의 AttValue 가져오기
	 *
	 *  @param { String } attributeName
	 *  @param { String } tagName
	 *
	 *  @return { String } attributeValue
	 *
	 *  */
	KuKudocsEditor.prototype.GetAttributeValueByFocus = function(attributeName, tagName){
	    var focusNode = this.GetCurrentElement(tagName);
	    var attributeValue = null;

	    if (focusNode) {
	        attributeValue = $(focusNode).attr(attributeName);
	    }

	    return attributeValue;
	};

	/**
	 *  지정된 ID의 InnerHtml 정보 가져오기
	 *
	 *  @param { String } elementID
	 *
	 *  @return { String } innerHTML
	 *
	 *  */
	KuKudocsEditor.prototype.GetHtmlByID = function(elementID){
	    var $element = this.editorContentView.find('#' + elementID).clone();

	    var innerHTML = '';

	    if ($element.length) {
	        var $elementClone = $element.clone();
	        var $selectedNodes = $elementClone.find('[' + Define.ATTR.KK_SELECTED_TD + ']');

	        $selectedNodes.removeAttr(Define.ATTR.KK_SELECTED_TD);

	        Util.removeAllNoneBorderVisualize($selectedNodes);

	        Util.paragraphReRenderHTMLForIE($elementClone[0]);

	        innerHTML = $elementClone[0].outerHTML;
	    }

	    return innerHTML;
	};

	/**
	 *  지정된 ID의 InnerHtml 정보 설정하기
	 *
	 *  @param { String } elementID
	 *  @param { String } htmlString
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetHtmlByID = function(elementID, htmlString){
	    var $element = this.editorContentView.find('#' + elementID);

	    var isSuccess = false;

	    if ($element.length) {
	        htmlString = htmlString.replace(/&quot;/ig,"'");

	        $element[0].innerHTML = htmlString;

	        Util.paragraphReRenderHTMLForIE($element[0]);

	        if (this.options.useNoneBorderVisualize && this.options.isNoneBorderVisualize) {
	            Util.setNoneBorderVisualize($element.find(Define.CELL_TYPE.join(',')));
	        } else {
	            Util.removeAllNoneBorderVisualize($element.find(Define.CELL_TYPE.join(',')));
	        }

	        isSuccess = true;
	    }

	    return isSuccess;
	};

	/* 전체 엘리먼트 가져오기 */
	KuKudocsEditor.prototype.GetAllElements = function(){
	    return this.editorContentView.find('*').toArray();
	};

	/**
	 *  지정된 ID의 AttValue 가져오기
	 *
	 *  @param { String } elementID
	 *  @param { String } attributeName
	 *
	 *  @return { String } attributeValue
	 *
	 *  */
	KuKudocsEditor.prototype.GetAttributeValueByID = function(elementID, attributeName){
	    var $element = this.editorContentView.find('#' + elementID);
	    var attributeValue = '';

	    if ($element.length) {
	        attributeValue = $element.attr(attributeName) || '';
	    }

	    return attributeValue;
	};

	/**
	 *  지정된 ID의 AttValue 설정하기
	 *
	 *  @param { String } elementID
	 *  @param { String } attributeName
	 *  @param { String } attributeValue
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetAttributeValueByID = function(elementID, attributeName, attributeValue){
	    var $element = this.editorContentView.find('#' + elementID);
	    var isSuccess = false;

	    if ($element.length) {
	        $element.attr(attributeName, attributeValue);
	        isSuccess = $element.attr(attributeName) === attributeValue;
	    }

	    return isSuccess;
	};

	/**
	 *  지정된 ID의 InnerText 정보 가져오기
	 *
	 *  @param { String } elementID
	 *
	 *  @return { String } textValue
	 *
	 *  */
	KuKudocsEditor.prototype.GetTextByID = function(elementID){
	    var $element = this.editorContentView.find('#' + elementID);

	    return this.getElementText($element.clone());
	};

	/**
	 *  지정된 ID의 InnerText 정보 설정하기
	 *
	 *  @param { String } elementID
	 *  @param { String } textValue
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetTextByID = function(elementID, textValue){
	    var isSuccess = false;

	    var $element = this.editorContentView.find('#' + elementID);

	    textValue = $('<div/>').text(textValue).html();

	    if ($element.length) {
	        var plain = textValue || Define.DEFAULT_TEXT_HTML;

	        if ($element.is(Define.CONTENT_NODES.join(','))) {

	        } else if ($element.is(Define.BLOCK_NODES.join(','))) {
	            if ($element.is(Define.PARAGRAPH_NODES.join(','))) {
	                plain = '<span>' + plain + '</span>';
	            } else if ($element.is(Define.CELL_TYPE.join(','))) {
	                plain = Define.DEFAULT_P_STYLE + '<span>' + plain + '</span></p>';
	            }
	        }

	        $element[0].innerHTML = plain;

	        isSuccess = true;
	    }

	    return isSuccess;
	};

	/**
	 *  커서 위치에 Text 삽입
	 *
	 *  @param { String } textValue
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.InsertTextByFocus = function(textValue){
	    var isSuccess = false;

	    if (textValue) {
	        try {
	            var plainTextToHTML = textValue.replace(/\n/gi, "<br>");

	            this.$dom.selection.setContentEditable(true);
	            this.$dom.selection.editorFocus();
	            this.$dom.selection.restoreRange();

	            this.$dom.selection.execCommand("inserttext", false, plainTextToHTML);

	            this.router.externalSetUndoHistory();
	            this.router.changedUndoRedoButtonEnable();

	            isSuccess = true;
	        } catch (e) {

	        }
	    }

	    return isSuccess;
	};

	/**
	 *  커서 위치에 HTML 삽입
	 *
	 *  @param { String } htmlValue
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.InsertHTMLByFocus = function(htmlValue){
	    var isSuccess = false;

	    if (htmlValue) {
	        try {
	            this.$dom.selection.setContentEditable(true);
	            this.$dom.selection.editorFocus();
	            this.$dom.selection.restoreRange();

	            var $wrapperTemp = $('<div/>');
	            $wrapperTemp.html(htmlValue);

	            if (this.options.useNoneBorderVisualize && this.options.isNoneBorderVisualize) {
	                Util.setNoneBorderVisualize($wrapperTemp.find(Define.CELL_TYPE.join(',')));
	            } else {
	                Util.removeAllNoneBorderVisualize($wrapperTemp.find(Define.CELL_TYPE.join(',')));
	            }

	            htmlValue = $wrapperTemp.html();

	            this.$dom.selection.execCommand("inserthtml", false, htmlValue);

	            this.router.externalSetUndoHistory();
	            this.router.changedUndoRedoButtonEnable();

	            isSuccess = true;
	        } catch (e) {

	        }
	    }

	    return isSuccess;
	};

	/**
	 *  Document.execCommand Facade Interface
	 *
	 *  @param { String } CommandName Type
	 *  @param { Boolean } ShowDefaultUI
	 *  @param { String } Value Argument
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.executeCommand = function(aCommandName, aShowDefaultUI, aValueArgument){
	    var isSuccess = false;

	    if (aCommandName) {
	        try {
	            this.$dom.selection.setContentEditable(true);
	            this.$dom.selection.editorFocus();
	            this.$dom.selection.restoreRange();

	            isSuccess = this.$dom.selection.execCommand(aCommandName, aShowDefaultUI, aValueArgument);

	            this.router.externalSetUndoHistory();
	            this.router.changedUndoRedoButtonEnable();

	        } catch (e) {

	        }
	    }

	    return isSuccess;
	};



	/* Editor에 포커스 지정 */
	KuKudocsEditor.prototype.SetEditorFocus = function(){
	    this.editorContentView.focus();
	};




	module.exports = window.YooncomsEditor = window.KuKudocsEditor = KuKudocsEditor;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*
	 A JavaScript implementation of the SHA family of hashes, as
	 defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding
	 HMAC implementation as defined in FIPS PUB 198a

	 Copyright 2008-2018 Brian Turek, 1998-2009 Paul Johnston & Contributors
	 Distributed under the BSD License
	 See http://caligatio.github.com/jsSHA/ for more information
	*/
	'use strict';(function(K){function x(b,a,d){var e=0,g=[],k=0,f,c,m,h,l,p,t,q,y=!1,u=[],r=[],v,A=!1;d=d||{};f=d.encoding||"UTF8";v=d.numRounds||1;if(v!==parseInt(v,10)||1>v)throw Error("numRounds must a integer >= 1");if(0===b.lastIndexOf("SHA-",0))if(p=function(a,d){return B(a,d,b)},t=function(a,d,g,e){var c,k;if("SHA-384"===b||"SHA-512"===b)c=(d+129>>>10<<5)+31,k=32;else throw Error("Unexpected error in SHA-2 implementation");for(;a.length<=c;)a.push(0);a[d>>>5]|=128<<24-d%32;d=d+g;a[c]=d&4294967295;
	a[c-1]=d/4294967296|0;g=a.length;for(d=0;d<g;d+=k)e=B(a.slice(d,d+k),e,b);if("SHA-384"===b)a=[e[0].a,e[0].b,e[1].a,e[1].b,e[2].a,e[2].b,e[3].a,e[3].b,e[4].a,e[4].b,e[5].a,e[5].b];else if("SHA-512"===b)a=[e[0].a,e[0].b,e[1].a,e[1].b,e[2].a,e[2].b,e[3].a,e[3].b,e[4].a,e[4].b,e[5].a,e[5].b,e[6].a,e[6].b,e[7].a,e[7].b];else throw Error("Unexpected error in SHA-2 implementation");return a},q=function(a){return a.slice()},"SHA-384"===b)l=1024,h=384;else if("SHA-512"===b)l=1024,h=512;else throw Error("Chosen SHA variant is not supported");
	else throw Error("Chosen SHA variant is not supported");m=C(a,f);c=z(b);this.setHMACKey=function(a,d,g){var k;if(!0===y)throw Error("HMAC key already set");if(!0===A)throw Error("Cannot set HMAC key after calling update");f=(g||{}).encoding||"UTF8";d=C(d,f)(a);a=d.binLen;d=d.value;k=l>>>3;g=k/4-1;if(k<a/8){for(d=t(d,a,0,z(b));d.length<=g;)d.push(0);d[g]&=4294967040}else if(k>a/8){for(;d.length<=g;)d.push(0);d[g]&=4294967040}for(a=0;a<=g;a+=1)u[a]=d[a]^909522486,r[a]=d[a]^1549556828;c=p(u,c);e=l;y=
	!0};this.update=function(a){var d,b,n,f=0,h=l>>>5;d=m(a,g,k);a=d.binLen;b=d.value;d=a>>>5;for(n=0;n<d;n+=h)f+l<=a&&(c=p(b.slice(n,n+h),c),f+=l);e+=f;g=b.slice(f>>>5);k=a%l;A=!0};this.getHash=function(a,d){var f,l,m,p;if(!0===y)throw Error("Cannot call getHash after setting HMAC key");m=D(d);switch(a){case "HEX":f=function(a){return E(a,h,m)};break;case "B64":f=function(a){return F(a,h,m)};break;case "BYTES":f=function(a){return G(a,h)};break;case "ARRAYBUFFER":try{l=new ArrayBuffer(0)}catch(w){throw Error("ARRAYBUFFER not supported by this environment");
	}f=function(a){return H(a,h)};break;default:throw Error("format must be HEX, B64, BYTES, or ARRAYBUFFER");}p=t(g.slice(),k,e,q(c));for(l=1;l<v;l+=1)p=t(p,h,0,z(b));return f(p)};this.getHMAC=function(a,d){var f,m,u,v;if(!1===y)throw Error("Cannot call getHMAC without first setting HMAC key");u=D(d);switch(a){case "HEX":f=function(a){return E(a,h,u)};break;case "B64":f=function(a){return F(a,h,u)};break;case "BYTES":f=function(a){return G(a,h)};break;case "ARRAYBUFFER":try{f=new ArrayBuffer(0)}catch(w){throw Error("ARRAYBUFFER not supported by this environment");
	}f=function(a){return H(a,h)};break;default:throw Error("outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER");}m=t(g.slice(),k,e,q(c));v=p(r,z(b));v=t(m,h,l,v);return f(v)}}function b(b,a){this.a=b;this.b=a}function E(b,a,d){var e="";a/=8;var g,k;for(g=0;g<a;g+=1)k=b[g>>>2]>>>8*(3+g%4*-1),e+="0123456789abcdef".charAt(k>>>4&15)+"0123456789abcdef".charAt(k&15);return d.outputUpper?e.toUpperCase():e}function F(b,a,d){var e="",g=a/8,k,f,c;for(k=0;k<g;k+=3)for(f=k+1<g?b[k+1>>>2]:0,c=k+2<g?b[k+2>>>2]:
	0,c=(b[k>>>2]>>>8*(3+k%4*-1)&255)<<16|(f>>>8*(3+(k+1)%4*-1)&255)<<8|c>>>8*(3+(k+2)%4*-1)&255,f=0;4>f;f+=1)8*k+6*f<=a?e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(c>>>6*(3-f)&63):e+=d.b64Pad;return e}function G(b,a){var d="",e=a/8,g,c;for(g=0;g<e;g+=1)c=b[g>>>2]>>>8*(3+g%4*-1)&255,d+=String.fromCharCode(c);return d}function H(b,a){var d=a/8,e,g=new ArrayBuffer(d),c;c=new Uint8Array(g);for(e=0;e<d;e+=1)c[e]=b[e>>>2]>>>8*(3+e%4*-1)&255;return g}function D(b){var a={outputUpper:!1,
	b64Pad:"=",shakeLen:-1};b=b||{};a.outputUpper=b.outputUpper||!1;!0===b.hasOwnProperty("b64Pad")&&(a.b64Pad=b.b64Pad);if("boolean"!==typeof a.outputUpper)throw Error("Invalid outputUpper formatting option");if("string"!==typeof a.b64Pad)throw Error("Invalid b64Pad formatting option");return a}function C(b,a){var d;switch(a){case "UTF8":case "UTF16BE":case "UTF16LE":break;default:throw Error("encoding must be UTF8, UTF16BE, or UTF16LE");}switch(b){case "HEX":d=function(a,b,d){var f=a.length,c,n,h,l,
	p;if(0!==f%2)throw Error("String of HEX type must be in byte increments");b=b||[0];d=d||0;p=d>>>3;for(c=0;c<f;c+=2){n=parseInt(a.substr(c,2),16);if(isNaN(n))throw Error("String of HEX type contains invalid characters");l=(c>>>1)+p;for(h=l>>>2;b.length<=h;)b.push(0);b[h]|=n<<8*(3+l%4*-1)}return{value:b,binLen:4*f+d}};break;case "TEXT":d=function(b,d,c){var f,n,m=0,h,l,p,t,q,r;d=d||[0];c=c||0;p=c>>>3;if("UTF8"===a)for(r=3,h=0;h<b.length;h+=1)for(f=b.charCodeAt(h),n=[],128>f?n.push(f):2048>f?(n.push(192|
	f>>>6),n.push(128|f&63)):55296>f||57344<=f?n.push(224|f>>>12,128|f>>>6&63,128|f&63):(h+=1,f=65536+((f&1023)<<10|b.charCodeAt(h)&1023),n.push(240|f>>>18,128|f>>>12&63,128|f>>>6&63,128|f&63)),l=0;l<n.length;l+=1){q=m+p;for(t=q>>>2;d.length<=t;)d.push(0);d[t]|=n[l]<<8*(r+q%4*-1);m+=1}else if("UTF16BE"===a||"UTF16LE"===a)for(r=2,n="UTF16LE"===a&&!0||"UTF16LE"!==a&&!1,h=0;h<b.length;h+=1){f=b.charCodeAt(h);!0===n&&(l=f&255,f=l<<8|f>>>8);q=m+p;for(t=q>>>2;d.length<=t;)d.push(0);d[t]|=f<<8*(r+q%4*-1);m+=
	2}return{value:d,binLen:8*m+c}};break;case "B64":d=function(a,b,d){var c=0,n,m,h,l,p,t,q;if(-1===a.search(/^[a-zA-Z0-9=+\/]+$/))throw Error("Invalid character in base-64 string");m=a.indexOf("=");a=a.replace(/\=/g,"");if(-1!==m&&m<a.length)throw Error("Invalid '=' found in base-64 string");b=b||[0];d=d||0;t=d>>>3;for(m=0;m<a.length;m+=4){p=a.substr(m,4);for(h=l=0;h<p.length;h+=1)n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(p[h]),l|=n<<18-6*h;for(h=0;h<p.length-1;h+=
	1){q=c+t;for(n=q>>>2;b.length<=n;)b.push(0);b[n]|=(l>>>16-8*h&255)<<8*(3+q%4*-1);c+=1}}return{value:b,binLen:8*c+d}};break;case "BYTES":d=function(a,b,d){var c,n,m,h,l;b=b||[0];d=d||0;m=d>>>3;for(n=0;n<a.length;n+=1)c=a.charCodeAt(n),l=n+m,h=l>>>2,b.length<=h&&b.push(0),b[h]|=c<<8*(3+l%4*-1);return{value:b,binLen:8*a.length+d}};break;case "ARRAYBUFFER":try{d=new ArrayBuffer(0)}catch(e){throw Error("ARRAYBUFFER not supported by this environment");}d=function(a,b,d){var c,n,m,h,l;b=b||[0];d=d||0;n=
	d>>>3;l=new Uint8Array(a);for(c=0;c<a.byteLength;c+=1)h=c+n,m=h>>>2,b.length<=m&&b.push(0),b[m]|=l[c]<<8*(3+h%4*-1);return{value:b,binLen:8*a.byteLength+d}};break;default:throw Error("format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER");}return d}function r(c,a){var d=null,d=new b(c.a,c.b);return d=32>=a?new b(d.a>>>a|d.b<<32-a&4294967295,d.b>>>a|d.a<<32-a&4294967295):new b(d.b>>>a-32|d.a<<64-a&4294967295,d.a>>>a-32|d.b<<64-a&4294967295)}function I(c,a){var d=null;return d=32>=a?new b(c.a>>>a,c.b>>>
	a|c.a<<32-a&4294967295):new b(0,c.a>>>a-32)}function L(c,a,d){return new b(c.a&a.a^~c.a&d.a,c.b&a.b^~c.b&d.b)}function M(c,a,d){return new b(c.a&a.a^c.a&d.a^a.a&d.a,c.b&a.b^c.b&d.b^a.b&d.b)}function N(c){var a=r(c,28),d=r(c,34);c=r(c,39);return new b(a.a^d.a^c.a,a.b^d.b^c.b)}function O(c){var a=r(c,14),d=r(c,18);c=r(c,41);return new b(a.a^d.a^c.a,a.b^d.b^c.b)}function P(c){var a=r(c,1),d=r(c,8);c=I(c,7);return new b(a.a^d.a^c.a,a.b^d.b^c.b)}function Q(c){var a=r(c,19),d=r(c,61);c=I(c,6);return new b(a.a^
	d.a^c.a,a.b^d.b^c.b)}function R(c,a){var d,e,g;d=(c.b&65535)+(a.b&65535);e=(c.b>>>16)+(a.b>>>16)+(d>>>16);g=(e&65535)<<16|d&65535;d=(c.a&65535)+(a.a&65535)+(e>>>16);e=(c.a>>>16)+(a.a>>>16)+(d>>>16);return new b((e&65535)<<16|d&65535,g)}function S(c,a,d,e){var g,k,f;g=(c.b&65535)+(a.b&65535)+(d.b&65535)+(e.b&65535);k=(c.b>>>16)+(a.b>>>16)+(d.b>>>16)+(e.b>>>16)+(g>>>16);f=(k&65535)<<16|g&65535;g=(c.a&65535)+(a.a&65535)+(d.a&65535)+(e.a&65535)+(k>>>16);k=(c.a>>>16)+(a.a>>>16)+(d.a>>>16)+(e.a>>>16)+(g>>>
	16);return new b((k&65535)<<16|g&65535,f)}function T(c,a,d,e,g){var k,f,r;k=(c.b&65535)+(a.b&65535)+(d.b&65535)+(e.b&65535)+(g.b&65535);f=(c.b>>>16)+(a.b>>>16)+(d.b>>>16)+(e.b>>>16)+(g.b>>>16)+(k>>>16);r=(f&65535)<<16|k&65535;k=(c.a&65535)+(a.a&65535)+(d.a&65535)+(e.a&65535)+(g.a&65535)+(f>>>16);f=(c.a>>>16)+(a.a>>>16)+(d.a>>>16)+(e.a>>>16)+(g.a>>>16)+(k>>>16);return new b((f&65535)<<16|k&65535,r)}function z(c){var a=[],d;if(0===c.lastIndexOf("SHA-",0))switch(a=[3238371032,914150663,812702999,4144912697,
	4290775857,1750603025,1694076839,3204075428],d=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],c){case "SHA-224":break;case "SHA-256":a=d;break;case "SHA-384":a=[new b(3418070365,a[0]),new b(1654270250,a[1]),new b(2438529370,a[2]),new b(355462360,a[3]),new b(1731405415,a[4]),new b(41048885895,a[5]),new b(3675008525,a[6]),new b(1203062813,a[7])];break;case "SHA-512":a=[new b(d[0],4089235720),new b(d[1],2227873595),new b(d[2],4271175723),new b(d[3],1595750129),
	new b(d[4],2917565137),new b(d[5],725511199),new b(d[6],4215389547),new b(d[7],327033209)];break;default:throw Error("Unknown SHA variant");}else throw Error("No SHA variants supported");return a}function B(c,a,d){var e,g,k,f,r,m,h,l,p,t,q,y,u,x,v,A,z,B,C,D,E,F,w=[],G;if("SHA-384"===d||"SHA-512"===d)t=80,y=2,F=b,u=R,x=S,v=T,A=P,z=Q,B=N,C=O,E=M,D=L,G=J;else throw Error("Unexpected error in SHA-2 implementation");d=a[0];e=a[1];g=a[2];k=a[3];f=a[4];r=a[5];m=a[6];h=a[7];for(q=0;q<t;q+=1)16>q?(p=q*y,l=
	c.length<=p?0:c[p],p=c.length<=p+1?0:c[p+1],w[q]=new F(l,p)):w[q]=x(z(w[q-2]),w[q-7],A(w[q-15]),w[q-16]),l=v(h,C(f),D(f,r,m),G[q],w[q]),p=u(B(d),E(d,e,g)),h=m,m=r,r=f,f=u(k,l),k=g,g=e,e=d,d=u(l,p);a[0]=u(d,a[0]);a[1]=u(e,a[1]);a[2]=u(g,a[2]);a[3]=u(k,a[3]);a[4]=u(f,a[4]);a[5]=u(r,a[5]);a[6]=u(m,a[6]);a[7]=u(h,a[7]);return a}var c,J;c=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,
	3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,
	3329325298];J=[new b(c[0],3609767458),new b(c[1],602891725),new b(c[2],3964484399),new b(c[3],2173295548),new b(c[4],4081628472),new b(c[5],3053834265),new b(c[6],2937671579),new b(c[7],3664609560),new b(c[8],2734883394),new b(c[9],1164996542),new b(c[10],1323610764),new b(c[11],3590304994),new b(c[12],4068182383),new b(c[13],991336113),new b(c[14],633803317),new b(c[15],3479774868),new b(c[16],2666613458),new b(c[17],944711139),new b(c[18],2341262773),new b(c[19],2007800933),new b(c[20],1495990901),
	new b(c[21],1856431235),new b(c[22],3175218132),new b(c[23],2198950837),new b(c[24],3999719339),new b(c[25],766784016),new b(c[26],2566594879),new b(c[27],3203337956),new b(c[28],1034457026),new b(c[29],2466948901),new b(c[30],3758326383),new b(c[31],168717936),new b(c[32],1188179964),new b(c[33],1546045734),new b(c[34],1522805485),new b(c[35],2643833823),new b(c[36],2343527390),new b(c[37],1014477480),new b(c[38],1206759142),new b(c[39],344077627),new b(c[40],1290863460),new b(c[41],3158454273),
	new b(c[42],3505952657),new b(c[43],106217008),new b(c[44],3606008344),new b(c[45],1432725776),new b(c[46],1467031594),new b(c[47],851169720),new b(c[48],3100823752),new b(c[49],1363258195),new b(c[50],3750685593),new b(c[51],3785050280),new b(c[52],3318307427),new b(c[53],3812723403),new b(c[54],2003034995),new b(c[55],3602036899),new b(c[56],1575990012),new b(c[57],1125592928),new b(c[58],2716904306),new b(c[59],442776044),new b(c[60],593698344),new b(c[61],3733110249),new b(c[62],2999351573),new b(c[63],
	3815920427),new b(3391569614,3928383900),new b(3515267271,566280711),new b(3940187606,3454069534),new b(4118630271,4000239992),new b(116418474,1914138554),new b(174292421,2731055270),new b(289380356,3203993006),new b(460393269,320620315),new b(685471733,587496836),new b(852142971,1086792851),new b(1017036298,365543100),new b(1126000580,2618297676),new b(1288033470,3409855158),new b(1501505948,4234509866),new b(1607167915,987167468),new b(1816402316,1246189591)]; true?
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){return x}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):"undefined"!==typeof exports?("undefined"!==typeof module&&module.exports&&(module.exports=x),exports=x):K.jsSHA=x})(this);


/***/ }),
/* 3 */
/***/ (function(module, exports) {

	// var paragraphDefaultStyle = ' style="margin: 0px; padding: 0px; font-family: \'Arial, MalgunGothic, AppleSDGothic\'; font-size: 12px;"';
	var paragraphDefaultStyle = '';

	module.exports = {
	    isWinSelection : !!window.getSelection,

	    getDefaultFont : function(){
	        return paragraphDefaultStyle;
	    },

	    setDefaultParagraph : function(){
	        // 중간에 공란으로 줄바꿈 한 후 사이즈 변경 시 공란이 있는 라인은 사이즈 변경되지 않는 현상
	        //this.DEFAULT_PARAGRAPH_HTML = '<p>' + ($.browser.msie && $.browser.version < 11 ? '&nbsp;' : '<br>') + '</p>';
	        if($.browser.msie && $.browser.version < 11) {
	            this.DEFAULT_PARAGRAPH_HTML = '<p>&nbsp;</p>';
	        }
	        else {
	            this.DEFAULT_PARAGRAPH_HTML = '<p><span><br></span></p>';
	        }

	        console.log(this.DEFAULT_PARAGRAPH_HTML)
	    },

	    EDITOR_INFO : {
	        VERSION : '1.5.0',
	        COPYRIGHT : 'Copyright ⓒ 2016 - 2021 Kukudocs CO. LTD',
	        RESERVED : 'ALL RIGHT RESERVED',
	        HOMEPAGE : 'http://www.kukudocs.com'
	    },

	    NAME : {
	        UPLOAD_IMAGE_TYPE : 'image_type',
	        UPLOAD_VIDEO_TYPE : 'video_type',
	        UPLOAD_FILE_TYPE : 'file_type',
	        UPLOAD_FLASH_TYPE : 'flash_type',
	        UPLOAD_IMAGE_BASE64_TYPE : 'image_base64_type',
	        POST_IFRAME : 'postiframe'
	    },

	    ATTR : {
	        READONLY: 'readonly',
	        UNSELECTABLE : 'unselectable',
	        HREF : "href",
	        TITLE : "title",
	        ID : "id",
	        SRC : "src",
	        CLASS : "class",
	        TARGET : "target",
	        STYLE : "style",
	        TYPE : "type",
	        WIDTH : "width",
	        HEIGHT : "height",
	        DIR : "dir",
	        DATA : "data",
	        FILE_TYPE : "filedata",
	        PLUGINSPAGE : "pluginspage",
	        KK_TYPE : "kk_type",
	        CURRENT_WIDTH : 'currentWidth',
	        CURRENT_HEIGHT : 'currentHeight',
	        DATA_VIDEO_SOURCE : "videosource",
	        DATA_VIDEO_TYPE : 'videotype',
	        UPLOADING_IMAGE : 'uploadingimage',

	        CONTROLS : 'controls',
	        AUTO_START : 'autostart',
	        LOOP : 'loop',
	        SHOW_TRACKER : 'showtracker',
	        SHOW_STATUSBAR : 'showstatusbar',
	        SHOW_CONTROLS : 'showcontrols',
	        SHOW_AUDIO_CONTROLS : 'showaudiocontrols',
	        SHOW_DISPLAY : 'showdisplay',
	        SHOW_POSITION_CONTROLS : 'showpositioncontrols',
	        PLAY : 'play',

	        VIDEO_AUTO_PLAY : 'autoplay',
	        VIDEO_CONTROL : 'controls',
	        VIDEO_LOOP : 'loop',
	        VIDEO_AUDIO : 'audio',

	        MENU : 'menu',
	        ALLOW_FULLSCREEN : 'allowfullscreen',
	        CONTENT_EDIT_ABLE : 'contenteditable',
	        KK_LIST_ESCAPE_TEMP : 'kk_list_escape_temp',
	        KK_SELECTED_TD : 'kk_selected_td',
	        KK_CONTEXT_MENU_NAME : 'kk_context_menu_name',

	        KK_NONE_BORDER_VISUALIZE_LEFT : 'kk_none_border_visualize_left',
	        KK_NONE_BORDER_VISUALIZE_RIGHT : 'kk_none_border_visualize_right',
	        KK_NONE_BORDER_VISUALIZE_TOP : 'kk_none_border_visualize_top',
	        KK_NONE_BORDER_VISUALIZE_BOTTOM : 'kk_none_border_visualize_bottom'
	    },

	    ATTR_VALUE : {
	        KK_IMAGE : "kk_type_image",
	        KK_TYPE_BOOKMARK : "kk_type_bookmark",
	        KK_FILE : "kk_type_file",
	        KK_LAYER : "kk_type_layer",
	        KK_FLASH_TYPE : "application/x-shockwave-flash",
	        KK_FLASH_PLUGIN : "http://www.macromedia.com/go/getflashplayer",
	        KK_VIDEO_TYPE : "application/x-mplayer2",
	        KK_VIDEO_PLUGIN : "http://www.microsoft.com/windows/windowsmedia/download/",
	        KK_FIND_DIRECTION : 'direction',
	        KK_SELECTION_VALUE : 'selected'
	    },

	    WIDGET_CLASS : {
	        UI_FIND_REPLACE : 'ui_find_replace_box',
	        UI_ACTIVE : 'ui_active',
	        UI_SELECT_LIST : 'ui_select_list',
	        UI_COMBO_BOX : 'ui_combobox',
	        UI_COLOR_PICKER : 'ui_colorpicker',
	        UI_TABLE_PICKER : 'ui_tablepicker',
	        UI_LIST_PICKER : 'ui_listpicker',
	        UI_CUSTOM_BOX : 'ui_custombox'
	    },

	    CLASS : {
	        KKEDITOR : "kk_editor",

	        EDITOR_TOOLBAR : "kk_editor_toolbar",
	        EDITOR_TOOLBAR_MENUS : "menus",
	        EDITOR_TOOLBAR_MENU : "menu",
	        EDITOR_TOOLBAR_MENU_BUTTON : "menu_button",
	        EDITOR_TOOLBAR_MENU_SELECTBOX : "menu_selectbox",
	        EDITOR_TOOLBAR_MENU_COMBOBOX : "menu_combobox",
	        EDITOR_TOOLBAR_MENU_COLORPICKER : "menu_colorpicker",
	        EDITOR_TOOLBAR_MENU_LISTPICKER : "menu_listpicker",
	        EDITOR_TOOLBAR_MENU_TABLEPICKER : "menu_tablepicker",
	        EDITOR_TOOLBAR_MENU_CUSTOMBOX : "menu_custombox",
	        EDITOR_TOOLBAR_MENU_FINDREPLACEBOX : "menu_findreplacebox",
	        EDITOR_TOOLBAR_DISABLED : "kk_editor_toolbar_disabled",

	        EDITOR_CONTEXT_MENU : "kk_context_menu",
	        EDITOR_CONTEXT_MENU_ROOT : "context-menu-root",
	        EDITOR_CONTEXT_MENU_LIST : "context-menu-list",
	        EDITOR_CONTEXT_MENU_ITEM : "context-menu-item",
	        EDITOR_CONTEXT_MENU_SEPARATOR : "context-menu-separator",
	        EDITOR_CONTEXT_MENU_NOT_SELECTABLE : "context-menu-not-selectable",
	        EDITOR_CONTEXT_MENU_SUBMENU : "context-menu-submenu",
	        EDITOR_CONTEXT_MENU_VISIBLE : "context-menu-visible",
	        EDITOR_CONTEXT_MENU_ICON : "context-menu-icon",

	        EDITOR_FOOTER : "kk_editor_footer",
	        EDITOR_FOOTER_DISABLED : "footer_disabled",
	        EDITOR_FOOTER_RESIZE_BAR : "vertical_resize",
	        EDITOR_FOOTER_MENUS : "change_mode_menus",
	        EDITOR_FOOTER_MENU : "mode_menu",
	        EDITOR_FOOTER_MENU_EDITOR : "kk_menu_editor",
	        EDITOR_FOOTER_MENU_HTML : "kk_menu_html",
	        EDITOR_FOOTER_MENU_TEXT : "kk_menu_text",
	        EDITOR_FOOTER_MENU_PREVIEW : "kk_menu_preview",
	        EDITOR_FOOTER_MENU_ACTIVE : "kk_footer_menu_active",


	        EDITOR_AREA : "kk_editorArea",

	        MAIN_VIEW : "kk_view",
	        VIEW_HIDE : "kk_view_hide",

	        EDITOR_VIEW : "kk_editorView",
	        CONTENT_VIEW : "kk_contentView",

	        HTML_VIEW : "kk_htmlView",
	        HTML_CONTENTS : "kk_htmlContents",

	        TEXT_VIEW : "kk_textView",
	        TEXT_CONTENTS : "kk_textContents",

	        PRE_VIEW : "kk_preView",
	        PREVIEW_CONTENTS : "kk_previewContents",

	        CHROME_PASTE_ADJUST : "kk_chrome_adjust",





	        // Dialog Common Class
	        DIALOG : "kk_editor_dialog",
	        DIALOG_DIALOG_MAIN : "kk_dialog",
	        DIALOG_HEADER : "kk_dialog_header",
	        DIALOG_CONTENTS : "kk_dialog_contents",
	        DIALOG_FOOTER : "kk_dialog_footer",
	        DIALOG_TITLE : "kk_dialog_title",
	        DIALOG_CLOSE : "kk_dialog_close",
	        DIALOG_BUTTONS : "kk_dialog_buttons",
	        DIALOG_BUTTON : "kk_dialog_button",
	        DIALOG_BUTTON_DISABLED : "disabled_button",

	        OK_BUTTON : 'ok_button',
	        CANCEL_BUTTON : 'cancel_button',
	        DELETE_BUTTON : 'delete_button',

	        ACCORDION_WRAP : 'kk_accordion_wrap',
	        ACCORDION_FIELD : 'kk_accordion_field',
	        ACCORDION_BAR : 'kk_accordion_bar',
	        DEFAULT_OPEN_FIELD : 'kk_accordion_default_open',

	        WEB_ACCESSIBILITY_ICON : 'kk_web_accessibility_icon',







	        // Dialog Hyperlink
	        DIALOG_HYPERLINK : "kk_dialog_hyperlink",
	        DIALOG_HYPERLINK_TEXT : "link_text",
	        DIALOG_HYPERLINK_URL : "link_url",

	        HYPERLINK_TYPE_WRAP : 'kk_hyperlink_type_wrap',
	        HYPERLINK_TYPE_LABEL : 'kk_hyperlink_type_label',
	        HYPERLINK_TYPE_SELECT : 'kk_hyperlink_type_select',

	        HYPERLINK_TYPE_URL_WRAP : 'kk_hyperlink_type_url_wrap',

	        HYPERLINK_TYPE_URL_LABEL_WRAP : 'kk_hyperlink_type_url_label_wrap',
	        HYPERLINK_TYPE_URL_INPUT_WRAP : 'kk_hyperlink_type_url_input_wrap',
	        HYPERLINK_TYPE_URL_PLUGIN_SEPARATE : 'url_input_plugin_separate',

	        HYPERLINK_TYPE_URL_LABEL : 'kk_hyperlink_type_url_label',
	        HYPERLINK_TYPE_URL_TEXT : 'kk_hyperlink_type_url_text',
	        HYPERLINK_TYPE_URL_TITLE : 'kk_hyperlink_type_url_title',
	        HYPERLINK_TYPE_URL_TARGET : 'kk_hyperlink_type_url_target',
	        HYPERLINK_TYPE_URL_ID : 'kk_hyperlink_type_url_id',
	        HYPERLINK_TYPE_URL_CLASS : 'kk_hyperlink_type_url_class',

	        HYPERLINK_TYPE_URL_INPUT : 'kk_hyperlink_type_url_input',
	        HYPERLINK_TYPE_URL_TEXT_INPUT : 'kk_hyperlink_type_url_text_input',
	        HYPERLINK_TYPE_URL_TITLE_INPUT : 'kk_hyperlink_type_url_title_input',
	        HYPERLINK_TYPE_URL_TARGET_SELECT : 'kk_hyperlink_type_url_target_select',
	        HYPERLINK_TYPE_URL_ID_INPUT : 'kk_hyperlink_type_url_id_input',
	        HYPERLINK_TYPE_URL_CLASS_INPUT : 'kk_hyperlink_type_url_class_input',


	        HYPERLINK_TYPE_BOOKMARK_WRAP : 'kk_hyperlink_type_bookmark_wrap',
	        HYPERLINK_TYPE_BOOKMARK_LABEL_WRAP : 'kk_hyperlink_type_bookmark_label_wrap',
	        HYPERLINK_TYPE_BOOKMARK_INPUT_WRAP : 'kk_hyperlink_type_bookmark_input_wrap',

	        HYPERLINK_TYPE_BOOKMARK_TEXT_LABEL : 'kk_hyperlink_type_bookmark_text_label',
	        HYPERLINK_TYPE_BOOKMARK_LIST_LABEL : 'kk_hyperlink_type_bookmark_list_label',

	        HYPERLINK_TYPE_BOOKMARK_TEXT_INPUT : 'kk_hyperlink_type_bookmark_text_input',
	        HYPERLINK_TYPE_BOOKMARK_LIST_SELECT : 'kk_hyperlink_type_bookmark_list_select',









	        // Dialog File open
	        DIALOG_FILE_OPEN : "kk_dialog_file_open",
	        FILE_OPEN_PATH_WRAPPER : "kk_file_open_path_wrapper",
	        FILE_OPEN_PATH_LABEL : "kk_file_open_path_label",
	        FILE_OPEN_PATH_INPUT : "kk_file_open_path_input",
	        FILE_OPEN_INPUT_LABEL : "kk_file_open_input_label",
	        FILE_OPEN_INPUT : "kk_file_open_input",
	        FILE_OPEN_VALID_WRAPPER : "kk_file_open_valid_wrapper",
	        FILE_OPEN_ENCODING_WRAPPER : "kk_file_open_encoding_wrapper",
	        FILE_OPEN_ENCODING_LABEL : "kk_file_open_encoding_label",
	        FILE_OPEN_ENCODING_SELECTION : "kk_file_open_encoding_selection",






	        //Template Dialog
	        DIALOG_TEMPLATE : "kk_dialog_template",
	        DIALOG_TEMPLATE_WRAPPER : "kk_dialog_template_wrapper",
	        DIALOG_TEMPLATE_CATEGORY : "kk_dialog_template_category",
	        DIALOG_TEMPLATE_CATEGORY_TITLE : "kk_dialog_template_category_title",
	        DIALOG_TEMPLATE_CATEGORY_LIST : "kk_dialog_template_category_list",
	        DIALOG_TEMPLATE_CATEGORY_NAME : "kk_dialog_template_category_name",

	        DIALOG_TEMPLATE_LIST : "kk_dialog_template_list",
	        DIALOG_TEMPLATE_ITEM_TITLE : "kk_dialog_template_item_title",
	        DIALOG_TEMPLATE_ITEM_LIST : "kk_dialog_template_item_list",
	        DIALOG_TEMPLATE_ITEM : "kk_dialog_template_item",

	        DIALOG_TEMPLATE_CATEGORY_SELECTED : "category_selected",
	        DIALOG_TEMPLATE_ITEM_SELECTED : "template_selected",







	        // Dialog Text Paste
	        DIALOG_TEXT_PASTE : "kk_dialog_text_paste",
	        TEXT_PASTE_CONTENTS : 'kk_text_paste_contents',








	        // Dialog Symbol
	        DIALOG_SYMBOLS : "kk_dialog_symbols",
	        SYMBOLS_DIALOG_CONTENT_WRAP : "symbols_contents_wrap",
	        SYMBOLS_DIALOG_CONTENT : "symbols_contents",
	        SYMBOLS_DIALOG_FOOTER : "symbols_footer",
	        SELECTED_SYMBOL :'selected_symbol',
	        SELECTED_SYMBOL_TEXT :'selected_symbol_text_width',








	        // Dialog Background Image
	        DIALOG_BACKGROUND_IMAGE : "kk_dialog_background_image",
	        BACKGROUND_DIALOG_WRAPPER : 'kk_background_dialog_wrapper',
	        BACKGROUND_DIALOG_PROPERTY_FIELD : 'kk_background_dialog_field',
	        BACKGROUND_DIALOG_SET : 'kk_background_dialog_set',
	        BACKGROUND_DIALOG_SET_TD_LABEL : 'kk_background_dialog_set_td_label',
	        BACKGROUND_DIALOG_SET_TD_INPUT : 'kk_background_dialog_set_td_input',
	        BACKGROUND_DIALOG_ATTACHMENT_SELECT : 'kk_background_dialog_attachment_select',
	        BACKGROUND_DIALOG_REPEAT_SELECT : 'kk_background_dialog_repeat_select',

	        BACKGROUND_DIALOG_POSITION_X_INPUT : 'kk_background_dialog_position_x_input',
	        BACKGROUND_DIALOG_POSITION_Y_INPUT : 'kk_background_dialog_position_y_input',
	        BACKGROUND_DIALOG_COLOR_PICKER : 'kk_background_dialog_color_picker',

	        BACKGROUND_DIALOG_CLEAR_CHECKBOX : 'kk_background_dialog_clear_checkbox',






	        // Dialog Image
	        DIALOG_IMAGE : "kk_dialog_image",
	        IMAGE_DIALOG_TAB_MENUS : 'kk_image_dialog_tab_menus',
	        IMAGE_DIALOG_TAB_MENU_ITEM : 'kk_image_dialog_tab_menu_item',
	        IMAGE_DIALOG_TAB_MENU_COMMON : 'kk_image_dialog_tab_menu_common',
	        IMAGE_DIALOG_TAB_MENU_HYPERLINK : 'kk_image_dialog_tab_menu_hyperlink',
	        IMAGE_DIALOG_TAB_MENU_ON : 'kk_image_dialog_tab_menu_on',

	        IMAGE_DIALOG_TAB_CONTENTS : 'kk_image_dialog_tab_menu_contents',
	        IMAGE_DIALOG_TAB_CONTENTS_COMMON : 'kk_image_dialog_tab_menu_contents_common',
	        IMAGE_DIALOG_TAB_CONTENTS_HYPERLINK : 'kk_image_dialog_tab_menu_contents_hyperlink',
	        IMAGE_DIALOG_TAB_CONTENTS_ON : 'kk_image_dialog_tab_menu_contents_on',

	        IMAGE_DIALOG_TABLE_TD_LABEL : 'kk_image_dialog_table_td_label',
	        IMAGE_DIALOG_TABLE_TD_INPUT : 'kk_image_dialog_table_td_input',

	        IMAGE_DIALOG_TAB_CONTENTS_PATH_PROPERTY_FIELD : 'kk_image_dialog_tab_menu_contents_path_property_field',
	        IMAGE_DIALOG_TAB_CONTENTS_PATH_TABLE_SET : 'kk_image_dialog_tab_menu_contents_path_table_set',

	        IMAGE_DIALOG_IMAGE_TITLE_INPUT : 'kk_image_dialog_common_image_title_input',
	        IMAGE_DIALOG_IMAGE_ALT_INPUT : 'kk_image_dialog_common_image_alt_input',


	        IMAGE_DIALOG_TAB_CONTENTS_STYLE_PROPERTY_FIELD : 'kk_image_dialog_tab_menu_contents_style_property_field',
	        IMAGE_DIALOG_TAB_CONTENTS_STYLE_TABLE_SET : 'kk_image_dialog_tab_menu_contents_style_table_set',

	        IMAGE_DIALOG_IMAGE_WIDTH_INPUT : 'kk_image_dialog_common_image_width_input',
	        IMAGE_DIALOG_IMAGE_HEIGHT_INPUT : 'kk_image_dialog_common_image_height_input',
	        IMAGE_DIALOG_IMAGE_MARGIN_LEFT_INPUT : 'kk_image_dialog_common_image_margin_left_input',
	        IMAGE_DIALOG_IMAGE_MARGIN_RIGHT_INPUT : 'kk_image_dialog_common_image_margin_right_input',
	        IMAGE_DIALOG_IMAGE_MARGIN_TOP_INPUT : 'kk_image_dialog_common_image_margin_top_input',
	        IMAGE_DIALOG_IMAGE_MARGIN_BOTTOM_INPUT : 'kk_image_dialog_common_image_margin_bottom_input',

	        IMAGE_DIALOG_IMAGE_ALIGN_SELECT : 'kk_image_dialog_common_image_align_select',

	        IMAGE_DIALOG_IMAGE_ID_INPUT : 'kk_image_dialog_common_image_id_input',
	        IMAGE_DIALOG_IMAGE_CLASS_INPUT : 'kk_image_dialog_common_image_class_input',

	        IMAGE_DIALOG_IMAGE_BORDER_SELECT : 'kk_image_dialog_common_image_border_select',
	        IMAGE_DIALOG_IMAGE_BORDER_WIDTH_INPUT : 'kk_image_dialog_common_image_border_width_input',
	        IMAGE_DIALOG_IMAGE_BORDER_COLOR_PICKER : 'kk_image_dialog_common_image_border_color_picker',

	        IMAGE_DIALOG_IMAGE_ORIGINAL_SIZE_CHECK : 'kk_image_dialog_common_image_original_size_check',
	        IMAGE_DIALOG_IMAGE_NEXT_INSERT_CHECK : 'kk_image_dialog_common_image_next_insert_check',








	        // Dialog Video
	        DIALOG_VIDEO : "kk_dialog_video",
	        VIDEO_TYPE_WRAP : 'kk_video_type_wrap',
	        VIDEO_TYPE_LABEL : 'kk_video_type_label',
	        VIDEO_TYPE_SELECT : 'kk_video_type_select',

	        VIDEO_TYPE_FILE_CONTENTS : 'kk_video_type_file_contents',
	        VIDEO_TYPE_SOURCE_CONTENTS : 'kk_video_type_source_contents',
	        VIDEO_CONTENTS_ON : 'kk_video_contents_on',

	        VIDEO_TYPE_FILE_CONTENTS_SET : 'kk_video_type_file_contents_set',
	        VIDEO_TYPE_FILE_LABEL_WRAP : 'kk_video_type_file_label_wrap',
	        VIDEO_TYPE_FILE_INPUT_WRAP : 'kk_video_type_file_input_wrap',
	        VIDEO_WIDTH_INPUT : 'kk_video_type_file_width',
	        VIDEO_HEIGHT_INPUT : 'kk_video_type_file_height',

	        VIDEO_TYPE_FILE_OPTIONS_SET : 'kk_video_type_file_options_set',
	        VIDEO_TYPE_FILE_OPTIONS_CHECK_INPUT_WRAP : 'kk_video_type_file_options_check_input_wrap',

	        VIDEO_AUTO_PLAY_CHECK : 'kk_video_type_auto_play_check',
	        VIDEO_INFINITY_LOOP_CHECK : 'kk_video_type_infinity_loop_check',
	        VIDEO_SHOW_TRACKER_CHECK : 'kk_video_type_show_tracker_check',
	        VIDEO_SHOW_STATUS_CHECK : 'kk_video_type_show_status_check',
	        VIDEO_SHOW_CONTROLS_CHECK : 'kk_video_type_show_controls_check',
	        VIDEO_SHOW_VOLUME_CHECK : 'kk_video_type_show_volume_check',
	        VIDEO_SHOW_DISPLAY_CHECK : 'kk_video_type_show_display_check',
	        VIDEO_SHOW_POSITION_CHECK : 'kk_video_type_show_position_check',

	        VIDEO_TYPE_FILE_CONTENTS_SEPARATE : 'url_input_plugin_separate',

	        VIDEO_TYPE_SOURCE_SET : 'kk_video_type_source_set',
	        VIDEO_TYPE_SOURCE_TEXTAREA : 'kk_video_type_source_textarea',






	        // Dialog Auto Save Load
	        DIALOG_AUTO_SAVE_LOAD_OPEN : "kk_dialog_auto_save_load",
	        AUTO_SAVE_LOAD_INFO_WRAPPER : "kk_dialog_auto_save_load_info_wrapper",
	        AUTO_SAVE_LOAD_INFO_LIST : "kk_dialog_auto_save_load_info_list",
	        AUTO_SAVE_LOAD_INFO_LIST_NAME : "kk_dialog_auto_save_load_info_list_name",

	        AUTO_SAVE_LOAD_INFO_LIST_ITEM_WRAPPER : "kk_dialog_auto_save_load_info_list_item_wrapper",
	        AUTO_SAVE_LOAD_INFO_LIST_ITEM : "kk_dialog_auto_save_load_info_list_item",
	        AUTO_SAVE_LOAD_INFO_LIST_ITEM_SELECTED : "selected_save",

	        AUTO_SAVE_LOAD_INFO_PREVIEW : "kk_dialog_auto_save_load_info_preview",

	        AUTO_SAVE_LOAD_DISABLED_BUTTON : "kk_dialog_auto_save_load_disabled",







	        // Dialog File Link
	        DIALOG_FILE : "kk_dialog_file",
	        FILE_DIALOG_CONTENTS : 'kk_file_dialog_contents',
	        FILE_CONTENTS_SET : 'kk_file_contents_set',
	        FILE_LABEL_WRAP : 'kk_file_label_wrap',
	        FILE_INPUT_WRAP : 'kk_file_input_wrap',
	        FILE_DIALOG_TEXT_INPUT : 'kk_file_text_input',
	        FILE_DIALOG_TITLE_INPUT : 'kk_file_title_input',
	        FILE_DIALOG_ID_INPUT : 'kk_file_id_input',
	        FILE_DIALOG_CLASS_INPUT : 'kk_file_class_input',








	        // Dialog Emoticon
	        DIALOG_EMOTICON : "kk_dialog_emoticon",
	        EMOTICON_WRAPPER : 'kk_emoticon_wrapper',
	        EMOTICON_ITEM : 'kk_emoticon_item',
	        EMOTICON_INPUT_WRAPPER : 'kk_emoticon_input_wrapper',
	        EMOTICON_INPUT : 'kk_emoticon_input',








	        // Dialog Layer
	        DIALOG_LAYER : "kk_dialog_layer",
	        DIALOG_LAYER_WRAPPER : "kk_dialog_layer_wrapper",
	        DIALOG_LAYER_FIELD_SET : "kk_dialog_layer_field_set",
	        DIALOG_LAYER_SET_TD_LABEL : "kk_dialog_layer_td_label",
	        DIALOG_LAYER_SET_TD_INPUT : "kk_dialog_layer_td_input",

	        DIALOG_LAYER_SET_WIDTH_INPUT : "kk_dialog_layer_width_input",
	        DIALOG_LAYER_SET_HEIGHT_INPUT : "kk_dialog_layer_height_input",
	        DIALOG_LAYER_SET_POSITION_X_INPUT : "kk_dialog_layer_position_x_input",
	        DIALOG_LAYER_SET_POSITION_Y_INPUT : "kk_dialog_layer_position_y_input",
	        DIALOG_LAYER_SET_ID_INPUT : "kk_dialog_layer_id_input",
	        DIALOG_LAYER_SET_CLASS_INPUT : "kk_dialog_layer_class_input",










	        // Dialog Horizontal
	        DIALOG_HORIZONTAL : "kk_dialog_horizontal",
	        HORIZONTAL_DIALOG_WRAPPER : 'kk_horizontal_dialog_wrapper',
	        HORIZONTAL_DIALOG_COMMON_FIELD : 'kk_horizontal_dialog_common_field',

	        HORIZONTAL_DIALOG_TABLE : 'kk_horizontal_dialog_table',
	        HORIZONTAL_DIALOG_TABLE_TD_LABEL : 'kk_horizontal_dialog_table_td_label',
	        HORIZONTAL_DIALOG_TABLE_TD_INPUT : 'kk_horizontal_dialog_table_td_input',

	        HORIZONTAL_DIALOG_WIDTH_INPUT : 'kk_horizontal_dialog_width',
	        HORIZONTAL_DIALOG_HEIGHT_INPUT : 'kk_horizontal_dialog_height',
	        HORIZONTAL_DIALOG_COLOR_PICKER : 'kk_horizontal_dialog_color_picker',
	        HORIZONTAL_DIALOG_ALIGN_SELECT : 'kk_horizontal_dialog_align_select',

	        HORIZONTAL_DIALOG_TEMPLATE_FIELD : 'kk_horizontal_dialog_template_field',
	        HORIZONTAL_DIALOG_TEMPLATE_TITLE : 'kk_horizontal_dialog_template_title',
	        HORIZONTAL_DIALOG_TEMPLATE_ON : 'kk_horizontal_dialog_template_on',








	        // Dialog UpperLower Change
	        DIALOG_UPPER_LOWER : "kk_dialog_upper_lower",
	        UPPER_LOWER_DIALOG_CONTENTS : 'kk_upper_lower_dialog_contents',







	        // Dialog Block Quote
	        DIALOG_BLOCK_QUOTE : "kk_dialog_blockquote",
	        BLOCKQUOTE_DIALOG_CONTENTS : 'kk_blockquote_dialog_contents',








	        // Dialog Paragraph
	        DIALOG_PARAGRAPH : "kk_dialog_paragraph",
	        PARAGRAPH_MARGIN_LEFT : "kk_paragraph_margin_left",
	        PARAGRAPH_MARGIN_RIGHT : "kk_paragraph_margin_right",
	        PARAGRAPH_MARGIN_TOP : "kk_paragraph_margin_top",
	        PARAGRAPH_MARGIN_BOTTOM : "kk_paragraph_margin_bottom",
	        PARAGRAPH_LETTER_SPACING : "kk_paragraph_letter_spacing",
	        PARAGRAPH_WORD_SPACING : "kk_paragraph_word_spacing",








	        // Dialog Date Format
	        DIALOG_DATE_FORMAT : "kk_dialog_date_format",
	        DATE_FORMAT_LIST : 'kk_date_format_list',
	        DATE_FORMAT_ITEM : 'kk_date_format_item',
	        DATE_FORMAT_ITEM_SELECTED : 'date_format_item_selected',








	        // Dialog Bookmark
	        DIALOG_BOOKMARK : "kk_dialog_bookmark",
	        BOOKMARK_EDIT_AREA : 'kk_bookmark_edit_area',
	        BOOKMARK_EDIT_AREA_WRAP : 'kk_bookmark_edit_area_wrap',
	        BOOKMARK_EDIT_LABEL : 'kk_bookmark_edit_label',
	        BOOKMARK_EDIT_INPUT : 'kk_bookmark_edit_input',
	        BOOKMARK_BUTTON : 'kk_bookmark_button',
	        BOOKMARK_BUTTON_ADD : 'kk_bookmark_button_add',
	        BOOKMARK_BUTTON_MODIFY : 'kk_bookmark_button_modify',
	        BOOKMARK_BUTTON_DELETE : 'kk_bookmark_button_delete',
	        BOOKMARK_BUTTON_DISABLED : 'kk_bookmark_button_disabled',

	        BOOKMARK_LIST_AREA : 'kk_bookmark_list_area',
	        BOOKMARK_LIST_AREA_WRAP : 'kk_bookmark_list_area_wrap',
	        BOOKMARK_LIST_AREA_LABEL_WRAP : 'kk_bookmark_list_area_label_wrap',
	        BOOKMARK_LIST : 'kk_bookmark_list',
	        BOOKMARK_LIST_ITEM : 'kk_bookmark_list_item',
	        SELECTED_BOOKMARK : 'selected_bookmark',

	        KK_BOOKMARK_VIEW : 'kk_bookmark_view',






	        // Dialog Table
	        DIALOG_TABLE : "kk_dialog_table",
	        TABLE_DIALOG_TAB_MENUS : 'kk_table_dialog_tab_menus',
	        TABLE_DIALOG_TAB_MENU_ITEM : 'kk_table_dialog_tab_menu_item',
	        TABLE_DIALOG_TAB_MENU_COMMON : 'kk_table_dialog_tab_menu_common',
	        TABLE_DIALOG_TAB_MENU_BACKGROUND : 'kk_table_dialog_tab_menu_background',
	        TABLE_DIALOG_TAB_MENU_TAMPLATE : 'kk_table_dialog_tab_menu_template',
	        TABLE_DIALOG_TAB_MENU_ON : 'kk_table_dialog_tab_menu_on',

	        TABLE_DIALOG_TAB_CONTENTS : 'kk_table_dialog_tab_menu_contents',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON : 'kk_table_dialog_tab_menu_contents_common',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND : 'kk_table_dialog_tab_menu_contents_background',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE : 'kk_table_dialog_tab_menu_contents_template',

	        TABLE_DIALOG_TAB_CONTENTS_ON : 'kk_table_dialog_tab_menu_contents_on',

	        TABLE_DIALOG_TAB_CONTENTS_COMMON_PROPERTY_FIELD : 'kk_table_dialog_tab_menu_contents_common_property_field',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_BORDER_FIELD : 'kk_table_dialog_tab_menu_contents_common_border_field',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_CAPTION_FIELD : 'kk_table_dialog_tab_menu_contents_common_caption_field',

	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_SET : 'kk_table_dialog_tab_menu_contents_common_table_set',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_LABEL : 'kk_table_dialog_tab_menu_contents_common_table_td_label',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_td_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_CHECK : 'kk_table_dialog_tab_menu_contents_common_table_td_check',

	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ROW_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_row_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_COL_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_col_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_WIDTH_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_width_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_HEIGHT_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_height_input',

	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_MARGIN_LEFT_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_margin_left_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ALIGN_SELECT : 'kk_table_dialog_tab_menu_contents_common_table_align_select',

	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ID_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_id_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_CLASS_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_class_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_SEPARATE_CHECK : 'kk_table_dialog_tab_menu_contents_common_table_separate_check',


	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_SET : 'kk_table_dialog_tab_menu_contents_border_table_set',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_LABEL : 'kk_table_dialog_tab_menu_contents_border_table_td_label',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_INPUT : 'kk_table_dialog_tab_menu_contents_border_table_td_input',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_WRAP: 'kk_table_dialog_tab_menu_contents_border_type_wrap',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM: 'kk_table_dialog_tab_menu_contents_border_type_item',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_LABEL: 'kk_table_dialog_tab_menu_contents_border_type_label',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_SOLID: 'kk_table_dialog_tab_menu_contents_border_type_solid',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOUBLE: 'kk_table_dialog_tab_menu_contents_border_type_double',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DASHED: 'kk_table_dialog_tab_menu_contents_border_type_dashed',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOTTED: 'kk_table_dialog_tab_menu_contents_border_type_dotted',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE: 'kk_table_dialog_tab_menu_contents_border_type_none',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE_LABEL: 'kk_table_dialog_tab_menu_contents_border_type_none_label',

	        BORDER_ITEM_SELECTED: 'border_item_selected',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BORDER_COLOR_PICKER : 'kk_table_dialog_tab_menu_contents_border_table_border_color_picker',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BORDER_WIDTH_INPUT : 'kk_table_dialog_tab_menu_contents_border_table_border_width_input',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_CELL_SPACING_INPUT : 'kk_table_dialog_tab_menu_contents_border_table_cell_spacing_input',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_CELL_PADDING_INPUT : 'kk_table_dialog_tab_menu_contents_border_table_cell_padding_input',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_WRAP: 'kk_table_dialog_tab_menu_contents_border_line_wrap',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU: 'kk_table_dialog_tab_menu_contents_border_line_menu',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ITEM: 'kk_table_dialog_tab_menu_contents_border_line_menu_item',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_OUTLINE: 'kk_table_dialog_tab_menu_contents_border_line_menu_outline',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_INNER: 'kk_table_dialog_tab_menu_contents_border_line_menu_inner',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ALL: 'kk_table_dialog_tab_menu_contents_border_line_menu_all',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_LABEL: 'kk_table_dialog_tab_menu_contents_border_line_menu_label',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER: 'kk_table_dialog_tab_menu_contents_border_line_controller',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_TABLE: 'kk_table_dialog_tab_menu_contents_border_line_controller_table',


	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_WRAP : 'kk_table_dialog_tab_menu_contents_border_line_controller_wrap',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS: 'kk_table_dialog_tab_menu_contents_border_line_controller_buttons',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_TOP: 'kk_table_dialog_tab_menu_contents_border_line_controller_left_top',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_MIDDLE: 'kk_table_dialog_tab_menu_contents_border_line_controller_left_middle',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_BOTTOM: 'kk_table_dialog_tab_menu_contents_border_line_controller_left_bottom',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_LEFT: 'kk_table_dialog_tab_menu_contents_border_line_controller_bottom_left',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_CENTER: 'kk_table_dialog_tab_menu_contents_border_line_controller_bottom_center',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_RIGHT: 'kk_table_dialog_tab_menu_contents_border_line_controller_bottom_right',


	        TABLE_DIALOG_TAB_CONTENTS_CAPTION_TABLE_SET : 'kk_table_dialog_tab_menu_contents_caption_table_set',
	        TABLE_DIALOG_TAB_CONTENTS_CAPTION_TABLE_TD_LABEL : 'kk_table_dialog_tab_menu_contents_caption_table_td_label',
	        TABLE_DIALOG_TAB_CONTENTS_CAPTION_TABLE_TD_INPUT : 'kk_table_dialog_tab_menu_contents_caption_table_td_input',

	        TABLE_DIALOG_TAB_CONTENTS_TABLE_CAPTION_INPUT : 'kk_table_dialog_tab_menu_contents_caption_input',
	        TABLE_DIALOG_TAB_CONTENTS_TABLE_SUMMARY_INPUT : 'kk_table_dialog_tab_menu_contents_summary_input',

	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_PROPERTY_FIELD : 'kk_table_dialog_tab_menu_contents_background_property_field',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_SET : 'kk_table_dialog_tab_menu_contents_background_table_set',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_LABEL : 'kk_table_dialog_tab_menu_contents_background_table_td_label',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_INPUT : 'kk_table_dialog_tab_menu_contents_background_table_td_input',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_ATTACHMENT_SELECT : 'kk_table_dialog_tab_menu_contents_background_attachment_select',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_REPEAT_SELECT : 'kk_table_dialog_tab_menu_contents_background_repeat_select',

	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_X_INPUT : 'kk_table_dialog_tab_menu_contents_background_position_x_input',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_Y_INPUT : 'kk_table_dialog_tab_menu_contents_background_position_y_input',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BACKGROUND_COLOR_PICKER : 'kk_table_dialog_tab_menu_contents_border_table_background_color_picker',

	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_FIELD : 'kk_table_dialog_tab_menu_contents_background_header_field',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_SCOPE_WRAP : 'kk_table_dialog_tab_menu_contents_background_scope_wrap',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_SCOPE_CHECK : 'kk_table_dialog_tab_menu_contents_background_scope_check',

	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_WRAP : 'kk_table_dialog_tab_menu_contents_background_header_wrap',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM : 'kk_table_dialog_tab_menu_contents_background_header_item',
	        TABLE_BACKGROUND_HEADER_ITEM_SELECTED : 'background_header_item_selected',
	        TABLE_BACKGROUND_HEADER_NONE : 'background_header_item_none',
	        TABLE_BACKGROUND_HEADER_LEFT : 'background_header_item_left',
	        TABLE_BACKGROUND_HEADER_TOP : 'background_header_item_top',
	        TABLE_BACKGROUND_HEADER_LEFT_TOP : 'background_header_item_left_top',

	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM_LABEL : 'kk_table_dialog_tab_menu_contents_background_header_item_label',


	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_PROPERTY_FIELD : 'kk_table_template_property_field',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_SET : 'kk_table_template_set',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_TD_LABEL : 'kk_table_template_td_label',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_TD_INPUT : 'kk_table_template_td_input',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_ROW_INPUT : 'kk_table_template_row_input',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_COL_INPUT : 'kk_table_template_col_input',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_WIDTH_INPUT : 'kk_table_template_width_input',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_HEIGHT_INPUT : 'kk_table_template_height_input',

	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_FIELD : 'kk_table_template_header_field',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_SCOPE_WRAP : 'kk_table_template_scope_wrap',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_SCOPE_CHECK : 'kk_table_template_scope_check',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_WRAP : 'kk_table_template_header_wrap',

	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_ITEM : 'kk_table_template_header_item',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_ITEM_LABEL : 'kk_table_template_header_item_label',

	        TABLE_TEMPLATE_ITEM_SELECTED : 'template_header_item_selected',

	        TABLE_TEMPLATE_HEADER_ITEM : 'template_header_item',








	        // Dialog Cell
	        DIALOG_CELL : "kk_dialog_cell",
	        CELL_DIALOG_TAB_MENUS : 'kk_cell_dialog_tab_menus',
	        CELL_DIALOG_TAB_MENU_ITEM : 'kk_cell_dialog_tab_menu_item',
	        CELL_DIALOG_TAB_MENU_COMMON : 'kk_cell_dialog_tab_menu_common',
	        CELL_DIALOG_TAB_MENU_BACKGROUND : 'kk_cell_dialog_tab_menu_background',
	        CELL_DIALOG_TAB_MENU_ON : 'kk_cell_dialog_tab_menu_on',

	        CELL_DIALOG_TAB_CONTENTS : 'kk_cell_dialog_tab_menu_contents',
	        CELL_DIALOG_TAB_CONTENTS_COMMON : 'kk_cell_dialog_tab_menu_contents_common',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND : 'kk_cell_dialog_tab_menu_contents_background',
	        CELL_DIALOG_TAB_CONTENTS_ON : 'kk_cell_dialog_tab_menu_contents_on',

	        CELL_DIALOG_TAB_CONTENTS_COMMON_PROPERTY_FIELD : 'kk_cell_dialog_tab_menu_contents_common_property_field',
	        CELL_DIALOG_TAB_CONTENTS_COMMON_HEADER_FIELD : 'kk_cell_dialog_tab_menu_contents_common_header_field',
	        CELL_DIALOG_TAB_CONTENTS_COMMON_BORDER_FIELD : 'kk_cell_dialog_tab_menu_contents_common_border_field',


	        CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_SET : 'kk_cell_dialog_tab_menu_contents_common_cell_set',
	        CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_TD_LABEL : 'kk_cell_dialog_tab_menu_contents_common_cell_td_label',
	        CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_TD_INPUT : 'kk_cell_dialog_tab_menu_contents_common_cell_td_input',


	        CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_VERTICAL_ALIGN_SELECT : 'kk_cell_dialog_tab_menu_contents_common_cell_vertical_align_select',
	        CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_ALIGN_SELECT : 'kk_cell_dialog_tab_menu_contents_common_cell_align_select',
	        CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_WHITE_SPACE_SELECT : 'kk_cell_dialog_tab_menu_contents_common_cell_white_space_select',



	        CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_SET : 'kk_cell_dialog_tab_menu_contents_header_cell_set',
	        CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_TD_LABEL : 'kk_cell_dialog_tab_menu_contents_header_cell_td_label',
	        CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_TD_INPUT : 'kk_cell_dialog_tab_menu_contents_header_cell_td_input',

	        CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_HEADER_SELECT : 'kk_cell_dialog_tab_menu_contents_header_cell_header_select',
	        CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_SCOPE_SELECT : 'kk_cell_dialog_tab_menu_contents_header_cell_scope_select',


	        CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_SET : 'kk_cell_dialog_tab_menu_contents_border_cell_set',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_LABEL : 'kk_cell_dialog_tab_menu_contents_border_cell_td_label',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_INPUT : 'kk_cell_dialog_tab_menu_contents_border_cell_td_input',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_WRAP: 'kk_cell_dialog_tab_menu_contents_border_type_wrap',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM: 'kk_cell_dialog_tab_menu_contents_border_type_item',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_LABEL: 'kk_cell_dialog_tab_menu_contents_border_type_label',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_SOLID: 'kk_cell_dialog_tab_menu_contents_border_type_solid',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOUBLE: 'kk_cell_dialog_tab_menu_contents_border_type_double',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DASHED: 'kk_cell_dialog_tab_menu_contents_border_type_dashed',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOTTED: 'kk_cell_dialog_tab_menu_contents_border_type_dotted',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE: 'kk_cell_dialog_tab_menu_contents_border_type_none',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE_LABEL: 'kk_cell_dialog_tab_menu_contents_border_type_none_label',

	        CELL_BORDER_ITEM_SELECTED: 'cell_border_item_selected',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BORDER_COLOR_PICKER : 'kk_cell_dialog_tab_menu_contents_border_cell_border_color_picker',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BORDER_WIDTH_INPUT : 'kk_cell_dialog_tab_menu_contents_border_cell_border_width_input',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_WRAP: 'kk_cell_dialog_tab_menu_contents_border_line_wrap',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU: 'kk_cell_dialog_tab_menu_contents_border_line_menu',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ITEM: 'kk_cell_dialog_tab_menu_contents_border_line_menu_item',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_OUTLINE: 'kk_cell_dialog_tab_menu_contents_border_line_menu_outline',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_INNER: 'kk_cell_dialog_tab_menu_contents_border_line_menu_inner',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ALL: 'kk_cell_dialog_tab_menu_contents_border_line_menu_all',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_LABEL: 'kk_cell_dialog_tab_menu_contents_border_line_menu_label',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER: 'kk_cell_dialog_tab_menu_contents_border_line_controller',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_WRAP : 'kk_cell_dialog_tab_menu_contents_border_line_controller_wrap',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_CELL: 'kk_cell_dialog_tab_menu_contents_border_line_controller_cell',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS: 'kk_cell_dialog_tab_menu_contents_border_line_controller_buttons',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_TOP: 'kk_cell_dialog_tab_menu_contents_border_line_controller_left_top',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_MIDDLE: 'kk_cell_dialog_tab_menu_contents_border_line_controller_left_middle',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_BOTTOM: 'kk_cell_dialog_tab_menu_contents_border_line_controller_left_bottom',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_LEFT: 'kk_cell_dialog_tab_menu_contents_border_line_controller_bottom_left',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_CENTER: 'kk_cell_dialog_tab_menu_contents_border_line_controller_bottom_center',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_RIGHT: 'kk_cell_dialog_tab_menu_contents_border_line_controller_bottom_right',


	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_PROPERTY_FIELD : 'kk_cell_dialog_tab_menu_contents_background_property_field',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_SET : 'kk_cell_dialog_tab_menu_contents_background_cell_set',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_LABEL : 'kk_cell_dialog_tab_menu_contents_background_cell_td_label',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_INPUT : 'kk_cell_dialog_tab_menu_contents_background_cell_td_input',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_ATTACHMENT_SELECT : 'kk_cell_dialog_tab_menu_contents_background_attachment_select',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_REPEAT_SELECT : 'kk_cell_dialog_tab_menu_contents_background_repeat_select',

	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_X_INPUT : 'kk_cell_dialog_tab_menu_contents_background_position_x_input',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_Y_INPUT : 'kk_cell_dialog_tab_menu_contents_background_position_y_input',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BACKGROUND_COLOR_PICKER : 'kk_cell_dialog_tab_menu_contents_border_cell_background_color_picker',








	        // Dialog Layout
	        DIALOG_LAYOUT : "kk_dialog_layout",
	        DIALOG_LAYOUT_ITEM_WRAPPER : "kk_dialog_layout_item_wrapper",
	        DIALOG_LAYOUT_ITEM_LIST : "kk_dialog_layout_item_list",
	        DIALOG_LAYOUT_ITEM : "kk_dialog_layout_item",
	        DIALOG_LAYOUT_ITEM_SEQ : "kk_dialog_layout_item_seq",
	        DIALOG_LAYOUT_ITEM_SELECTED : "kk_dialog_layout_item_selected",








	        // Dialog Settings
	        DIALOG_SETTING : "kk_dialog_setting",
	        SETTING_PAGE_TITLE_WRAPPER : 'kk_setting_page_title_wrapper',
	        SETTING_PAGE_TITLE_LABEL : 'kk_setting_page_title_label',
	        SETTING_PAGE_TITLE_INPUT : 'kk_setting_page_title_input',

	        SETTING_PAGE_ENCODING_WRAPPER : 'kk_setting_encoding_wrapper',
	        SETTING_PAGE_ENCODING_LABEL : 'kk_setting_encoding_label',
	        SETTING_PAGE_ENCODING_SELECTION : 'kk_setting_encoding_selection',
	        SETTING_PAGE_ENCODING_INPUT : 'kk_setting_encoding_input',

	        SETTING_PAGE_LANGUAGE_WRAPPER : 'kk_setting_language_wrapper',
	        SETTING_PAGE_LANGUAGE_LABEL : 'kk_setting_language_label',
	        SETTING_PAGE_LANGUAGE_SELECTION : 'kk_setting_language_selection',

	        SETTING_PAGE_DOCUMENT_TYPE_WRAPPER : 'kk_setting_document_type_wrapper',
	        SETTING_PAGE_DOCUMENT_TYPE_LABEL : 'kk_setting_document_type_label',
	        SETTING_PAGE_DOCUMENT_TYPE_SELECTION : 'kk_setting_document_type_selection',


	        SETTING_PAGE_AUTO_SAVE_WRAPPER : 'kk_setting_auto_save_wrapper',
	        SETTING_PAGE_AUTO_SAVE_LABEL : 'kk_setting_auto_save_label',
	        SETTING_PAGE_AUTO_SAVE_CHECKBOX : 'kk_setting_auto_save_checkbox',
	        SETTING_PAGE_AUTO_SAVE_MINUTE_INPUT : 'kk_setting_auto_save_input',








	        // Dialog About
	        DIALOG_ABOUT : "kk_dialog_about",
	        ABOUT_LOGO : "kk_about_logo",
	        ABOUT_EDITOR_TITLE_COMPANY_NAME : "kk_editor_company_name",
	        ABOUT_EDITOR_TITLE_SUB_NAME : "kk_editor_sub_name",

	        ABOUT_EDITOR_INFORMATION_WRAPPER : "kk_editor_about_information_wrapper",
	        ABOUT_EDITOR_INFORMATION_TABLE : "kk_editor_about_information_table",
	        ABOUT_EDITOR_INFORMATION_LINE : "kk_editor_about_information_line",







	        // Find Replace에 관련하여 사용되는 Class
	        FIND_REPLACE_CONTENTS : 'findreplace_contents',
	        FIND_REPLACE_ITEMS : 'findreplace_items',
	        FIND_REPLACE_TITLE : 'findreplace_title',
	        FIND_REPLACE_AREA : 'findreplaceArea',

	        FIND_LABEL_AREA : 'labelArea',
	        FIND_INPUT_AREA : 'inputArea',
	        FIND_BUTTON_AREA : 'buttonArea',

	        FIND_BUTTON_CLASS : 'findButton',
	        REPLACE_BUTTON_CLASS : 'replaceButton',

	        FIND_INPUT_LABEL_CLASS : 'findLabel',
	        FIND_INPUT_CLASS : 'findInputText',
	        REPLACE_INPUT_LABEL_CLASS : 'replaceLabel',
	        REPLACE_INPUT_CLASS : 'replaceInputText',


	        FIND_OPTION_LABEL_AREA : 'optionLabelArea',
	        FIND_DIRECTION_LABEL_AREA : 'directionLabelArea',

	        FIND_REPLACE_TEXT_CASE_WRAP : 'textCaseWrap',
	        FIND_REPLACE_TEXT_CASE_CHECK : 'caseCheck',

	        FIND_REPLACE_RESTART_WRAP : 'restartWrap',
	        FIND_REPLACE_RESTART_CHECK : 'restartCheck',

	        FIND_REPLACE_WORD_WRAP : 'wordWrap',
	        FIND_REPLACE_WORD_CHECK : 'wordCheck',

	        FIND_REPLACE_DIRECTION_WRAP : 'directionWrap',
	        FIND_REPLACE_DIRECTION_UP_RADIO : 'directionUpRadio',
	        FIND_REPLACE_DIRECTION_DOWN_RADIO : 'directionDownRadio',


	        FIND_REPLACE_ALL_BUTTON : 'replaceAllButton',
	        FIND_REPLACE_CLOSE_BUTTON : 'closeButton',

	        FIND_TEXT_CASE : 'caseText',
	        FIND_RESTART : 'findRestart',
	        FIND_WORD: 'findRestart',

	        FIND_DIRECTION_UP: 'findDirectionUp',
	        FIND_DIRECTION_DOWN: 'findDirectionDown',









	        // HTML Parsing시 'Style Element' -> inner style 변환시 사용
	        PREFIX : "kuku",



	        // Toolbar Disable Class
	        DISABLED : "kk_disabled",
	        TOOLBAR_BUTTON_DISABLED : 'disabled',
	        COLOR_TRANSPARENT : 'color_transparent',



	        // Full Screen 여부 판별 Class
	        FULL_SCREEN : "kk_fullscreen",

	        // Page Break Class
	        PAGE_BREAK : "kk_page_break",


	        // Library 'Smart Spinner' 관련 Class
	        SMART_SPINNER : "smartspinner",
	        SMART_SPINNER_CUSTOM : "spinner_custom",


	        // Object Resize 관련 Class
	        RESIZE_HANDLER : 'resizable-handle',
	        RESIZE_HANDLER_OBJECT : 'resizable-handle-object',

	        // Object 선택 관련 구분 Class
	        KK_MODIFY_OBJECT : 'kk_modify_object',

	        // Table Size 조절 및 Move시 사용되는 Class
	        KK_ADD_PARAGRAPH : 'kk_add_paragraph',
	        KK_CELL_RESIZE_BAR_Y : 'kk_cell_resize_bar_y',
	        KK_CELL_RESIZE_BAR_X : 'kk_cell_resize_bar_x',
	        KK_TABLE_MOVE_LINE : 'kk_table_move_line',
	        KK_TABLE_ALL_SELECTION_BAR : 'kk_table_all_selection_bar',
	        KK_IMAGE_MOVE_BAR : 'kk_image_move_bar',
	        TABLE_RESIZE_TOOLTIP : 'resizable-handle-table-tooltip',


	        // File Upload시 사용되는 Class
	        UPLOAD_FORM: 'uploadForm',
	        POST_IFRAME : 'postiframe',
	        UPLOAD_LOADING : 'upload_loading',


	        // Mode 변환시 사용되는 Class
	        PROCESSING : 'kk-processing',
	        PROCESSING_MESSAGE : 'kk-processing-message',


	        // Mouse를 이용한 Resize시 Window Event로 처리되도록 Guard 처리시 사용되는 Class
	        GUARD_WRAPPING : 'kk_guard',


	        // List Format 지정시 Table & HR Element에 대한 Browser Error 발생 방지 Marking
	        LIST_MARKING : 'kk_lisk_marking',


	        // Table Insert시 Table Marking
	        TABLE_MARKING : 'kk_table_marking',


	        HOVER : 'hover',


	        // IE 전용 Font-Size 변경 Range Class
	        IE_FONT_RANGE : 'kk-ie-font-range',

	        // IE 전용 Font Tag Start & End Class
	        IE_FONT_START : 'kk-ie-font-start',
	        IE_FONT_END : 'kk-ie-font-end',

	        //IE Arrow Key Down시 적용 Class
	        IE_ARROW_KEY_DOWN : 'ie_arrow_key_down'
	    },

	    ID : {
	        // Bookmark 시에 사용되는 ID's
	        TEMP_START : 'temp-start',
	        TEMP_END : 'temp-end',

	        // Find / Replace시 사용되는 ID
	        FIND_INPUT_ID : 'findInputText',
	        REPLACE_INPUT_ID : 'replaceInputText',
	        FIND_BUTTON_ID : 'find',
	        REPLACE_BUTTON_ID : 'replace',
	        FIND_REPLACE_TEXT_CASE_CHECK : 'caseCheck',
	        FIND_REPLACE_RESTART_CHECK : 'restartCheck',
	        FIND_REPLACE_WORD_CHECK : 'wordCheck',
	        FIND_REPLACE_DIRECTION_UP_RADIO : 'directionUpRadio',
	        FIND_REPLACE_DIRECTION_DOWN_RADIO : 'directionDownRadio',


	        // HTML Export시 사용되는 ID
	        KK_EXPORT : 'kk_export',
	        EDITOR_STYLE : 'editor_style',

	        // TEXT Node TEMP ID
	        TEMP_TEXT_NODE : 'kk_temp_text_node'
	    },


	    // Hyperlink 적용시 Href에 임시로 적용시킬 Link
	    LINK_TO_CHANGE : 'LINK_TO_CHANGE',

	    // Bookmark에 사용할 Node Name
	    CUSTOM_BOOKMARK_NODE : 'bookmark',


	    // Event Attributes
	    EVENT_ATTRIBUTES :  ["ONMOUSEDOWN", "ONMOUSEENTER", "ONMOUSELEAVE", "ONMOUSEMOVE", "ONMOUSEOUT", "ONMOUSEOVER", "ONMOUSEUP", "ONMOUSEWHEEL", "ONMOVE", "ONMOVEEND", "ONMOVESTART", "ONOPENSTATECHANGE", "ONOUTOFSYNC", "ONPASTE", "ONPAUSE", "ONPLAYSTATECHANGE", "ONPROPERTYCHANGE", "ONREADYSTATECHANGE", "ONREPEAT", "ONRESET", "ONRESIZE", "ONRESIZEEND", "ONRESIZESTART", "ONRESUME", "ONREVERSE", "ONROWCLICK", "ONROWENTER", "ONROWEXIT", "ONROWOUT", "ONROWOVER", "ONROWSDELETE", "ONROWSINSERTED", "ONSAVE", "ONSCROLL", "ONSEEK", "ONSELECT", "ONSELECTIONCHANGE", "ONSELECTSTART", "ONSHOW", "ONSTART", "ONSTOP", "ONSUBMIT", "ONSYNCRESTORED", "ONTIMEERROR", "ONTRACKCHANGE", "ONUNLOAD", "ONURLFLIP", "ONABORT", "ONACTIVATE", "ONAFTERPRINT", "ONAFTERUPDATE", "ONBEFOREACTIVATE", "ONBEFORECOPY", "ONBEFORECUT", "ONBEFOREDEACTIVATE", "ONBEFOREEDITFOCUS", "ONBEFOREPASTE", "ONBEFOREPRINT", "ONBEFOREUNLOAD", "ONBEFOREUPDATE", "ONBEGIN", "ONBLUR", "ONBOUNCE", "ONCELLCHANGE", "ONCHANGE", "ONCLICK", "ONCONTENTREADY", "ONCONTENTSAVE", "ONCONTEXTMENU", "ONCONTROLSELECT", "ONCOPY", "ONCUT", "ONDATAAVAILABLE", "ONDATASETCHANGED", "ONDATASETCOMPLETE", "ONDBLCLICK", "ONDEACTIVATE", "ONDETACH", "ONDOCUMENTREADY", "ONDRAG", " ONDRAGDROP", "ONDRAGEND", "ONDRAGENTER", "ONDRAGLEAVE", "ONDRAGOVER", "ONDRAGSTART", "ONDROP", "ONEND", "ONERROR", "ONERRORUPDATE", "ONFILTERCHANGE", "ONFINISH", "ONFOCUS", "ONFOCUSIN", "ONFOCUSOUT", "ONHELP", "ONHIDE", "ONKEYDOWN", "ONKEYPRESS", "ONKEYUP", "ONLAYOUTCOMPLETE", "ONLOAD", "ONLOSECAPTURE", "ONMEDIACOMPLETE", "ONMEDIAERROR", "ONMEDIALOADFAILED"],


	    // Table Type Node Names
	    TABLE_TYPE : ['TABLE', 'CAPTION', 'THEAD', 'TBODY', 'TFOOT', 'COLGROUP', 'COL', 'TR', 'TD', 'TH'],

	    // Cell Type Node Names
	    CELL_TYPE : ['TD', 'TH'],


	    // Head 영역에 포함될 수 있는 Node Names
	    HEAD_NODES   : ['TITLE', 'STYLE', 'BASE', 'LINK', 'META', 'SCRIPT', 'NOSCRIPT'],


	    // List Type의 Node Names
	    LIST_NODES : ['OL', 'UL'],

	    // Block Type의 Node Names
	    BLOCK_NODES   : ['BODY', 'ADDRESS','ARTICLE','ASIDE','BLOCKQUOTE','CANVAS','DD','DIV','DL','DT','FIELDSET','FIGCAPTION','FIGURE','FOOTER','FORM','H1','H2','H3','H4','H5','H6','HEADER','HR','LI','MAIN','NAV','NOSCRIPT','OL','OUTPUT','P','PRE','SECTION','TABLE','TFOOT','UL','VIDEO','TD', 'TH'],

	    // Content Type의 Node Names
	    CONTENT_NODES  : ['A', 'SPAN', 'STRONG', 'B', 'I', 'CITE', 'EM', 'VAR', 'ADDRESS', 'DFN', 'U', 'INS', 'STRIKE', 'S', 'DEL', 'FONT', 'SUP', 'SUB', 'CODE'],

	    MS_SPECIAL_NODES  : ['O:P'],

	    // Single Type의 Node Names
	    SINGLE_NODES : ["AREA", "BASE", "BR", "COL", "COMMAND", "EMBED", "HR", "IMG", "INPUT", "KEYGEN", "LINK", "META", "PARAM", "SOURCE", "TRACK", "WBR"],

	    // Paragraph Type의 Node Names
	    PARAGRAPH_NODES  : ['P', 'LI', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'],

	    // Heading Type의 Node Names
	    HEADING_NODES  : ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'],


	    // 허용 File들에 대한 정의
	    HTML_TYPE_FILES : ['html', 'htm', 'txt'],
	    IMAGE_TYPE_FILES : ['png', 'jpg', 'jpeg', 'gif', 'bmp'],
	    IMAGE_TYPE_FILES_REG : /(.*?)\.(png|jpg|jpeg|gif|bmp|PNG|JPG|JPEG|GIF|BMP)$/,
	    VIDEO_TYPE_FILES : ['avi', 'wmv', 'asf', 'ogg', 'mp4', 'webm'],
	    FILE_TYPE_FILES : ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'pdf', 'hwp', 'hwpx'],


	    // NBSP String
	    NBSP : String.fromCharCode(160),


	    // Default Cell Border Style
	    DEFAULT_CELL_BORDER_STYLE : '1px solid #000000',

	    DEFAULT_TEXT_HTML_BR : '<br>',
	    DEFAULT_TEXT_HTML : '&nbsp;',
	    DEFAULT_PARAGRAPH_HTML : '<p' + paragraphDefaultStyle + '><br></p>',
	    DEFAULT_P_STYLE : '<p' + paragraphDefaultStyle + '>',


	    // Editor Mode Type Enum
	    EDITOR_MODE : 0,
	    HTML_MODE : 1,
	    TEXT_MODE : 2,
	    PREVIEW_MODE : 3,


	    // Editor Buffer Size 정의
	    EDITOR_HEIGHT_BUFFER_SIZE : 5,
	    EDITOR_WIDTH_BUFFER_SIZE : 16,
	    FOOTER_BUFFER_SIZE : 0,
	    BORDER_BUFFER_SIZE : 0,


	    // TEMP ID
	    TEMP : '___temp___',


	    // File Size 변환 정보
	    BYTE_TO_MB_SIZE : (1024 * 1024),
	    BYTE_LIMIT_SIZE : (1024 * 1024 * 5),
	    LIMIT_SIZE_TEXT : "5 MB",


	    // 임시 생성 Text Node에 포함될 UniCode 정의
	    UNICODE_ZERO_WIDTH_SPACE : "\u200B",
	    UNICODE_NBSP : "\u00A0",
	    UNICODE_IDEOGRAPHIC_SPACE : "\u3000",



	    //HTML MODE FLAG CODE

	    KUKUDOCS_FIRST_POSITION_FOR_HTML : '@@@@KUKUDOCS_FIRST@@@@',
	    KUKUDOCS_LAST_POSITION_FOR_HTML : '@@@@KUKULAST_LAST@@@@',



	    // List Type 정의
	    NUMBERED_LIST_ITEMS : ['numbered_decimal', 'numbered_decimal_leading_zero', 'numbered_alpha', 'numbered_upper_alpha', 'numbered_roman', 'numbered_upper_roman', 'numbered_lower_greek'],
	    BULLET_LIST_ITEMS : ['bullet_disc', 'bullet_circle', 'bullet_square'],

	    NUMBERED_LIST : [
	        {
	            id : 'numbered_decimal',
	            name : window.kukuResource.menuText.listName.numberList.numberStyle1,
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'numbered_decimal_leading_zero',
	            name : window.kukuResource.menuText.listName.numberList.numberStyle2,
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'numbered_alpha',
	            name : window.kukuResource.menuText.listName.numberList.alphabetStyle1,
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'numbered_upper_alpha',
	            name : window.kukuResource.menuText.listName.numberList.alphabetStyle2,
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'numbered_roman',
	            name : window.kukuResource.menuText.listName.numberList.romeStyle1,
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'numbered_upper_roman',
	            name : window.kukuResource.menuText.listName.numberList.romeStyle2,
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'numbered_lower_greek',
	            name : window.kukuResource.menuText.listName.numberList.greekStyle1,
	            title : '',
	            thumb : '',
	            className : ''
	        }
	    ],

	    BULLET_LIST : [
	        {
	            id : 'bullet_disc',
	            name : window.kukuResource.menuText.listName.bulletList.disc,
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'bullet_circle',
	            name : window.kukuResource.menuText.listName.bulletList.circle,
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'bullet_square',
	            name : window.kukuResource.menuText.listName.bulletList.square,
	            title : '',
	            thumb : '',
	            className : ''
	        }
	    ]
	};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	var $ = window.$;


	if (!$.fn.typeOf){
	    (function(o){
	        o.typeOf = function(node){
	            if ( ! node){
	                return null;
	            }

	            var objectTypeAttrs = [Define.ATTR_VALUE.KK_IMAGE];
	            var oType = { type : "none", realType : "none" };

	            if (node.nodeType == 3){
	                oType.type = oType.realType = "text";
	            }else{
	                var objClass = null;
	                o.each(objectTypeAttrs, function(attrValue){
	                    if ($(node).attr(Define.ATTR.KK_TYPE) == attrValue){
	                        objClass = attrValue;
	                        return false;
	                    }
	                });

	                if (objClass){
	                    oType.type = "object";
	                    oType.realType = objClass;
	                }
	            }

	            return oType;
	        }
	    })($);
	}

	if (!$.fn.attrAll) {
	    (function(old) {
	        $.fn.attrAll = function() {
	            if(arguments.length === 0) {
	                if(this.length === 0) {
	                    return null;
	                }

	                var obj = {};
	                $.each(this[0].attributes, function() {
	                    if(this.specified && this.value && this.value != "") {
	                        obj[this.name] = this.value;
	                    }
	                });
	                return obj;
	            }

	            return old.apply(this, arguments);
	        };
	    })($.fn.attr);
	}

	if (!$.fn.removeAttributes) {
	    $.fn.removeAttributes = function() {
	        return this.each(function () {
	            var attributes = $.map(this.attributes, function (item) {
	                return item.name;
	            });
	            var img = $(this);
	            $.each(attributes, function (i, item) {
	                img.removeAttr(item);
	            });
	        });
	    };
	}

	if (!$.browser){
	    /*!
	     * jQuery Browser Plugin 0.1.0
	     * https://github.com/gabceb/jquery-browser-plugin
	     *
	     * Original jquery-browser code Copyright 2005, 2015 jQuery Foundation, Inc. and other contributors
	     * http://jquery.org/license
	     *
	     * Modifications Copyright 2015 Gabriel Cebrian
	     * https://github.com/gabceb
	     *
	     * Released under the MIT license
	     *
	     * Date: 05-07-2015
	     */
	    /*global window: false */

	    (function (factory) {
	        //if (typeof define === 'function' && define.amd) {
	        //    // AMD. Register as an anonymous module.
	        //    define(['jquery'], function ($) {
	        //        return factory($);
	        //    });
	        //} else if (typeof module === 'object' && typeof module.exports === 'object') {
	        //    // Node-like environment
	        //    module.exports = factory(require('jquery'));
	        //} else {
	        // Browser globals
	        factory(window.jQuery);
	        //}
	    }(function(jQuery) {
	        "use strict";

	        function uaMatch( ua ) {
	            // If an UA is not provided, default to the current browser UA.
	            if ( ua === undefined ) {
	                ua = window.navigator.userAgent;
	            }
	            ua = ua.toLowerCase();

	            var match = /(edge)\/([\w.]+)/.exec( ua ) ||
	                /(opr)[\/]([\w.]+)/.exec( ua ) ||
	                /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
	                /(iemobile)[\/]([\w.]+)/.exec( ua ) ||
	                /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec( ua ) ||
	                /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec( ua ) ||
	                /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
	                /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
	                /(msie) ([\w.]+)/.exec( ua ) ||
	                ua.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec( ua ) ||
	                ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
	                [];

	            var platform_match = /(ipad)/.exec( ua ) ||
	                /(ipod)/.exec( ua ) ||
	                /(windows phone)/.exec( ua ) ||
	                /(iphone)/.exec( ua ) ||
	                /(kindle)/.exec( ua ) ||
	                /(silk)/.exec( ua ) ||
	                /(android)/.exec( ua ) ||
	                /(win)/.exec( ua ) ||
	                /(mac)/.exec( ua ) ||
	                /(linux)/.exec( ua ) ||
	                /(cros)/.exec( ua ) ||
	                /(playbook)/.exec( ua ) ||
	                /(bb)/.exec( ua ) ||
	                /(blackberry)/.exec( ua ) ||
	                [];

	            var browser = {},
	                matched = {
	                    browser: match[ 5 ] || match[ 3 ] || match[ 1 ] || "",
	                    version: match[ 2 ] || match[ 4 ] || "0",
	                    versionNumber: match[ 4 ] || match[ 2 ] || "0",
	                    platform: platform_match[ 0 ] || ""
	                };

	            if ( matched.browser ) {
	                browser[ matched.browser ] = true;
	                browser.version = matched.version;
	                browser.versionNumber = parseInt(matched.versionNumber, 10);
	            }

	            if ( matched.platform ) {
	                browser[ matched.platform ] = true;
	            }

	            // These are all considered mobile platforms, meaning they run a mobile browser
	            if ( browser.android || browser.bb || browser.blackberry || browser.ipad || browser.iphone ||
	                browser.ipod || browser.kindle || browser.playbook || browser.silk || browser[ "windows phone" ]) {
	                browser.mobile = true;
	            }

	            // These are all considered desktop platforms, meaning they run a desktop browser
	            if ( browser.cros || browser.mac || browser.linux || browser.win ) {
	                browser.desktop = true;
	            }

	            // Chrome, Opera 15+ and Safari are webkit based browsers
	            if ( browser.chrome || browser.opr || browser.safari ) {
	                browser.webkit = true;
	            }

	            // IE11 has a new token so we will assign it msie to avoid breaking changes
	            if ( browser.rv || browser.iemobile) {
	                var ie = "msie";

	                matched.browser = ie;
	                browser[ie] = true;
	            }

	            // Edge is officially known as Microsoft Edge, so rewrite the key to match
	            if ( browser.edge ) {
	                delete browser.edge;
	                var msedge = "msedge";

	                matched.browser = msedge;
	                browser[msedge] = true;
	            }

	            // Blackberry browsers are marked as Safari on BlackBerry
	            if ( browser.safari && browser.blackberry ) {
	                var blackberry = "blackberry";

	                matched.browser = blackberry;
	                browser[blackberry] = true;
	            }

	            // Playbook browsers are marked as Safari on Playbook
	            if ( browser.safari && browser.playbook ) {
	                var playbook = "playbook";

	                matched.browser = playbook;
	                browser[playbook] = true;
	            }

	            // BB10 is a newer OS version of BlackBerry
	            if ( browser.bb ) {
	                var bb = "blackberry";

	                matched.browser = bb;
	                browser[bb] = true;
	            }

	            // Opera 15+ are identified as opr
	            if ( browser.opr ) {
	                var opera = "opera";

	                matched.browser = opera;
	                browser[opera] = true;
	            }

	            // Stock Android browsers are marked as Safari on Android.
	            if ( browser.safari && browser.android ) {
	                var android = "android";

	                matched.browser = android;
	                browser[android] = true;
	            }

	            // Kindle browsers are marked as Safari on Kindle
	            if ( browser.safari && browser.kindle ) {
	                var kindle = "kindle";

	                matched.browser = kindle;
	                browser[kindle] = true;
	            }

	            // Kindle Silk browsers are marked as Safari on Kindle
	            if ( browser.safari && browser.silk ) {
	                var silk = "silk";

	                matched.browser = silk;
	                browser[silk] = true;
	            }

	            // Assign the name and platform variable
	            browser.name = matched.browser;
	            browser.platform = matched.platform;
	            return browser;
	        }

	        // Run the matching process, also assign the function to the returned object
	        // for manual, jQuery-free use if desired
	        window.jQBrowser = uaMatch( window.navigator.userAgent );
	        window.jQBrowser.uaMatch = uaMatch;

	        // Only assign to jQuery.browser if jQuery is loaded
	        if ( jQuery ) {
	            jQuery.browser = window.jQBrowser;
	        }

	        return window.jQBrowser;
	    }));
	}

	if (!$.fn.visible){
	    (function($){

	        /**
	         * Copyright 2012, Digital Fusion
	         * Licensed under the MIT license.
	         * http://teamdf.com/jquery-plugins/license/
	         *
	         * @author Sam Sehnert
	         * @desc A small plugin that checks whether elements are within
	         *       the user visible viewport of a web browser.
	         *       only accounts for vertical position, not horizontal.
	         */
	        var $w = $(window);
	        $.fn.visible = function(partial,hidden,direction){

	            if (this.length < 1)
	                return;

	            var $t        = this.length > 1 ? this.eq(0) : this,
	                t         = $t.get(0),
	                vpWidth   = $w.width(),
	                vpHeight  = $w.height(),
	                direction = (direction) ? direction : 'both',
	                clientSize = hidden === true ? t.offsetWidth * t.offsetHeight : true;

	            if (typeof t.getBoundingClientRect === 'function'){

	                // Use this native browser method, if available.
	                var rec = t.getBoundingClientRect(),
	                    tViz = rec.top    >= 0 && rec.top    <  vpHeight,
	                    bViz = rec.bottom >  0 && rec.bottom <= vpHeight,
	                    lViz = rec.left   >= 0 && rec.left   <  vpWidth,
	                    rViz = rec.right  >  0 && rec.right  <= vpWidth,
	                    vVisible   = partial ? tViz || bViz : tViz && bViz,
	                    hVisible   = partial ? lViz || rViz : lViz && rViz;

	                if(direction === 'both')
	                    return clientSize && vVisible && hVisible;
	                else if(direction === 'vertical')
	                    return clientSize && vVisible;
	                else if(direction === 'horizontal')
	                    return clientSize && hVisible;
	            } else {

	                var viewTop         = $w.scrollTop(),
	                    viewBottom      = viewTop + vpHeight,
	                    viewLeft        = $w.scrollLeft(),
	                    viewRight       = viewLeft + vpWidth,
	                    offset          = $t.offset(),
	                    _top            = offset.top,
	                    _bottom         = _top + $t.height(),
	                    _left           = offset.left,
	                    _right          = _left + $t.width(),
	                    compareTop      = partial === true ? _bottom : _top,
	                    compareBottom   = partial === true ? _top : _bottom,
	                    compareLeft     = partial === true ? _right : _left,
	                    compareRight    = partial === true ? _left : _right;

	                if(direction === 'both')
	                    return !!clientSize && ((compareBottom <= viewBottom) && (compareTop >= viewTop)) && ((compareRight <= viewRight) && (compareLeft >= viewLeft));
	                else if(direction === 'vertical')
	                    return !!clientSize && ((compareBottom <= viewBottom) && (compareTop >= viewTop));
	                else if(direction === 'horizontal')
	                    return !!clientSize && ((compareRight <= viewRight) && (compareLeft >= viewLeft));
	            }
	        };

	    })(jQuery);
	}

	if (!$.fn.spinit) {

	    (function($) {
	        $.fn.extend({
	            spinit: function(options) {
	                var settings = $.extend({ min: 0, max: 100, initValue: 0, callback: null, stepInc: 1, pageInc: 10, width: 50, height: 15, btnWidth: 1, mask: '' }, options);
	                var _this = this;
	                return this.each(function() {
	                    var UP = 38;
	                    var DOWN = 40;
	                    var PAGEUP = 33;
	                    var PAGEDOWN = 34;
	                    var mouseCaptured = false;
	                    var mouseIn = false;
	                    var interval;
	                    var timeout;
	                    var direction = 'none';
	                    var isPgeInc = false;
	                    var value = Math.max(settings.initValue, settings.min);
	                    var el = $(this).val(value).css('width', (settings.width) + 'px').css('height', settings.height + 'px').addClass('smartspinner');
	                    raiseCallback(value);
	                    if (settings.mask != '') el.val(settings.mask);

	                    //TODO : 보정 처리 작업중......
	                    this.reset = function(val) {
	                        if (isNaN(val)) val = 0;
	                        value = Math.max(val, settings.min);
	                        $(this).val(value);
	                        raiseCallback(value);
	                    };

	                    // $.fn.reset = function(val) {
	                    //     if (isNaN(val)) val = 0;
	                    //     value = Math.max(val, settings.min);
	                    //     $(this).val(value);
	                    //     raiseCallback(value);
	                    // };

	                    function setDirection(dir) {
	                        direction = dir;
	                        isPgeInc = false;
	                        switch (dir) {
	                            case 'up':
	                                setClass('up');
	                                break;
	                            case 'down':
	                                setClass('down');
	                                break;
	                            case 'pup':
	                                isPgeInc = true;
	                                setClass('up');
	                                break;
	                            case 'pdown':
	                                isPgeInc = true;
	                                setClass('down');
	                                break;
	                            case 'none':
	                                setClass('');
	                                break;
	                        }
	                    }
	                    el.focusin(function() {
	                        el.val(value);
	                    });
	                    el.click(function(e) {
	                        mouseCaptured = true;
	                        isPgeInc = false;

	                        clearTimeout(timeout);

	                        if (interval != null) {
	                            clearInterval(interval);
	                            interval = null;
	                        } else {
	                            onValueChange();
	                        }
	                    });
	                    el.mouseenter(function(e) {
	                        el.val(value);
	                    });
	                    el.mousemove(function(e) {

	                        if (e.pageX > (el.offset().left + settings.width) - settings.btnWidth - 14) {
	                            if (e.pageY < el.offset().top + settings.height / 2)
	                                setDirection('up');
	                            else
	                                setDirection('down');
	                        }
	                        else
	                            setDirection('none');
	                    });
	                    el.mousedown(function(e) {
	                        isPgeInc = false;
	                        clearTimeout(timeout);
	                        clearInterval(interval);

	                        timeout = null;
	                        interval = null;
	                        timeout = setTimeout(function(){
	                            interval = setInterval(onValueChange, 300);
	                        }, 800);
	                    });
	                    el.mouseup(function(e) {
	                        mouseCaptured = false;
	                        isPgeInc = false;
	                        clearTimeout(timeout);
	                        clearInterval(interval);
	                    });
	                    el.mouseleave(function(e) {
	                        setDirection('none');
	                        if (settings.mask != '') el.val(settings.mask);
	                    });

	                    el.keydown(function(e) {
	                        switch (e.which) {
	                            case UP:
	                                setDirection('up');
	                                onValueChange();
	                                break; // Arrow Up
	                            case DOWN:
	                                setDirection('down');
	                                onValueChange();
	                                break; // Arrow Down
	                            case PAGEUP:
	                                setDirection('pup');
	                                onValueChange();
	                                break; // Page Up
	                            case PAGEDOWN:
	                                setDirection('pdown');
	                                onValueChange();
	                                break; // Page Down
	                            default:
	                                setDirection('none');
	                                break;
	                        }
	                    });

	                    el.keyup(function(e) {
	                        setDirection('none');
	                    });
	                    el.keypress(function(e) {
	                        if (!_this[0].hasAttribute(Define.ATTR.READONLY)) {
	                            if (el.val() == settings.mask) el.val('');
	                            var sText = getSelectedText();

	                            if (sText != '') {
	                                sText = el.val().replace(sText, '');
	                                el.val(sText);
	                            }

	                            if (e.which >= 48 && e.which <= 57) {
	                                var temp = parseFloat(el.val() + (e.which - 48));
	                                if (temp >= settings.min && temp <= settings.max) {
	                                    value = temp;
	                                    raiseCallback(value);
	                                }
	                                else {
	                                    e.preventDefault();
	                                }
	                            }
	                        }
	                    });
	                    el.blur(function() {

	                        if (settings.mask == '') {
	                            if (el.val() == '')
	                                el.val(settings.min);
	                        }
	                        else {
	                            el.val(settings.mask);
	                        }
	                    });
	                    el.bind("mousewheel", function(e) {
	                        if (e.wheelDelta >= 120) {
	                            setDirection('down');
	                            onValueChange();
	                        }
	                        else if (e.wheelDelta <= -120) {
	                            setDirection('up');
	                            onValueChange();
	                        }

	                        e.preventDefault();
	                    });
	                    if (this.addEventListener) {
	                        this.addEventListener('DOMMouseScroll', function(e) {
	                            if (e.detail > 0) {
	                                setDirection('down');
	                                onValueChange();
	                            }
	                            else if (e.detail < 0) {
	                                setDirection('up');
	                                onValueChange();
	                            }
	                            e.preventDefault();
	                        }, false);
	                    }

	                    function raiseCallback(val) {
	                        if (settings.callback != null) settings.callback(_this, val);
	                    }
	                    function getSelectedText() {

	                        var startPos = el.get(0).selectionStart;
	                        var endPos = el.get(0).selectionEnd;
	                        var doc = document.selection;

	                        if (doc && doc.createRange().text.length != 0) {
	                            return doc.createRange().text;
	                        } else if (!doc && el.val().substring(startPos, endPos).length != 0) {
	                            return el.val().substring(startPos, endPos);
	                        }
	                        return '';
	                    }
	                    function setValue(a, b) {
	                        if (!_this[0].hasAttribute(Define.ATTR.READONLY)) {
	                            if (a >= settings.min && a <= settings.max) {
	                                value = b;
	                            } el.val(value);
	                        }
	                    }
	                    function onValueChange() {
	                        if (!_this[0].hasAttribute(Define.ATTR.READONLY)){
	                            if (direction == 'up') {
	                                value += settings.stepInc;
	                                if (value > settings.max) value = settings.max;
	                                setValue(parseFloat(el.val()), value);
	                            }
	                            if (direction == 'down') {
	                                value -= settings.stepInc;
	                                if (value < settings.min) value = settings.min;
	                                setValue(parseFloat(el.val()), value);
	                            }
	                            if (direction == 'pup') {
	                                value += settings.pageInc;
	                                if (value > settings.max) value = settings.max;
	                                setValue(parseFloat(el.val()), value);
	                            }
	                            if (direction == 'pdown') {
	                                value -= settings.pageInc;
	                                if (value < settings.min) value = settings.min;
	                                setValue(parseFloat(el.val()), value);
	                            }
	                            raiseCallback(value);
	                        }
	                    }
	                    function setClass(name) {
	                        el.removeClass('up').removeClass('down');
	                        if (name != '') el.addClass(name);
	                    }
	                });
	            }
	        });
	    })(jQuery);
	}

	if (!Date.prototype.format) {
	    Date.prototype.format = function(f) {
	        if (!this.valueOf()) return " ";

	        var weekName = window.kukuResource.menuText.weekName;
	        var d = this;

	        return f.replace(/(yyyy|yy|MM|dd|E|hh|mm|ss|a\/p)/gi, function($1) {
	            switch ($1) {
	                case "yyyy": return d.getFullYear();
	                case "yy": return (d.getFullYear() % 1000).zf(2);
	                case "MM": return (d.getMonth() + 1).zf(2);
	                case "dd": return d.getDate().zf(2);
	                case "E": return weekName[d.getDay()];
	                case "HH": return d.getHours().zf(2);
	                case "hh": return ((h = d.getHours() % 12) ? h : 12).zf(2);
	                case "mm": return d.getMinutes().zf(2);
	                case "ss": return d.getSeconds().zf(2);
	                case "a/p": return d.getHours() < 12 ? "오전" : "오후";
	                default: return $1;
	            }
	        });
	    };

	    String.prototype.string = function(len){var s = '', i = 0; while (i++ < len) { s += this; } return s;};
	    String.prototype.zf = function(len){return "0".string(len - this.length) + this;};
	    Number.prototype.zf = function(len){return this.toString().zf(len);};
	}

	if (!Object.keys) {
	    Object.keys = function (obj) {
	        var arr = [],
	            key;
	        for (key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                arr.push(key);
	            }
	        }
	        return arr;
	    };
	}

	if (!$.fn.changeTagName) {
	    (function($){
	        var $newTag = null;
	        $.fn.changeTagName = function(newTag){
	            this.each(function(i, el){
	                var $el = $(el);
	                $newTag = $("<" + newTag + ">");

	                // attributes
	                $.each(el.attributes, function(i, attribute){
	                    $newTag.attr(attribute.nodeName, attribute.nodeValue);
	                });
	                // content
	                $newTag.html($el.html());

	                $el.replaceWith($newTag);
	            });
	            return $newTag;
	        };
	    })(jQuery);
	}

	/*  cellPos jQuery plugin
	    ---------------------
	    Get visual position of cell in HTML table (or its block like thead).
	    Return value is object with "top" and "left" properties set to row and column index of top-left cell corner.
	    Example of use:
	        $("#myTable tbody td").each(function(){
	            $(this).text( $(this).cellPos().top +", "+ $(this).cellPos().left );
	        });
	*/
	(function($){
	    /* scan individual table and set "cellPos" data in the form { left: x-coord, top: y-coord } */
	    function scanTable( $table ) {
	        var m = [];

	        // $table.children( "tr" ).each( function( y, row ) {
	        $($table[0].rows).each( function( y, row ) {
	            $( row ).children( "td, th" ).each( function( x, cell ) {
	                var $cell = $( cell ),
	                    cspan = $cell.attr( "colspan" ) | 0,
	                    rspan = $cell.attr( "rowspan" ) | 0,
	                    tx, ty;
	                cspan = cspan ? cspan : 1;
	                rspan = rspan ? rspan : 1;
	                for( ; m[y] && m[y][x]; ++x );  //skip already occupied cells in current row
	                for( tx = x; tx < x + cspan; ++tx ) {  //mark matrix elements occupied by current cell with true
	                    for( ty = y; ty < y + rspan; ++ty ) {
	                        if( !m[ty] ) {  //fill missing rows
	                            m[ty] = [];
	                        }
	                        m[ty][tx] = true;
	                    }
	                }
	                var pos = { top: y, left: x };
	                $cell.data( "cellPos", pos );
	            } );
	        } );
	    };

	    /* plugin */
	    $.fn.cellPos = function( rescan ) {
	        var $cell = this.first(),
	            pos = $cell.data( "cellPos" );
	        if( !pos || rescan ) {
	            // var $table = $cell.closest( "table, thead, tbody, tfoot" );
	            var $table = $cell.closest( "table" );
	            scanTable( $table );
	        }
	        pos = $cell.data( "cellPos" );
	        return pos;
	    }
	})(jQuery);

	if (!String.prototype.toUnicode) {
	    String.prototype.toUnicode = function(){
	        var result = "";
	        for(var i = 0; i < this.length; i++){
	            // Assumption: all characters are < 0xffff
	            result += "\\u" + ("000" + this[i].charCodeAt(0).toString(16)).substr(-4);
	        }
	        return result;
	    };
	}

	/*!
	 * jQuery cxDialog 1.2.4
	 * http://code.ciaoca.com/
	 * https://github.com/ciaoca/cxDialog
	 * E-mail: ciaoca@gmail.com
	 * Released under the MIT license
	 * Date: 2017-01-06
	 *
	 * 简易调用：$.cxDialog(string[, ok, no])
	 * 完整方法：$.cxDialog(opt)
	 * @param {object|string} opt 参数设置 or 内容
	 *   title {string} 标题
	 *   info {string|dom} 内容
	 *   ok {fn} 点击确认时的回调函数
	 *   okText {string} 确认按钮文字
	 *   no {fn} 点击取消时的回调函数
	 *   noText {string} 取消按钮文字
	 *   buttons {array} 自定义按钮：[{text: 'text', callback: fn}, ...]
	 *   closeBtn {boolean} 是否显示关闭按钮
	 *   lockScroll {boolean} 是否锁定滚动
	 *   baseClass {string} 给对话框容器增加 class，不会覆盖默认的 class
	 *   background {string} 遮罩背景的颜色
	 *   width {int} 提示框固定宽度
	 *   height {int} 提示框固定高度
	 *   zIndex {int} 提示框的层级
	 *
	 * @param {function} ok 点击确认时的回调函数
	 * @param {function} no 点击取消时的回调函数
	 */
	(function(factory){
	    // if (typeof define === 'function' && define.amd) {
	    //     define(['jquery'], factory);
	    // } else {
	        factory(window.jQuery || window.Zepto || window.$);
	    // };
	}(function($){
	    if (typeof Zepto === 'function' || typeof Zepto === 'object') {
	        // Add inner and outer width to zepto (adapted from https://gist.github.com/alanhogan/3935463)
	        var ioDim = function(dimension, includeBorder) {
	            return function (includeMargin) {
	                var sides, size, elem;
	                if (this) {
	                    elem = this;
	                    size = elem[dimension]();
	                    sides = {
	                        width: ['left', 'right'],
	                        height: ['top', 'bottom']
	                    };
	                    sides[dimension].forEach(function(side) {
	                        if (!elem.css('box-sizing') || elem.css('box-sizing') === 'content-box') {
	                            size += parseInt(elem.css('padding-' + side), 10);
	                            if (includeBorder) {
	                                size += parseInt(elem.css('border-' + side + '-width'), 10);
	                            };
	                        };
	                        if (includeMargin) {
	                            size += parseInt(elem.css('margin-' + side), 10);
	                        };
	                    });
	                    return size;
	                } else {
	                    return null;
	                };
	            };
	        };
	        ['width', 'height'].forEach(function(dimension) {
	            var Dimension = dimension.substr(0,1).toUpperCase() + dimension.substr(1);
	            if (typeof Zepto.fn['inner' + Dimension] === 'undefined') {
	                Zepto.fn['inner' + Dimension] = ioDim(dimension, false);
	            };
	            if (typeof Zepto.fn['outer' + Dimension] === 'undefined') {
	                Zepto.fn['outer' + Dimension] = ioDim(dimension, true);
	            };
	        });
	    };

	    var dialog = {
	        dom: {},
	        isElement: function(o){
	            if (o && (typeof HTMLElement === 'function' || typeof HTMLElement === 'object') && o instanceof HTMLElement) {
	                return true;
	            } else {
	                return (o && o.nodeType && o.nodeType === 1) ? true : false;
	            };
	        },
	        isJquery: function(o){
	            return (o && o.length && (typeof jQuery === 'function' || typeof jQuery === 'object') && o instanceof jQuery) ? true : false;
	        },
	        isZepto: function(o){
	            return (o && o.length && (typeof Zepto === 'function' || typeof Zepto === 'object') && Zepto.zepto.isZ(o)) ? true : false;
	        }
	    };

	    dialog.init = function(opt, ok, no){
	        var self = this;

	        self.dom.docHtml = $('html');
	        self.dom.box = $('<div></div>', {'id': 'cxdialog', 'class': 'cxdialog'});
	        self.dom.overlay = $('<div></div>', {'id': 'cxdialog_overlay', 'class': 'cxdialog_overlay'});
	        self.dom.holder = $('<div></div>', {'id': 'cxdialog_holder', 'class': 'cxdialog_holder'});
	        self.dom.title = $('<div></div>', {'class': 'cxdialog_title'});
	        self.dom.info = $('<div></div>', {'class': 'cxdialog_info'});
	        self.dom.btns = $('<div></div>', {'class': 'cxdialog_btns'});
	        self.dom.closeBtn = $('<a></a>', {'rel': 'cxdialog', 'rev': 'close'});

	        $(document).ready(function() {
	            self.dom.box.appendTo('body').after(self.dom.overlay);
	        });

	        self.isIE6 = !!window.ActiveXObject && !window.XMLHttpRequest;

	        self.dom.box.on('click', 'a', function(){
	            var _rel = this.rel;
	            var _rev = this.rev;
	            var _result;

	            if (_rel !== 'cxdialog') {return};

	            if (_rev === 'close') {
	                self.exit();

	            } else {
	                for (var i = 0, l = self.btnCache.length; i < l; i++) {
	                    if (self.btnCache[i].name === _rev && typeof self.btnCache[i].callback === 'function') {
	                        _result = self.btnCache[i].callback();
	                        break;
	                    };
	                };
	            };

	            if (_result !== false) {
	                self.exit();
	            };

	            return false;
	        });
	    };

	    dialog.format = function(opt, ok, no){
	        var self = this;
	        self.exit();

	        if (typeof opt === 'string' && !opt.length) {return};

	        if (typeof opt === 'string' || self.isElement(opt) || self.isJquery(opt) || self.isZepto(opt)) {
	            opt = {
	                info: opt
	            };
	        } else if (typeof opt !== 'object') {
	            return;
	        };

	        if (typeof ok === 'function') {opt.ok = ok};
	        if (typeof no === 'function') {opt.no = no};

	        opt = $.extend({}, $.cxDialog.defaults, opt);

	        self.dom.box.attr('class', 'cxdialog');

	        self.setContent(opt);
	        self.show(opt);
	    };

	    // 设置内容
	    dialog.setContent = function(opt){
	        var self = this;
	        var _timeStamp = new Date().getTime();

	        self.dom.box.empty();

	        // 设置标题
	        if (typeof opt.title === 'string' && opt.title.length) {
	            self.dom.title.html(opt.title).appendTo(self.dom.box);
	        };

	        self.infoCache = undefined;

	        // 设置文本内容
	        if (typeof opt.info === 'string' && opt.info.length) {
	            self.dom.info.html(opt.info).appendTo(self.dom.box);

	            // 设置内容为 DOM 元素或 jQuery 对象
	        } else if (self.isElement(opt.info) || self.isJquery(opt.info) || self.isZepto(opt.info)) {
	            var _cacheDom = self.isElement(opt.info) ? $(opt.info) : opt.info;
	            self.infoCache = {
	                dom: _cacheDom
	            };

	            var _style = _cacheDom.attr('style');

	            if (typeof _style === 'string' && _style.length) {
	                self.infoCache.styleText = _style;
	            };

	            self.dom.holder.css({
	                'float': _cacheDom.css('float'),
	                'display': _cacheDom.css('display'),
	                'visibility': _cacheDom.css('visibility'),
	                'position': _cacheDom.css('position'),
	                'width': _cacheDom.outerWidth(),
	                'height': _cacheDom.outerHeight()
	            }).insertAfter(_cacheDom);

	            _cacheDom.css('display', 'block').appendTo(self.dom.box);

	        } else {
	            opt.info = String(opt.info);
	            self.dom.info.html(opt.info).appendTo(self.dom.box);
	        };

	        // 设置按钮
	        self.btnCache = [];

	        if (typeof opt.ok === 'function') {
	            self.btnCache.push({
	                name: 'btn_ok',
	                className: 'btn_ok',
	                text: opt.okText,
	                callback: opt.ok
	            });
	        };
	        if (typeof opt.no === 'function') {
	            self.btnCache.push({
	                name: 'btn_no',
	                className: 'btn_no',
	                text: opt.noText,
	                callback: opt.no
	            });
	        };

	        for (var i = 0, l = opt.buttons.length; i < l; i++) {
	            self.btnCache.push({
	                name: 'btn_' + _timeStamp + '_' + i,
	                className: 'btn_' + i,
	                text: opt.buttons[i].text,
	                callback: opt.buttons[i].callback
	            });
	        };

	        if (self.btnCache.length) {
	            var _html = '';
	            for (var i = 0, l = self.btnCache.length; i < l; i++) {
	                _html += '<a class="' + self.btnCache[i].className + '" rel="cxdialog" rev="' + self.btnCache[i].name + '">' + self.btnCache[i].text + '</a>';
	            };
	            self.dom.btns.html(_html).appendTo(self.dom.box);
	        };

	        // 关闭按钮
	        if (opt.closeBtn) {
	            self.dom.closeBtn.appendTo(self.dom.box);
	        };
	    };

	    // 显示对话框
	    dialog.show = function(opt){
	        var self = this;

	        if (opt.lockScroll === true) {
	            self.dom.docHtml.addClass('cxdialog_lock');
	        };

	        if (typeof opt.background === 'string') {
	            self.dom.overlay.css('background', opt.background);
	        } else {
	            self.dom.overlay.css('display', 'none');
	        };

	        if (typeof opt.baseClass === 'string' && opt.baseClass.length) {
	            self.dom.box.addClass(opt.baseClass);
	        };

	        self.dom.box.removeAttr('style');

	        var _cssAttr = {};

	        // IE6 不支持 fixed，设置当前位置
	        if (self.isIE6) {
	            _cssAttr.top = document.documentElement.scrollTop + window.screen.availHeight / 4;
	        };

	        if (opt.width > 0) {
	            _cssAttr.width = opt.width;
	            _cssAttr.marginLeft = -(opt.width / 2);
	        } else {
	            _cssAttr.marginLeft = -(self.dom.box.outerWidth() / 2);
	        };

	        if (opt.height > 0) {
	            _cssAttr.height = opt.height;
	            _cssAttr.marginTop = -(opt.height / 2);
	        } else {
	            _cssAttr.marginTop = -(self.dom.box.outerHeight() / 2);
	        };

	        if (opt.zIndex > 0) {
	            _cssAttr.zIndex = opt.zIndex;
	        };

	        self.dom.box.css(_cssAttr).addClass('in');
	    };

	    // 归还加载的 DOM
	    dialog.backDom = function(){
	        var self = this;

	        if (self.infoCache && (self.isJquery(self.infoCache.dom) || self.isZepto(self.infoCache.dom))) {
	            if (typeof self.infoCache.styleText === 'string' && self.infoCache.styleText.length) {
	                self.infoCache.dom.attr('style', self.infoCache.styleText);
	            } else {
	                self.infoCache.dom.removeAttr('style');
	            };

	            self.infoCache.dom.insertAfter(self.dom.holder);

	            self.dom.holder.remove();
	        };

	        self.infoCache = undefined;
	    };

	    // 关闭对话框
	    dialog.exit = function(){
	        var self = this;

	        self.backDom();

	        self.btnCache = undefined;

	        self.dom.box.removeClass('in').addClass('out');
	        if (typeof $.cxDialog.defaults.background !== 'string') {
	            self.dom.overlay.css('display', '');
	        };
	        self.dom.docHtml.removeClass('cxdialog_lock');
	    };

	    $.cxDialog = function(){
	        dialog.format.apply(dialog, arguments);
	    };

	    $.cxDialog.close = function(){
	        dialog.exit.apply(dialog);
	    };

	    $.cxDialog.defaults = {
	        title: '',
	        info: '',
	        ok: null,
	        okText: '确 定',
	        no: null,
	        noText: '取 消',
	        buttons: [],
	        closeBtn: true,
	        lockScroll: false,
	        baseClass: '',
	        background: '',
	        width: 0,
	        height: 0
	    };

	    dialog.init();
	}));

	(function() {
	    var objGlobal = this;
	    if(!(objGlobal.escape && objGlobal.unescape)) {
	        var escapeHash = {
	            _ : function(input) {
	                var ret = escapeHash[input];
	                if(!ret) {
	                    if(input.length - 1) {
	                        ret = String.fromCharCode(input.substring(input.length - 3 ? 2 : 1));
	                    }
	                    else {
	                        var code = input.charCodeAt(0);
	                        ret = code < 256
	                            ? "%" + (0 + code.toString(16)).slice(-2).toUpperCase()
	                            : "%u" + ("000" + code.toString(16)).slice(-4).toUpperCase();
	                    }
	                    escapeHash[ret] = input;
	                    escapeHash[input] = ret;
	                }
	                return ret;
	            }
	        };

	        objGlobal.escape = objGlobal.escape || function(str) {
	            return str.replace(/[^\w @\*\-\+\.\/]/g, function(aChar) {
	                return escapeHash._(aChar);
	            });
	        };

	        objGlobal.unescape = objGlobal.unescape || function(str) {
	            return str.replace(/%(u[\da-f]{4}|[\da-f]{2})/gi, function(seq) {
	                return escapeHash._(seq);
	            });
	        };
	    }
	})();

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	var pretty = __webpack_require__(6);

	var Util = {};


	Util.findParentNode = function (node, selector) {
	    if (!node) {
	        return null;
	    }

	    while (node && !$(node).is(selector)) {
	        if($(node).hasClass(Define.CLASS.KKEDITOR)){
	            return null;
	        }
	        node = node.parentNode;
	    }

	    return node;
	};

	Util.paragraphReRenderHTMLForIE = function(rootNode){
	    if ($.browser.msie) {
	        var $rootNode = $(rootNode);

	        var $pNodes = $rootNode.find('p');

	        $pNodes = $pNodes.get().reverse();

	        $($pNodes).each(function(){
	            var pNodeHTML = this.outerHTML;

	            var fullClosedTag = pNodeHTML.substr(pNodeHTML.length - 4);
	            var selfClosedTag = pNodeHTML.substr(pNodeHTML.length - 2);

	            if (fullClosedTag != '</p>' && selfClosedTag != '/>') {
	                this.outerHTML = pNodeHTML + '</p>';
	            }
	        });
	    }
	};

	Util.prettyHtml = function(node, useHtmlModeTextIndent){
	    
	    var prettyHtml = pretty(node.innerHTML, {unformatted : ['code', 'pre', 'p', 'br'], indent_size:1, indent_char:'\t', useHtmlModeTextIndent:useHtmlModeTextIndent});

	    return prettyHtml || node.innerHTML;

	    // var pretty = htmlmodule.prettyPrint(node.innerHTML);
	    //
	    // return pretty;


	    // var prettyHtml = this.formatFactory(node.innerHTML);

	    // return prettyHtml;
	};

	Util.isCheckParagraphEmpty = function (paragraph, isRemoveBR) {

	    var singleElements = [].concat(Define.SINGLE_NODES);

	    singleElements.push('table');
	    singleElements.push(Define.CUSTOM_BOOKMARK_NODE + '[' + Define.ATTR.KK_TYPE + '="' + Define.ATTR_VALUE.KK_TYPE_BOOKMARK + '"]');

	    if (isRemoveBR) {
	        var brIndex = singleElements.indexOf('BR');
	        singleElements.splice(brIndex, 1);
	    }

	    if (paragraph.textContent.length == 0) {
	        var childNodes = $(paragraph).find(singleElements.join(','));

	        if (childNodes.length) {
	            return false;
	        }

	        return true;
	    } else if (paragraph.textContent == String.fromCharCode(160)){
	        var childNodes = $(paragraph).find(singleElements.join(','));

	        if (childNodes.length) {
	            return false;
	        }

	        return true;
	    } else {
	        return false;
	    }


	    // var offset = $(paragraph).find("IMG").length + paragraph.textContent.length;
	    // if (offset < 1) {
	    //     return true;
	    // } else if (offset == 1 && $(paragraph).find("br").length > 0) {
	    //     return true;
	    // } else {
	    //     return false;
	    // }
	};

	Util.isCheckEmpty = function (area) {

	    var isEmpty = false;

	    var $area = $(area);

	    var text = $area.text();

	    if (text == "" || text == " " || text == Define.UNICODE_NBSP) {
	        var childNodes = $area.find('img, video, table');

	        if (!childNodes.length) {
	            isEmpty = true;
	        }
	    }

	    return isEmpty;
	};

	Util.getCurrentStyle = function (node, styles, editorObject) {

	    if (!node) {
	        return null;
	    }

	    if (! styles){
	        styles = ['fontFamily', 'fontSize', 'fontWeight', 'color', 'backgroundColor', 'textAlign', 'lineHeight', 'textDecoration', 'verticalAlign', 'fontStyle'];
	    }

	    var eWindow = editorObject.editorWindow;
	    var eDocument = editorObject.editorDocument;
	    var editorContentView = editorObject.editorContentView;

	    var computedObj = null;
	    var styleFontSize = '';

	    try {
	        var getParentStyle = function(targetNode) {
	            if (targetNode && targetNode.style) {
	                var fontSize = targetNode.style['fontSize'];

	                if (!styleFontSize && parseInt(fontSize) > -1) {
	                    styleFontSize = fontSize;
	                }
	            }

	            if (styleFontSize) {
	                return;
	            }

	            if (targetNode == editorContentView[0]) {
	                return;
	            }

	            getParentStyle(targetNode.parentNode);
	        };

	        try {
	            getParentStyle(node);

	        } catch (exception) { }

	        if (eWindow.getComputedStyle){
	            computedObj = eDocument.defaultView.getComputedStyle(node, null);

	        }else if (node.currentStyle){
	            computedObj = node.currentStyle;

	        }else{
	            computedObj = node.style;
	        }

	    } catch(e) {
	        return null;
	    }

	    if (computedObj){
	        var styleProps = {};

	        for (var i=0; i<styles.length; i++){
	            var key = styles[i];
	            var value = computedObj[key];

	            if (key == "backgroundColor") {

	                if ($.browser.msie && $.browser.msie < 11) {
	                    value = eDocument.queryCommandValue('backColor');
	                } else {
	                    value = eDocument.queryCommandValue('hiliteColor') || eDocument.queryCommandValue('backColor')
	                }

	            }else if (key == "color"){
	                value = eDocument.queryCommandValue('foreColor')

	            }else if (key == "fontFamily"){
	                //queryCommandValue 함수는 ie에서 폰트가 없을 경우 "times new roman" 폰트로 결과값이 생성된다.
	                if(node.currentStyle) {
	                    value = node.currentStyle.fontFamily;
	                } else {
	                    value = eDocument.queryCommandValue('fontName')
	                }

	            }else if (key == "fontSize") {
	                if (styleFontSize && value != styleFontSize) {
	                    value = styleFontSize;
	                }

	            }else if (key == "fontWeight") {
	                key = 'bold';
	                value = eDocument.queryCommandState('bold');

	            }else if (key == "fontStyle") {
	                key = 'italic';

	                value = eDocument.queryCommandState('italic');

	            }else if (key == "textDecoration"){

	                styleProps["underline"] = eDocument.queryCommandState('underline');
	                styleProps["strikeThrough"] = eDocument.queryCommandState('strikeThrough');

	                continue;
	            }else if (key == "verticalAlign") {
	                styleProps['superscript'] = eDocument.queryCommandState('superscript');
	                styleProps['subscript'] = eDocument.queryCommandState('subscript');

	                continue;
	            }

	            styleProps[key] = value;
	        }



	        //Heading Check
	        var heading = 'default';
	        var $headingNodes = $(node).closest(Define.HEADING_NODES.join(','));
	        if ($headingNodes.length) {
	            heading = $headingNodes[0].nodeName.toLowerCase();
	        }

	        styleProps['heading'] = heading;

	        return styleProps;
	    }else{
	        return null;
	    }
	};

	Util.cloneObject = function (o){
	    var pair = {};

	    //http://stackoverflow.com/questions/7390426/better-way-to-get-type-of-a-javascript-variable
	    var toType = function(transfer){ return ({}).toString.call(transfer).match(/\s([a-zA-Z]+)/)[1].toLowerCase();};

	    for (var k in o) {
	        if (typeof(o[k]) === "object" && toType(o[k]) === "object") {
	            pair[k] = arguments.callee(o[k]);
	        } else {
	            pair[k] = $.isArray(o[k]) ? o[k].slice(0) : (o[k] instanceof Node ? $(o[k]).clone()[0] : o[k]);
	        }
	    }

	    return pair;
	};

	Util.getRgbToHex = function (rgb){
	    if (! rgb || rgb.length == 0){
	        return "#ffffff";
	    }

	    if (rgb.substr(0, 1) === '#') {
	        return color;
	    }

	    rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
	    return (rgb && rgb.length === 4) ? "#" +
	        ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
	        ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
	        ("0" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';
	};

	Util.firstToUpperCase = function (str) {
	    return str.substr(0, 1).toUpperCase() + str.substr(1);
	};

	Util.firstToLowerCase = function (str) {
	    return str.substr(0, 1).toLowerCase() + str.substr(1);
	};

	Util.getPixelToPoint = function (val){
	    val = val.replace("pt", "") * 1;
	    return Math.round((val * 72/96));
	};

	Util.getPxToPt = function (val){
	    val = val.replace('px', '') * 1;
	    val = (val * 3) / 4;

	    return val;
	};

	Util.getTime = function () {
	    var today = new Date();    // 현재시간 얻기
	    var runTime = today.getTime(); // 밀리초 from 1/1/70
	    return runTime;
	};

	Util.getCSSRule = function (ruleName, deleteFlag, eDocument) {
	    try{
	        var eDocument = eDocument;

	        if (eDocument.styleSheets) {
	            for (var i = 0 ; i < eDocument.styleSheets.length; i++) {
	                var styleSheet = eDocument.styleSheets[i];
	                var ii = 0;
	                var cssRule=false;
	                do {

	                    cssRule = styleSheet.rules[ii];

	                    if (cssRule)  {
	                        if (cssRule.selectorText==ruleName) {
	                            if (deleteFlag=='delete') {
	                                if (! $.browser.msie) {
	                                    styleSheet.deleteRule(ii);
	                                } else {
	                                    styleSheet.removeRule(ii);
	                                }
	                                ii --;
	                                continue;
	                                // return true;
	                            } else {
	                                return cssRule;
	                            }
	                        }
	                    }
	                    ii++;
	                } while (cssRule)
	            }
	        }
	    }catch(e){
	        // console.log('selector error : ', e);
	    }

	    return false;
	};

	Util.addCSSRule = function (ruleName, editorDocument) {
	    var eDocument = editorDocument;

	    if ($.browser.chrome && eDocument.styleSheets[0].rules == null){
	        try{
	            if (eDocument.styleSheets[0]) {
	                eDocument.styleSheets[0].insertRule(ruleName, 100000);
	            }
	        }catch(e){
	            if (e['code'] == 1){
	                var msg = e['message'];
	                msg = msg.replace('(100000)', '');

	                var pre = msg.indexOf('(') + 1;
	                var end = msg.indexOf(')');
	                var length = msg.substring(pre, end);

	                if (! this.insertCssRuleLength){
	                    this.insertCssRuleLength = [];
	                }else{
	                    if (this.insertCssRuleLength.indexOf(length) == -1){
	                        this.insertCssRuleLength.push(length);
	                    }
	                }

	                try{
	                    if (eDocument.styleSheets[0]) {
	                        eDocument.styleSheets[0].insertRule(ruleName, length);
	                    }
	                }catch(e1){
	                    // console.log(e1);
	                }
	            }

	        }

	    }else {
	        if (eDocument.styleSheets) {
	            if (!this.getCSSRule(ruleName, null, eDocument)) {
	                if (eDocument.styleSheets[0]) {
	                    eDocument.styleSheets[0].insertRule(ruleName, eDocument.styleSheets[0].cssRules.length);
	                }
	            }
	        }
	        return this.getCSSRule(ruleName, null, eDocument);
	    }

	};

	Util.makePageBreakImage = function (editorDocument) {

	    var eDocument = editorDocument;

	    var canvas = eDocument.createElement("canvas");
	    var ctx = canvas.getContext('2d');

	    if ($.browser.msie || $.browser.platform == 'win'){
	        canvas.setAttribute('height', '14px');
	        canvas.setAttribute('width', '64px');
	    }else{

	        canvas.setAttribute('height', '12px');
	        canvas.setAttribute('width', '62px');
	    }

	    ctx.font = "9pt 'Arial','맑은고딕'";
	    ctx.textBaseline = 'alphabetic';
	    ctx.fillStyle = "black";

	    if ($.browser.msie){
	        ctx.fillText(window.kukuResource.menuTitle.page_break, 0, 12);
	    }else{
	        ctx.fillText(window.kukuResource.menuTitle.page_break, 0, 10);
	    }

	    var base64Image = canvas.toDataURL("image/png");

	    var rule = '.kk_page_break:before { background-image : url(' + base64Image + '); }';
	    this.addCSSRule(rule, editorDocument);

	    if (this.insertCssRuleLength){
	        this.insertCssRuleLength = [];
	    }
	};

	Util.getHtmlEncoding = function(editorDocument){
	    var $headNode = this.getHeaderNode(editorDocument);

	    var $metaTypeHTML4 = $headNode.find('meta[http-equiv="content-type"], meta[charset]');
	    var $metaTypeHTML5 = $headNode.find('meta[charset]');

	    return {
	        metaTypeHTML4 : $metaTypeHTML4,
	        metaTypeHTML5 : $metaTypeHTML5
	    }
	};

	Util.getHtmlNode = function(editorDocument){
	    var eDocument = editorDocument;

	    return eDocument.documentElement;
	};

	Util.getHeaderNode = function(editorDocument){
	    var htmlNode = this.getHtmlNode(editorDocument);

	    var $headNode = $(htmlNode).children('head');

	    return $headNode;
	};

	Util.getHtmlTitle = function(editorDocument){
	    return this.getHeaderNode(editorDocument).find('title').html();
	};

	Util.getHtmlLanguageType = function(editorDocument){
	    var eDocument = editorDocument;
	    var html = eDocument.documentElement;

	    return html.getAttribute('lang');
	};

	Util.getHtmlDocType = function(editorDocument){
	    return editorDocument.doctype;
	};

	Util.getHeaderType = function(table){
	    var $table = $(table);
	    var rows = $table[0].rows;
	    var count = 0;

	    var LEFT = false;
	    var TOP = false;

	    var HEADER_TYPE = 'none';

	    if($(rows[0].cells).filter('th').length) {
	        TOP = true;
	    }

	    if (rows.length > 1 && rows[1].cells[0]) {
	        LEFT = true;
	    }

	    if (LEFT && TOP) {
	        HEADER_TYPE = 'left_top';
	    } else if (LEFT) {
	        HEADER_TYPE = 'left';
	    } else if (TOP) {
	        HEADER_TYPE = 'top';
	    }

	    return HEADER_TYPE;
	};

	Util.getRowColCount = function(table){
	    var $table = $(table);
	    var rows = $table[0].rows;
	    var cols = rows[0].cells;
	    var count = 0;

	    for(var i = 0; i < cols.length; i++){
	        if (cols[i].style.display !== 'none') {
	            var colspan = cols[i].getAttribute("colspan");

	            if( colspan && colspan > 1) {
	                count += Number(colspan);
	            } else {
	                count++;
	            }
	        }
	    }

	    return {
	        row : rows.length,
	        col : count
	    }
	};

	Util.doUploadData = function (url, data, successFn, errorFn, progressFn) {

	    var ajaxRun = function() {
	        $.ajax({
	            url: url,
	            data: data,
	            processData: false,
	            contentType: false,
	            type: 'POST',
	            dataType: 'json',

	            // cache: false,
	            // enctype:"multipart/form-data",
	            // encoding:"multipart/form-data",
	            // async: true,

	            xhr: progressFn || function () {
	                return $.ajaxSettings.xhr();
	            },
	            success: successFn || function(data){ },
	            error: errorFn || function(data) { }
	        });
	    };

	    if ($.browser.msie && $.browser.version == 11) {
	        setTimeout(function(){
	            ajaxRun();
	        }, 3);
	    } else {
	        ajaxRun();
	    }
	};

	Util.hasSpecialText = function(text) {
	    var special_pattern =  /[₩~!@\#$%<>{}\[\]^&*\()\-=+_\'\";:\/?,.|\\]/gi;

	    return special_pattern.test(text);
	};

	Util.tableColGroupSetting = function($tables) {
	    var _this = this;
	    if ($tables.length) {
	        var notChilds = $tables.children(':not(' + Define.TABLE_TYPE.join(',') + ')');
	        notChilds = notChilds.add($tables.contents().filter(function() {return this.nodeType === 3; }));
	        notChilds = notChilds.add($tables.find('colgroup').children(':not(' + Define.TABLE_TYPE.join(',') + ')'));
	        notChilds = notChilds.add($tables.find('colgroup').contents().filter(function() {return this.nodeType === 3; }));
	        notChilds = notChilds.add($tables.find('tbody, thead, tfoot').children(':not(tr)'));
	        notChilds = notChilds.add($tables.find('tbody, thead, tfoot').contents().filter(function() {return this.nodeType === 3; }));
	        notChilds = notChilds.add($tables.find('tr').children(':not(' + Define.CELL_TYPE.join(',') + ')'));
	        notChilds = notChilds.add($tables.find('tr').contents().filter(function() {return this.nodeType === 3; }));

	        notChilds.remove();

	        $tables.each(function(idx, node){
	            var $table = $(node);
	            var rows = $table[0].rows;

	            var tableMatrix = _this.getTableMatrix(node);

	            if (tableMatrix && tableMatrix.length){
	                var maxColCount = tableMatrix[0].length;
	                var lastIdx = 0;
	                var lastRow = tableMatrix[0];
	                var targetRows = [];

	                for (var rowIdx = 1, rowLength = tableMatrix.length; rowIdx < rowLength; rowIdx++) {
	                    var row = tableMatrix[rowIdx];

	                    if (maxColCount > row.length) {
	                        targetRows.push({ row : row, idx : rowIdx});
	                    } else if (maxColCount < row.length) {
	                        maxColCount = row.length;
	                        targetRows.push({ row : lastRow, idx : lastIdx});
	                        lastRow = row;
	                        lastIdx = rowIdx;
	                    }
	                }

	                if (targetRows.length) {
	                    for (var rowIdx = 0, rowLength = targetRows.length; rowIdx < rowLength; rowIdx++) {
	                        var rowInfo = targetRows[rowIdx];

	                        var colCompare = maxColCount - rowInfo.row.length;

	                        while(colCompare--) {
	                            $(rows[rowInfo.idx]).append($('<td style="border:none;">' + Define.DEFAULT_PARAGRAPH_HTML + '</td>'));
	                        }
	                    }
	                }
	            }
	        });
	    }
	};


	//New Wysisyg Editor Based

	Util.getFirstChildNode = function(startNode) {

	    var node = startNode;
	    var firstChild = node.firstChild;

	    if (node.nodeType == Node.ELEMENT_NODE && node.nodeName == 'TABLE') {
	        var firstRow = node.rows[0];

	        if (firstRow) {
	            firstChild = firstRow.cells[0];
	        }
	    }

	    while(firstChild) {
	        node = firstChild;

	        if (node.nodeType == Node.ELEMENT_NODE && node.nodeName == 'TABLE') {
	            if (node.rows.length && node.rows[0].cells.length) {
	                firstChild = node.rows[0].cells[0];
	            } else {
	                var $pNode = $(Define.DEFAULT_PARAGRAPH_HTML);
	                $(node).before($pNode);
	                firstChild = $pNode[0];
	            }
	        } else {
	            firstChild = node.firstChild;
	        }
	    }

	    return node;
	};

	Util.getLastChildNode = function(endNode) {
	    var node = endNode;
	    var lastChild = node.lastChild;

	    if (node.nodeType == Node.ELEMENT_NODE && node.nodeName == 'TABLE') {
	        var lastRow = node.rows[node.rows.length - 1];

	        if (lastRow) {
	            lastChild = lastRow.cells[lastRow.cells.length - 1];
	        }
	    }

	    while(lastChild) {
	        node = lastChild;

	        if (node.nodeType == Node.ELEMENT_NODE && node.nodeName == 'TABLE') {
	            if (node.rows.length && node.rows[node.rows.length - 1].cells.length) {
	                var lastRows = node.rows[node.rows.length - 1];

	                lastChild = lastRows.cells[lastRows.cells.length - 1];
	            } else {
	                var $pNode = $(Define.DEFAULT_PARAGRAPH_HTML);
	                $(node).after($pNode);
	                lastChild = $pNode[0];
	            }
	        } else {
	            lastChild = node.lastChild;
	        }
	    }

	    return node;
	};

	Util.getSelectedHtml = function (range){
	    var isWinSelection = Define.isWinSelection;

	    if (!range) {
	        return null;
	    }

	    if (!isWinSelection && range.text !== "" && range.htmlText) {
	        return range.htmlText;
	    }

	    if (isWinSelection) {
	        var div = document.createElement("div");
	        div.appendChild(range.cloneContents());

	        return div.innerHTML;
	    }

	    return null;
	};

	Util.getSelectedTextNodes = function (editorContentView){
	    var startNode = editorContentView.find("#" + Define.ID.TEMP_START)[0];
	    var endNode = editorContentView.find("#" + Define.ID.TEMP_END)[0];

	    var isStop = false;
	    var textNodeList = [];
	    var prevNode = startNode;
	    var currentNode = startNode.nextSibling;

	    while (currentNode != endNode) {
	        if (!currentNode) {
	            while (!currentNode) {
	                currentNode = prevNode.parentNode;
	                if (!currentNode || currentNode == editorContentView[0]) {
	                    isStop = true;
	                } else {
	                    prevNode = currentNode;
	                    currentNode = currentNode.nextSibling;
	                }
	            }
	        }

	        if (currentNode.nodeType != 3) {
	            while (currentNode.childNodes.length != 0) {
	                currentNode = currentNode.childNodes[0];
	            }
	        }

	        if (currentNode.nodeType == 3) {
	            textNodeList.push(currentNode);
	        }

	        if (isStop || (currentNode == endNode)) {
	            break;
	        }
	        prevNode = currentNode;
	        currentNode = currentNode.nextSibling;
	    }

	    return textNodeList;
	};

	Util.splitOn = function(bound, cutElement) {
	    // cutElement must be a descendant of bound
	    for (var parent = cutElement.parentNode; bound != parent; parent = grandparent) {
	        var right = parent.cloneNode(false);

	        while (cutElement.nextSibling) {
	            right.appendChild(cutElement.nextSibling);
	        }

	        var grandparent = parent.parentNode;
	        grandparent.insertBefore(right, parent.nextSibling);
	        grandparent.insertBefore(cutElement, right);
	    }
	};

	Util.videoImageToObjectNode = function($targetElement) {
	    var videoTypeNode = $targetElement.find('img[' + Define.ATTR.DATA_VIDEO_SOURCE + ']');

	    if (videoTypeNode.length) {
	        videoTypeNode.replaceWith(function(){
	            var $videoNode = $(this);

	            var style = $videoNode.attr(Define.ATTR.STYLE);

	            var videoType = $videoNode.attr(Define.ATTR.DATA_VIDEO_TYPE);

	            var decodingHTML = decodeURIComponent($videoNode.attr(Define.ATTR.DATA_VIDEO_SOURCE));
	            var $decodingHTML = $(decodingHTML);

	            $decodingHTML.attr(Define.ATTR.DATA_VIDEO_TYPE, videoType);
	            $decodingHTML.attr(Define.ATTR.STYLE, style);
	            $decodingHTML.find('object, embed, video').attr(Define.ATTR.STYLE, style);

	            if ($decodingHTML.is('embed')) {
	                $decodingHTML.attr(Define.ATTR.SRC, $decodingHTML[0].src);
	            } else {
	                // $decodingHTML.find('source, embed').attr(Define.ATTR.SRC, function(){
	                //     return this.src;
	                // });

	                $decodingHTML.find('object').attr(Define.ATTR.DATA, function(){
	                    return this.data;
	                });
	            }

	            return $decodingHTML[0].outerHTML;
	        });
	    }
	};

	Util.objectNodeToVideoImage = function($targetElement, playImageURL) {
	    var objectNodes = $targetElement.find('object, embed, video');

	    if (objectNodes.length) {
	        objectNodes.replaceWith(function(){
	            var $videoImg = $('<img>');
	            $videoImg.attr(Define.ATTR.SRC, playImageURL);

	            $videoImg.attr(Define.ATTR.DATA_VIDEO_SOURCE, encodeURIComponent(this.outerHTML));
	            $videoImg.attr(Define.ATTR.DATA_VIDEO_TYPE, this.getAttribute(Define.ATTR.DATA_VIDEO_TYPE));
	            $videoImg.attr(Define.ATTR.STYLE, this.getAttribute(Define.ATTR.STYLE));

	            return $videoImg[0].outerHTML;
	        });
	    }
	};

	Util.checkNoneBorder = function($cells) {
	    var isNoneBorder = false;

	    if ($cells && $cells.length) {
	        $cells.each(function(){
	            var $cell = $(this);

	            $cell.removeAttr(Define.ATTR.KK_NONE_BORDER_VISUALIZE_LEFT);

	            var leftStyle = $cell.css('border-left-style');
	            var leftWidth = $cell.css('border-left-width');

	            if (leftStyle == 'none' || parseFloat(leftWidth) == 0) {
	                isNoneBorder = true;
	            }



	            $cell.removeAttr(Define.ATTR.KK_NONE_BORDER_VISUALIZE_RIGHT);

	            var rightStyle = $cell.css('border-right-style');
	            var rightWidth = $cell.css('border-right-width');

	            if (rightStyle == 'none' || parseFloat(rightWidth) == 0) {
	                isNoneBorder = true;
	            }



	            $cell.removeAttr(Define.ATTR.KK_NONE_BORDER_VISUALIZE_TOP);

	            var topStyle = $cell.css('border-top-style');
	            var topWidth = $cell.css('border-top-width');

	            if (topStyle == 'none' || parseFloat(topWidth) == 0) {
	                isNoneBorder = true;
	            }



	            $cell.removeAttr(Define.ATTR.KK_NONE_BORDER_VISUALIZE_BOTTOM);

	            var bottomStyle = $cell.css('border-bottom-style');
	            var bottomWidth = $cell.css('border-bottom-width');

	            if (bottomStyle == 'none' || parseFloat(bottomWidth) == 0) {
	                isNoneBorder = true;
	            }

	            if (isNoneBorder) {
	                return;
	            }
	        });
	    }

	    return isNoneBorder;
	};

	Util.removeAllNoneBorderVisualize = function($cells) {
	    if ($cells && $cells.length) {
	        $cells.removeAttr(Define.ATTR.KK_NONE_BORDER_VISUALIZE_LEFT);
	        $cells.removeAttr(Define.ATTR.KK_NONE_BORDER_VISUALIZE_RIGHT);
	        $cells.removeAttr(Define.ATTR.KK_NONE_BORDER_VISUALIZE_TOP);
	        $cells.removeAttr(Define.ATTR.KK_NONE_BORDER_VISUALIZE_BOTTOM);
	    }
	};

	Util.setNoneBorderVisualize = function($cells) {
	    var _this = this;

	    var attributeValue = 'on';

	    if ($cells && $cells.length) {
	        var $tables = $cells.closest('table');

	        $tables.each(function(){
	            var table = this;
	            var $table = $(table);
	            var $rows = $(table.rows);
	            var tableMatrix = _this.getTableMatrix(table, true);

	            $rows.each(function(){
	                var row = this;
	                var $row = $(row);
	                var $cells = $(row.cells);

	                $cells.each(function(){
	                    var cell = this;
	                    var $cell = $(cell);

	                    _this.removeAllNoneBorderVisualize($cell);


	                    var cellPos = $cell.cellPos();
	                    var topPosition = cellPos.top;
	                    var leftPosition = cellPos.left;


	                    var leftStyle = $cell.css('border-left-style');
	                    var leftWidth = $cell.css('border-left-width');

	                    if (!leftStyle || leftStyle == 'none' || parseFloat(leftWidth) <= 0 || !leftWidth) {
	                        var acceptVisualize = false;

	                        var $prevCell = tableMatrix[topPosition][leftPosition - 1];

	                        if ($prevCell && $prevCell.length) {
	                            var rightStyle = $prevCell[0].style.borderRightStyle;
	                            var rightWidth = $prevCell[0].style.borderRightWidth;

	                            if (!rightStyle || rightStyle == 'none' || parseFloat(rightWidth) <= 0 || !rightWidth) {
	                                acceptVisualize = true;
	                            }

	                        } else {
	                            acceptVisualize = true;
	                        }

	                        if (acceptVisualize) {
	                            $cell.attr(Define.ATTR.KK_NONE_BORDER_VISUALIZE_LEFT, attributeValue);
	                        }
	                    }



	                    var rightStyle = $cell.css('border-right-style');
	                    var rightWidth = $cell.css('border-right-width');

	                    if (!rightStyle || rightStyle == 'none' || parseFloat(rightWidth) <= 0 || !rightWidth) {
	                        var acceptVisualize = false;

	                        var $nextCell = tableMatrix[topPosition][leftPosition + 1];

	                        if ($nextCell && $nextCell.length) {
	                            var leftStyle = $nextCell[0].style.borderLeftStyle;
	                            var leftWidth = $nextCell[0].style.borderLeftWidth;

	                            if (!leftStyle || leftStyle == 'none' || parseFloat(leftWidth) <= 0 || !leftWidth) {
	                                acceptVisualize = true;
	                            }

	                        } else {
	                            acceptVisualize = true;
	                        }

	                        if (acceptVisualize) {
	                            $cell.attr(Define.ATTR.KK_NONE_BORDER_VISUALIZE_RIGHT, attributeValue);
	                        }
	                    }



	                    var topStyle = $cell.css('border-top-style');
	                    var topWidth = $cell.css('border-top-width');

	                    if (!topStyle || topStyle == 'none' || parseFloat(topWidth) <= 0 || !topWidth) {
	                        var acceptVisualize = false;

	                        var upsideRow = tableMatrix[topPosition - 1];

	                        if (upsideRow && upsideRow.length) {
	                            var $upsideCell = upsideRow[leftPosition];

	                            if ($upsideCell && $upsideCell.length) {
	                                var bottomStyle = $upsideCell[0].style.borderBottomStyle;
	                                var bottomWidth = $upsideCell[0].style.borderBottomWidth;

	                                if (!bottomStyle || bottomStyle == 'none' || parseFloat(bottomWidth) <= 0 || !bottomWidth) {
	                                    acceptVisualize = true;
	                                }

	                            } else {
	                                acceptVisualize = true;
	                            }
	                        } else {
	                            acceptVisualize = true;
	                        }

	                        if (acceptVisualize) {
	                            $cell.attr(Define.ATTR.KK_NONE_BORDER_VISUALIZE_TOP, attributeValue);
	                        }
	                    }



	                    var bottomStyle = $cell.css('border-bottom-style');
	                    var bottomWidth = $cell.css('border-bottom-width');

	                    if (!bottomStyle || bottomStyle == 'none' || parseFloat(bottomWidth) <= 0 || !bottomWidth) {

	                        var acceptVisualize = false;

	                        var downsideRow = tableMatrix[topPosition + 1];

	                        if (downsideRow && downsideRow.length) {
	                            var $downsideCell = downsideRow[leftPosition];

	                            if ($downsideCell && $downsideCell.length) {
	                                var topStyle = $downsideCell[0].style.borderTopStyle;
	                                var topWidth = $downsideCell[0].style.borderTopWidth;

	                                if (!topStyle || topStyle == 'none' || parseFloat(topWidth) <= 0 || !topWidth) {
	                                    acceptVisualize = true;
	                                }

	                            } else {
	                                acceptVisualize = true;
	                            }
	                        } else {
	                            acceptVisualize = true;
	                        }

	                        if (acceptVisualize) {
	                            $cell.attr(Define.ATTR.KK_NONE_BORDER_VISUALIZE_BOTTOM, attributeValue);
	                        }
	                    }
	                });
	            });
	        });
	    }
	};

	Util.getTableRowColCount = function(table){
	    var maxTableCellIndex = 0;

	    var $rows = $(table.rows);

	    $rows.each(function(rowIndex, rowNode){
	        var $cells = $(rowNode.cells);

	        $cells.each(function(cellIndex, cellNode){
	            var cellPosition = $(cellNode).cellPos();

	            if (cellPosition.left > maxTableCellIndex) {
	                maxTableCellIndex = cellPosition.left;
	            }
	        });
	    });

	    return {
	        maxRowIndex : $rows.length - 1,
	        maxColIndex : maxTableCellIndex
	    }

	};

	Util.getCurrentCell = function(target) {
	    var cellNode = null;

	    if (target.nodeType == Node.ELEMENT_NODE && Define.CELL_TYPE.indexOf(target.nodeName) > -1) {
	        cellNode = target;
	    } else {
	        var $cellSelect = $(target).closest(Define.CELL_TYPE.join(','));

	        if ($cellSelect.length) {
	            cellNode = $cellSelect[0];
	        }
	    }

	    return cellNode;
	};

	Util.getTableMatrix = function(table, isRePosition) {
	    var rows = table.rows;

	    var $rows = $(rows);

	    var tableMatrix = [];

	    $rows.each(function(rowIndex, rowNode){
	        var $cells = $(rowNode.cells);

	        if (!tableMatrix[rowIndex]) {
	            tableMatrix[rowIndex] = [];
	        }

	        $cells.each(function(cellIndex, cellNode){
	            var setMatrix = function(top, left, cell) {
	                if (!tableMatrix[top]) {
	                    tableMatrix[top] = [];
	                }

	                if (!tableMatrix[top][left]) {
	                    tableMatrix[top][left] = [];
	                }

	                tableMatrix[top][left] = cell;
	            };

	            var $cellNode = $(cellNode);
	            var cellPosition = $cellNode.cellPos(isRePosition);

	            isRePosition = false;

	            var rowSpan = cellNode.rowSpan;
	            var colSpan = cellNode.colSpan;

	            for (var rowIdx = 0, rowLength = rowSpan; rowIdx < rowLength; rowIdx++) {
	                for (var colIdx = 0, colLength = colSpan; colIdx < colLength; colIdx++) {
	                    setMatrix(cellPosition.top + rowIdx, cellPosition.left + colIdx, $cellNode);
	                }
	            }
	        });
	    });

	    return tableMatrix;
	};

	Util.getSelectPositionCells = function(table, startTop, endTop, startLeft, endLeft){
	    var tableMatrix = this.getTableMatrix(table, true);

	    while(1) {
	        var checkStartTop = startTop;
	        var checkStartLeft = startLeft;
	        var checkEndTop = endTop;
	        var checkEndLeft = endLeft;

	        for (var startRowIdx = startTop, endRowIdx = endTop; startRowIdx <= endRowIdx; startRowIdx++) {
	            for (var startColIdx = startLeft, endColIdx = endLeft; startColIdx <= endColIdx; startColIdx++) {
	                var $cell = tableMatrix[startRowIdx][startColIdx];

	                var cellPos = $cell.cellPos();

	                if (cellPos.top < startTop) {
	                    startTop = cellPos.top;
	                }

	                if ((cellPos.top + $cell[0].rowSpan - 1) > endTop) {
	                    endTop = (cellPos.top + $cell[0].rowSpan - 1);
	                }

	                if (cellPos.left < startLeft) {
	                    startLeft = cellPos.left;
	                }

	                if ((cellPos.left + $cell[0].colSpan - 1) > endLeft) {
	                    endLeft = (cellPos.left + $cell[0].colSpan - 1);
	                }

	                if (cellPos.left < startLeft) {
	                    startLeft = cellPos.left;
	                }
	            }
	        }

	        if (checkStartTop == startTop && checkStartLeft == startLeft && checkEndTop == endTop && checkEndLeft == endLeft) {
	            break;
	        }
	    }

	    var selectedCells = [];

	    for (var startRowIdx = startTop, endRowIdx = endTop; startRowIdx <= endRowIdx; startRowIdx++) {
	        for (var startColIdx = startLeft, endColIdx = endLeft; startColIdx <= endColIdx; startColIdx++) {
	            var $cell = tableMatrix[startRowIdx][startColIdx];
	            selectedCells.push($cell[0]);
	        }
	    }

	    return selectedCells;
	};

	Util.getParentOffset = function(parentNode, targetNode){

	    var offset = 0;
	    var parentChildNodes = parentNode.childNodes;

	    for (var i = 0, length = parentChildNodes.length; i < length; i++){
	        if (parentChildNodes[i] == targetNode) {
	            offset = i;
	            break;
	        }
	    }

	    return offset;
	};

	Util.getWindowContentPosition = function(checkNode, editorObject){
	    var editoriFrame = editorObject.editorIframe;
	    var iframeOffset = editoriFrame.offset();

	    var checkOffset = this.getContentPosition(checkNode, editorObject.editorContentView);

	    checkOffset.top = iframeOffset.top + checkOffset.top;
	    checkOffset.left = iframeOffset.left + checkOffset.left;

	    return checkOffset;
	};

	Util.getContentPosition = function(checkNode, editorContentView){
	    var checkNode = $(checkNode);
	    var checkOffset = checkNode.offset();

	    checkOffset.top = checkOffset.top - editorContentView[0].scrollTop;
	    checkOffset.left = checkOffset.left - editorContentView[0].scrollLeft;

	    return checkOffset;
	};

	Util.getTableCellSize = function($table, isRow, isCol){
	    var rows = $table[0].rows;

	    var cellSizeList = [];

	    for (var rowIdx = 0, rowLength = rows.length; rowIdx < rowLength; rowIdx++) {
	        var trNode = rows[rowIdx];
	        var cells = trNode.cells;

	        var cellSizeInfo = [];

	        for (var cellIdx = 0, length = cells.length; cellIdx < length; cellIdx++) {
	            var changeWidthTargetCell = $(cells[cellIdx]);

	            var sizeInfo = { cell : changeWidthTargetCell };

	            if (isRow) {
	                var height;

	                // if ($.browser.chrome) {
	                    height = changeWidthTargetCell.height();//changeWidthTargetCell[0].clientHeight;// - parseInt(changeWidthTargetCell[0].style.borderTopWidth) - parseInt(changeWidthTargetCell[0].style.borderBottomWidth);

	                // } else {
	                //     height = changeWidthTargetCell.height();
	                // }

	                // if (changeWidthTargetCell[0].style.height) {
	                //     var styleHeight = parseInt(changeWidthTargetCell[0].style.height);
	                //     if (height < styleHeight) {
	                //         height = styleHeight;
	                //     }
	                // }

	                sizeInfo.height = height;
	            }

	            if (isCol) {
	                var width;

	                // if ($.browser.chrome) {
	                    width = changeWidthTargetCell.width();//changeWidthTargetCell[0].clientWidth;// - parseInt(changeWidthTargetCell[0].style.borderLeftWidth) - parseInt(changeWidthTargetCell[0].style.borderRightWidth);
	                // } else {
	                //     width = changeWidthTargetCell.width();
	                // }

	                // if (changeWidthTargetCell[0].style.width) {
	                //     var styleWidth = parseInt(changeWidthTargetCell[0].style.width);
	                //     if (width < styleWidth) {
	                //         width = styleWidth;
	                //     }
	                // }

	                sizeInfo.width = width;
	            }

	            cellSizeInfo.push(sizeInfo);
	        }

	        cellSizeList.push(cellSizeInfo);
	    }

	    return cellSizeList;
	};

	Util.setTableCellSize = function(cellSizeList) {

	    for (var rowIdx = 0, rowLength = cellSizeList.length; rowIdx < rowLength; rowIdx++) {
	        var cellSizeInfoList = cellSizeList[rowIdx];

	        for (var cellIdx = 0, length = cellSizeInfoList.length; cellIdx < length; cellIdx++) {
	            var cellSize = cellSizeInfoList[cellIdx];
	            var $cell = cellSize.cell;

	            if (cellSize.height) {
	                // $cell.css('height', cellSize.height + 'px');
	                $cell.height(cellSize.height);
	                $cell.attr('height', cellSize.height);
	            }

	            if (cellSize.width) {
	                // $cell.css('width', cellSize.width + 'px');
	                $cell.width(cellSize.width);
	                $cell.attr('width', cellSize.width);
	            }
	        }
	    }
	};

	Util.setInputChecked = function($node){
	    var $checkNodes = $node.find('input');

	    if ($checkNodes.length) {
	        $checkNodes.each(function(idx, node){
	            if (this.type == 'checkbox' || this.type == 'radio' ) {
	                if (this.checked) {
	                    if (!this.hasAttribute('checked')) {
	                        this.setAttribute('checked', 'checked');
	                    }
	                } else {
	                    this.removeAttribute('checked');
	                }
	            } else if (this.type == 'text') {
	                this.setAttribute('value', this.value);
	            }
	        });
	    }
	};


	/**
	 MIT license
	 Copyright (C) 2015 Miguel Mota
	 Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
	 The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
	 */

	Util.isBase64 = function(v, opts) {
	    if (v instanceof Boolean || typeof v === 'boolean') {
	        return false;
	    }
	    if (!(opts instanceof Object)) {
	        opts = {};
	    }
	    if (opts.hasOwnProperty('allowBlank') && !opts.allowBlank && v === '') {
	        return false;
	    }

	    var regex = /^(data:\w+\/[a-zA-Z\+\-\.]+;base64,)?(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/gi;

	    if (opts.paddingRequired === false) {
	        regex = /^(data:\w+\/[a-zA-Z\+\-\.]+;base64,)?(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/gi;
	    }

	    return regex.test(v);
	};

	Util.isSameParentChildNodeNAme = function(childNode) {

	    var isSame = false;

	    if (childNode
	        && childNode.nodeType == Node.ELEMENT_NODE
	        && childNode.parentNode
	        && childNode.nodeName == childNode.parentNode.nodeName
	        && $.inArray(childNode.parentNode.nodeName, Define.PARAGRAPH_NODES) != -1
	    ) {
	        isSame = true;
	    }

	    return isSame;
	};

	Util.changeWhitespaceTrim = function(html, useRemoveWhitespaceEmptyTag, cmode) {
	    var pattern = /[\f\n\r\t\v]{2,}/g;
	    var replacement = " ";

	    //chekc 20200121
	    if(!useRemoveWhitespaceEmptyTag) {
	        if(cmode && cmode === 'htmlToText') {
	            html = html.replace(pattern, replacement).replace(/\n/gi, "").replace(/\t/gi, " ");
	        }
	        else {
	            html = html.replace(pattern, replacement);
	        }
	    }
	    else {
	        html = html.replace(pattern, replacement).replace(/\n/gi, "").replace(/\t/gi, "").replace( new RegExp( "\>[ ]+\<" , "g" ) , "><" );
	    }

	    // console.log(html);
	    return html
	};

	Util.changeWhitespaceTrimUseHtml = function(html, useRemoveWhitespaceEmptyTag) {
	    var pattern = /[\f\n\r\t\v]{2,}/g;
	    var replacement = " ";

	    //console.log(html)
	    //chekc 20200121
	    if(!useRemoveWhitespaceEmptyTag) {
	        html = html.replace(pattern, replacement).replace(/\n/gi, "").replace(/\t/gi, " ");
	        html = html.replace(/\s\s\s/g, "&nbsp;&nbsp;&nbsp;")
	        //html = html.replace(pattern, replacement);
	    }
	    else {
	        html = html.replace(pattern, replacement).replace(/\n/gi, "").replace(/\t/gi, "").replace( new RegExp( "\>[ ]+\<" , "g" ) , "><" );
	    }

	    // console.log(html);
	    return html
	};

	//chekc 20200317
	// Util.changeWhitespaceTrim = function(html) {
	//     var pattern = /[\f\n\r\t\v]{2,}/g;
	//     var replacement = "";
	//
	//     return html.replace(pattern, replacement).replace(/\n/gi, "").replace(/\t/gi, "").replace( new RegExp( "\>[ ]+\<" , "g" ) , "><" );
	// };

	Util.textToHTML = function(plainText) {
	    if (plainText) {
	        plainText = plainText.replace(/</ig, '&lt;').replace(/>/ig, '&gt;');
	        plainText = plainText.replace(/\n/ig, '<br>');
	        plainText = plainText.replace(/\t/ig, '&nbsp;&nbsp;&nbsp;&nbsp;');
	        plainText = plainText.replace(/ /ig, '&nbsp;');
	        plainText = plainText.replace(/\u200B/ig, '');
	    }

	    return plainText || '';
	};

	//https://stackoverflow.com/questions/27497718/splitting-node-content-in-javascript-dom
	Util.splitOn = function(bound, cutElement) {
	    for (var parent = cutElement.parentNode; bound != parent; parent = grandparent) {
	        var right = parent.cloneNode(false);

	        while (cutElement.nextSibling){
	            right.appendChild(cutElement.nextSibling);
	        }

	        var grandparent = parent.parentNode;
	        grandparent.insertBefore(right, parent.nextSibling);
	        grandparent.insertBefore(cutElement, right);
	    }
	};


	//TextArea POSITION
	Util.setTextareaSelectionRange = function(input, selectionStart, selectionEnd) {
	    if (input.setSelectionRange) {
	        input.setSelectionRange(selectionStart, selectionEnd);
	        input.focus();
	    }
	    else if (input.createTextRange) {
	        var range = input.createTextRange();
	        range.collapse(true);
	        range.moveEnd('character', selectionEnd);
	        range.moveStart('character', selectionStart);
	        range.select();
	    }
	};

	module.exports = Util;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	var beautify = __webpack_require__(7);
	var defaults = {
	    unformatted: ['code', 'pre', 'em', 'strong', 'span'],
	    indent_inner_html: true,
	    indent_char: ' ',
	    indent_size: 2,
	    sep: '\n'
	};

	module.exports = function(str, options) {
	    var opts = $.extend({}, defaults, options);
	    str = beautify.html(str, opts);

	    return str;
	};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	  The MIT License (MIT)

	  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.

	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:

	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.

	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.

	*/

	/**
	The following batches are equivalent:

	var beautify_js = require('js-beautify');
	var beautify_js = require('js-beautify').js;
	var beautify_js = require('js-beautify').js_beautify;

	var beautify_css = require('js-beautify').css;
	var beautify_css = require('js-beautify').css_beautify;

	var beautify_html = require('js-beautify').html;
	var beautify_html = require('js-beautify').html_beautify;

	All methods returned accept two arguments, the source string and an options object.
	**/

	function get_beautify(js_beautify, css_beautify, html_beautify) {
	    // the default is js
	    var beautify = function(src, config) {
	        return js_beautify.js_beautify(src, config);
	    };

	    // short aliases
	    beautify.js = js_beautify.js_beautify;
	    beautify.css = css_beautify.css_beautify;
	    beautify.html = html_beautify.html_beautify;

	    // legacy aliases
	    beautify.js_beautify = js_beautify.js_beautify;
	    beautify.css_beautify = css_beautify.css_beautify;
	    beautify.html_beautify = html_beautify.html_beautify;

	    return beautify;
	}

	if (true) {
	    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(8),
	        __webpack_require__(9),
	        __webpack_require__(10)
	    ], __WEBPACK_AMD_DEFINE_RESULT__ = function(js_beautify, css_beautify, html_beautify) {
	        return get_beautify(js_beautify, css_beautify, html_beautify);
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
	    (function(mod) {
	        var js_beautify = require('./lib/beautify');
	        var css_beautify = require('./lib/beautify-css');
	        var html_beautify = require('./lib/beautify-html');

	        mod.exports = get_beautify(js_beautify, css_beautify, html_beautify);

	    })(module);
	}

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
	/*

	  The MIT License (MIT)

	  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.

	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:

	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.

	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.

	 JS Beautifier
	---------------


	  Written by Einar Lielmanis, <einar@jsbeautifier.org>
	      http://jsbeautifier.org/

	  Originally converted to javascript by Vital, <vital76@gmail.com>
	  "End braces on own line" added by Chris J. Shull, <chrisjshull@gmail.com>
	  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>


	  Usage:
	    js_beautify(js_source_text);
	    js_beautify(js_source_text, options);

	  The options are:
	    indent_size (default 4)          - indentation size,
	    indent_char (default space)      - character to indent with,
	    preserve_newlines (default true) - whether existing line breaks should be preserved,
	    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,

	    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.

	            jslint_happy        !jslint_happy
	            ---------------------------------
	            function ()         function()

	            switch () {         switch() {
	            case 1:               case 1:
	              break;                break;
	            }                   }

	    space_after_anon_function (default false) - should the space before an anonymous function's parens be added, "function()" vs "function ()",
	          NOTE: This option is overriden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)

	    brace_style (default "collapse") - "collapse" | "expand" | "end-expand" | "none" | any of the former + ",preserve-inline"
	            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.
	            preserve-inline will try to preserve inline blocks of curly braces

	    space_before_conditional (default true) - should the space before conditional statement be added, "if(true)" vs "if (true)",

	    unescape_strings (default false) - should printable characters in strings encoded in \xNN notation be unescaped, "example" vs "\x65\x78\x61\x6d\x70\x6c\x65"

	    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.
	          NOTE: This is not a hard limit. Lines will continue until a point where a newline would
	                be preserved if it were present.

	    end_with_newline (default false)  - end output with a newline


	    e.g

	    js_beautify(js_source_text, {
	      'indent_size': 1,
	      'indent_char': '\t'
	    });

	*/

	// Object.values polyfill found here:
	// http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html
	if (!Object.values) {
	    Object.values = function(o) {
	        if (o !== Object(o)) {
	            throw new TypeError('Object.values called on a non-object');
	        }
	        var k = [],
	            p;
	        for (p in o) {
	            if (Object.prototype.hasOwnProperty.call(o, p)) {
	                k.push(o[p]);
	            }
	        }
	        return k;
	    };
	}

	(function() {

	    function mergeOpts(allOptions, targetType) {
	        var finalOpts = {};
	        var name;

	        for (name in allOptions) {
	            if (name !== targetType) {
	                finalOpts[name] = allOptions[name];
	            }
	        }

	        //merge in the per type settings for the targetType
	        if (targetType in allOptions) {
	            for (name in allOptions[targetType]) {
	                finalOpts[name] = allOptions[targetType][name];
	            }
	        }
	        return finalOpts;
	    }

	    function js_beautify(js_source_text, options) {

	        var acorn = {};
	        (function(exports) {
	            /* jshint curly: false */
	            // This section of code is taken from acorn.
	            //
	            // Acorn was written by Marijn Haverbeke and released under an MIT
	            // license. The Unicode regexps (for identifiers and whitespace) were
	            // taken from [Esprima](http://esprima.org) by Ariya Hidayat.
	            //
	            // Git repositories for Acorn are available at
	            //
	            //     http://marijnhaverbeke.nl/git/acorn
	            //     https://github.com/marijnh/acorn.git

	            // ## Character categories

	            // Big ugly regular expressions that match characters in the
	            // whitespace, identifier, and identifier-start categories. These
	            // are only applied when a character is found to actually have a
	            // code point above 128.

	            var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/; // jshint ignore:line
	            var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
	            var nonASCIIidentifierChars = "\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u0620-\u0649\u0672-\u06d3\u06e7-\u06e8\u06fb-\u06fc\u0730-\u074a\u0800-\u0814\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0840-\u0857\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962-\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09d7\u09df-\u09e0\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5f-\u0b60\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2-\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d46-\u0d48\u0d57\u0d62-\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e34-\u0e3a\u0e40-\u0e45\u0e50-\u0e59\u0eb4-\u0eb9\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f41-\u0f47\u0f71-\u0f84\u0f86-\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1029\u1040-\u1049\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u170e-\u1710\u1720-\u1730\u1740-\u1750\u1772\u1773\u1780-\u17b2\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1920-\u192b\u1930-\u193b\u1951-\u196d\u19b0-\u19c0\u19c8-\u19c9\u19d0-\u19d9\u1a00-\u1a15\u1a20-\u1a53\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b46-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1bb0-\u1bb9\u1be6-\u1bf3\u1c00-\u1c22\u1c40-\u1c49\u1c5b-\u1c7d\u1cd0-\u1cd2\u1d00-\u1dbe\u1e01-\u1f15\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2d81-\u2d96\u2de0-\u2dff\u3021-\u3028\u3099\u309a\ua640-\ua66d\ua674-\ua67d\ua69f\ua6f0-\ua6f1\ua7f8-\ua800\ua806\ua80b\ua823-\ua827\ua880-\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8f3-\ua8f7\ua900-\ua909\ua926-\ua92d\ua930-\ua945\ua980-\ua983\ua9b3-\ua9c0\uaa00-\uaa27\uaa40-\uaa41\uaa4c-\uaa4d\uaa50-\uaa59\uaa7b\uaae0-\uaae9\uaaf2-\uaaf3\uabc0-\uabe1\uabec\uabed\uabf0-\uabf9\ufb20-\ufb28\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
	            var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	            var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

	            // Whether a single character denotes a newline.

	            exports.newline = /[\n\r\u2028\u2029]/;

	            // Matches a whole line break (where CRLF is considered a single
	            // line break). Used to count lines.

	            // in javascript, these two differ
	            // in python they are the same, different methods are called on them
	            exports.lineBreak = new RegExp('\r\n|' + exports.newline.source);
	            exports.allLineBreaks = new RegExp(exports.lineBreak.source, 'g');


	            // Test whether a given character code starts an identifier.

	            exports.isIdentifierStart = function(code) {
	                // permit $ (36) and @ (64). @ is used in ES7 decorators.
	                if (code < 65) return code === 36 || code === 64;
	                // 65 through 91 are uppercase letters.
	                if (code < 91) return true;
	                // permit _ (95).
	                if (code < 97) return code === 95;
	                // 97 through 123 are lowercase letters.
	                if (code < 123) return true;
	                return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	            };

	            // Test whether a given character is part of an identifier.

	            exports.isIdentifierChar = function(code) {
	                if (code < 48) return code === 36;
	                if (code < 58) return true;
	                if (code < 65) return false;
	                if (code < 91) return true;
	                if (code < 97) return code === 95;
	                if (code < 123) return true;
	                return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	            };
	        })(acorn);
	        /* jshint curly: true */

	        function in_array(what, arr) {
	            for (var i = 0; i < arr.length; i += 1) {
	                if (arr[i] === what) {
	                    return true;
	                }
	            }
	            return false;
	        }

	        function trim(s) {
	            return s.replace(/^\s+|\s+$/g, '');
	        }

	        function ltrim(s) {
	            return s.replace(/^\s+/g, '');
	        }

	        // function rtrim(s) {
	        //     return s.replace(/\s+$/g, '');
	        // }

	        function sanitizeOperatorPosition(opPosition) {
	            opPosition = opPosition || OPERATOR_POSITION.before_newline;

	            var validPositionValues = Object.values(OPERATOR_POSITION);

	            if (!in_array(opPosition, validPositionValues)) {
	                throw new Error("Invalid Option Value: The option 'operator_position' must be one of the following values\n" +
	                    validPositionValues +
	                    "\nYou passed in: '" + opPosition + "'");
	            }

	            return opPosition;
	        }

	        var OPERATOR_POSITION = {
	            before_newline: 'before-newline',
	            after_newline: 'after-newline',
	            preserve_newline: 'preserve-newline',
	        };

	        var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [OPERATOR_POSITION.before_newline, OPERATOR_POSITION.preserve_newline];

	        var MODE = {
	            BlockStatement: 'BlockStatement', // 'BLOCK'
	            Statement: 'Statement', // 'STATEMENT'
	            ObjectLiteral: 'ObjectLiteral', // 'OBJECT',
	            ArrayLiteral: 'ArrayLiteral', //'[EXPRESSION]',
	            ForInitializer: 'ForInitializer', //'(FOR-EXPRESSION)',
	            Conditional: 'Conditional', //'(COND-EXPRESSION)',
	            Expression: 'Expression' //'(EXPRESSION)'
	        };

	        function Beautifier(js_source_text, options) {
	            "use strict";
	            var output;
	            var tokens = [],
	                token_pos;
	            var Tokenizer;
	            var current_token;
	            var last_type, last_last_text, indent_string;
	            var flags, previous_flags, flag_store;
	            var prefix;

	            var handlers, opt;
	            var baseIndentString = '';

	            handlers = {
	                'TK_START_EXPR': handle_start_expr,
	                'TK_END_EXPR': handle_end_expr,
	                'TK_START_BLOCK': handle_start_block,
	                'TK_END_BLOCK': handle_end_block,
	                'TK_WORD': handle_word,
	                'TK_RESERVED': handle_word,
	                'TK_SEMICOLON': handle_semicolon,
	                'TK_STRING': handle_string,
	                'TK_EQUALS': handle_equals,
	                'TK_OPERATOR': handle_operator,
	                'TK_COMMA': handle_comma,
	                'TK_BLOCK_COMMENT': handle_block_comment,
	                'TK_COMMENT': handle_comment,
	                'TK_DOT': handle_dot,
	                'TK_UNKNOWN': handle_unknown,
	                'TK_EOF': handle_eof
	            };

	            function create_flags(flags_base, mode) {
	                var next_indent_level = 0;
	                if (flags_base) {
	                    next_indent_level = flags_base.indentation_level;
	                    if (!output.just_added_newline() &&
	                        flags_base.line_indent_level > next_indent_level) {
	                        next_indent_level = flags_base.line_indent_level;
	                    }
	                }

	                var next_flags = {
	                    mode: mode,
	                    parent: flags_base,
	                    last_text: flags_base ? flags_base.last_text : '', // last token text
	                    last_word: flags_base ? flags_base.last_word : '', // last 'TK_WORD' passed
	                    declaration_statement: false,
	                    declaration_assignment: false,
	                    multiline_frame: false,
	                    inline_frame: false,
	                    if_block: false,
	                    else_block: false,
	                    do_block: false,
	                    do_while: false,
	                    import_block: false,
	                    in_case_statement: false, // switch(..){ INSIDE HERE }
	                    in_case: false, // we're on the exact line with "case 0:"
	                    case_body: false, // the indented case-action block
	                    indentation_level: next_indent_level,
	                    line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,
	                    start_line_index: output.get_line_number(),
	                    ternary_depth: 0
	                };
	                return next_flags;
	            }

	            // Some interpreters have unexpected results with foo = baz || bar;
	            options = options ? options : {};

	            // Allow the setting of language/file-type specific options
	            // with inheritance of overall settings
	            options = mergeOpts(options, 'js');

	            opt = {};

	            // compatibility, re
	            if (options.brace_style === "expand-strict") { //graceful handling of deprecated option
	                options.brace_style = "expand";
	            } else if (options.brace_style === "collapse-preserve-inline") { //graceful handling of deprecated option
	                options.brace_style = "collapse,preserve-inline";
	            } else if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option
	                options.brace_style = options.braces_on_own_line ? "expand" : "collapse";
	            } else if (!options.brace_style) //Nothing exists to set it
	            {
	                options.brace_style = "collapse";
	            }


	            var brace_style_split = options.brace_style.split(/[^a-zA-Z0-9_\-]+/);
	            opt.brace_style = brace_style_split[0];
	            opt.brace_preserve_inline = brace_style_split[1] ? brace_style_split[1] : false;

	            opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;
	            opt.indent_char = options.indent_char ? options.indent_char : ' ';
	            opt.eol = options.eol ? options.eol : 'auto';
	            opt.preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;
	            opt.break_chained_methods = (options.break_chained_methods === undefined) ? false : options.break_chained_methods;
	            opt.max_preserve_newlines = (options.max_preserve_newlines === undefined) ? 0 : parseInt(options.max_preserve_newlines, 10);
	            opt.space_in_paren = (options.space_in_paren === undefined) ? false : options.space_in_paren;
	            opt.space_in_empty_paren = (options.space_in_empty_paren === undefined) ? false : options.space_in_empty_paren;
	            opt.jslint_happy = (options.jslint_happy === undefined) ? false : options.jslint_happy;
	            opt.space_after_anon_function = (options.space_after_anon_function === undefined) ? false : options.space_after_anon_function;
	            opt.keep_array_indentation = (options.keep_array_indentation === undefined) ? false : options.keep_array_indentation;
	            opt.space_before_conditional = (options.space_before_conditional === undefined) ? true : options.space_before_conditional;
	            opt.unescape_strings = (options.unescape_strings === undefined) ? false : options.unescape_strings;
	            opt.wrap_line_length = (options.wrap_line_length === undefined) ? 0 : parseInt(options.wrap_line_length, 10);
	            opt.e4x = (options.e4x === undefined) ? false : options.e4x;
	            opt.end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
	            opt.comma_first = (options.comma_first === undefined) ? false : options.comma_first;
	            opt.operator_position = sanitizeOperatorPosition(options.operator_position);

	            // For testing of beautify ignore:start directive
	            opt.test_output_raw = (options.test_output_raw === undefined) ? false : options.test_output_raw;

	            // force opt.space_after_anon_function to true if opt.jslint_happy
	            if (opt.jslint_happy) {
	                opt.space_after_anon_function = true;
	            }

	            if (options.indent_with_tabs) {
	                opt.indent_char = '\t';
	                opt.indent_size = 1;
	            }

	            if (opt.eol === 'auto') {
	                opt.eol = '\n';
	                if (js_source_text && acorn.lineBreak.test(js_source_text || '')) {
	                    opt.eol = js_source_text.match(acorn.lineBreak)[0];
	                }
	            }

	            opt.eol = opt.eol.replace(/\\r/, '\r').replace(/\\n/, '\n');

	            //----------------------------------
	            indent_string = '';
	            while (opt.indent_size > 0) {
	                indent_string += opt.indent_char;
	                opt.indent_size -= 1;
	            }

	            var preindent_index = 0;
	            if (js_source_text && js_source_text.length) {
	                while ((js_source_text.charAt(preindent_index) === ' ' ||
	                        js_source_text.charAt(preindent_index) === '\t')) {
	                    baseIndentString += js_source_text.charAt(preindent_index);
	                    preindent_index += 1;
	                }
	                js_source_text = js_source_text.substring(preindent_index);
	            }

	            last_type = 'TK_START_BLOCK'; // last token type
	            last_last_text = ''; // pre-last token text
	            output = new Output(indent_string, baseIndentString);

	            // If testing the ignore directive, start with output disable set to true
	            output.raw = opt.test_output_raw;


	            // Stack of parsing/formatting states, including MODE.
	            // We tokenize, parse, and output in an almost purely a forward-only stream of token input
	            // and formatted output.  This makes the beautifier less accurate than full parsers
	            // but also far more tolerant of syntax errors.
	            //
	            // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type
	            // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later
	            // encounter a ":", we'll switch to to MODE.ObjectLiteral.  If we then see a ";",
	            // most full parsers would die, but the beautifier gracefully falls back to
	            // MODE.BlockStatement and continues on.
	            flag_store = [];
	            set_mode(MODE.BlockStatement);

	            this.beautify = function() {

	                /*jshint onevar:true */
	                var sweet_code;
	                Tokenizer = new tokenizer(js_source_text, opt, indent_string);
	                tokens = Tokenizer.tokenize();
	                token_pos = 0;

	                current_token = get_token();
	                while (current_token) {
	                    handlers[current_token.type]();

	                    last_last_text = flags.last_text;
	                    last_type = current_token.type;
	                    flags.last_text = current_token.text;

	                    token_pos += 1;
	                    current_token = get_token();
	                }

	                sweet_code = output.get_code();
	                if (opt.end_with_newline) {
	                    sweet_code += '\n';
	                }

	                if (opt.eol !== '\n') {
	                    sweet_code = sweet_code.replace(/[\n]/g, opt.eol);
	                }

	                return sweet_code;
	            };

	            function handle_whitespace_and_comments(local_token, preserve_statement_flags) {
	                var newlines = local_token.newlines;
	                var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);
	                var temp_token = current_token;

	                for (var h = 0; h < local_token.comments_before.length; h++) {
	                    // The cleanest handling of inline comments is to treat them as though they aren't there.
	                    // Just continue formatting and the behavior should be logical.
	                    // Also ignore unknown tokens.  Again, this should result in better behavior.
	                    current_token = local_token.comments_before[h];
	                    handle_whitespace_and_comments(current_token, preserve_statement_flags);
	                    handlers[current_token.type](preserve_statement_flags);
	                }
	                current_token = temp_token;

	                if (keep_whitespace) {
	                    for (var i = 0; i < newlines; i += 1) {
	                        print_newline(i > 0, preserve_statement_flags);
	                    }
	                } else {
	                    if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {
	                        newlines = opt.max_preserve_newlines;
	                    }

	                    if (opt.preserve_newlines) {
	                        if (local_token.newlines > 1) {
	                            print_newline(false, preserve_statement_flags);
	                            for (var j = 1; j < newlines; j += 1) {
	                                print_newline(true, preserve_statement_flags);
	                            }
	                        }
	                    }
	                }

	            }

	            // we could use just string.split, but
	            // IE doesn't like returning empty strings
	            function split_linebreaks(s) {
	                //return s.split(/\x0d\x0a|\x0a/);

	                s = s.replace(acorn.allLineBreaks, '\n');
	                var out = [],
	                    idx = s.indexOf("\n");
	                while (idx !== -1) {
	                    out.push(s.substring(0, idx));
	                    s = s.substring(idx + 1);
	                    idx = s.indexOf("\n");
	                }
	                if (s.length) {
	                    out.push(s);
	                }
	                return out;
	            }

	            var newline_restricted_tokens = ['break', 'continue', 'return', 'throw'];

	            function allow_wrap_or_preserved_newline(force_linewrap) {
	                force_linewrap = (force_linewrap === undefined) ? false : force_linewrap;

	                // Never wrap the first token on a line
	                if (output.just_added_newline()) {
	                    return;
	                }

	                var shouldPreserveOrForce = (opt.preserve_newlines && current_token.wanted_newline) || force_linewrap;
	                var operatorLogicApplies = in_array(flags.last_text, Tokenizer.positionable_operators) || in_array(current_token.text, Tokenizer.positionable_operators);

	                if (operatorLogicApplies) {
	                    var shouldPrintOperatorNewline = (
	                            in_array(flags.last_text, Tokenizer.positionable_operators) &&
	                            in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)
	                        ) ||
	                        in_array(current_token.text, Tokenizer.positionable_operators);
	                    shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;
	                }

	                if (shouldPreserveOrForce) {
	                    print_newline(false, true);
	                } else if (opt.wrap_line_length) {
	                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, newline_restricted_tokens)) {
	                        // These tokens should never have a newline inserted
	                        // between them and the following expression.
	                        return;
	                    }
	                    var proposed_line_length = output.current_line.get_character_count() + current_token.text.length +
	                        (output.space_before_token ? 1 : 0);
	                    if (proposed_line_length >= opt.wrap_line_length) {
	                        print_newline(false, true);
	                    }
	                }
	            }

	            function print_newline(force_newline, preserve_statement_flags) {
	                if (!preserve_statement_flags) {
	                    if (flags.last_text !== ';' && flags.last_text !== ',' && flags.last_text !== '=' && last_type !== 'TK_OPERATOR') {
	                        var next_token = get_token(1);
	                        while (flags.mode === MODE.Statement &&
	                            !(flags.if_block && next_token && next_token.type === 'TK_RESERVED' && next_token.text === 'else') &&
	                            !flags.do_block) {
	                            restore_mode();
	                        }
	                    }
	                }

	                if (output.add_new_line(force_newline)) {
	                    flags.multiline_frame = true;
	                }
	            }

	            function print_token_line_indentation() {
	                if (output.just_added_newline()) {
	                    if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {
	                        output.current_line.push(current_token.whitespace_before);
	                        output.space_before_token = false;
	                    } else if (output.set_indent(flags.indentation_level)) {
	                        flags.line_indent_level = flags.indentation_level;
	                    }
	                }
	            }

	            function print_token(printable_token) {
	                if (output.raw) {
	                    output.add_raw_token(current_token);
	                    return;
	                }

	                if (opt.comma_first && last_type === 'TK_COMMA' &&
	                    output.just_added_newline()) {
	                    if (output.previous_line.last() === ',') {
	                        var popped = output.previous_line.pop();
	                        // if the comma was already at the start of the line,
	                        // pull back onto that line and reprint the indentation
	                        if (output.previous_line.is_empty()) {
	                            output.previous_line.push(popped);
	                            output.trim(true);
	                            output.current_line.pop();
	                            output.trim();
	                        }

	                        // add the comma in front of the next token
	                        print_token_line_indentation();
	                        output.add_token(',');
	                        output.space_before_token = true;
	                    }
	                }

	                printable_token = printable_token || current_token.text;
	                print_token_line_indentation();
	                output.add_token(printable_token);
	            }

	            function indent() {
	                flags.indentation_level += 1;
	            }

	            function deindent() {
	                if (flags.indentation_level > 0 &&
	                    ((!flags.parent) || flags.indentation_level > flags.parent.indentation_level)) {
	                    flags.indentation_level -= 1;

	                }
	            }

	            function set_mode(mode) {
	                if (flags) {
	                    flag_store.push(flags);
	                    previous_flags = flags;
	                } else {
	                    previous_flags = create_flags(null, mode);
	                }

	                flags = create_flags(previous_flags, mode);
	            }

	            function is_array(mode) {
	                return mode === MODE.ArrayLiteral;
	            }

	            function is_expression(mode) {
	                return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional]);
	            }

	            function restore_mode() {
	                if (flag_store.length > 0) {
	                    previous_flags = flags;
	                    flags = flag_store.pop();
	                    if (previous_flags.mode === MODE.Statement) {
	                        output.remove_redundant_indentation(previous_flags);
	                    }
	                }
	            }

	            function start_of_object_property() {
	                return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (
	                    (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set'])));
	            }

	            function start_of_statement() {
	                if (
	                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') ||
	                    (last_type === 'TK_RESERVED' && flags.last_text === 'do') ||
	                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw']) && !current_token.wanted_newline) ||
	                    (last_type === 'TK_RESERVED' && flags.last_text === 'else' &&
	                        !(current_token.type === 'TK_RESERVED' && current_token.text === 'if' && !current_token.comments_before.length)) ||
	                    (last_type === 'TK_END_EXPR' && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional)) ||
	                    (last_type === 'TK_WORD' && flags.mode === MODE.BlockStatement &&
	                        !flags.in_case &&
	                        !(current_token.text === '--' || current_token.text === '++') &&
	                        last_last_text !== 'function' &&
	                        current_token.type !== 'TK_WORD' && current_token.type !== 'TK_RESERVED') ||
	                    (flags.mode === MODE.ObjectLiteral && (
	                        (flags.last_text === ':' && flags.ternary_depth === 0) || (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set']))))
	                ) {

	                    set_mode(MODE.Statement);
	                    indent();

	                    handle_whitespace_and_comments(current_token, true);

	                    // Issue #276:
	                    // If starting a new statement with [if, for, while, do], push to a new line.
	                    // if (a) if (b) if(c) d(); else e(); else f();
	                    if (!start_of_object_property()) {
	                        allow_wrap_or_preserved_newline(
	                            current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['do', 'for', 'if', 'while']));
	                    }

	                    return true;
	                }
	                return false;
	            }

	            function all_lines_start_with(lines, c) {
	                for (var i = 0; i < lines.length; i++) {
	                    var line = trim(lines[i]);
	                    if (line.charAt(0) !== c) {
	                        return false;
	                    }
	                }
	                return true;
	            }

	            function each_line_matches_indent(lines, indent) {
	                var i = 0,
	                    len = lines.length,
	                    line;
	                for (; i < len; i++) {
	                    line = lines[i];
	                    // allow empty lines to pass through
	                    if (line && line.indexOf(indent) !== 0) {
	                        return false;
	                    }
	                }
	                return true;
	            }

	            function is_special_word(word) {
	                return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);
	            }

	            function get_token(offset) {
	                var index = token_pos + (offset || 0);
	                return (index < 0 || index >= tokens.length) ? null : tokens[index];
	            }

	            function handle_start_expr() {
	                // The conditional starts the statement if appropriate.
	                if (!start_of_statement()) {
	                    handle_whitespace_and_comments(current_token);
	                }

	                var next_mode = MODE.Expression;
	                if (current_token.text === '[') {

	                    if (last_type === 'TK_WORD' || flags.last_text === ')') {
	                        // this is array index specifier, break immediately
	                        // a[x], fn()[x]
	                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, Tokenizer.line_starters)) {
	                            output.space_before_token = true;
	                        }
	                        set_mode(next_mode);
	                        print_token();
	                        indent();
	                        if (opt.space_in_paren) {
	                            output.space_before_token = true;
	                        }
	                        return;
	                    }

	                    next_mode = MODE.ArrayLiteral;
	                    if (is_array(flags.mode)) {
	                        if (flags.last_text === '[' ||
	                            (flags.last_text === ',' && (last_last_text === ']' || last_last_text === '}'))) {
	                            // ], [ goes to new line
	                            // }, [ goes to new line
	                            if (!opt.keep_array_indentation) {
	                                print_newline();
	                            }
	                        }
	                    }

	                } else {
	                    if (last_type === 'TK_RESERVED' && flags.last_text === 'for') {
	                        next_mode = MODE.ForInitializer;
	                    } else if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['if', 'while'])) {
	                        next_mode = MODE.Conditional;
	                    } else {
	                        // next_mode = MODE.Expression;
	                    }
	                }

	                if (flags.last_text === ';' || last_type === 'TK_START_BLOCK') {
	                    print_newline();
	                } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || flags.last_text === '.') {
	                    // TODO: Consider whether forcing this is required.  Review failing tests when removed.
	                    allow_wrap_or_preserved_newline(current_token.wanted_newline);
	                    // do nothing on (( and )( and ][ and ]( and .(
	                } else if (!(last_type === 'TK_RESERVED' && current_token.text === '(') && last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {
	                    output.space_before_token = true;
	                } else if ((last_type === 'TK_RESERVED' && (flags.last_word === 'function' || flags.last_word === 'typeof')) ||
	                    (flags.last_text === '*' &&
	                        (in_array(last_last_text, ['function', 'yield']) ||
	                            (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {
	                    // function() vs function ()
	                    // yield*() vs yield* ()
	                    // function*() vs function* ()
	                    if (opt.space_after_anon_function) {
	                        output.space_before_token = true;
	                    }
	                } else if (last_type === 'TK_RESERVED' && (in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === 'catch')) {
	                    if (opt.space_before_conditional) {
	                        output.space_before_token = true;
	                    }
	                }

	                // Should be a space between await and an IIFE
	                if (current_token.text === '(' && last_type === 'TK_RESERVED' && flags.last_word === 'await') {
	                    output.space_before_token = true;
	                }

	                // Support of this kind of newline preservation.
	                // a = (b &&
	                //     (c || d));
	                if (current_token.text === '(') {
	                    if (last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
	                        if (!start_of_object_property()) {
	                            allow_wrap_or_preserved_newline();
	                        }
	                    }
	                }

	                // Support preserving wrapped arrow function expressions
	                // a.b('c',
	                //     () => d.e
	                // )
	                if (current_token.text === '(' && last_type !== 'TK_WORD' && last_type !== 'TK_RESERVED') {
	                    allow_wrap_or_preserved_newline();
	                }

	                set_mode(next_mode);
	                print_token();
	                if (opt.space_in_paren) {
	                    output.space_before_token = true;
	                }

	                // In all cases, if we newline while inside an expression it should be indented.
	                indent();
	            }

	            function handle_end_expr() {
	                // statements inside expressions are not valid syntax, but...
	                // statements must all be closed when their container closes
	                while (flags.mode === MODE.Statement) {
	                    restore_mode();
	                }

	                handle_whitespace_and_comments(current_token);

	                if (flags.multiline_frame) {
	                    allow_wrap_or_preserved_newline(current_token.text === ']' && is_array(flags.mode) && !opt.keep_array_indentation);
	                }

	                if (opt.space_in_paren) {
	                    if (last_type === 'TK_START_EXPR' && !opt.space_in_empty_paren) {
	                        // () [] no inner space in empty parens like these, ever, ref #320
	                        output.trim();
	                        output.space_before_token = false;
	                    } else {
	                        output.space_before_token = true;
	                    }
	                }
	                if (current_token.text === ']' && opt.keep_array_indentation) {
	                    print_token();
	                    restore_mode();
	                } else {
	                    restore_mode();
	                    print_token();
	                }
	                output.remove_redundant_indentation(previous_flags);

	                // do {} while () // no statement required after
	                if (flags.do_while && previous_flags.mode === MODE.Conditional) {
	                    previous_flags.mode = MODE.Expression;
	                    flags.do_block = false;
	                    flags.do_while = false;

	                }
	            }

	            function handle_start_block() {
	                handle_whitespace_and_comments(current_token);

	                // Check if this is should be treated as a ObjectLiteral
	                var next_token = get_token(1);
	                var second_token = get_token(2);
	                if (second_token && (
	                        (in_array(second_token.text, [':', ',']) && in_array(next_token.type, ['TK_STRING', 'TK_WORD', 'TK_RESERVED'])) ||
	                        (in_array(next_token.text, ['get', 'set', '...']) && in_array(second_token.type, ['TK_WORD', 'TK_RESERVED']))
	                    )) {
	                    // We don't support TypeScript,but we didn't break it for a very long time.
	                    // We'll try to keep not breaking it.
	                    if (!in_array(last_last_text, ['class', 'interface'])) {
	                        set_mode(MODE.ObjectLiteral);
	                    } else {
	                        set_mode(MODE.BlockStatement);
	                    }
	                } else if (last_type === 'TK_OPERATOR' && flags.last_text === '=>') {
	                    // arrow function: (param1, paramN) => { statements }
	                    set_mode(MODE.BlockStatement);
	                } else if (in_array(last_type, ['TK_EQUALS', 'TK_START_EXPR', 'TK_COMMA', 'TK_OPERATOR']) ||
	                    (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['return', 'throw', 'import', 'default']))
	                ) {
	                    // Detecting shorthand function syntax is difficult by scanning forward,
	                    //     so check the surrounding context.
	                    // If the block is being returned, imported, export default, passed as arg,
	                    //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.
	                    set_mode(MODE.ObjectLiteral);
	                } else {
	                    set_mode(MODE.BlockStatement);
	                }

	                var empty_braces = !next_token.comments_before.length && next_token.text === '}';
	                var empty_anonymous_function = empty_braces && flags.last_word === 'function' &&
	                    last_type === 'TK_END_EXPR';

	                if (opt.brace_preserve_inline) // check for inline, set inline_frame if so
	                {
	                    // search forward for a newline wanted inside this block
	                    var index = 0;
	                    var check_token = null;
	                    flags.inline_frame = true;
	                    do {
	                        index += 1;
	                        check_token = get_token(index);
	                        if (check_token.wanted_newline) {
	                            flags.inline_frame = false;
	                            break;
	                        }
	                    } while (check_token.type !== 'TK_EOF' &&
	                        !(check_token.type === 'TK_END_BLOCK' && check_token.opened === current_token));
	                }

	                if ((opt.brace_style === "expand" ||
	                        (opt.brace_style === "none" && current_token.wanted_newline)) &&
	                    !flags.inline_frame) {
	                    if (last_type !== 'TK_OPERATOR' &&
	                        (empty_anonymous_function ||
	                            last_type === 'TK_EQUALS' ||
	                            (last_type === 'TK_RESERVED' && is_special_word(flags.last_text) && flags.last_text !== 'else'))) {
	                        output.space_before_token = true;
	                    } else {
	                        print_newline(false, true);
	                    }
	                } else { // collapse || inline_frame
	                    if (is_array(previous_flags.mode) && (last_type === 'TK_START_EXPR' || last_type === 'TK_COMMA')) {
	                        if (last_type === 'TK_COMMA' || opt.space_in_paren) {
	                            output.space_before_token = true;
	                        }

	                        if (last_type === 'TK_COMMA' || (last_type === 'TK_START_EXPR' && flags.inline_frame)) {
	                            allow_wrap_or_preserved_newline();
	                            previous_flags.multiline_frame = previous_flags.multiline_frame || flags.multiline_frame;
	                            flags.multiline_frame = false;
	                        }
	                    }
	                    if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {
	                        if (last_type === 'TK_START_BLOCK' && !flags.inline_frame) {
	                            print_newline();
	                        } else {
	                            output.space_before_token = true;
	                        }
	                    }
	                }
	                print_token();
	                indent();
	            }

	            function handle_end_block() {
	                // statements must all be closed when their container closes
	                handle_whitespace_and_comments(current_token);

	                while (flags.mode === MODE.Statement) {
	                    restore_mode();
	                }

	                var empty_braces = last_type === 'TK_START_BLOCK';

	                if (flags.inline_frame && !empty_braces) { // try inline_frame (only set if opt.braces-preserve-inline) first
	                    output.space_before_token = true;
	                } else if (opt.brace_style === "expand") {
	                    if (!empty_braces) {
	                        print_newline();
	                    }
	                } else {
	                    // skip {}
	                    if (!empty_braces) {
	                        if (is_array(flags.mode) && opt.keep_array_indentation) {
	                            // we REALLY need a newline here, but newliner would skip that
	                            opt.keep_array_indentation = false;
	                            print_newline();
	                            opt.keep_array_indentation = true;

	                        } else {
	                            print_newline();
	                        }
	                    }
	                }
	                restore_mode();
	                print_token();
	            }

	            function handle_word() {
	                if (current_token.type === 'TK_RESERVED') {
	                    if (in_array(current_token.text, ['set', 'get']) && flags.mode !== MODE.ObjectLiteral) {
	                        current_token.type = 'TK_WORD';
	                    } else if (in_array(current_token.text, ['as', 'from']) && !flags.import_block) {
	                        current_token.type = 'TK_WORD';
	                    } else if (flags.mode === MODE.ObjectLiteral) {
	                        var next_token = get_token(1);
	                        if (next_token.text === ':') {
	                            current_token.type = 'TK_WORD';
	                        }
	                    }
	                }

	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                    if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const']) && current_token.type === 'TK_WORD') {
	                        flags.declaration_statement = true;
	                    }
	                } else if (current_token.wanted_newline && !is_expression(flags.mode) &&
	                    (last_type !== 'TK_OPERATOR' || (flags.last_text === '--' || flags.last_text === '++')) &&
	                    last_type !== 'TK_EQUALS' &&
	                    (opt.preserve_newlines || !(last_type === 'TK_RESERVED' && in_array(flags.last_text, ['var', 'let', 'const', 'set', 'get'])))) {
	                    handle_whitespace_and_comments(current_token);
	                    print_newline();
	                } else {
	                    handle_whitespace_and_comments(current_token);
	                }

	                if (flags.do_block && !flags.do_while) {
	                    if (current_token.type === 'TK_RESERVED' && current_token.text === 'while') {
	                        // do {} ## while ()
	                        output.space_before_token = true;
	                        print_token();
	                        output.space_before_token = true;
	                        flags.do_while = true;
	                        return;
	                    } else {
	                        // do {} should always have while as the next word.
	                        // if we don't see the expected while, recover
	                        print_newline();
	                        flags.do_block = false;
	                    }
	                }

	                // if may be followed by else, or not
	                // Bare/inline ifs are tricky
	                // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();
	                if (flags.if_block) {
	                    if (!flags.else_block && (current_token.type === 'TK_RESERVED' && current_token.text === 'else')) {
	                        flags.else_block = true;
	                    } else {
	                        while (flags.mode === MODE.Statement) {
	                            restore_mode();
	                        }
	                        flags.if_block = false;
	                        flags.else_block = false;
	                    }
	                }

	                if (current_token.type === 'TK_RESERVED' && (current_token.text === 'case' || (current_token.text === 'default' && flags.in_case_statement))) {
	                    print_newline();
	                    if (flags.case_body || opt.jslint_happy) {
	                        // switch cases following one another
	                        deindent();
	                        flags.case_body = false;
	                    }
	                    print_token();
	                    flags.in_case = true;
	                    flags.in_case_statement = true;
	                    return;
	                }

	                if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
	                    if (!start_of_object_property()) {
	                        allow_wrap_or_preserved_newline();
	                    }
	                }

	                if (current_token.type === 'TK_RESERVED' && current_token.text === 'function') {
	                    if (in_array(flags.last_text, ['}', ';']) ||
	                        (output.just_added_newline() && !(in_array(flags.last_text, ['(', '[', '{', ':', '=', ',']) || last_type === 'TK_OPERATOR'))) {
	                        // make sure there is a nice clean space of at least one blank line
	                        // before a new function definition
	                        if (!output.just_added_blankline() && !current_token.comments_before.length) {
	                            print_newline();
	                            print_newline(true);
	                        }
	                    }
	                    if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD') {
	                        if (last_type === 'TK_RESERVED' && in_array(flags.last_text, ['get', 'set', 'new', 'return', 'export', 'async'])) {
	                            output.space_before_token = true;
	                        } else if (last_type === 'TK_RESERVED' && flags.last_text === 'default' && last_last_text === 'export') {
	                            output.space_before_token = true;
	                        } else {
	                            print_newline();
	                        }
	                    } else if (last_type === 'TK_OPERATOR' || flags.last_text === '=') {
	                        // foo = function
	                        output.space_before_token = true;
	                    } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {
	                        // (function
	                    } else {
	                        print_newline();
	                    }

	                    print_token();
	                    flags.last_word = current_token.text;
	                    return;
	                }

	                prefix = 'NONE';

	                if (last_type === 'TK_END_BLOCK') {

	                    if (previous_flags.inline_frame) {
	                        prefix = 'SPACE';
	                    } else if (!(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally', 'from']))) {
	                        prefix = 'NEWLINE';
	                    } else {
	                        if (opt.brace_style === "expand" ||
	                            opt.brace_style === "end-expand" ||
	                            (opt.brace_style === "none" && current_token.wanted_newline)) {
	                            prefix = 'NEWLINE';
	                        } else {
	                            prefix = 'SPACE';
	                            output.space_before_token = true;
	                        }
	                    }
	                } else if (last_type === 'TK_SEMICOLON' && flags.mode === MODE.BlockStatement) {
	                    // TODO: Should this be for STATEMENT as well?
	                    prefix = 'NEWLINE';
	                } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {
	                    prefix = 'SPACE';
	                } else if (last_type === 'TK_STRING') {
	                    prefix = 'NEWLINE';
	                } else if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' ||
	                    (flags.last_text === '*' &&
	                        (in_array(last_last_text, ['function', 'yield']) ||
	                            (flags.mode === MODE.ObjectLiteral && in_array(last_last_text, ['{', ',']))))) {
	                    prefix = 'SPACE';
	                } else if (last_type === 'TK_START_BLOCK') {
	                    if (flags.inline_frame) {
	                        prefix = 'SPACE';
	                    } else {
	                        prefix = 'NEWLINE';
	                    }
	                } else if (last_type === 'TK_END_EXPR') {
	                    output.space_before_token = true;
	                    prefix = 'NEWLINE';
	                }

	                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {
	                    if (flags.inline_frame || flags.last_text === 'else' || flags.last_text === 'export') {
	                        prefix = 'SPACE';
	                    } else {
	                        prefix = 'NEWLINE';
	                    }

	                }

	                if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['else', 'catch', 'finally'])) {
	                    if ((!(last_type === 'TK_END_BLOCK' && previous_flags.mode === MODE.BlockStatement) ||
	                            opt.brace_style === "expand" ||
	                            opt.brace_style === "end-expand" ||
	                            (opt.brace_style === "none" && current_token.wanted_newline)) &&
	                        !flags.inline_frame) {
	                        print_newline();
	                    } else {
	                        output.trim(true);
	                        var line = output.current_line;
	                        // If we trimmed and there's something other than a close block before us
	                        // put a newline back in.  Handles '} // comment' scenario.
	                        if (line.last() !== '}') {
	                            print_newline();
	                        }
	                        output.space_before_token = true;
	                    }
	                } else if (prefix === 'NEWLINE') {
	                    if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
	                        // no newline between 'return nnn'
	                        output.space_before_token = true;
	                    } else if (last_type !== 'TK_END_EXPR') {
	                        if ((last_type !== 'TK_START_EXPR' || !(current_token.type === 'TK_RESERVED' && in_array(current_token.text, ['var', 'let', 'const']))) && flags.last_text !== ':') {
	                            // no need to force newline on 'var': for (var x = 0...)
	                            if (current_token.type === 'TK_RESERVED' && current_token.text === 'if' && flags.last_text === 'else') {
	                                // no newline for } else if {
	                                output.space_before_token = true;
	                            } else {
	                                print_newline();
	                            }
	                        }
	                    } else if (current_token.type === 'TK_RESERVED' && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ')') {
	                        print_newline();
	                    }
	                } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === ',' && last_last_text === '}') {
	                    print_newline(); // }, in lists get a newline treatment
	                } else if (prefix === 'SPACE') {
	                    output.space_before_token = true;
	                }
	                print_token();
	                flags.last_word = current_token.text;

	                if (current_token.type === 'TK_RESERVED') {
	                    if (current_token.text === 'do') {
	                        flags.do_block = true;
	                    } else if (current_token.text === 'if') {
	                        flags.if_block = true;
	                    } else if (current_token.text === 'import') {
	                        flags.import_block = true;
	                    } else if (flags.import_block && current_token.type === 'TK_RESERVED' && current_token.text === 'from') {
	                        flags.import_block = false;
	                    }
	                }
	            }

	            function handle_semicolon() {
	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                    // Semicolon can be the start (and end) of a statement
	                    output.space_before_token = false;
	                } else {
	                    handle_whitespace_and_comments(current_token);
	                }

	                var next_token = get_token(1);
	                while (flags.mode === MODE.Statement &&
	                    !(flags.if_block && next_token && next_token.type === 'TK_RESERVED' && next_token.text === 'else') &&
	                    !flags.do_block) {
	                    restore_mode();
	                }

	                // hacky but effective for the moment
	                if (flags.import_block) {
	                    flags.import_block = false;
	                }
	                print_token();
	            }

	            function handle_string() {
	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                    // One difference - strings want at least a space before
	                    output.space_before_token = true;
	                } else {
	                    handle_whitespace_and_comments(current_token);
	                    if (last_type === 'TK_RESERVED' || last_type === 'TK_WORD' || flags.inline_frame) {
	                        output.space_before_token = true;
	                    } else if (last_type === 'TK_COMMA' || last_type === 'TK_START_EXPR' || last_type === 'TK_EQUALS' || last_type === 'TK_OPERATOR') {
	                        if (!start_of_object_property()) {
	                            allow_wrap_or_preserved_newline();
	                        }
	                    } else {
	                        print_newline();
	                    }
	                }
	                print_token();
	            }

	            function handle_equals() {
	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                } else {
	                    handle_whitespace_and_comments(current_token);
	                }

	                if (flags.declaration_statement) {
	                    // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done
	                    flags.declaration_assignment = true;
	                }
	                output.space_before_token = true;
	                print_token();
	                output.space_before_token = true;
	            }

	            function handle_comma() {
	                handle_whitespace_and_comments(current_token, true);

	                print_token();
	                output.space_before_token = true;
	                if (flags.declaration_statement) {
	                    if (is_expression(flags.parent.mode)) {
	                        // do not break on comma, for(var a = 1, b = 2)
	                        flags.declaration_assignment = false;
	                    }

	                    if (flags.declaration_assignment) {
	                        flags.declaration_assignment = false;
	                        print_newline(false, true);
	                    } else if (opt.comma_first) {
	                        // for comma-first, we want to allow a newline before the comma
	                        // to turn into a newline after the comma, which we will fixup later
	                        allow_wrap_or_preserved_newline();
	                    }
	                } else if (flags.mode === MODE.ObjectLiteral ||
	                    (flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral)) {
	                    if (flags.mode === MODE.Statement) {
	                        restore_mode();
	                    }

	                    if (!flags.inline_frame) {
	                        print_newline();
	                    }
	                } else if (opt.comma_first) {
	                    // EXPR or DO_BLOCK
	                    // for comma-first, we want to allow a newline before the comma
	                    // to turn into a newline after the comma, which we will fixup later
	                    allow_wrap_or_preserved_newline();
	                }
	            }

	            function handle_operator() {
	                var isGeneratorAsterisk = current_token.text === '*' &&
	                    ((last_type === 'TK_RESERVED' && in_array(flags.last_text, ['function', 'yield'])) ||
	                        (in_array(last_type, ['TK_START_BLOCK', 'TK_COMMA', 'TK_END_BLOCK', 'TK_SEMICOLON']))
	                    );
	                var isUnary = in_array(current_token.text, ['-', '+']) && (
	                    in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) ||
	                    in_array(flags.last_text, Tokenizer.line_starters) ||
	                    flags.last_text === ','
	                );

	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                } else {
	                    var preserve_statement_flags = !isGeneratorAsterisk;
	                    handle_whitespace_and_comments(current_token, preserve_statement_flags);
	                }

	                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
	                    // "return" had a special handling in TK_WORD. Now we need to return the favor
	                    output.space_before_token = true;
	                    print_token();
	                    return;
	                }

	                // hack for actionscript's import .*;
	                if (current_token.text === '*' && last_type === 'TK_DOT') {
	                    print_token();
	                    return;
	                }

	                if (current_token.text === '::') {
	                    // no spaces around exotic namespacing syntax operator
	                    print_token();
	                    return;
	                }

	                // Allow line wrapping between operators when operator_position is
	                //   set to before or preserve
	                if (last_type === 'TK_OPERATOR' && in_array(opt.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {
	                    allow_wrap_or_preserved_newline();
	                }

	                if (current_token.text === ':' && flags.in_case) {
	                    flags.case_body = true;
	                    indent();
	                    print_token();
	                    print_newline();
	                    flags.in_case = false;
	                    return;
	                }

	                var space_before = true;
	                var space_after = true;
	                var in_ternary = false;
	                if (current_token.text === ':') {
	                    if (flags.ternary_depth === 0) {
	                        // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.
	                        space_before = false;
	                    } else {
	                        flags.ternary_depth -= 1;
	                        in_ternary = true;
	                    }
	                } else if (current_token.text === '?') {
	                    flags.ternary_depth += 1;
	                }

	                // let's handle the operator_position option prior to any conflicting logic
	                if (!isUnary && !isGeneratorAsterisk && opt.preserve_newlines && in_array(current_token.text, Tokenizer.positionable_operators)) {
	                    var isColon = current_token.text === ':';
	                    var isTernaryColon = (isColon && in_ternary);
	                    var isOtherColon = (isColon && !in_ternary);

	                    switch (opt.operator_position) {
	                        case OPERATOR_POSITION.before_newline:
	                            // if the current token is : and it's not a ternary statement then we set space_before to false
	                            output.space_before_token = !isOtherColon;

	                            print_token();

	                            if (!isColon || isTernaryColon) {
	                                allow_wrap_or_preserved_newline();
	                            }

	                            output.space_before_token = true;
	                            return;

	                        case OPERATOR_POSITION.after_newline:
	                            // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,
	                            //   then print a newline.

	                            output.space_before_token = true;

	                            if (!isColon || isTernaryColon) {
	                                if (get_token(1).wanted_newline) {
	                                    print_newline(false, true);
	                                } else {
	                                    allow_wrap_or_preserved_newline();
	                                }
	                            } else {
	                                output.space_before_token = false;
	                            }

	                            print_token();

	                            output.space_before_token = true;
	                            return;

	                        case OPERATOR_POSITION.preserve_newline:
	                            if (!isOtherColon) {
	                                allow_wrap_or_preserved_newline();
	                            }

	                            // if we just added a newline, or the current token is : and it's not a ternary statement,
	                            //   then we set space_before to false
	                            space_before = !(output.just_added_newline() || isOtherColon);

	                            output.space_before_token = space_before;
	                            print_token();
	                            output.space_before_token = true;
	                            return;
	                    }
	                }

	                if (isGeneratorAsterisk) {
	                    allow_wrap_or_preserved_newline();
	                    space_before = false;
	                    var next_token = get_token(1);
	                    space_after = next_token && in_array(next_token.type, ['TK_WORD', 'TK_RESERVED']);
	                } else if (current_token.text === '...') {
	                    allow_wrap_or_preserved_newline();
	                    space_before = last_type === 'TK_START_BLOCK';
	                    space_after = false;
	                } else if (in_array(current_token.text, ['--', '++', '!', '~']) || isUnary) {
	                    // unary operators (and binary +/- pretending to be unary) special cases

	                    space_before = false;
	                    space_after = false;

	                    // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1
	                    // if there is a newline between -- or ++ and anything else we should preserve it.
	                    if (current_token.wanted_newline && (current_token.text === '--' || current_token.text === '++')) {
	                        print_newline(false, true);
	                    }

	                    if (flags.last_text === ';' && is_expression(flags.mode)) {
	                        // for (;; ++i)
	                        //        ^^^
	                        space_before = true;
	                    }

	                    if (last_type === 'TK_RESERVED') {
	                        space_before = true;
	                    } else if (last_type === 'TK_END_EXPR') {
	                        space_before = !(flags.last_text === ']' && (current_token.text === '--' || current_token.text === '++'));
	                    } else if (last_type === 'TK_OPERATOR') {
	                        // a++ + ++b;
	                        // a - -b
	                        space_before = in_array(current_token.text, ['--', '-', '++', '+']) && in_array(flags.last_text, ['--', '-', '++', '+']);
	                        // + and - are not unary when preceeded by -- or ++ operator
	                        // a-- + b
	                        // a * +b
	                        // a - -b
	                        if (in_array(current_token.text, ['+', '-']) && in_array(flags.last_text, ['--', '++'])) {
	                            space_after = true;
	                        }
	                    }


	                    if (((flags.mode === MODE.BlockStatement && !flags.inline_frame) || flags.mode === MODE.Statement) &&
	                        (flags.last_text === '{' || flags.last_text === ';')) {
	                        // { foo; --i }
	                        // foo(); --bar;
	                        print_newline();
	                    }
	                }

	                output.space_before_token = output.space_before_token || space_before;
	                print_token();
	                output.space_before_token = space_after;
	            }

	            function handle_block_comment(preserve_statement_flags) {
	                if (output.raw) {
	                    output.add_raw_token(current_token);
	                    if (current_token.directives && current_token.directives.preserve === 'end') {
	                        // If we're testing the raw output behavior, do not allow a directive to turn it off.
	                        output.raw = opt.test_output_raw;
	                    }
	                    return;
	                }

	                if (current_token.directives) {
	                    print_newline(false, preserve_statement_flags);
	                    print_token();
	                    if (current_token.directives.preserve === 'start') {
	                        output.raw = true;
	                    }
	                    print_newline(false, true);
	                    return;
	                }

	                // inline block
	                if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {
	                    output.space_before_token = true;
	                    print_token();
	                    output.space_before_token = true;
	                    return;
	                }

	                var lines = split_linebreaks(current_token.text);
	                var j; // iterator for this case
	                var javadoc = false;
	                var starless = false;
	                var lastIndent = current_token.whitespace_before;
	                var lastIndentLength = lastIndent.length;

	                // block comment starts with a new line
	                print_newline(false, preserve_statement_flags);
	                if (lines.length > 1) {
	                    javadoc = all_lines_start_with(lines.slice(1), '*');
	                    starless = each_line_matches_indent(lines.slice(1), lastIndent);
	                }

	                // first line always indented
	                print_token(lines[0]);
	                for (j = 1; j < lines.length; j++) {
	                    print_newline(false, true);
	                    if (javadoc) {
	                        // javadoc: reformat and re-indent
	                        print_token(' ' + ltrim(lines[j]));
	                    } else if (starless && lines[j].length > lastIndentLength) {
	                        // starless: re-indent non-empty content, avoiding trim
	                        print_token(lines[j].substring(lastIndentLength));
	                    } else {
	                        // normal comments output raw
	                        output.add_token(lines[j]);
	                    }
	                }

	                // for comments of more than one line, make sure there's a new line after
	                print_newline(false, preserve_statement_flags);
	            }

	            function handle_comment(preserve_statement_flags) {
	                if (current_token.wanted_newline) {
	                    print_newline(false, preserve_statement_flags);
	                } else {
	                    output.trim(true);
	                }

	                output.space_before_token = true;
	                print_token();
	                print_newline(false, preserve_statement_flags);
	            }

	            function handle_dot() {
	                if (start_of_statement()) {
	                    // The conditional starts the statement if appropriate.
	                } else {
	                    handle_whitespace_and_comments(current_token, true);
	                }

	                if (last_type === 'TK_RESERVED' && is_special_word(flags.last_text)) {
	                    output.space_before_token = true;
	                } else {
	                    // allow preserved newlines before dots in general
	                    // force newlines on dots after close paren when break_chained - for bar().baz()
	                    allow_wrap_or_preserved_newline(flags.last_text === ')' && opt.break_chained_methods);
	                }

	                print_token();
	            }

	            function handle_unknown(preserve_statement_flags) {
	                print_token();

	                if (current_token.text[current_token.text.length - 1] === '\n') {
	                    print_newline(false, preserve_statement_flags);
	                }
	            }

	            function handle_eof() {
	                // Unwind any open statements
	                while (flags.mode === MODE.Statement) {
	                    restore_mode();
	                }
	                handle_whitespace_and_comments(current_token);
	            }
	        }


	        function OutputLine(parent) {
	            var _character_count = 0;
	            // use indent_count as a marker for lines that have preserved indentation
	            var _indent_count = -1;

	            var _items = [];
	            var _empty = true;

	            this.set_indent = function(level) {
	                _character_count = parent.baseIndentLength + level * parent.indent_length;
	                _indent_count = level;
	            };

	            this.get_character_count = function() {
	                return _character_count;
	            };

	            this.is_empty = function() {
	                return _empty;
	            };

	            this.last = function() {
	                if (!this._empty) {
	                    return _items[_items.length - 1];
	                } else {
	                    return null;
	                }
	            };

	            this.push = function(input) {
	                _items.push(input);
	                _character_count += input.length;
	                _empty = false;
	            };

	            this.pop = function() {
	                var item = null;
	                if (!_empty) {
	                    item = _items.pop();
	                    _character_count -= item.length;
	                    _empty = _items.length === 0;
	                }
	                return item;
	            };

	            this.remove_indent = function() {
	                if (_indent_count > 0) {
	                    _indent_count -= 1;
	                    _character_count -= parent.indent_length;
	                }
	            };

	            this.trim = function() {
	                while (this.last() === ' ') {
	                    _items.pop();
	                    _character_count -= 1;
	                }
	                _empty = _items.length === 0;
	            };

	            this.toString = function() {
	                var result = '';
	                if (!this._empty) {
	                    if (_indent_count >= 0) {
	                        result = parent.indent_cache[_indent_count];
	                    }
	                    result += _items.join('');
	                }
	                return result;
	            };
	        }

	        function Output(indent_string, baseIndentString) {
	            baseIndentString = baseIndentString || '';
	            this.indent_cache = [baseIndentString];
	            this.baseIndentLength = baseIndentString.length;
	            this.indent_length = indent_string.length;
	            this.raw = false;

	            var lines = [];
	            this.baseIndentString = baseIndentString;
	            this.indent_string = indent_string;
	            this.previous_line = null;
	            this.current_line = null;
	            this.space_before_token = false;

	            this.add_outputline = function() {
	                this.previous_line = this.current_line;
	                this.current_line = new OutputLine(this);
	                lines.push(this.current_line);
	            };

	            // initialize
	            this.add_outputline();


	            this.get_line_number = function() {
	                return lines.length;
	            };

	            // Using object instead of string to allow for later expansion of info about each line
	            this.add_new_line = function(force_newline) {
	                if (this.get_line_number() === 1 && this.just_added_newline()) {
	                    return false; // no newline on start of file
	                }

	                if (force_newline || !this.just_added_newline()) {
	                    if (!this.raw) {
	                        this.add_outputline();
	                    }
	                    return true;
	                }

	                return false;
	            };

	            this.get_code = function() {
	                var sweet_code = lines.join('\n').replace(/[\r\n\t ]+$/, '');
	                return sweet_code;
	            };

	            this.set_indent = function(level) {
	                // Never indent your first output indent at the start of the file
	                if (lines.length > 1) {
	                    while (level >= this.indent_cache.length) {
	                        this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string);
	                    }

	                    this.current_line.set_indent(level);
	                    return true;
	                }
	                this.current_line.set_indent(0);
	                return false;
	            };

	            this.add_raw_token = function(token) {
	                for (var x = 0; x < token.newlines; x++) {
	                    this.add_outputline();
	                }
	                this.current_line.push(token.whitespace_before);
	                this.current_line.push(token.text);
	                this.space_before_token = false;
	            };

	            this.add_token = function(printable_token) {
	                this.add_space_before_token();
	                this.current_line.push(printable_token);
	            };

	            this.add_space_before_token = function() {
	                if (this.space_before_token && !this.just_added_newline()) {
	                    this.current_line.push(' ');
	                }
	                this.space_before_token = false;
	            };

	            this.remove_redundant_indentation = function(frame) {
	                // This implementation is effective but has some issues:
	                //     - can cause line wrap to happen too soon due to indent removal
	                //           after wrap points are calculated
	                // These issues are minor compared to ugly indentation.

	                if (frame.multiline_frame ||
	                    frame.mode === MODE.ForInitializer ||
	                    frame.mode === MODE.Conditional) {
	                    return;
	                }

	                // remove one indent from each line inside this section
	                var index = frame.start_line_index;

	                var output_length = lines.length;
	                while (index < output_length) {
	                    lines[index].remove_indent();
	                    index++;
	                }
	            };

	            this.trim = function(eat_newlines) {
	                eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;

	                this.current_line.trim(indent_string, baseIndentString);

	                while (eat_newlines && lines.length > 1 &&
	                    this.current_line.is_empty()) {
	                    lines.pop();
	                    this.current_line = lines[lines.length - 1];
	                    this.current_line.trim();
	                }

	                this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null;
	            };

	            this.just_added_newline = function() {
	                return this.current_line.is_empty();
	            };

	            this.just_added_blankline = function() {
	                if (this.just_added_newline()) {
	                    if (lines.length === 1) {
	                        return true; // start of the file and newline = blank
	                    }

	                    var line = lines[lines.length - 2];
	                    return line.is_empty();
	                }
	                return false;
	            };
	        }

	        var InputScanner = function(input) {
	            var _input = input;
	            var _input_length = _input.length;
	            var _position = 0;

	            this.back = function() {
	                _position -= 1;
	            };

	            this.hasNext = function() {
	                return _position < _input_length;
	            };

	            this.next = function() {
	                var val = null;
	                if (this.hasNext()) {
	                    val = _input.charAt(_position);
	                    _position += 1;
	                }
	                return val;
	            };

	            this.peek = function(index) {
	                var val = null;
	                index = index || 0;
	                index += _position;
	                if (index >= 0 && index < _input_length) {
	                    val = _input.charAt(index);
	                }
	                return val;
	            };

	            this.peekCharCode = function(index) {
	                var val = 0;
	                index = index || 0;
	                index += _position;
	                if (index >= 0 && index < _input_length) {
	                    val = _input.charCodeAt(index);
	                }
	                return val;
	            };

	            this.test = function(pattern, index) {
	                index = index || 0;
	                pattern.lastIndex = _position + index;
	                return pattern.test(_input);
	            };

	            this.testChar = function(pattern, index) {
	                var val = this.peek(index);
	                return val !== null && pattern.test(val);
	            };

	            this.match = function(pattern) {
	                pattern.lastIndex = _position;
	                var pattern_match = pattern.exec(_input);
	                if (pattern_match && pattern_match.index === _position) {
	                    _position += pattern_match[0].length;
	                } else {
	                    pattern_match = null;
	                }
	                return pattern_match;
	            };
	        };

	        var Token = function(type, text, newlines, whitespace_before, parent) {
	            this.type = type;
	            this.text = text;

	            // comments_before are
	            // comments that have a new line before them
	            // and may or may not have a newline after
	            // this is a set of comments before
	            this.comments_before = /* inline comment*/ [];


	            this.comments_after = []; // no new line before and newline after
	            this.newlines = newlines || 0;
	            this.wanted_newline = newlines > 0;
	            this.whitespace_before = whitespace_before || '';
	            this.parent = parent || null;
	            this.opened = null;
	            this.directives = null;
	        };

	        function tokenizer(input_string, opts) {

	            var whitespace = "\n\r\t ".split('');
	            var digit = /[0-9]/;
	            var digit_bin = /[01]/;
	            var digit_oct = /[01234567]/;
	            var digit_hex = /[0123456789abcdefABCDEF]/;

	            this.positionable_operators = '!= !== % & && * ** + - / : < << <= == === > >= >> >>> ? ^ | ||'.split(' ');
	            var punct = this.positionable_operators.concat(
	                // non-positionable operators - these do not follow operator position settings
	                '! %= &= *= **= ++ += , -- -= /= :: <<= = => >>= >>>= ^= |= ~ ...'.split(' '));

	            // words which should always start on new line.
	            this.line_starters = 'continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');
	            var reserved_words = this.line_starters.concat(['do', 'in', 'of', 'else', 'get', 'set', 'new', 'catch', 'finally', 'typeof', 'yield', 'async', 'await', 'from', 'as']);

	            //  /* ... */ comment ends with nearest */ or end of file
	            var block_comment_pattern = /([\s\S]*?)((?:\*\/)|$)/g;

	            // comment ends just before nearest linefeed or end of file
	            var comment_pattern = /([^\n\r\u2028\u2029]*)/g;

	            var directives_block_pattern = /\/\* beautify( \w+[:]\w+)+ \*\//g;
	            var directive_pattern = / (\w+)[:](\w+)/g;
	            var directives_end_ignore_pattern = /([\s\S]*?)((?:\/\*\sbeautify\signore:end\s\*\/)|$)/g;

	            var template_pattern = /((<\?php|<\?=)[\s\S]*?\?>)|(<%[\s\S]*?%>)/g;

	            var n_newlines, whitespace_before_token, in_html_comment, tokens;
	            var input;

	            this.tokenize = function() {
	                input = new InputScanner(input_string);
	                in_html_comment = false;
	                tokens = [];

	                var next, last;
	                var token_values;
	                var open = null;
	                var open_stack = [];
	                var comments = [];

	                while (!(last && last.type === 'TK_EOF')) {
	                    token_values = tokenize_next();
	                    next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);
	                    while (next.type === 'TK_COMMENT' || next.type === 'TK_BLOCK_COMMENT' || next.type === 'TK_UNKNOWN') {
	                        if (next.type === 'TK_BLOCK_COMMENT') {
	                            next.directives = token_values[2];
	                        }
	                        comments.push(next);
	                        token_values = tokenize_next();
	                        next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);
	                    }

	                    if (comments.length) {
	                        next.comments_before = comments;
	                        comments = [];
	                    }

	                    if (next.type === 'TK_START_BLOCK' || next.type === 'TK_START_EXPR') {
	                        next.parent = last;
	                        open_stack.push(open);
	                        open = next;
	                    } else if ((next.type === 'TK_END_BLOCK' || next.type === 'TK_END_EXPR') &&
	                        (open && (
	                            (next.text === ']' && open.text === '[') ||
	                            (next.text === ')' && open.text === '(') ||
	                            (next.text === '}' && open.text === '{')))) {
	                        next.parent = open.parent;
	                        next.opened = open;

	                        open = open_stack.pop();
	                    }

	                    tokens.push(next);
	                    last = next;
	                }

	                return tokens;
	            };

	            function get_directives(text) {
	                if (!text.match(directives_block_pattern)) {
	                    return null;
	                }

	                var directives = {};
	                directive_pattern.lastIndex = 0;
	                var directive_match = directive_pattern.exec(text);

	                while (directive_match) {
	                    directives[directive_match[1]] = directive_match[2];
	                    directive_match = directive_pattern.exec(text);
	                }

	                return directives;
	            }

	            function tokenize_next() {
	                var resulting_string;
	                var whitespace_on_this_line = [];

	                n_newlines = 0;
	                whitespace_before_token = '';

	                var c = input.next();

	                if (c === null) {
	                    return ['', 'TK_EOF'];
	                }

	                var last_token;
	                if (tokens.length) {
	                    last_token = tokens[tokens.length - 1];
	                } else {
	                    // For the sake of tokenizing we can pretend that there was on open brace to start
	                    last_token = new Token('TK_START_BLOCK', '{');
	                }

	                while (in_array(c, whitespace)) {

	                    if (acorn.newline.test(c)) {
	                        if (!(c === '\n' && input.peek(-2) === '\r')) {
	                            n_newlines += 1;
	                            whitespace_on_this_line = [];
	                        }
	                    } else {
	                        whitespace_on_this_line.push(c);
	                    }

	                    c = input.next();

	                    if (c === null) {
	                        return ['', 'TK_EOF'];
	                    }
	                }

	                if (whitespace_on_this_line.length) {
	                    whitespace_before_token = whitespace_on_this_line.join('');
	                }

	                if (digit.test(c) || (c === '.' && input.testChar(digit))) {
	                    var allow_decimal = true;
	                    var allow_e = true;
	                    var local_digit = digit;

	                    if (c === '0' && input.testChar(/[XxOoBb]/)) {
	                        // switch to hex/oct/bin number, no decimal or e, just hex/oct/bin digits
	                        allow_decimal = false;
	                        allow_e = false;
	                        if (input.testChar(/[Bb]/)) {
	                            local_digit = digit_bin;
	                        } else if (input.testChar(/[Oo]/)) {
	                            local_digit = digit_oct;
	                        } else {
	                            local_digit = digit_hex;
	                        }
	                        c += input.next();
	                    } else if (c === '.') {
	                        // Already have a decimal for this literal, don't allow another
	                        allow_decimal = false;
	                    } else {
	                        // we know this first loop will run.  It keeps the logic simpler.
	                        c = '';
	                        input.back();
	                    }

	                    // Add the digits
	                    while (input.testChar(local_digit)) {
	                        c += input.next();

	                        if (allow_decimal && input.peek() === '.') {
	                            c += input.next();
	                            allow_decimal = false;
	                        }

	                        // a = 1.e-7 is valid, so we test for . then e in one loop
	                        if (allow_e && input.testChar(/[Ee]/)) {
	                            c += input.next();

	                            if (input.testChar(/[+-]/)) {
	                                c += input.next();
	                            }

	                            allow_e = false;
	                            allow_decimal = false;
	                        }
	                    }

	                    return [c, 'TK_WORD'];
	                }

	                if (acorn.isIdentifierStart(input.peekCharCode(-1))) {
	                    if (input.hasNext()) {
	                        while (acorn.isIdentifierChar(input.peekCharCode())) {
	                            c += input.next();
	                            if (!input.hasNext()) {
	                                break;
	                            }
	                        }
	                    }

	                    if (!(last_token.type === 'TK_DOT' ||
	                            (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['set', 'get']))) &&
	                        in_array(c, reserved_words)) {
	                        if (c === 'in' || c === 'of') { // hack for 'in' and 'of' operators
	                            return [c, 'TK_OPERATOR'];
	                        }
	                        return [c, 'TK_RESERVED'];
	                    }

	                    return [c, 'TK_WORD'];
	                }

	                if (c === '(' || c === '[') {
	                    return [c, 'TK_START_EXPR'];
	                }

	                if (c === ')' || c === ']') {
	                    return [c, 'TK_END_EXPR'];
	                }

	                if (c === '{') {
	                    return [c, 'TK_START_BLOCK'];
	                }

	                if (c === '}') {
	                    return [c, 'TK_END_BLOCK'];
	                }

	                if (c === ';') {
	                    return [c, 'TK_SEMICOLON'];
	                }

	                if (c === '/') {
	                    var comment = '';
	                    var comment_match;
	                    // peek for comment /* ... */
	                    if (input.peek() === '*') {
	                        input.next();
	                        comment_match = input.match(block_comment_pattern);
	                        comment = '/*' + comment_match[0];
	                        var directives = get_directives(comment);
	                        if (directives && directives.ignore === 'start') {
	                            comment_match = input.match(directives_end_ignore_pattern);
	                            comment += comment_match[0];
	                        }
	                        comment = comment.replace(acorn.allLineBreaks, '\n');
	                        return [comment, 'TK_BLOCK_COMMENT', directives];
	                    }
	                    // peek for comment // ...
	                    if (input.peek() === '/') {
	                        input.next();
	                        comment_match = input.match(comment_pattern);
	                        comment = '//' + comment_match[0];
	                        return [comment, 'TK_COMMENT'];
	                    }

	                }

	                var startXmlRegExp = /<()([-a-zA-Z:0-9_.]+|{[\s\S]+?}|!\[CDATA\[[\s\S]*?\]\])(\s+{[\s\S]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{[\s\S]+?}))*\s*(\/?)\s*>/g;

	                if (c === '`' || c === "'" || c === '"' || // string
	                    (
	                        (c === '/') || // regexp
	                        (opts.e4x && c === "<" && input.test(startXmlRegExp, -1)) // xml
	                    ) && ( // regex and xml can only appear in specific locations during parsing
	                        (last_token.type === 'TK_RESERVED' && in_array(last_token.text, ['return', 'case', 'throw', 'else', 'do', 'typeof', 'yield'])) ||
	                        (last_token.type === 'TK_END_EXPR' && last_token.text === ')' &&
	                            last_token.parent && last_token.parent.type === 'TK_RESERVED' && in_array(last_token.parent.text, ['if', 'while', 'for'])) ||
	                        (in_array(last_token.type, ['TK_COMMENT', 'TK_START_EXPR', 'TK_START_BLOCK',
	                            'TK_END_BLOCK', 'TK_OPERATOR', 'TK_EQUALS', 'TK_EOF', 'TK_SEMICOLON', 'TK_COMMA'
	                        ]))
	                    )) {

	                    var sep = c,
	                        esc = false,
	                        has_char_escapes = false;

	                    resulting_string = c;

	                    if (sep === '/') {
	                        //
	                        // handle regexp
	                        //
	                        var in_char_class = false;
	                        while (input.hasNext() &&
	                            ((esc || in_char_class || input.peek() !== sep) &&
	                                !input.testChar(acorn.newline))) {
	                            resulting_string += input.peek();
	                            if (!esc) {
	                                esc = input.peek() === '\\';
	                                if (input.peek() === '[') {
	                                    in_char_class = true;
	                                } else if (input.peek() === ']') {
	                                    in_char_class = false;
	                                }
	                            } else {
	                                esc = false;
	                            }
	                            input.next();
	                        }
	                    } else if (opts.e4x && sep === '<') {
	                        //
	                        // handle e4x xml literals
	                        //

	                        var xmlRegExp = /[\s\S]*?<(\/?)([-a-zA-Z:0-9_.]+|{[\s\S]+?}|!\[CDATA\[[\s\S]*?\]\])(\s+{[\s\S]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{[\s\S]+?}))*\s*(\/?)\s*>/g;
	                        input.back();
	                        var xmlStr = '';
	                        var match = input.match(startXmlRegExp);
	                        if (match) {
	                            // Trim root tag to attempt to
	                            var rootTag = match[2].replace(/^{\s+/, '{').replace(/\s+}$/, '}');
	                            var isCurlyRoot = rootTag.indexOf('{') === 0;
	                            var depth = 0;
	                            while (match) {
	                                var isEndTag = !!match[1];
	                                var tagName = match[2];
	                                var isSingletonTag = (!!match[match.length - 1]) || (tagName.slice(0, 8) === "![CDATA[");
	                                if (!isSingletonTag &&
	                                    (tagName === rootTag || (isCurlyRoot && tagName.replace(/^{\s+/, '{').replace(/\s+}$/, '}')))) {
	                                    if (isEndTag) {
	                                        --depth;
	                                    } else {
	                                        ++depth;
	                                    }
	                                }
	                                xmlStr += match[0];
	                                if (depth <= 0) {
	                                    break;
	                                }
	                                match = input.match(xmlRegExp);
	                            }
	                            // if we didn't close correctly, keep unformatted.
	                            if (!match) {
	                                xmlStr += input.match(/[\s\S]*/g)[0];
	                            }
	                            xmlStr = xmlStr.replace(acorn.allLineBreaks, '\n');
	                            return [xmlStr, "TK_STRING"];
	                        }
	                    } else {
	                        //
	                        // handle string
	                        //
	                        var parse_string = function(delimiter, allow_unescaped_newlines, start_sub) {
	                            // Template strings can travers lines without escape characters.
	                            // Other strings cannot
	                            var current_char;
	                            while (input.hasNext()) {
	                                current_char = input.peek();
	                                if (!(esc || (current_char !== delimiter &&
	                                        (allow_unescaped_newlines || !acorn.newline.test(current_char))))) {
	                                    break;
	                                }

	                                // Handle \r\n linebreaks after escapes or in template strings
	                                if ((esc || allow_unescaped_newlines) && acorn.newline.test(current_char)) {
	                                    if (current_char === '\r' && input.peek(1) === '\n') {
	                                        input.next();
	                                        current_char = input.peek();
	                                    }
	                                    resulting_string += '\n';
	                                } else {
	                                    resulting_string += current_char;
	                                }

	                                if (esc) {
	                                    if (current_char === 'x' || current_char === 'u') {
	                                        has_char_escapes = true;
	                                    }
	                                    esc = false;
	                                } else {
	                                    esc = current_char === '\\';
	                                }

	                                input.next();

	                                if (start_sub && resulting_string.indexOf(start_sub, resulting_string.length - start_sub.length) !== -1) {
	                                    if (delimiter === '`') {
	                                        parse_string('}', allow_unescaped_newlines, '`');
	                                    } else {
	                                        parse_string('`', allow_unescaped_newlines, '${');
	                                    }

	                                    if (input.hasNext()) {
	                                        resulting_string += input.next();
	                                    }
	                                }
	                            }
	                        };

	                        if (sep === '`') {
	                            parse_string('`', true, '${');
	                        } else {
	                            parse_string(sep);
	                        }
	                    }

	                    if (has_char_escapes && opts.unescape_strings) {
	                        resulting_string = unescape_string(resulting_string);
	                    }

	                    if (input.peek() === sep) {
	                        resulting_string += sep;
	                        input.next();

	                        if (sep === '/') {
	                            // regexps may have modifiers /regexp/MOD , so fetch those, too
	                            // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.
	                            while (input.hasNext() && acorn.isIdentifierStart(input.peekCharCode())) {
	                                resulting_string += input.next();
	                            }
	                        }
	                    }
	                    return [resulting_string, 'TK_STRING'];
	                }

	                if (c === '#') {

	                    if (tokens.length === 0 && input.peek() === '!') {
	                        // shebang
	                        resulting_string = c;
	                        while (input.hasNext() && c !== '\n') {
	                            c = input.next();
	                            resulting_string += c;
	                        }
	                        return [trim(resulting_string) + '\n', 'TK_UNKNOWN'];
	                    }



	                    // Spidermonkey-specific sharp variables for circular references
	                    // https://developer.mozilla.org/En/Sharp_variables_in_JavaScript
	                    // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935
	                    var sharp = '#';
	                    if (input.hasNext() && input.testChar(digit)) {
	                        do {
	                            c = input.next();
	                            sharp += c;
	                        } while (input.hasNext() && c !== '#' && c !== '=');
	                        if (c === '#') {
	                            //
	                        } else if (input.peek() === '[' && input.peek(1) === ']') {
	                            sharp += '[]';
	                            input.next();
	                            input.next();
	                        } else if (input.peek() === '{' && input.peek(1) === '}') {
	                            sharp += '{}';
	                            input.next();
	                            input.next();
	                        }
	                        return [sharp, 'TK_WORD'];
	                    }
	                }

	                if (c === '<' && (input.peek() === '?' || input.peek() === '%')) {
	                    input.back();
	                    var template_match = input.match(template_pattern);
	                    if (template_match) {
	                        c = template_match[0];
	                        c = c.replace(acorn.allLineBreaks, '\n');
	                        return [c, 'TK_STRING'];
	                    }
	                }

	                if (c === '<' && input.match(/\!--/g)) {
	                    c = '<!--';
	                    while (input.hasNext() && !input.testChar(acorn.newline)) {
	                        c += input.next();
	                    }
	                    in_html_comment = true;
	                    return [c, 'TK_COMMENT'];
	                }

	                if (c === '-' && in_html_comment && input.match(/->/g)) {
	                    in_html_comment = false;
	                    return ['-->', 'TK_COMMENT'];
	                }

	                if (c === '.') {
	                    if (input.peek() === '.' && input.peek(1) === '.') {
	                        c += input.next() + input.next();
	                        return [c, 'TK_OPERATOR'];
	                    }
	                    return [c, 'TK_DOT'];
	                }

	                if (in_array(c, punct)) {
	                    while (input.hasNext() && in_array(c + input.peek(), punct)) {
	                        c += input.next();
	                        if (!input.hasNext()) {
	                            break;
	                        }
	                    }

	                    if (c === ',') {
	                        return [c, 'TK_COMMA'];
	                    } else if (c === '=') {
	                        return [c, 'TK_EQUALS'];
	                    } else {
	                        return [c, 'TK_OPERATOR'];
	                    }
	                }

	                return [c, 'TK_UNKNOWN'];
	            }


	            function unescape_string(s) {
	                // You think that a regex would work for this
	                // return s.replace(/\\x([0-9a-f]{2})/gi, function(match, val) {
	                //         return String.fromCharCode(parseInt(val, 16));
	                //     })
	                // However, dealing with '\xff', '\\xff', '\\\xff' makes this more fun.
	                var out = '',
	                    escaped = 0;

	                var input_scan = new InputScanner(s);
	                var matched = null;

	                while (input_scan.hasNext()) {
	                    // Keep any whitespace, non-slash characters
	                    // also keep slash pairs.
	                    matched = input_scan.match(/([\s]|[^\\]|\\\\)+/g);

	                    if (matched) {
	                        out += matched[0];
	                    }

	                    if (input_scan.peek() === '\\') {
	                        input_scan.next();
	                        if (input_scan.peek() === 'x') {
	                            matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);
	                        } else if (input_scan.peek() === 'u') {
	                            matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);
	                        } else {
	                            out += '\\';
	                            if (input_scan.hasNext()) {
	                                out += input_scan.next();
	                            }
	                            continue;
	                        }

	                        // If there's some error decoding, return the original string
	                        if (!matched) {
	                            return s;
	                        }

	                        escaped = parseInt(matched[1], 16);

	                        if (escaped > 0x7e && escaped <= 0xff && matched[0].indexOf('x') === 0) {
	                            // we bail out on \x7f..\xff,
	                            // leaving whole string escaped,
	                            // as it's probably completely binary
	                            return s;
	                        } else if (escaped >= 0x00 && escaped < 0x20) {
	                            // leave 0x00...0x1f escaped
	                            out += '\\' + matched[0];
	                            continue;
	                        } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {
	                            // single-quote, apostrophe, backslash - escape these
	                            out += '\\' + String.fromCharCode(escaped);
	                        } else {
	                            out += String.fromCharCode(escaped);
	                        }
	                    }
	                }

	                return out;
	            }
	        }

	        var beautifier = new Beautifier(js_source_text, options);
	        return beautifier.beautify();

	    }

	    if (true) {
	        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	            return { js_beautify: js_beautify };
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        // Add support for CommonJS. Just put this file somewhere on your require.paths
	        // and you will be able to `var js_beautify = require("beautify").js_beautify`.
	        exports.js_beautify = js_beautify;
	    } else if (typeof window !== "undefined") {
	        // If we're running a web page and don't have either of the above, add our one global
	        window.js_beautify = js_beautify;
	    } else if (typeof global !== "undefined") {
	        // If we don't even have window, try global.
	        global.js_beautify = js_beautify;
	    }

	}());

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
	/*

	  The MIT License (MIT)

	  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.

	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:

	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.

	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.


	 CSS Beautifier
	---------------

	    Written by Harutyun Amirjanyan, (amirjanyan@gmail.com)

	    Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>
	        http://jsbeautifier.org/

	    Usage:
	        css_beautify(source_text);
	        css_beautify(source_text, options);

	    The options are (default in brackets):
	        indent_size (4)                         — indentation size,
	        indent_char (space)                     — character to indent with,
	        preserve_newlines (default false)       - whether existing line breaks should be preserved,
	        selector_separator_newline (true)       - separate selectors with newline or
	                                                  not (e.g. "a,\nbr" or "a, br")
	        end_with_newline (false)                - end with a newline
	        newline_between_rules (true)            - add a new line after every css rule
	        space_around_selector_separator (false) - ensure space around selector separators:
	                                                  '>', '+', '~' (e.g. "a>b" -> "a > b")
	    e.g

	    css_beautify(css_source_text, {
	      'indent_size': 1,
	      'indent_char': '\t',
	      'selector_separator': ' ',
	      'end_with_newline': false,
	      'newline_between_rules': true,
	      'space_around_selector_separator': true
	    });
	*/

	// http://www.w3.org/TR/CSS21/syndata.html#tokenization
	// http://www.w3.org/TR/css3-syntax/

	(function() {

	    function mergeOpts(allOptions, targetType) {
	        var finalOpts = {};
	        var name;

	        for (name in allOptions) {
	            if (name !== targetType) {
	                finalOpts[name] = allOptions[name];
	            }
	        }


	        //merge in the per type settings for the targetType
	        if (targetType in allOptions) {
	            for (name in allOptions[targetType]) {
	                finalOpts[name] = allOptions[targetType][name];
	            }
	        }
	        return finalOpts;
	    }

	    var lineBreak = /\r\n|[\n\r\u2028\u2029]/;
	    var allLineBreaks = new RegExp(lineBreak.source, 'g');

	    function css_beautify(source_text, options) {
	        options = options || {};

	        // Allow the setting of language/file-type specific options
	        // with inheritance of overall settings
	        options = mergeOpts(options, 'css');

	        source_text = source_text || '';

	        var newlinesFromLastWSEat = 0;
	        var indentSize = options.indent_size ? parseInt(options.indent_size, 10) : 4;
	        var indentCharacter = options.indent_char || ' ';
	        var preserve_newlines = (options.preserve_newlines === undefined) ? false : options.preserve_newlines;
	        var selectorSeparatorNewline = (options.selector_separator_newline === undefined) ? true : options.selector_separator_newline;
	        var end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
	        var newline_between_rules = (options.newline_between_rules === undefined) ? true : options.newline_between_rules;
	        var space_around_combinator = (options.space_around_combinator === undefined) ? false : options.space_around_combinator;
	        space_around_combinator = space_around_combinator || ((options.space_around_selector_separator === undefined) ? false : options.space_around_selector_separator);
	        var eol = options.eol ? options.eol : 'auto';

	        if (options.indent_with_tabs) {
	            indentCharacter = '\t';
	            indentSize = 1;
	        }

	        if (eol === 'auto') {
	            eol = '\n';
	            if (source_text && lineBreak.test(source_text || '')) {
	                eol = source_text.match(lineBreak)[0];
	            }
	        }

	        eol = eol.replace(/\\r/, '\r').replace(/\\n/, '\n');

	        // HACK: newline parsing inconsistent. This brute force normalizes the input.
	        source_text = source_text.replace(allLineBreaks, '\n');

	        // tokenizer
	        var whiteRe = /^\s+$/;

	        var pos = -1,
	            ch;
	        var parenLevel = 0;

	        function next() {
	            ch = source_text.charAt(++pos);
	            return ch || '';
	        }

	        function peek(skipWhitespace) {
	            var result = '';
	            var prev_pos = pos;
	            if (skipWhitespace) {
	                eatWhitespace();
	            }
	            result = source_text.charAt(pos + 1) || '';
	            pos = prev_pos - 1;
	            next();
	            return result;
	        }

	        function eatString(endChars) {
	            var start = pos;
	            while (next()) {
	                if (ch === "\\") {
	                    next();
	                } else if (endChars.indexOf(ch) !== -1) {
	                    break;
	                } else if (ch === "\n") {
	                    break;
	                }
	            }
	            return source_text.substring(start, pos + 1);
	        }

	        function peekString(endChar) {
	            var prev_pos = pos;
	            var str = eatString(endChar);
	            pos = prev_pos - 1;
	            next();
	            return str;
	        }

	        function eatWhitespace(preserve_newlines_local) {
	            var result = 0;
	            while (whiteRe.test(peek())) {
	                next();
	                if (ch === '\n' && preserve_newlines_local && preserve_newlines) {
	                    print.newLine(true);
	                    result++;
	                }
	            }
	            newlinesFromLastWSEat = result;
	            return result;
	        }

	        function skipWhitespace() {
	            var result = '';
	            if (ch && whiteRe.test(ch)) {
	                result = ch;
	            }
	            while (whiteRe.test(next())) {
	                result += ch;
	            }
	            return result;
	        }

	        function eatComment(singleLine) {
	            var start = pos;
	            singleLine = peek() === "/";
	            next();
	            while (next()) {
	                if (!singleLine && ch === "*" && peek() === "/") {
	                    next();
	                    break;
	                } else if (singleLine && ch === "\n") {
	                    return source_text.substring(start, pos);
	                }
	            }

	            return source_text.substring(start, pos) + ch;
	        }


	        function lookBack(str) {
	            return source_text.substring(pos - str.length, pos).toLowerCase() ===
	                str;
	        }

	        // Nested pseudo-class if we are insideRule
	        // and the next special character found opens
	        // a new block
	        function foundNestedPseudoClass() {
	            var openParen = 0;
	            for (var i = pos + 1; i < source_text.length; i++) {
	                var ch = source_text.charAt(i);
	                if (ch === "{") {
	                    return true;
	                } else if (ch === '(') {
	                    // pseudoclasses can contain ()
	                    openParen += 1;
	                } else if (ch === ')') {
	                    if (openParen === 0) {
	                        return false;
	                    }
	                    openParen -= 1;
	                } else if (ch === ";" || ch === "}") {
	                    return false;
	                }
	            }
	            return false;
	        }

	        // printer
	        var basebaseIndentString = source_text.match(/^[\t ]*/)[0];
	        var singleIndent = new Array(indentSize + 1).join(indentCharacter);
	        var indentLevel = 0;
	        var nestedLevel = 0;

	        function indent() {
	            indentLevel++;
	            basebaseIndentString += singleIndent;
	        }

	        function outdent() {
	            indentLevel--;
	            basebaseIndentString = basebaseIndentString.slice(0, -indentSize);
	        }

	        var print = {};
	        print["{"] = function(ch) {
	            print.singleSpace();
	            output.push(ch);
	            if (!eatWhitespace(true)) {
	                print.newLine();
	            }
	        };
	        print["}"] = function(newline) {
	            if (newline) {
	                print.newLine();
	            }
	            output.push('}');
	            if (!eatWhitespace(true)) {
	                print.newLine();
	            }
	        };

	        print._lastCharWhitespace = function() {
	            return whiteRe.test(output[output.length - 1]);
	        };

	        print.newLine = function(keepWhitespace) {
	            if (output.length) {
	                if (!keepWhitespace && output[output.length - 1] !== '\n') {
	                    print.trim();
	                } else if (output[output.length - 1] === basebaseIndentString) {
	                    output.pop();
	                }
	                output.push('\n');

	                if (basebaseIndentString) {
	                    output.push(basebaseIndentString);
	                }
	            }
	        };
	        print.singleSpace = function() {
	            if (output.length && !print._lastCharWhitespace()) {
	                output.push(' ');
	            }
	        };

	        print.preserveSingleSpace = function() {
	            if (isAfterSpace) {
	                print.singleSpace();
	            }
	        };

	        print.trim = function() {
	            while (print._lastCharWhitespace()) {
	                output.pop();
	            }
	        };


	        var output = [];
	        /*_____________________--------------------_____________________*/

	        var insideRule = false;
	        var insidePropertyValue = false;
	        var enteringConditionalGroup = false;
	        var top_ch = '';
	        var last_top_ch = '';

	        while (true) {
	            var whitespace = skipWhitespace();
	            var isAfterSpace = whitespace !== '';
	            var isAfterNewline = whitespace.indexOf('\n') !== -1;
	            last_top_ch = top_ch;
	            top_ch = ch;

	            if (!ch) {
	                break;
	            } else if (ch === '/' && peek() === '*') { /* css comment */
	                var header = indentLevel === 0;

	                if (isAfterNewline || header) {
	                    print.newLine();
	                }

	                output.push(eatComment());
	                print.newLine();
	                if (header) {
	                    print.newLine(true);
	                }
	            } else if (ch === '/' && peek() === '/') { // single line comment
	                if (!isAfterNewline && last_top_ch !== '{') {
	                    print.trim();
	                }
	                print.singleSpace();
	                output.push(eatComment());
	                print.newLine();
	            } else if (ch === '@') {
	                print.preserveSingleSpace();

	                // deal with less propery mixins @{...}
	                if (peek() === '{') {
	                    output.push(eatString('}'));
	                } else {
	                    output.push(ch);

	                    // strip trailing space, if present, for hash property checks
	                    var variableOrRule = peekString(": ,;{}()[]/='\"");

	                    if (variableOrRule.match(/[ :]$/)) {
	                        // we have a variable or pseudo-class, add it and insert one space before continuing
	                        next();
	                        variableOrRule = eatString(": ").replace(/\s$/, '');
	                        output.push(variableOrRule);
	                        print.singleSpace();
	                    }

	                    variableOrRule = variableOrRule.replace(/\s$/, '');

	                    // might be a nesting at-rule
	                    if (variableOrRule in css_beautify.NESTED_AT_RULE) {
	                        nestedLevel += 1;
	                        if (variableOrRule in css_beautify.CONDITIONAL_GROUP_RULE) {
	                            enteringConditionalGroup = true;
	                        }
	                    }
	                }
	            } else if (ch === '#' && peek() === '{') {
	                print.preserveSingleSpace();
	                output.push(eatString('}'));
	            } else if (ch === '{') {
	                if (peek(true) === '}') {
	                    eatWhitespace();
	                    next();
	                    print.singleSpace();
	                    output.push("{");
	                    print['}'](false);
	                    if (newlinesFromLastWSEat < 2 && newline_between_rules && indentLevel === 0) {
	                        print.newLine(true);
	                    }
	                } else {
	                    indent();
	                    print["{"](ch);
	                    // when entering conditional groups, only rulesets are allowed
	                    if (enteringConditionalGroup) {
	                        enteringConditionalGroup = false;
	                        insideRule = (indentLevel > nestedLevel);
	                    } else {
	                        // otherwise, declarations are also allowed
	                        insideRule = (indentLevel >= nestedLevel);
	                    }
	                }
	            } else if (ch === '}') {
	                outdent();
	                print["}"](true);
	                insideRule = false;
	                insidePropertyValue = false;
	                if (nestedLevel) {
	                    nestedLevel--;
	                }
	                if (newlinesFromLastWSEat < 2 && newline_between_rules && indentLevel === 0) {
	                    print.newLine(true);
	                }
	            } else if (ch === ":") {
	                eatWhitespace();
	                if ((insideRule || enteringConditionalGroup) &&
	                    !(lookBack("&") || foundNestedPseudoClass()) &&
	                    !lookBack("(")) {
	                    // 'property: value' delimiter
	                    // which could be in a conditional group query
	                    output.push(':');
	                    if (!insidePropertyValue) {
	                        insidePropertyValue = true;
	                        print.singleSpace();
	                    }
	                } else {
	                    // sass/less parent reference don't use a space
	                    // sass nested pseudo-class don't use a space

	                    // preserve space before pseudoclasses/pseudoelements, as it means "in any child"
	                    if (lookBack(" ") && output[output.length - 1] !== " ") {
	                        output.push(" ");
	                    }
	                    if (peek() === ":") {
	                        // pseudo-element
	                        next();
	                        output.push("::");
	                    } else {
	                        // pseudo-class
	                        output.push(':');
	                    }
	                }
	            } else if (ch === '"' || ch === '\'') {
	                print.preserveSingleSpace();
	                output.push(eatString(ch));
	            } else if (ch === ';') {
	                insidePropertyValue = false;
	                output.push(ch);
	                if (!eatWhitespace(true)) {
	                    print.newLine();
	                }
	            } else if (ch === '(') { // may be a url
	                if (lookBack("url")) {
	                    output.push(ch);
	                    eatWhitespace();
	                    if (next()) {
	                        if (ch !== ')' && ch !== '"' && ch !== '\'') {
	                            output.push(eatString(')'));
	                        } else {
	                            pos--;
	                        }
	                    }
	                } else {
	                    parenLevel++;
	                    print.preserveSingleSpace();
	                    output.push(ch);
	                    eatWhitespace();
	                }
	            } else if (ch === ')') {
	                output.push(ch);
	                parenLevel--;
	            } else if (ch === ',') {
	                output.push(ch);
	                if (!eatWhitespace(true) && selectorSeparatorNewline && !insidePropertyValue && parenLevel < 1) {
	                    print.newLine();
	                } else {
	                    print.singleSpace();
	                }
	            } else if ((ch === '>' || ch === '+' || ch === '~') &&
	                !insidePropertyValue && parenLevel < 1) {
	                //handle combinator spacing
	                if (space_around_combinator) {
	                    print.singleSpace();
	                    output.push(ch);
	                    print.singleSpace();
	                } else {
	                    output.push(ch);
	                    eatWhitespace();
	                    // squash extra whitespace
	                    if (ch && whiteRe.test(ch)) {
	                        ch = '';
	                    }
	                }
	            } else if (ch === ']') {
	                output.push(ch);
	            } else if (ch === '[') {
	                print.preserveSingleSpace();
	                output.push(ch);
	            } else if (ch === '=') { // no whitespace before or after
	                eatWhitespace();
	                output.push('=');
	                if (whiteRe.test(ch)) {
	                    ch = '';
	                }
	            } else {
	                print.preserveSingleSpace();
	                output.push(ch);
	            }
	        }


	        var sweetCode = '';
	        if (basebaseIndentString) {
	            sweetCode += basebaseIndentString;
	        }

	        sweetCode += output.join('').replace(/[\r\n\t ]+$/, '');

	        // establish end_with_newline
	        if (end_with_newline) {
	            sweetCode += '\n';
	        }

	        if (eol !== '\n') {
	            sweetCode = sweetCode.replace(/[\n]/g, eol);
	        }

	        return sweetCode;
	    }

	    // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule
	    css_beautify.NESTED_AT_RULE = {
	        "@page": true,
	        "@font-face": true,
	        "@keyframes": true,
	        // also in CONDITIONAL_GROUP_RULE below
	        "@media": true,
	        "@supports": true,
	        "@document": true
	    };
	    css_beautify.CONDITIONAL_GROUP_RULE = {
	        "@media": true,
	        "@supports": true,
	        "@document": true
	    };

	    /*global define */
	    if (true) {
	        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	            return {
	                css_beautify: css_beautify
	            };
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        // Add support for CommonJS. Just put this file somewhere on your require.paths
	        // and you will be able to `var html_beautify = require("beautify").html_beautify`.
	        exports.css_beautify = css_beautify;
	    } else if (typeof window !== "undefined") {
	        // If we're running a web page and don't have either of the above, add our one global
	        window.css_beautify = css_beautify;
	    } else if (typeof global !== "undefined") {
	        // If we don't even have window, try global.
	        global.css_beautify = css_beautify;
	    }

	}());

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
	/*

	  The MIT License (MIT)

	  Copyright (c) 2007-2017 Einar Lielmanis, Liam Newman, and contributors.

	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:

	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.

	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.


	 Style HTML
	---------------

	  Written by Nochum Sossonko, (nsossonko@hotmail.com)

	  Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>
	    http://jsbeautifier.org/

	  Usage:
	    style_html(html_source);

	    style_html(html_source, options);

	  The options are:
	    indent_inner_html (default false)  — indent <head> and <body> sections,
	    indent_size (default 4)          — indentation size,
	    indent_char (default space)      — character to indent with,
	    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)
	    brace_style (default "collapse") - "collapse" | "expand" | "end-expand" | "none"
	            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.
	    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted
	    content_unformatted (defaults to pre tag) - list of tags, that its content shouldn't be reformatted
	    indent_scripts (default normal)  - "keep"|"separate"|"normal"
	    preserve_newlines (default true) - whether existing line breaks before elements should be preserved
	                                        Only works before elements, not inside tags or for text.
	    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk
	    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}
	    end_with_newline (false)          - end with a newline
	    extra_liners (default [head,body,/html]) -List of tags that should have an extra newline before them.

	    e.g.

	    style_html(html_source, {
	      'indent_inner_html': false,
	      'indent_size': 2,
	      'indent_char': ' ',
	      'wrap_line_length': 78,
	      'brace_style': 'expand',
	      'preserve_newlines': true,
	      'max_preserve_newlines': 5,
	      'indent_handlebars': false,
	      'extra_liners': ['/html']
	    });
	*/

	(function() {

	    // function trim(s) {
	    //     return s.replace(/^\s+|\s+$/g, '');
	    // }

	    function ltrim(s) {
	        return s.replace(/^\s+/g, '');
	    }

	    function rtrim(s) {
	        return s.replace(/\s+$/g, '');
	    }

	    function mergeOpts(allOptions, targetType) {
	        var finalOpts = {};
	        var name;

	        for (name in allOptions) {
	            if (name !== targetType) {
	                finalOpts[name] = allOptions[name];
	            }
	        }

	        //merge in the per type settings for the targetType
	        if (targetType in allOptions) {
	            for (name in allOptions[targetType]) {
	                finalOpts[name] = allOptions[targetType][name];
	            }
	        }
	        return finalOpts;
	    }

	    var lineBreak = /\r\n|[\n\r\u2028\u2029]/;
	    var allLineBreaks = new RegExp(lineBreak.source, 'g');

	    function style_html(html_source, options, js_beautify, css_beautify) {
	        //Wrapper function to invoke all the necessary constructors and deal with the output.

	        var multi_parser,
	            indent_inner_html,
	            indent_body_inner_html,
	            indent_head_inner_html,
	            indent_size,
	            indent_character,
	            wrap_line_length,
	            brace_style,
	            unformatted,
	            content_unformatted,
	            preserve_newlines,
	            max_preserve_newlines,
	            indent_handlebars,
	            wrap_attributes,
	            wrap_attributes_indent_size,
	            is_wrap_attributes_force,
	            is_wrap_attributes_force_expand_multiline,
	            is_wrap_attributes_force_aligned,
	            end_with_newline,
	            extra_liners,
	            eol;

	        options = options || {};

	        // Allow the setting of language/file-type specific options
	        // with inheritance of overall settings
	        options = mergeOpts(options, 'html');

	        // backwards compatibility to 1.3.4
	        if ((options.wrap_line_length === undefined || parseInt(options.wrap_line_length, 10) === 0) &&
	            (options.max_char !== undefined && parseInt(options.max_char, 10) !== 0)) {
	            options.wrap_line_length = options.max_char;
	        }

	        indent_inner_html = (options.indent_inner_html === undefined) ? false : options.indent_inner_html;
	        indent_body_inner_html = (options.indent_body_inner_html === undefined) ? true : options.indent_body_inner_html;
	        indent_head_inner_html = (options.indent_head_inner_html === undefined) ? true : options.indent_head_inner_html;
	        indent_size = (options.indent_size === undefined) ? 4 : parseInt(options.indent_size, 10);
	        indent_character = (options.indent_char === undefined) ? ' ' : options.indent_char;
	        brace_style = (options.brace_style === undefined) ? 'collapse' : options.brace_style;
	        wrap_line_length = parseInt(options.wrap_line_length, 10) === 0 ? 32786 : parseInt(options.wrap_line_length || 250, 10);
	        unformatted = options.unformatted || [
	            // https://www.w3.org/TR/html5/dom.html#phrasing-content
	            'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',
	            'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',
	            'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',
	            'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */ 'select', 'small',
	            'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',
	            'video', 'wbr', 'text',
	            // prexisting - not sure of full effect of removing, leaving in
	            'acronym', 'address', 'big', 'dt', 'ins', 'strike', 'tt',
	        ];
	        content_unformatted = options.content_unformatted || [
	            'pre',
	        ];
	        preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;
	        max_preserve_newlines = preserve_newlines ?
	            (isNaN(parseInt(options.max_preserve_newlines, 10)) ? 32786 : parseInt(options.max_preserve_newlines, 10)) :
	            0;
	        indent_handlebars = (options.indent_handlebars === undefined) ? false : options.indent_handlebars;
	        wrap_attributes = (options.wrap_attributes === undefined) ? 'auto' : options.wrap_attributes;
	        wrap_attributes_indent_size = (isNaN(parseInt(options.wrap_attributes_indent_size, 10))) ? indent_size : parseInt(options.wrap_attributes_indent_size, 10);
	        is_wrap_attributes_force = wrap_attributes.substr(0, 'force'.length) === 'force';
	        is_wrap_attributes_force_expand_multiline = (wrap_attributes === 'force-expand-multiline');
	        is_wrap_attributes_force_aligned = (wrap_attributes === 'force-aligned');
	        end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;
	        extra_liners = (typeof options.extra_liners === 'object') && options.extra_liners ?
	            options.extra_liners.concat() : (typeof options.extra_liners === 'string') ?
	            options.extra_liners.split(',') : 'head,body,/html'.split(',');
	        eol = options.eol ? options.eol : 'auto';

	        if (options.indent_with_tabs) {
	            indent_character = '\t';
	            indent_size = 1;
	        }

	        if (eol === 'auto') {
	            eol = '\n';
	            if (html_source && lineBreak.test(html_source || '')) {
	                eol = html_source.match(lineBreak)[0];
	            }
	        }

	        eol = eol.replace(/\\r/, '\r').replace(/\\n/, '\n');

	        // HACK: newline parsing inconsistent. This brute force normalizes the input.
	        html_source = html_source.replace(allLineBreaks, '\n');

	        function Parser() {

	            this.pos = 0; //Parser position
	            this.token = '';
	            this.current_mode = 'CONTENT'; //reflects the current Parser mode: TAG/CONTENT
	            this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values
	                parent: 'parent1',
	                parentcount: 1,
	                parent1: ''
	            };
	            this.tag_type = '';
	            this.token_text = this.last_token = this.last_text = this.token_type = '';
	            this.newlines = 0;
	            this.indent_content = indent_inner_html;
	            this.indent_body_inner_html = indent_body_inner_html;
	            this.indent_head_inner_html = indent_head_inner_html;

	            this.Utils = { //Uilities made available to the various functions
	                whitespace: "\n\r\t ".split(''),

	                single_token: [
	                    // HTLM void elements - aka self-closing tags - aka singletons
	                    // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
	                    'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',
	                    'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',
	                    // NOTE: Optional tags - are not understood.
	                    // https://www.w3.org/TR/html5/syntax.html#optional-tags
	                    // The rules for optional tags are too complex for a simple list
	                    // Also, the content of these tags should still be indented in many cases.
	                    // 'li' is a good exmple.

	                    // Doctype and xml elements
	                    '!doctype', '?xml',
	                    // ?php tag
	                    '?php',
	                    // other tags that were in this list, keeping just in case
	                    'basefont', 'isindex'
	                ],
	                extra_liners: extra_liners, //for tags that need a line of whitespace before them
	                in_array: function(what, arr) {
	                    for (var i = 0; i < arr.length; i++) {
	                        if (what === arr[i]) {
	                            return true;
	                        }
	                    }
	                    return false;
	                }
	            };

	            // Return true if the given text is composed entirely of whitespace.
	            this.is_whitespace = function(text) {
	                for (var n = 0; n < text.length; n++) {
	                    if (!this.Utils.in_array(text.charAt(n), this.Utils.whitespace)) {
	                        return false;
	                    }
	                }
	                return true;
	            };

	            this.traverse_whitespace = function() {
	                var input_char = '';

	                input_char = this.input.charAt(this.pos);
	                if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                    this.newlines = 0;
	                    while (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                        if (preserve_newlines && input_char === '\n' && this.newlines <= max_preserve_newlines) {
	                            this.newlines += 1;
	                        }

	                        this.pos++;
	                        input_char = this.input.charAt(this.pos);
	                    }
	                    return true;
	                }
	                return false;
	            };

	            // Append a space to the given content (string array) or, if we are
	            // at the wrap_line_length, append a newline/indentation.
	            // return true if a newline was added, false if a space was added
	            this.space_or_wrap = function(content) {
	                if (this.line_char_count >= this.wrap_line_length) { //insert a line when the wrap_line_length is reached
	                    this.print_newline(false, content);
	                    this.print_indentation(content);
	                    return true;
	                } else {
	                    this.line_char_count++;
	                    content.push(' ');
	                    return false;
	                }
	            };

	            this.get_content = function() { //function to capture regular content between tags
	                var input_char = '',
	                    content = [],
	                    handlebarsStarted = 0;

	                while (this.input.charAt(this.pos) !== '<' || handlebarsStarted === 2) {
	                    if (this.pos >= this.input.length) {
	                        return content.length ? content.join('') : ['', 'TK_EOF'];
	                    }

	                    if (handlebarsStarted < 2 && this.traverse_whitespace()) {
	                        this.space_or_wrap(content);
	                        continue;
	                    }

	                    input_char = this.input.charAt(this.pos);

	                    if (indent_handlebars) {
	                        if (input_char === '{') {
	                            handlebarsStarted += 1;
	                        } else if (handlebarsStarted < 2) {
	                            handlebarsStarted = 0;
	                        }

	                        if (input_char === '}' && handlebarsStarted > 0) {
	                            if (handlebarsStarted-- === 0) {
	                                break;
	                            }
	                        }
	                        // Handlebars parsing is complicated.
	                        // {{#foo}} and {{/foo}} are formatted tags.
	                        // {{something}} should get treated as content, except:
	                        // {{else}} specifically behaves like {{#if}} and {{/if}}
	                        var peek3 = this.input.substr(this.pos, 3);
	                        if (peek3 === '{{#' || peek3 === '{{/') {
	                            // These are tags and not content.
	                            break;
	                        } else if (peek3 === '{{!') {
	                            return [this.get_tag(), 'TK_TAG_HANDLEBARS_COMMENT'];
	                        } else if (this.input.substr(this.pos, 2) === '{{') {
	                            if (this.get_tag(true) === '{{else}}') {
	                                break;
	                            }
	                        }
	                    }

	                    this.pos++;
	                    this.line_char_count++;
	                    content.push(input_char); //letter at-a-time (or string) inserted to an array
	                }
	                return content.length ? content.join('') : '';
	            };

	            this.get_contents_to = function(name) { //get the full content of a script or style to pass to js_beautify
	                if (this.pos === this.input.length) {
	                    return ['', 'TK_EOF'];
	                }
	                var content = '';
	                var reg_match = new RegExp('</' + name + '\\s*>', 'igm');
	                reg_match.lastIndex = this.pos;
	                var reg_array = reg_match.exec(this.input);
	                var end_script = reg_array ? reg_array.index : this.input.length; //absolute end of script
	                if (this.pos < end_script) { //get everything in between the script tags
	                    content = this.input.substring(this.pos, end_script);
	                    this.pos = end_script;
	                }
	                return content;
	            };

	            this.record_tag = function(tag) { //function to record a tag and its parent in this.tags Object
	                if (this.tags[tag + 'count']) { //check for the existence of this tag type
	                    this.tags[tag + 'count']++;
	                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level
	                } else { //otherwise initialize this tag type
	                    this.tags[tag + 'count'] = 1;
	                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level
	                }
	                this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent; //set the parent (i.e. in the case of a div this.tags.div1parent)
	                this.tags.parent = tag + this.tags[tag + 'count']; //and make this the current parent (i.e. in the case of a div 'div1')
	            };

	            this.retrieve_tag = function(tag) { //function to retrieve the opening tag to the corresponding closer
	                if (this.tags[tag + 'count']) { //if the openener is not in the Object we ignore it
	                    var temp_parent = this.tags.parent; //check to see if it's a closable tag.
	                    while (temp_parent) { //till we reach '' (the initial value);
	                        if (tag + this.tags[tag + 'count'] === temp_parent) { //if this is it use it
	                            break;
	                        }
	                        temp_parent = this.tags[temp_parent + 'parent']; //otherwise keep on climbing up the DOM Tree
	                    }
	                    if (temp_parent) { //if we caught something
	                        this.indent_level = this.tags[tag + this.tags[tag + 'count']]; //set the indent_level accordingly
	                        this.tags.parent = this.tags[temp_parent + 'parent']; //and set the current parent
	                    }
	                    delete this.tags[tag + this.tags[tag + 'count'] + 'parent']; //delete the closed tags parent reference...
	                    delete this.tags[tag + this.tags[tag + 'count']]; //...and the tag itself
	                    if (this.tags[tag + 'count'] === 1) {
	                        delete this.tags[tag + 'count'];
	                    } else {
	                        this.tags[tag + 'count']--;
	                    }
	                }
	            };

	            this.indent_to_tag = function(tag) {
	                // Match the indentation level to the last use of this tag, but don't remove it.
	                if (!this.tags[tag + 'count']) {
	                    return;
	                }
	                var temp_parent = this.tags.parent;
	                while (temp_parent) {
	                    if (tag + this.tags[tag + 'count'] === temp_parent) {
	                        break;
	                    }
	                    temp_parent = this.tags[temp_parent + 'parent'];
	                }
	                if (temp_parent) {
	                    this.indent_level = this.tags[tag + this.tags[tag + 'count']];
	                }
	            };

	            this.get_tag = function(peek) { //function to get a full tag and parse its type
	                var input_char = '',
	                    content = [],
	                    comment = '',
	                    space = false,
	                    first_attr = true,
	                    has_wrapped_attrs = false,
	                    tag_start, tag_end,
	                    tag_start_char,
	                    orig_pos = this.pos,
	                    orig_line_char_count = this.line_char_count,
	                    is_tag_closed = false,
	                    tail;

	                peek = peek !== undefined ? peek : false;

	                do {
	                    if (this.pos >= this.input.length) {
	                        if (peek) {
	                            this.pos = orig_pos;
	                            this.line_char_count = orig_line_char_count;
	                        }
	                        return content.length ? content.join('') : ['', 'TK_EOF'];
	                    }

	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;

	                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) { //don't want to insert unnecessary space
	                        space = true;
	                        continue;
	                    }

	                    if (input_char === "'" || input_char === '"') {
	                        input_char += this.get_unformatted(input_char);
	                        space = true;
	                    }

	                    if (input_char === '=') { //no space before =
	                        space = false;
	                    }
	                    tail = this.input.substr(this.pos - 1);
	                    if (is_wrap_attributes_force_expand_multiline && has_wrapped_attrs && !is_tag_closed && (input_char === '>' || input_char === '/')) {
	                        if (tail.match(/^\/?\s*>/)) {
	                            space = false;
	                            is_tag_closed = true;
	                            this.print_newline(false, content);
	                            this.print_indentation(content);
	                        }
	                    }
	                    if (content.length && content[content.length - 1] !== '=' && input_char !== '>' && space) {
	                        //no space after = or before >
	                        var wrapped = this.space_or_wrap(content);
	                        var indentAttrs = wrapped && input_char !== '/' && !is_wrap_attributes_force;
	                        space = false;

	                        if (is_wrap_attributes_force && input_char !== '/') {
	                            var force_first_attr_wrap = false;
	                            if (is_wrap_attributes_force_expand_multiline && first_attr) {
	                                var is_only_attribute = tail.match(/^\S*(="([^"]|\\")*")?\s*\/?\s*>/) !== null;
	                                force_first_attr_wrap = !is_only_attribute;
	                            }
	                            if (!first_attr || force_first_attr_wrap) {
	                                this.print_newline(false, content);
	                                this.print_indentation(content);
	                                indentAttrs = true;
	                            }
	                        }
	                        if (indentAttrs) {
	                            has_wrapped_attrs = true;

	                            //indent attributes an auto, forced, or forced-align line-wrap
	                            var alignment_size = wrap_attributes_indent_size;
	                            if (is_wrap_attributes_force_aligned) {
	                                alignment_size = content.indexOf(' ') + 1;
	                            }

	                            for (var count = 0; count < alignment_size; count++) {
	                                // only ever further indent with spaces since we're trying to align characters
	                                content.push(' ');
	                            }
	                        }
	                        if (first_attr) {
	                            for (var i = 0; i < content.length; i++) {
	                                if (content[i] === ' ') {
	                                    first_attr = false;
	                                    break;
	                                }
	                            }
	                        }
	                    }

	                    if (indent_handlebars && tag_start_char === '<') {
	                        // When inside an angle-bracket tag, put spaces around
	                        // handlebars not inside of strings.
	                        if ((input_char + this.input.charAt(this.pos)) === '{{') {
	                            input_char += this.get_unformatted('}}');
	                            if (content.length && content[content.length - 1] !== ' ' && content[content.length - 1] !== '<') {
	                                input_char = ' ' + input_char;
	                            }
	                            space = true;
	                        }
	                    }

	                    if (input_char === '<' && !tag_start_char) {
	                        tag_start = this.pos - 1;
	                        tag_start_char = '<';
	                    }

	                    if (indent_handlebars && !tag_start_char) {
	                        if (content.length >= 2 && content[content.length - 1] === '{' && content[content.length - 2] === '{') {
	                            if (input_char === '#' || input_char === '/' || input_char === '!') {
	                                tag_start = this.pos - 3;
	                            } else {
	                                tag_start = this.pos - 2;
	                            }
	                            tag_start_char = '{';
	                        }
	                    }

	                    this.line_char_count++;
	                    content.push(input_char); //inserts character at-a-time (or string)

	                    if (content[1] && (content[1] === '!' || content[1] === '?' || content[1] === '%')) { //if we're in a comment, do something special
	                        // We treat all comments as literals, even more than preformatted tags
	                        // we just look for the appropriate close tag
	                        content = [this.get_comment(tag_start)];
	                        break;
	                    }

	                    if (indent_handlebars && content[1] && content[1] === '{' && content[2] && content[2] === '!') { //if we're in a comment, do something special
	                        // We treat all comments as literals, even more than preformatted tags
	                        // we just look for the appropriate close tag
	                        content = [this.get_comment(tag_start)];
	                        break;
	                    }

	                    if (indent_handlebars && tag_start_char === '{' && content.length > 2 && content[content.length - 2] === '}' && content[content.length - 1] === '}') {
	                        break;
	                    }
	                } while (input_char !== '>');

	                var tag_complete = content.join('');
	                var tag_index;
	                var tag_offset;

	                // must check for space first otherwise the tag could have the first attribute included, and
	                // then not un-indent correctly
	                if (tag_complete.indexOf(' ') !== -1) { //if there's whitespace, thats where the tag name ends
	                    tag_index = tag_complete.indexOf(' ');
	                } else if (tag_complete.indexOf('\n') !== -1) { //if there's a line break, thats where the tag name ends
	                    tag_index = tag_complete.indexOf('\n');
	                } else if (tag_complete.charAt(0) === '{') {
	                    tag_index = tag_complete.indexOf('}');
	                } else { //otherwise go with the tag ending
	                    tag_index = tag_complete.indexOf('>');
	                }
	                if (tag_complete.charAt(0) === '<' || !indent_handlebars) {
	                    tag_offset = 1;
	                } else {
	                    tag_offset = tag_complete.charAt(2) === '#' ? 3 : 2;
	                }
	                var tag_check = tag_complete.substring(tag_offset, tag_index).toLowerCase();
	                if (tag_complete.charAt(tag_complete.length - 2) === '/' ||
	                    this.Utils.in_array(tag_check, this.Utils.single_token)) { //if this tag name is a single tag type (either in the list or has a closing /)
	                    if (!peek) {
	                        this.tag_type = 'SINGLE';
	                    }
	                } else if (indent_handlebars && tag_complete.charAt(0) === '{' && tag_check === 'else') {
	                    if (!peek) {
	                        this.indent_to_tag('if');
	                        this.tag_type = 'HANDLEBARS_ELSE';
	                        this.indent_content = true;
	                        this.traverse_whitespace();
	                    }
	                } else if (this.is_unformatted(tag_check, unformatted) ||
	                    this.is_unformatted(tag_check, content_unformatted)) {
	                    // do not reformat the "unformatted" or "content_unformatted" tags
	                    comment = this.get_unformatted('</' + tag_check + '>', tag_complete); //...delegate to get_unformatted function
	                    content.push(comment);
	                    tag_end = this.pos - 1;
	                    this.tag_type = 'SINGLE';
	                } else if (tag_check === 'script' &&
	                    (tag_complete.search('type') === -1 ||
	                        (tag_complete.search('type') > -1 &&
	                            tag_complete.search(/\b(text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect)/) > -1))) {
	                    if (!peek) {
	                        this.record_tag(tag_check);
	                        this.tag_type = 'SCRIPT';
	                    }
	                } else if (tag_check === 'style' &&
	                    (tag_complete.search('type') === -1 ||
	                        (tag_complete.search('type') > -1 && tag_complete.search('text/css') > -1))) {
	                    if (!peek) {
	                        this.record_tag(tag_check);
	                        this.tag_type = 'STYLE';
	                    }
	                } else if (tag_check.charAt(0) === '!') { //peek for <! comment
	                    // for comments content is already correct.
	                    if (!peek) {
	                        this.tag_type = 'SINGLE';
	                        this.traverse_whitespace();
	                    }
	                } else if (!peek) {
	                    if (tag_check.charAt(0) === '/') { //this tag is a double tag so check for tag-ending
	                        this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors
	                        this.tag_type = 'END';
	                    } else { //otherwise it's a start-tag
	                        this.record_tag(tag_check); //push it on the tag stack
	                        if (tag_check.toLowerCase() !== 'html') {
	                            this.indent_content = true;
	                        }
	                        this.tag_type = 'START';
	                    }

	                    // Allow preserving of newlines after a start or end tag
	                    if (this.traverse_whitespace()) {
	                        this.space_or_wrap(content);
	                    }

	                    if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) { //check if this double needs an extra line
	                        this.print_newline(false, this.output);
	                        if (this.output.length && this.output[this.output.length - 2] !== '\n') {
	                            this.print_newline(true, this.output);
	                        }
	                    }
	                }

	                if (peek) {
	                    this.pos = orig_pos;
	                    this.line_char_count = orig_line_char_count;
	                }

	                return content.join(''); //returns fully formatted tag
	            };

	            this.get_comment = function(start_pos) { //function to return comment content in its entirety
	                // this is will have very poor perf, but will work for now.
	                var comment = '',
	                    delimiter = '>',
	                    matched = false;

	                this.pos = start_pos;
	                var input_char = this.input.charAt(this.pos);
	                this.pos++;

	                while (this.pos <= this.input.length) {
	                    comment += input_char;

	                    // only need to check for the delimiter if the last chars match
	                    if (comment.charAt(comment.length - 1) === delimiter.charAt(delimiter.length - 1) &&
	                        comment.indexOf(delimiter) !== -1) {
	                        break;
	                    }

	                    // only need to search for custom delimiter for the first few characters
	                    if (!matched && comment.length < 10) {
	                        if (comment.indexOf('<![if') === 0) { //peek for <![if conditional comment
	                            delimiter = '<![endif]>';
	                            matched = true;
	                        } else if (comment.indexOf('<![cdata[') === 0) { //if it's a <[cdata[ comment...
	                            delimiter = ']]>';
	                            matched = true;
	                        } else if (comment.indexOf('<![') === 0) { // some other ![ comment? ...
	                            delimiter = ']>';
	                            matched = true;
	                        } else if (comment.indexOf('<!--') === 0) { // <!-- comment ...
	                            delimiter = '-->';
	                            matched = true;
	                        } else if (comment.indexOf('{{!--') === 0) { // {{!-- handlebars comment
	                            delimiter = '--}}';
	                            matched = true;
	                        } else if (comment.indexOf('{{!') === 0) { // {{! handlebars comment
	                            if (comment.length === 5 && comment.indexOf('{{!--') === -1) {
	                                delimiter = '}}';
	                                matched = true;
	                            }
	                        } else if (comment.indexOf('<?') === 0) { // {{! handlebars comment
	                            delimiter = '?>';
	                            matched = true;
	                        } else if (comment.indexOf('<%') === 0) { // {{! handlebars comment
	                            delimiter = '%>';
	                            matched = true;
	                        }
	                    }

	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;
	                }

	                return comment;
	            };

	            function tokenMatcher(delimiter) {
	                var token = '';

	                var add = function(str) {
	                    var newToken = token + str.toLowerCase();
	                    token = newToken.length <= delimiter.length ? newToken : newToken.substr(newToken.length - delimiter.length, delimiter.length);
	                };

	                var doesNotMatch = function() {
	                    return token.indexOf(delimiter) === -1;
	                };

	                return {
	                    add: add,
	                    doesNotMatch: doesNotMatch
	                };
	            }

	            this.get_unformatted = function(delimiter, orig_tag) { //function to return unformatted content in its entirety
	                if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) !== -1) {
	                    return '';
	                }
	                var input_char = '';
	                var content = '';
	                var space = true;

	                var delimiterMatcher = tokenMatcher(delimiter);

	                do {

	                    if (this.pos >= this.input.length) {
	                        return content;
	                    }

	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;

	                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                        if (!space) {
	                            this.line_char_count--;
	                            continue;
	                        }
	                        if (input_char === '\n' || input_char === '\r') {
	                            content += '\n';
	                            /*  Don't change tab indention for unformatted blocks.  If using code for html editing, this will greatly affect <pre> tags if they are specified in the 'unformatted array'
	                for (var i=0; i<this.indent_level; i++) {
	                  content += this.indent_string;
	                }
	                space = false; //...and make sure other indentation is erased
	                */
	                            this.line_char_count = 0;
	                            continue;
	                        }
	                    }
	                    content += input_char;
	                    delimiterMatcher.add(input_char);
	                    this.line_char_count++;
	                    space = true;

	                    if (indent_handlebars && input_char === '{' && content.length && content.charAt(content.length - 2) === '{') {
	                        // Handlebars expressions in strings should also be unformatted.
	                        content += this.get_unformatted('}}');
	                        // Don't consider when stopping for delimiters.
	                    }
	                } while (delimiterMatcher.doesNotMatch());

	                return content;
	            };

	            this.get_token = function() { //initial handler for token-retrieval
	                var token;

	                if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') { //check if we need to format javascript
	                    var type = this.last_token.substr(7);
	                    token = this.get_contents_to(type);
	                    if (typeof token !== 'string') {
	                        return token;
	                    }
	                    return [token, 'TK_' + type];
	                }
	                if (this.current_mode === 'CONTENT') {
	                    token = this.get_content();
	                    if (typeof token !== 'string') {
	                        return token;
	                    } else {
	                        return [token, 'TK_CONTENT'];
	                    }
	                }

	                if (this.current_mode === 'TAG') {
	                    token = this.get_tag();
	                    if (typeof token !== 'string') {
	                        return token;
	                    } else {
	                        var tag_name_type = 'TK_TAG_' + this.tag_type;
	                        return [token, tag_name_type];
	                    }
	                }
	            };

	            this.get_full_indent = function(level) {
	                level = this.indent_level + level || 0;
	                if (level < 1) {
	                    return '';
	                }

	                return Array(level + 1).join(this.indent_string);
	            };

	            this.is_unformatted = function(tag_check, unformatted) {
	                //is this an HTML5 block-level link?
	                if (!this.Utils.in_array(tag_check, unformatted)) {
	                    return false;
	                }

	                if (tag_check.toLowerCase() !== 'a' || !this.Utils.in_array('a', unformatted)) {
	                    return true;
	                }

	                //at this point we have an  tag; is its first child something we want to remain
	                //unformatted?
	                var next_tag = this.get_tag(true /* peek. */ );

	                // test next_tag to see if it is just html tag (no external content)
	                var tag = (next_tag || "").match(/^\s*<\s*\/?([a-z]*)\s*[^>]*>\s*$/);

	                // if next_tag comes back but is not an isolated tag, then
	                // let's treat the 'a' tag as having content
	                // and respect the unformatted option
	                if (!tag || this.Utils.in_array(tag, unformatted)) {
	                    return true;
	                } else {
	                    return false;
	                }
	            };

	            this.printer = function(js_source, indent_character, indent_size, wrap_line_length, brace_style) { //handles input/output and some other printing functions

	                this.input = js_source || ''; //gets the input for the Parser

	                // HACK: newline parsing inconsistent. This brute force normalizes the input.
	                this.input = this.input.replace(/\r\n|[\r\u2028\u2029]/g, '\n');

	                this.output = [];
	                this.indent_character = indent_character;
	                this.indent_string = '';
	                this.indent_size = indent_size;
	                this.brace_style = brace_style;
	                this.indent_level = 0;
	                this.wrap_line_length = wrap_line_length;
	                this.line_char_count = 0; //count to see if wrap_line_length was exceeded

	                for (var i = 0; i < this.indent_size; i++) {
	                    this.indent_string += this.indent_character;
	                }

	                this.print_newline = function(force, arr) {
	                    this.line_char_count = 0;
	                    if (!arr || !arr.length) {
	                        return;
	                    }
	                    if (force || (arr[arr.length - 1] !== '\n')) { //we might want the extra line
	                        if ((arr[arr.length - 1] !== '\n')) {
	                            arr[arr.length - 1] = rtrim(arr[arr.length - 1]);
	                        }
	                        arr.push('\n');
	                    }
	                };

	                this.print_indentation = function(arr) {
	                    for (var i = 0; i < this.indent_level; i++) {
	                        arr.push(this.indent_string);
	                        this.line_char_count += this.indent_string.length;
	                    }
	                };

	                this.print_token = function(text) {
	                    // Avoid printing initial whitespace.
	                    if (this.is_whitespace(text) && !this.output.length) {
	                        return;
	                    }
	                    if (text || text !== '') {
	                        if (this.output.length && this.output[this.output.length - 1] === '\n') {
	                            this.print_indentation(this.output);
	                            text = ltrim(text);
	                        }
	                    }
	                    this.print_token_raw(text);
	                };

	                this.print_token_raw = function(text) {
	                    // If we are going to print newlines, truncate trailing
	                    // whitespace, as the newlines will represent the space.
	                    if (this.newlines > 0) {
	                        text = rtrim(text);
	                    }

	                    if (text && text !== '') {
	                        if (text.length > 1 && text.charAt(text.length - 1) === '\n') {
	                            // unformatted tags can grab newlines as their last character
	                            this.output.push(text.slice(0, -1));
	                            this.print_newline(false, this.output);
	                        } else {
	                            this.output.push(text);
	                        }
	                    }

	                    for (var n = 0; n < this.newlines; n++) {
	                        this.print_newline(n > 0, this.output);
	                    }
	                    this.newlines = 0;
	                };

	                this.indent = function() {
	                    this.indent_level++;
	                };

	                this.unindent = function() {
	                    if (this.indent_level > 0) {
	                        this.indent_level--;
	                    }
	                };
	            };
	            return this;
	        }

	        /*_____________________--------------------_____________________*/

	        multi_parser = new Parser(); //wrapping functions Parser
	        multi_parser.printer(html_source, indent_character, indent_size, wrap_line_length, brace_style); //initialize starting values

	        while (true) {
	            var t = multi_parser.get_token();
	            multi_parser.token_text = t[0];
	            multi_parser.token_type = t[1];

	            if (multi_parser.token_type === 'TK_EOF') {
	                break;
	            }

	            switch (multi_parser.token_type) {
	                case 'TK_TAG_START':
	                    multi_parser.print_newline(false, multi_parser.output);
	                    multi_parser.print_token(multi_parser.token_text);
	                    if (multi_parser.indent_content) {
	                        if ((multi_parser.indent_body_inner_html || !multi_parser.token_text.match(/<body(?:.*)>/)) &&
	                            (multi_parser.indent_head_inner_html || !multi_parser.token_text.match(/<head(?:.*)>/))) {

	                            multi_parser.indent();
	                        }

	                        multi_parser.indent_content = false;
	                    }
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_STYLE':
	                case 'TK_TAG_SCRIPT':
	                    multi_parser.print_newline(false, multi_parser.output);
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_END':
	                    //Print new line only if the tag has no content and has child
	                    if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {
	                        var tag_name = (multi_parser.token_text.match(/\w+/) || [])[0];
	                        var tag_extracted_from_last_output = null;
	                        if (multi_parser.output.length) {
	                            tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length - 1].match(/(?:<|{{#)\s*(\w+)/);
	                        }
	                        if (tag_extracted_from_last_output === null ||
	                            (tag_extracted_from_last_output[1] !== tag_name && !multi_parser.Utils.in_array(tag_extracted_from_last_output[1], unformatted))) {
	                            multi_parser.print_newline(false, multi_parser.output);
	                        }
	                    }
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_SINGLE':
	                    // Don't add a newline before elements that should remain unformatted.
	                    var tag_check = multi_parser.token_text.match(/^\s*<([a-z-]+)/i);
	                    if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)) {
	                        multi_parser.print_newline(false, multi_parser.output);
	                    }
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_HANDLEBARS_ELSE':
	                    // Don't add a newline if opening {{#if}} tag is on the current line
	                    var foundIfOnCurrentLine = false;
	                    for (var lastCheckedOutput = multi_parser.output.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {
	                        if (multi_parser.output[lastCheckedOutput] === '\n') {
	                            break;
	                        } else {
	                            if (multi_parser.output[lastCheckedOutput].match(/{{#if/)) {
	                                foundIfOnCurrentLine = true;
	                                break;
	                            }
	                        }
	                    }
	                    if (!foundIfOnCurrentLine) {
	                        multi_parser.print_newline(false, multi_parser.output);
	                    }
	                    multi_parser.print_token(multi_parser.token_text);
	                    if (multi_parser.indent_content) {
	                        multi_parser.indent();
	                        multi_parser.indent_content = false;
	                    }
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_HANDLEBARS_COMMENT':
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'TAG';
	                    break;
	                case 'TK_CONTENT':
	                    if ((options.useHtmlModeTextIndent || multi_parser.tag_type != 'START') && multi_parser.token_text) {
	                        multi_parser.print_newline(false, multi_parser.output);
	                        multi_parser.print_token(multi_parser.token_text);
	                        multi_parser.print_newline(false, multi_parser.output);
	                    } else {
	                        multi_parser.print_token(multi_parser.token_text);
	                    }
	                    multi_parser.current_mode = 'TAG';
	                    break;
	                case 'TK_STYLE':
	                case 'TK_SCRIPT':
	                    if (multi_parser.token_text !== '') {
	                        multi_parser.print_newline(false, multi_parser.output);
	                        var text = multi_parser.token_text,
	                            _beautifier,
	                            script_indent_level = 1;
	                        if (multi_parser.token_type === 'TK_SCRIPT') {
	                            _beautifier = typeof js_beautify === 'function' && js_beautify;
	                        } else if (multi_parser.token_type === 'TK_STYLE') {
	                            _beautifier = typeof css_beautify === 'function' && css_beautify;
	                        }

	                        if (options.indent_scripts === "keep") {
	                            script_indent_level = 0;
	                        } else if (options.indent_scripts === "separate") {
	                            script_indent_level = -multi_parser.indent_level;
	                        }

	                        var indentation = multi_parser.get_full_indent(script_indent_level);
	                        if (_beautifier) {

	                            // call the Beautifier if avaliable
	                            var Child_options = function() {
	                                this.eol = '\n';
	                            };
	                            Child_options.prototype = options;
	                            var child_options = new Child_options();
	                            text = _beautifier(text.replace(/^\s*/, indentation), child_options);
	                        } else {
	                            // simply indent the string otherwise
	                            var white = text.match(/^\s*/)[0];
	                            var _level = white.match(/[^\n\r]*$/)[0].split(multi_parser.indent_string).length - 1;
	                            var reindent = multi_parser.get_full_indent(script_indent_level - _level);
	                            text = text.replace(/^\s*/, indentation)
	                                .replace(/\r\n|\r|\n/g, '\n' + reindent)
	                                .replace(/\s+$/, '');
	                        }
	                        if (text) {
	                            multi_parser.print_token_raw(text);
	                            multi_parser.print_newline(true, multi_parser.output);
	                        }
	                    }
	                    multi_parser.current_mode = 'TAG';
	                    break;
	                default:
	                    // We should not be getting here but we don't want to drop input on the floor
	                    // Just output the text and move on
	                    if (multi_parser.token_text !== '') {
	                        multi_parser.print_token(multi_parser.token_text);
	                    }
	                    break;
	            }
	            multi_parser.last_token = multi_parser.token_type;
	            multi_parser.last_text = multi_parser.token_text;
	        }
	        var sweet_code = multi_parser.output.join('').replace(/[\r\n\t ]+$/, '');

	        // establish end_with_newline
	        if (end_with_newline) {
	            sweet_code += '\n';
	        }

	        if (eol !== '\n') {
	            sweet_code = sweet_code.replace(/[\n]/g, eol);
	        }

	        return sweet_code;
	    }

	    if (true) {
	        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, __webpack_require__(8), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = function(requireamd) {
	            var js_beautify = __webpack_require__(8);
	            var css_beautify = __webpack_require__(9);

	            return {
	                html_beautify: function(html_source, options) {
	                    return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
	                }
	            };
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        // Add support for CommonJS. Just put this file somewhere on your require.paths
	        // and you will be able to `var html_beautify = require("beautify").html_beautify`.
	        var js_beautify = require('./beautify.js');
	        var css_beautify = require('./beautify-css.js');

	        exports.html_beautify = function(html_source, options) {
	            return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
	        };
	    } else if (typeof window !== "undefined") {
	        // If we're running a web page and don't have either of the above, add our one global
	        window.html_beautify = function(html_source, options) {
	            return style_html(html_source, options, window.js_beautify, window.css_beautify);
	        };
	    } else if (typeof global !== "undefined") {
	        // If we don't even have window, try global.
	        global.html_beautify = function(html_source, options) {
	            return style_html(html_source, options, global.js_beautify, global.css_beautify);
	        };
	    }

	}());

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var WidgetItems = __webpack_require__(12);
	var Util = __webpack_require__(5);

	function UI(editorElement, options) {
	    this.editorElement = null;
	    this.options = null;

	    this.init(editorElement, options);
	}

	UI.prototype.init = function(editorElement, options){
	    var _this = this;
	    this.editorElement = $(editorElement);
	    this.options = options;

	    if (this.options.fontSize && this.options.fontSize.length) {
	        WidgetItems.fontSize = this.options.fontSize;
	    }

	    if (this.options.fontFamily && this.options.fontFamily.length) {
	        WidgetItems.fontFamily = this.options.fontFamily;
	    }

	    if (this.options.lineHeight && this.options.lineHeight.length) {
	        WidgetItems.line_height = this.options.lineHeight;
	    }

	    //TODO : i18n 대응 준비중

	    var hideUiActiveWindow = function(node){
	        var $node = (node) ? $(node) : _this.editorElement;
	        $node.find(".ui_active").removeClass('ui_active');
	        $node.find(".ui_select_list").hide();
	        $node.find(".ui_combobox").hide();
	        $node.find(".ui_colorpicker").hide();
	        $node.find(".ui_listpicker").hide();
	        $node.find(".ui_tablepicker").hide();
	        $node.find(".ui_custombox").hide();
	    };

	    $.widget("ui.kkButton",{
	        options: {
	            _id : "",
	            type : "",
	            callback : null
	        },

	        _create: function() {
	            this._event();
	            this._id = this.element.attr("u-id");
	            this.customAction = this.element.data('custom-action');
	        },

	        _init : function(){

	        },

	        _event : function(){
	            var _this = this;
	            this._on( _this.element, {
	                "mousedown" : function(e) {
	                    if (_this.element.hasClass('disabled')) {
	                        return
	                    }

	                    var isCustomAction = false;

	                    if (_this.customAction) {
	                        isCustomAction = true;
	                    }

	                    var paramObject = {"id":_this._id, "isCustomAction" : isCustomAction};

	                    if (["bold", "italic", "underline", "strikeThrough", "superscript", "subscript"].indexOf(_this._id) > -1) {
	                        paramObject.val = _this.element.is('.on') ? 'off' : 'on';
	                    }

	                    _this.options["callback"](e, paramObject);
	                }
	            });
	        },

	        _destroy: function() {
	            this.element.remove();
	        },

	        setActive: function() {
	            this.unsetActive();
	            this.element.addClass("active");
	        },
	        unsetActive: function() {
	            this.element.removeClass("active");
	        },
	        setDisabled: function() {
	            this.unsetDisabled();
	            this.element.addClass("disabled");
	        },
	        unsetDisabled: function() {
	            this.element.removeClass("disabled");
	        }
	    });

	    // kkSelectBox
	    $.widget("ui.kkSelectBox",{
	        options:{
	            id : "",
	            label : "name2",
	            defaultVal : "value2",
	            currentVal : "value2",
	            callback  : null,
	            item: [],
	            mode: "select"
	        },

	        _create:function(){
	            var _this = this,
	                label = "",
	                strSelected = "",
	                css = "",
	                wrap = "";


	            this.options.id = this.element.attr("u-id");
	            this.options.mode = (this.element.attr("mode")) ? this.element.attr("mode") : "select";
	            this.options.defaultVal = this.element.attr("val");
	            this.options.currentVal = this.element.attr("val");
	            this.options.item = WidgetItems[this.options.id] || [];

	            this.callback = this.options.callback;
	            this.enableContent = this.options.enableContent;
	            this.disableContent = this.options.disableContent;

	            if(_this.options.mode == "select"){
	                var iconClassType = "material-icons arrow_icon i-arrow-down";
	                
	                wrap = '<div ui-type="'+ _this.options.id +'" ui-item-count="'+_this.options.item.length+'" class="ui_selectbox"><div class="arrow"><i class="' + iconClassType + '">arrow_drop_down</i></div>'+
	                    '<ul class="ui_select_list">';
	                
	                    $.each(_this.options.item,function() {
	                    strSelected = "";

	                    if(_this.options.defaultVal == this.value){
	                        label = this.name;
	                        strSelected = "selected";
	                    }

	                    if (_this.options.id == "fontFamily"){
	                        wrap += '<li data-value="'+this.value+'" '+strSelected+'><span style="font-family: '+this.name+'">'+this.name+'</span></li>';
	                    // }else if (_this.options.id == "heading"){
	                    //     wrap += '<li data-value="'+this.value+'" '+strSelected+'><' + this.value + '>' + this.name + '</' + this.value + '>' + '</li>';
	                    }else if (_this.options.id == "heading"){
	                        wrap += '<li data-value="'+this.value+'" '+strSelected+'>' + (this.value == 'default' ? '' : '<' + this.value + '>') + '<span>'+this.name+'</span>' + (this.value == 'default' ? '' : '</' + this.value + '>') + '</li>';

	                    }else if (_this.options.id == "fontSize"){
	                        wrap += '<li data-value="'+this.value+'" '+strSelected+'><div style="font-size: '+this.name+'">'+this.name+'</div></li>';

	                    }else if (_this.options.id == "cell_border_style"){
	                        wrap += '<li data-value="'+this.value+'" '+strSelected+'>'+this.name+'</li>';

	                    }else{
	                        wrap += '<li data-value="'+this.value+'" '+strSelected+'>'+this.name+'</li>';
	                    }
	                });
	                wrap += '</ul><label class="btnDropdown"></label></div>';
	                this.element.html(wrap);
	            }else{
	                wrap = '<ul ui-type="'+ _this.options.id +'" ui-item-count="'+_this.options.item.length+'" class="ui_combobox ' + _this.options.id +'" >';
	                $.each(_this.options.item,function() {
	                    strSelected = "";
	                    if(_this.options.defaultVal == this.value){
	                        strSelected = "selected";
	                    }

	                    wrap += '<li data-value="'+this.value+'"';
	                    if (this.type) {
	                        wrap += "type='" + this.type + "'";
	                    }
	                    wrap += strSelected + " ";

	                    if (this.key) { wrap += "key='" + this.key + "'"; }
	                    if (this.cmd) { wrap += "cmd='" + this.cmd + "'"; }
	                    wrap += '>'+this.name+'</li>';
	                });
	                wrap += '</ul>';
	                this.element.append(wrap);
	            }

	            var listItems = this.element.find("ul > li[type != 'label']");

	            listItems.on("click", function (e) {
	                _this._toggle();

	                var $target = $(e.target);
	                if (!$target.is('li')) {
	                    $target = $target.closest('.ui_select_list li');
	                }

	                _this.setValue(e, $target.attr("data-value"));
	                return false;
	            });


	            if ($.browser.msie && $.browser.version < 11) {
	                listItems.on('mouseenter', function(){
	                    $(this).addClass('hover');
	                }).on('mouseleave', function(){
	                    $(this).removeClass('hover');
	                });
	            }

	            this._event();
	            if( this.options.hidden ){
	                this.element.hide();
	            }
	        },

	        _init : function() {

	        },

	        _destroy: function() {
	            this.element.remove();
	        },

	        _setOptions: function( options ) {
	            var that = this;
	            $.each( options, function( key, value ) {
	                that._setOption( key, value );
	            });
	        },
	        _setOption: function( key, value ) {
	            this._super( key, value );
	        },

	        _event : function(){
	            var _this = this;
	            this._on( _this.element, {
	                "click" : function(e) {
	                    _this._toggle();
	                }
	            });
	            if(_this.mode == "select") {
	                var cH = (_this.options.item.length * 25);
	                var pH = ($(window).height() - ($(".kk_editor_toolbar").height()));
	                if (cH > pH) {
	                    _this.element.find("ul").css("height", pH + "px");
	                }
	                $(window).resize(function () {
	                    pH = ($(window).height() - ($(".kk_editor_toolbar").height()));
	                    if (cH > pH) {
	                        _this.element.find("ul").css("height", pH + "px");
	                    }
	                });
	            }
	        },

	        _toggle : function(){
	            if (this.element.hasClass('disabled')) {
	                return
	            }

	            var _this = this;
	            var className = "";
	            if(_this.options.mode == "select") {
	                className = 'ui_select_list';
	            }else {
	                className = 'ui_combobox';
	            }

	            var wrapper = this.element.find("."+className);

	            if(this.element.find("."+className).is(':hidden')){
	                var customBox = Util.findParentNode(this.element[0], ".ui_custombox");
	                if(customBox){
	                    hideUiActiveWindow(customBox);
	                }else{
	                    hideUiActiveWindow();
	                }

	                var bufferSize = 25;
	                var overLeftSize = this.element[0].offsetLeft + wrapper.outerWidth() + bufferSize;
	                var windowSize = $(window).width();

	                wrapper.css('left', overLeftSize <= windowSize ? '' : -(overLeftSize - windowSize) + 'px');
	                wrapper.css('top', bufferSize + 'px');

	                if (this['disableContent']) {
	                    this['disableContent']();
	                }

	                wrapper.show();
	            }else{
	                if (this['enableContent']) {
	                    this['enableContent']();
	                }

	                wrapper.hide();
	            }
	        },

	        setValue : function (e, value){
	            var _this = this;

	            if (this.element.hasClass('disabled')) {
	                return
	            }

	            this.currentVal = value;

	            this.element.find("li[selected]").removeAttr("selected");

	            if (_this.options.id == "cell_border_style") {
	                var html = this.element.find("li[data-value='"+value+"']").attr("selected","selected").html();
	                // if (!text) { text = value; }
	                // this.element.find("label").html(html);

	            } else {
	                var text = this.element.find("li[data-value='"+value+"']").attr("selected","selected").text();

	                // console.log(value, text);

	                // if (!text) { text = value; }
	                // this.element.find("label").html(text);
	            }

	            if (this['callback']) {
	                this['callback'](e, {id:_this.options.id, mode:_this.options.mode,label:text,val:value});
	            }
	        }
	    });

	    // kkColorPicker
	    $.widget("ui.kkColorPicker",{
	        options: {
	            type : "",
	            defaultColor : "000000",
	            currentColor : "000000",
	            noAction : false,
	            colorParent : null,

	            label:{
	                standard: window.kukuResource.menuText.colorPicker.standard,
	                theme: window.kukuResource.menuText.colorPicker.theme
	            },
	            pallete : {
	                transparent : { color : "transparent", text : window.kukuResource.colorPicker.transparent, className : "color_transparent" },

	                defaultColor  :  "000000",
	                noneColor  :     "ffffff",
	                simpleColor   : ["ffffff", "000000", "eeece1", "1f497d", "4f81bd", "c0504d", "9bbb59", "8064a2", "4bacc6", "f79646"],
	                standardColor : ["f2f2f2", "808080", "ddd9c3", "c6d9f1", "dce6f2", "f2dcdb", "ebf1de", "e6e0ec", "dbeee0", "fdeada",
	                                 "d9d9d9", "595959", "c4bd97", "8eb4e3", "b9cde5", "e6b9b8", "d7e4bd", "ccc1da", "b7dee8", "fcd5b5",
	                                 "bfbfbf", "404040", "948a54", "558ed5", "95b3d7", "d99694", "c3d69b", "b3a2c7", "93cddd", "fac090",
	                                 "a6a6a6", "262626", "4a452a", "17375e", "376092", "953735", "77933c", "604a7b", "31859c", "e46c0a",
	                                 "808080", "0d0d0d", "1e1c11", "10243f", "254061", "632523", "4f6228", "403152", "215968", "984807"],
	                normalColor   : ["c00000", "ff0000", "ffc000", "ffff00", "92d050", "00b050", "00b0f0", "0070c0", "002060", "7030a0"]
	            },
	            callback  : null
	        },

	        _create: function() {
	            if (this.options.colorPicker) {
	                if (this.options.colorPicker.defaultColor) {
	                    this.options.pallete.defaultColor = this.options.colorPicker.defaultColor;
	                    this.options.defaultColor = this.options.colorPicker.defaultColor;
	                    this.options.currentColor = this.options.colorPicker.defaultColor;
	                }

	                if (this.options.colorPicker.noneColor) {
	                    this.options.pallete.noneColor = this.options.colorPicker.noneColor;
	                }

	                if (this.options.colorPicker.simpleColor) {
	                    this.options.pallete.simpleColor = this.options.colorPicker.simpleColor;
	                }

	                if (this.options.colorPicker.standardColor) {
	                    this.options.pallete.standardColor = this.options.colorPicker.standardColor;
	                }

	                if (this.options.colorPicker.normalColor) {
	                    this.options.pallete.normalColor = this.options.colorPicker.normalColor;
	                }
	            }

	            this.options.id = this.element.attr("u-id");
	            this.options.defaultColor = this.element.attr("color");

	            var wrap = '';
	                wrap += '<div class="ui_colorpicker modeless">';
	                //wrap += '<ul class="ui_sub_default_color"><li color="'+this.options.pallete.defaultColor+'"><span class="ui_default_color"></span>'+this.options.label.default+'</li></ul>';
	                wrap += '<div class="ui_standard_color_text">'+this.options.label.theme+'</div>';
	                wrap += '<ul class="ui_default_color_palette">';

	                wrap += '<li style="background-color:' + this.options.pallete.transparent.color + '" class="' + this.options.pallete.transparent.className + '" ' + 'color="' + this.options.pallete.transparent.color + '" >' + this.options.pallete.transparent.text + '</li>';

	                $.each(this.options.pallete.simpleColor, function(i,v) {
	                    wrap += '<li style="background-color:#'+v+'" color="'+v+'"></li>';
	                });
	                wrap += '</ul><ul class="ui_color_palette">';

	                $.each(this.options.pallete.standardColor, function(i,v) {
	                    wrap += '<li style="background-color:#'+v+'" color="'+v+'"></li>';
	                });
	                wrap += '</ul>'+
	                    '<div class="ui_standard_color_text">'+this.options.label.standard+'</div>'+
	                    '<ul class="ui_standard_color_palette">';
	                $.each(this.options.pallete.normalColor, function(i,v) {
	                    wrap += '<li style="background-color:#'+v+'" color="'+v+'"></li>';
	                });
	                wrap +='</ul>';
	                wrap +='</div>';

	            this.element.append(wrap);

	            this._event();
	        },

	        _init : function(){
	            var _this = this;
	            _this.element.find("a span.selectdColor").css("background-color","#"+_this.options.currentColor);			    // 선택된 색상 설정
	            _this.element.find("li > span.defaultColor").css("background-color","#"+_this.options.pallete.defaultColor);  	// 기본 색상 설정
	        },

	        _event : function(){
	            var _this = this;
	            this._on( _this.element, {
	                "mousedown" : function(e) {
	                    if ($.browser.msie) {
	                        if (_this.options.id == 'color' || _this.options.id == 'backgroundColor') {
	                            if (_this.options["getSelection"]) {
	                                var selection = _this.options["getSelection"]();
	                                var range = selection.getRange().cloneRange();

	                                setTimeout(function(){
	                                    selection.setRange(range);
	                                }, 50);
	                            }

	                            e.preventDefault();
	                            e.stopPropagation();
	                            return false;
	                        }
	                    }
	                },
	                "click" : function(e) {
	                    _this._toggle();
	                }
	            });

	            this._setAction();
	        },


	        _destroy: function() {
	            this.element.find(".uiColorPicker").remove();
	        },

	        _setOptions: function( options ) {
	            var that = this;
	            $.each( options, function( key, value ) {
	                that._setOption( key, value );
	            });

	        },
	        _setOption: function( key, value ) {
	            this._super( key, value );
	        },

	        //Text Color Layer 실행
	        _toggle : function(){

	            var $colorPicker = this.element.find(".ui_colorpicker");

	            if($colorPicker.is(':hidden')){
	                var customBox = Util.findParentNode(this.element[0], ".ui_custombox");
	                if(customBox){
	                    hideUiActiveWindow(customBox);
	                }else{
	                    hideUiActiveWindow();
	                }

	                var bufferSize = 20;
	                var overLeftSize = this.element[0].offsetLeft + $colorPicker.outerWidth() + bufferSize;
	                var windowSize = $(window).width();

	                $colorPicker.css('left', overLeftSize <= windowSize ? '' : -(overLeftSize - windowSize) + 'px');

	                var localToGlobal = function( _el ) {
	                    var target = _el,
	                        target_width = target.offsetWidth,
	                        target_height = target.offsetHeight,
	                        target_left = target.offsetLeft,
	                        target_top = target.offsetTop,
	                        gleft = 0,
	                        gtop = 0,
	                        rect = {};

	                    var moonwalk = function( _parent ) {
	                        if (!!_parent) {
	                            gleft += _parent.offsetLeft;
	                            gtop += _parent.offsetTop;
	                            moonwalk( _parent.offsetParent );
	                        } else {
	                            return rect = {
	                                top: target.offsetTop + gtop,
	                                left: target.offsetLeft + gleft,
	                                bottom: (target.offsetTop + gtop) + target_height,
	                                right: (target.offsetLeft + gleft) + target_width
	                            };
	                        }
	                    };
	                    moonwalk( target.offsetParent );
	                    return rect;
	                };

	                var rect = localToGlobal($colorPicker.parent()[0]);

	                var colorPickerBottom = rect.top + $colorPicker.parent().height() + $colorPicker.height();

	                if (colorPickerBottom > $(window).height()) {
	                    $colorPicker.css('top', (($colorPicker.height()) * -1) + 'px');
	                } else {
	                    $colorPicker.css('top', '');
	                }

	                if (this.options["disableContent"]) {
	                    this.options["disableContent"]();
	                }

	                $colorPicker.show();
	            }else{

	                if (this.options["enableContent"]) {
	                    this.options["enableContent"]();
	                }

	                $colorPicker.hide();
	            }
	        },

	        //리소스 삽입
	        _setAction : function(){
	            var _this = this;
	            this.element.find("ul > li").on("click", function (e) {
	                var color = $(this).attr("color");
	                _this.element.find(".btnCurrent").attr("value", color);

	                var hashColor = color;

	                if (hashColor != _this.options.pallete.transparent.color) {
	                    hashColor = '#' + hashColor;
	                }

	                _this.options["callback"](e, {id:_this.options.id,color:hashColor});
	                _this._setValue(color);
	                return false;
	            });
	        },

	        _setValue : function (color){
	            var _this = this;
	            _this.options.currentColor = color;
	            // this.element.find(".ui_semple").css("background-color","#"+color);

	            this.element.find("ul > li[selected]").removeAttr("selected");

	            if (color != this.options.pallete.transparent.color) {
	                this.element.find("ul > li[color='"+color+"']").attr("selected","selected");
	            }
	        },

	        //메뉴 아이템 현재값 가져오기
	        getParentMenuItemValue : function(){
	            return this.element.find("a  span.selectdColor").css("background-color");
	        }
	    });


	    $.widget("ui.kkTablePicker",{
	        options: {
	            id : "table",
	            label : "",
	            currentVal : "",
	            _uiSelectList : null,
	            cmd : 'insert',
	            type : 'table',
	            _subTable : null
	        },

	        _create: function() {
	            var wrap =  '' +
	                '<div class="ui_tablepicker modeless">' +
	                    '<div class="subTableSize">' +
	                        '<label class="subTableWidth">0</label><span class="subTableX">x</span><label class="subTableHeight">0</label>' +
	                    '</div>' +
	                    '<div class="insertTableForm">' +
	                        '<div>' +
	                            '<span row="1" col="1"></span>' +
	                            '<span row="1" col="2"></span>' +
	                            '<span row="1" col="3"></span>' +
	                            '<span row="1" col="4"></span>' +
	                            '<span row="1" col="5"></span>' +
	                            '<span row="1" col="6"></span>' +
	                            '<span row="1" col="7"></span>' +
	                            '<span row="1" col="8"></span>' +
	                            '<span row="1" col="9"></span>' +
	                            '<span row="1" col="10"></span>' +
	                        '</div>' +
	                        '<div>' +
	                            '<span row="2" col="1"></span>' +
	                            '<span row="2" col="2"></span>' +
	                            '<span row="2" col="3"></span>' +
	                            '<span row="2" col="4"></span>' +
	                            '<span row="2" col="5"></span>' +
	                            '<span row="2" col="6"></span>' +
	                            '<span row="2" col="7"></span>' +
	                            '<span row="2" col="8"></span>' +
	                            '<span row="2" col="9"></span>' +
	                            '<span row="2" col="10"></span>' +
	                        '</div>' +
	                        '<div>' +
	                            '<span row="3" col="1"></span>' +
	                            '<span row="3" col="2"></span>' +
	                            '<span row="3" col="3"></span>' +
	                            '<span row="3" col="4"></span>' +
	                            '<span row="3" col="5"></span>' +
	                            '<span row="3" col="6"></span>' +
	                            '<span row="3" col="7"></span>' +
	                            '<span row="3" col="8"></span>' +
	                            '<span row="3" col="9"></span>' +
	                            '<span row="3" col="10"></span>' +
	                        '</div>' +
	                        '<div>' +
	                            '<span row="4" col="1"></span>' +
	                            '<span row="4" col="2"></span>' +
	                            '<span row="4" col="3"></span>' +
	                            '<span row="4" col="4"></span>' +
	                            '<span row="4" col="5"></span>' +
	                            '<span row="4" col="6"></span>' +
	                            '<span row="4" col="7"></span>' +
	                            '<span row="4" col="8"></span>' +
	                            '<span row="4" col="9"></span>' +
	                            '<span row="4" col="10"></span>' +
	                        '</div>' +
	                        '<div>' +
	                            '<span row="5" col="1"></span>' +
	                            '<span row="5" col="2"></span>' +
	                            '<span row="5" col="3"></span>' +
	                            '<span row="5" col="4"></span>' +
	                            '<span row="5" col="5"></span>' +
	                            '<span row="5" col="6"></span>' +
	                            '<span row="5" col="7"></span>' +
	                            '<span row="5" col="8"></span>' +
	                            '<span row="5" col="9"></span>' +
	                            '<span row="5" col="10"></span>' +
	                        '</div>' +
	                        '<div>' +
	                            '<span row="6" col="1"></span>' +
	                            '<span row="6" col="2"></span>' +
	                            '<span row="6" col="3"></span>' +
	                            '<span row="6" col="4"></span>' +
	                            '<span row="6" col="5"></span>' +
	                            '<span row="6" col="6"></span>' +
	                            '<span row="6" col="7"></span>' +
	                            '<span row="6" col="8"></span>' +
	                            '<span row="6" col="9"></span>' +
	                            '<span row="6" col="10"></span>' +
	                        '</div>' +
	                        '<div>' +
	                            '<span row="7" col="1"></span>' +
	                            '<span row="7" col="2"></span>' +
	                            '<span row="7" col="3"></span>' +
	                            '<span row="7" col="4"></span>' +
	                            '<span row="7" col="5"></span>' +
	                            '<span row="7" col="6"></span>' +
	                            '<span row="7" col="7"></span>' +
	                            '<span row="7" col="8"></span>' +
	                            '<span row="7" col="9"></span>' +
	                            '<span row="7" col="10"></span>' +
	                        '</div>' +
	                        '<div>' +
	                            '<span row="8" col="1"></span>' +
	                            '<span row="8" col="2"></span>' +
	                            '<span row="8" col="3"></span>' +
	                            '<span row="8" col="4"></span>' +
	                            '<span row="8" col="5"></span>' +
	                            '<span row="8" col="6"></span>' +
	                            '<span row="8" col="7"></span>' +
	                            '<span row="8" col="8"></span>' +
	                            '<span row="8" col="9"></span>' +
	                            '<span row="8" col="10"></span>' +
	                        '</div>' +
	                        '<div>' +
	                            '<span row="9" col="1"></span>' +
	                            '<span row="9" col="2"></span>' +
	                            '<span row="9" col="3"></span>' +
	                            '<span row="9" col="4"></span>' +
	                            '<span row="9" col="5"></span>' +
	                            '<span row="9" col="6"></span>' +
	                            '<span row="9" col="7"></span>' +
	                            '<span row="9" col="8"></span>' +
	                            '<span row="9" col="9"></span>' +
	                            '<span row="9" col="10"></span>' +
	                        '</div>' +
	                        '<div>' +
	                            '<span row="10" col="1"></span>' +
	                            '<span row="10" col="2"></span>' +
	                            '<span row="10" col="3"></span>' +
	                            '<span row="10" col="4"></span>' +
	                            '<span row="10" col="5"></span>' +
	                            '<span row="10" col="6"></span>' +
	                            '<span row="10" col="7"></span>' +
	                            '<span row="10" col="8"></span>' +
	                            '<span row="10" col="9"></span>' +
	                            '<span row="10" col="10"></span>' +
	                        '</div>' +
	                    '</div>' +
	                '</div>';

	            this.element.append($('<div class="arrow_wrap"><span class="material-icons arrow">arrow_drop_down</span></div>')[0]);
	            this.element.append(wrap);
	            this._event();
	        },

	        _toggle : function(){
	            if(!this.element.hasClass('disabled')){
	                var $tablePicker = this.element.find(".ui_tablepicker");

	                if(this.element.find(".ui_tablepicker").is(':hidden')){
	                    var customBox = Util.findParentNode(this.element[0], ".ui_custombox");
	                    if(customBox){
	                        hideUiActiveWindow(customBox);
	                    }else{
	                        hideUiActiveWindow();
	                    }
	                    
	                    var bufferSize = 20;
	                    var moreWrapLeft = 0;
	                    if ( $('.menus .menu_more_wrap').hasClass('active') ) {
	                        moreWrapLeft = $('.menu_more_wrap').offset().left;
	                        moreWrapLeft = Math.round(moreWrapLeft);
	                    }
	                    var overLeftSize = this.element[0].offsetLeft + $tablePicker.outerWidth() + bufferSize + moreWrapLeft;
	                    var windowSize = $(window).width();

	                    $tablePicker.css('left', overLeftSize <= windowSize ? '' : -(overLeftSize - windowSize) + 'px');

	                    if (this.options["disableContent"]) {
	                        this.options["disableContent"]();
	                    }

	                    this.element.find(".ui_tablepicker").show();
	                }else{

	                    if (this.options["enableContent"]) {
	                        this.options["enableContent"]();
	                    }

	                    this.element.find(".ui_tablepicker").hide();
	                }
	            }
	        },

	        _event : function(){
	            var _this = this;
	            // this._on( _this.element, {
	            //     "click" : function(e) {
	            //         _this._toggle();
	            //     }
	            // });

	            this._on( _this.element.find(".i_table"), {
	                "click" : function(e) {
	                    hideUiActiveWindow();

	                    if (_this.element.hasClass('disabled')) {
	                        return
	                    }

	                    _this.options["callback"](e, {"id": "tableInsertDialog"});
	                }
	            });

	            this._on( _this.element.find(".arrow_wrap"), {
	                "click" : function(e) {
	                    if (_this.element.hasClass('disabled')) {
	                        return
	                    }
	                    _this._toggle();
	                }
	            });

	            this._on( _this.element.find(".ui_tablepicker" ), {
	                "click" : function(e) {
	                    return false;
	                }
	            });

	            this._on( _this.element.find(".ui_tablepicker" + " .insertTableForm"), {
	                "mouseleave": function(e){
	                    _this.fillRowCol(0, 0);
	                }
	            });

	            this._on( _this.element.find(".ui_tablepicker" + " .insertTableForm span"), {
	                "mouseover" : function(e) {
	                    var row = $(e.target).attr('row');
	                    var col = $(e.target).attr('col');
	                    _this.fillRowCol(row, col);
	                },
	                "click" : function(e) {
	                    _this.setValue(e);
	                    return false;
	                }
	            });
	        },

	        updateTableSize : function(row, col){
	            this.element.find(".subTableHeight").html(row);
	            this.element.find(".subTableWidth").html(col);
	        },

	        fillRowCol : function(row, col){
	            var _this = this;
	            var cells = _this.element.find(".insertTableForm span");
	            cells.each(function(idx){
	                var _row = Number($(this).attr('row'));
	                var _col = Number($(this).attr('col'));
	                if( _row <= row && _col <= col){
	                    $(this).addClass("selected_form");
	                }else{
	                    $(this).removeClass("selected_form");
	                }
	            });
	            _this.updateTableSize(row, col);
	        },

	        setValue : function (e){
	            var _this = this;
	            var row = $(e.target).attr('row');
	            var col = $(e.target).attr('col');

	            this.options["callback"](e, {"id":_this.options.id, "row":row, "col":col});
	        },

	        _setOptions: function( options ) {
	            var that = this;
	            $.each( options, function( key, value ) {
	                that._setOption( key, value );
	            });

	        },
	        _setOption: function( key, value ) {
	            this._super( key, value );
	        }
	    });


	    $.widget("ui.kkListPicker",{
	        options: {
	            id : "list",
	            label : "",
	            currentVal : "",
	            _uiSelectList : null,
	            cmd : 'insert',
	            type : 'list',
	            _subTable : null
	        },

	        _create: function() {

	            var isNumberedList = false;

	            if (this.element.attr('u-id') == 'numbered_list') {
	                isNumberedList = true;
	            }

	            var listStyleItems = isNumberedList ? Define.NUMBERED_LIST : Define.BULLET_LIST;

	            var listType = isNumberedList ? 'numbered' : 'bullet';
	            var listStyleHTML = '';

	            for (var i = 0; i < listStyleItems.length ; i++) {
	                var item = listStyleItems[i];

	                listStyleHTML += '<div class="list_type_item" list-type="' + listType + '" list-id="' + item.id + '"><div class="list_title ' + (item.className || '') + '">' + item.title + '</div><div class="list_name">' + item.name + '</div></div>'
	            }

	            var wrap =  '' +
	                '<div class="ui_listpicker modeless">' +
	                    '<div class="listForm">' +
	                        listStyleHTML +
	                    '</div>' +
	                '</div>';

	            this.element.append($('<div class="arrow_wrap"><span class="material-icons arrow">arrow_drop_down</span></div>')[0]);
	            this.element.append(wrap);
	            this._event();
	        },

	        _toggle : function(){
	            if(!this.element.hasClass('disabled')){
	                if(this.element.find(".ui_listpicker").is(':hidden')){
	                    hideUiActiveWindow();

	                    if (this.options["disableContent"]) {
	                        this.options["disableContent"]();
	                    }

	                    this.element.find(".ui_listpicker").show();
	                }else{
	                    if (this.options["enableContent"]) {
	                        this.options["enableContent"]();
	                    }

	                    this.element.find(".ui_listpicker").hide();
	                }
	            }
	        },

	        _event : function(){
	            var _this = this;

	            this._on( _this.element.find(".i_numbered_list"), {
	                "click" : function(e) {
	                    hideUiActiveWindow();

	                    if (_this.element.hasClass('disabled')) {
	                        return
	                    }

	                    _this.options["callback"](e,
	                        {
	                            id : "numbered_list" ,
	                            value : {
	                                listType : 'numbered',
	                                status : _this.element.is('.on') ? 'off' : 'on'
	                            }
	                        }
	                    );
	                }
	            });

	            this._on( _this.element.find(".i_bullet_list"), {
	                "click" : function(e) {
	                    hideUiActiveWindow();

	                    if (_this.element.hasClass('disabled')) {
	                        return
	                    }

	                    _this.options["callback"](e,
	                        {
	                            id : "bullet_list" ,
	                            value : {
	                                listType : 'bullet',
	                                status : _this.element.is('.on') ? 'off' : 'on'
	                            }
	                        }
	                    );
	                }
	            });

	            this._on( _this.element.find(".arrow_wrap"), {
	                "click" : function(e) {
	                    _this._toggle();
	                }
	            });

	            var listTypeItem =  _this.element.find(".list_type_item");

	            this._on( listTypeItem, {
	                "click" : function(e) {
	                    var currentTarget = e.currentTarget;

	                    var listId = currentTarget.getAttribute('list-id');

	                    _this._toggle();

	                    var isNumberedList = Define.NUMBERED_LIST_ITEMS.indexOf(listId) > -1;

	                    var data = {
	                        id : (isNumberedList ? 'numbered_list' : 'bullet_list'),
	                        value : {
	                            listType : isNumberedList ? 'numbered' : 'bullet',
	                            specificType : listId,
	                            status : 'on'
	                        }
	                    };

	                    _this.options["callback"](e, data);
	                }
	            });

	            this._on( _this.element.find(".ui_listpicker"), {
	                "click" : function(e) {
	                    return false;
	                }
	            });

	            if ($.browser.msie && $.browser.version < 11) {
	                _this.element.on('mouseenter', function(){
	                    _this.element.addClass("hover");
	                }).on('mouseleave', function(){
	                    _this.element.removeClass("hover");
	                });

	                listTypeItem.on('mouseenter', function(){
	                    $(this).addClass("hover");
	                }).on('mouseleave', function(){
	                    $(this).removeClass("hover");
	                });
	            }
	        },

	        setValue : function (e){
	        },

	        _setOptions: function( options ) {
	            var that = this;
	            $.each( options, function( key, value ) {
	                that._setOption( key, value );
	            });

	        },
	        _setOption: function( key, value ) {
	            this._super( key, value );
	        }
	    });


	    $.widget("ui.kkCustomBox",{
	        options: {
	            label : "",
	            currentVal : "",
	            _uiSelectList : null,
	            cmd : 'update',
	            type : 'table_border_box',
	            _subTable : null,
	            currentColor : "",
	            currentSize : "",
	            currentStyle : "",
	            cellBorderStyle : null,
	            cellBorderType : null
	        },

	        _create: function() {
	            this.options.id = this.element.attr("u-id");
	            if(this.options.type=="table_border_box"){
	                var _this = this;
	                var wrap =  '' +
	                '<div class="ui_custombox" title="">' +
	                    '<div class="border_color">' +
	                        '<a u-id="table_border_color" class="menu_colorpicker">' + window.kukuResource.menuText.borderLine + '</a>' +
	                    '</div>' +
	                   '<div class="border_style">' +
	                        '<div u-id="cell_border_size" class="menu_selectbox" val="1" style="margin-bottom: 2px;"></div>' +
	                        '<div u-id="cell_border_style" class="menu_selectbox" val="solid" ></div>' +
	                    '</div>' +
	                    '<div class="border_type">' +
	                        //'<a u-id="tb_all" class="menu_button"><i class="i_icon i_tb_all"></i></a>' +
	                        //'<a u-id="tb_in" class="menu_button"><i class="i_icon i_tb_in"></i></a>' +
	                        '<a u-id="tb_out" class="menu_button" title=""><i class="i_icon i_tb_out"></i></a>' +
	                        '<a u-id="tb_none" class="menu_button" title=""><i class="i_icon i_tb_none"></i></a>' +
	                        '<a u-id="tb_top" class="menu_button" title=""><i class="i_icon i_tb_top"></i></a>' +
	                        '<a u-id="tb_left" class="menu_button" title=""><i class="i_icon i_tb_left"></i></a>' +
	                        '<a u-id="tb_right" class="menu_button" title=""><i class="i_icon i_tb_right"></i></a>' +
	                        '<a u-id="tb_bottom" class="menu_button" title=""><i class="i_icon i_tb_bottom"></i></a>' +
	                    '</div>' +
	                '</div>';

	                var $node = $(wrap);
	                $node.find(".menu_colorpicker").kkColorPicker({
	                    colorPicker : _this.options.colorPicker,
	                    callback : function(e, data){
	                        var color = _this.options.currentColor = data.color;

	                        if (color == 'transparent' || color == '#ffffff') {
	                            color = '#000000';
	                        }

	                        $node.find(".menu_colorpicker").css("color", color);
	                        $node.find(".ui_colorpicker").hide();
	                    }
	                });

	                $node.find(".menu_selectbox").kkSelectBox();

	                $node.find(".menu_button").kkButton({
	                    callback : function(e, data){
	                        _this.setValue(e, data.id);
	                    }
	                });

	                this.options.cellBorderStyle = $node.find('[u-id="cell_border_style"]');
	                this.options.cellBorderSize = $node.find('[u-id="cell_border_size"]');

	                this.element.append($node[0]);
	            }

	            this._event();
	        },

	        _toggle : function(){
	            if(!this.element.hasClass('disabled')){

	                var $customBox = this.element.find(".ui_custombox");

	                if($customBox.is(':hidden')){
	                    hideUiActiveWindow();

	                    var bufferSize = 20;
	                    var overLeftSize = this.element[0].offsetLeft + $customBox.outerWidth() + bufferSize;
	                    var windowSize = $(window).width();

	                    $customBox.css('left', overLeftSize <= windowSize ? '' : -(overLeftSize - windowSize) + 'px');

	                    $customBox.show();
	                }else{
	                    $customBox.hide();
	                }
	            }
	        },

	        _event : function(){
	            var _this = this;
	            this._on( _this.element, {
	                "click" : function(e) {
	                    var target = e.target;
	                    if(!Util.findParentNode(target , ".ui_custombox")){
	                        _this._toggle();
	                    }

	                }
	            });
	        },

	        setValue : function (e, id){
	            var _this = this;

	            var style = this.options.cellBorderStyle.find("li[selected]").attr("data-value");
	            var size = this.options.cellBorderSize.find("li[selected]").attr("data-value");
	            var color = _this.options.currentColor || "#000000";

	            this.options["callback"](e, {"id":_this.options.id, "type":id, "size":size, "style" : style, "color" : color});
	        },

	        _setOptions: function( options ) {
	            var that = this;
	            $.each( options, function( key, value ) {
	                that._setOption( key, value );
	            });

	        },
	        _setOption: function( key, value ) {
	            this._super( key, value );
	        }
	    });

	    $.widget("ui.kkFindReplaceBox",{
	        options: {
	            id : null
	        },

	        _create: function() {
	            this.options.id = this.element.attr("u-id");
	            var _this = this;
	            var wrap =  '' +
	                '<div class="ui_find_replace_box">' +
	                    '<div class="findreplace_title find active">'+
	                        '<span>' + window.kukuResource.findReplace.title + '</span>'+
	                        '<div class="closeButton"></div>' +
	                    '</div>' +

	                    '<div class="findreplace_contents">' +
	                        '<ul>' +
	                            '<li class="findreplace_items">' +
	                                '<table class="findreplaceArea">' +
	                                    '<tbody>' +
	                                        '<tr>' +
	                                            '<td class="labelArea">' +
	                                                '<label class="findLabel" for="findInputText">' + window.kukuResource.findReplace.find + ' : </label>' +
	                                            '</td>' +
	                                            '<td class="inputArea">' +
	                                                '<input type="text" class="findInputText" id="findInputText" value=""/>' +
	                                            '</td>' +
	                                            '<td class="buttonArea">' +
	                                                '<button class="findButton" id="find">' + window.kukuResource.findReplace.find + '</button>' +
	                                            '</td>' +
	                                        '</tr>' +
	                                        '<tr>' +
	                                            '<td class="labelArea">' +
	                                                '<label class="replaceLabel" for="replaceInputText">' + window.kukuResource.findReplace.replace + ' : </label>' +
	                                            '</td>' +
	                                            '<td class="inputArea">' +
	                                                '<input type="text" class="replaceInputText" id="replaceInputText" value=""/>' +
	                                            '</td>' +
	                                            '<td class="buttonArea">' +
	                                                '<button class="replaceButton" id="replace">' + window.kukuResource.findReplace.replace + '</button>' +
	                                            '</td>' +
	                                        '</tr>' +

	                                        '<tr>' +
	                                            '<td class="labelArea">' +
	                                                '<label class="">' + window.kukuResource.findReplace.findDirectionLabel + ' : </label>' +
	                                            '</td>' +
	                                            '<td class="directionLabelArea">' +
	                                                '<label class="directionWrap"><input id="directionUpRadio" class="directionUpRadio" type="radio" name="direction" value="up"><span class="findDirectionUp">' + window.kukuResource.findReplace.findDirectionUp + '</span></label>' +
	                                                '<label class="directionWrap"><input id="directionDownRadio" class="directionDownRadio" type="radio" name="direction" value="down" checked><span class="findDirectionDown">' + window.kukuResource.findReplace.findDirectionDown + '</span></label>' +
	                                            '</td>' +
	                                            '<td class="buttonArea">' +
	                                                '<button class="replaceAllButton" id="replaceAll">' + window.kukuResource.findReplace.replaceAll + '</button>' +
	                                            '</td>' +
	                                        '</tr>' +
	                                        '<tr>'+
	                                            '<td class="optionLabelArea" colspan="2">' +
	                                                '<label class="textCaseWrap"><input id="caseCheck" class="caseCheck" type="checkbox"><span class="caseText">' + window.kukuResource.findReplace.textCase + '</span></label>' +
	                                            '</td>' +
	                                            '<td class=""></td>' +
	                                        '</tr>'+
	                                        '<tr>' +
	                                            '<td class="optionLabelArea" colspan="2">' +
	                                                '<label class="restartWrap"><input id="restartCheck" class="restartCheck" type="checkbox" checked><span class="findRestart">' + window.kukuResource.findReplace.findRestart + '</span></label>' +
	                                            '</td>' +
	                                            '<td class=""></td>' +
	                                        '</tr>' +
	                                        '<tr>' +
	                                            '<td class="optionLabelArea" colspan="2">' +
	                                                '<label class="wordWrap"><input id="wordCheck" class="wordCheck" type="checkbox"><span class="findRestart">' + window.kukuResource.findReplace.findWord + '</span></label>' +
	                                            '</td>' +
	                                            '<td class=""></td>' +
	                                        '</tr>' +
	                                    '</tbody>' +
	                                '</table>' +
	                            '</li>' +
	                        '</ul>' +
	                    '</div>' +
	                '</div>';

	            var $node = $(wrap);

	            this.element.append($node[0]);

	            this._event();
	        },

	        _toggle : function(){
	            var _this = this;
	            if(!this.element.hasClass('disabled')){

	                var $replaceBox = this.element.find(".ui_find_replace_box");

	                if ($replaceBox.is(':hidden')) {
	                    hideUiActiveWindow();

	                    var bufferSize = 20;
	                    var moreWrapLeft = 0;
	                    if ( $('.menus .menu_more_wrap').hasClass('active') ) {
	                        moreWrapLeft = $('.menu_more_wrap').offset().left;
	                        moreWrapLeft = Math.round(moreWrapLeft);
	                    }

	                    var overLeftSize = this.element[0].offsetLeft + $replaceBox.outerWidth() + bufferSize + moreWrapLeft;
	                    var windowSize = $(window).width();

	                    $replaceBox.css('left', overLeftSize <= windowSize ? '' : -(overLeftSize - windowSize) + 'px');
	                    $replaceBox.css('top', bufferSize + 'px');

	                    $replaceBox.find('.findInputText').val('');
	                    $replaceBox.find('.replaceInputText').val('');

	                    var $caseCheck = _this.element.find(".caseCheck");
	                    var $restartCheck = _this.element.find(".restartCheck");
	                    var $wordCheck = _this.element.find(".wordCheck");
	                    var $directionUp = _this.element.find(".directionUpRadio");
	                    var $directionDown = _this.element.find(".directionDownRadio");

	                    $caseCheck[0].checked = false;
	                    $restartCheck[0].checked = true;
	                    $wordCheck[0].checked = false;

	                    $directionUp[0].checked = false;
	                    $directionDown[0].checked = true;

	                    $replaceBox.show();

	                } else {
	                    $replaceBox.hide();
	                }
	            }
	        },

	        _event : function(){
	            var _this = this;

	            var $findInputText = _this.element.find(".findInputText");
	            var $replaceInputText = _this.element.find(".replaceInputText");
	            var $caseCheck = _this.element.find(".caseCheck");
	            var $restartCheck = _this.element.find(".restartCheck");
	            var $wordCheck = _this.element.find(".wordCheck");
	            var $directionDown = _this.element.find(".directionDownRadio");

	            var $title = _this.element.find(".findreplace_title");

	            var execute = function(e, type) {
	                if ($findInputText.val() === "") {
	                    alert(window.kukuResource.alertMessage.enterWordMessage);
	                    return;
	                }

	                _this.options["callback"](e, {
	                    "id" : _this.options.id,
	                    "type" : type,
	                    value : {
	                        findText : $findInputText.val(),
	                        replaceText : $replaceInputText.val(),
	                        isCase : $caseCheck[0].checked,
	                        isRestart : $restartCheck[0].checked,
	                        isWord : $wordCheck[0].checked,
	                        directionDown : $directionDown[0].checked
	                    }
	                });
	            };

	            this._on( _this.element, {
	                "mousedown" : function(e) {
	                    if(e.target.nodeName != "INPUT"){
	                        if(e.preventDefault) {e.preventDefault();}
	                        if(e.stopPropagation) {e.stopPropagation();}
	                        return false;
	                    }
	                },
	                "click" : function(e) {
	                    var target = e.target;
	                    if(!Util.findParentNode(target , ".ui_find_replace_box")){
	                        _this._toggle();
	                    }
	                }
	            });

	            _this.element.find(".closeButton").on("click", function(){
	                _this._toggle();
	            });


	            var $buttons = _this.element.find(".findButton, .replaceButton, .replaceAllButton");

	            $buttons.on("click", function(e){
	                execute(e, this.id);
	            });

	            this._setMoveEvent($title);
	        },

	        setValue : function (e, id){
	            var _this = this;

	            this.options["callback"](e, {"id" : _this.options.id, "type" : id });
	        },

	        _setOptions: function( options ) {
	            var that = this;
	            $.each( options, function( key, value ) {
	                that._setOption( key, value );
	            });

	        },
	        _setOption: function( key, value ) {
	            this._super( key, value );
	        },

	        _setMoveEvent : function ($title) {
	            var _this = this;
	            var $window = $(window);
	            var $replaceBox = this.element.find(".ui_find_replace_box");

	            var buffer = 20;

	            var selected_width = $replaceBox.width() + buffer;
	            var selected_height = $replaceBox.height() + buffer;

	            var window_width = $window.width();
	            var window_height = $window.height();

	            var selected = null,
	                x_pos = 0, y_pos = 0,
	                x_elem = 0, y_elem = 0;

	            var mouseup = function (e){
	                selected = null;

	                $(document).off('mouseup', mouseup).off('mousemove', mousemove);

	                return false;
	            };

	            var mousemove = function(e){
	                if (selected !== null) {
	                    x_pos = document.all ? window.event.clientX : e.pageX;
	                    y_pos = document.all ? window.event.clientY : e.pageY;

	                    var left = (x_pos - x_elem);
	                    var top = (y_pos - y_elem);

	                    if (selected_width + left > window_width) {
	                        left = window_width - selected_width;
	                    }

	                    if (selected_height + top > window_height) {
	                        top = window_height - selected_height;
	                    }

	                    selected.style.left = left + 'px';
	                    selected.style.top = top + 'px';
	                }

	                if(e.preventDefault) {e.preventDefault();}
	                if(e.stopPropagation) {e.stopPropagation();}

	                e.returnValue = false;
	                e.cancelBubble = true;
	                e.stopped = true;

	                return false;
	            };


	            $title.on('mousedown', function(e){
	                var $target = $(e.target);

	                if ($target.hasClass('findreplace_title') || $target.closest('.findreplace_title').length) {
	                    selected = $replaceBox[0];

	                    x_pos = document.all ? window.event.clientX : e.pageX;
	                    y_pos = document.all ? window.event.clientY : e.pageY;

	                    x_elem = x_pos - selected.offsetLeft;
	                    y_elem = y_pos - selected.offsetTop;

	                    $(document).on('mouseup', mouseup).on('mousemove', mousemove);
	                }
	            });
	        }
	    });
	};

	module.exports = UI;

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	
	module.exports = {
	    heading: [
	        {name: window.kukuResource.menuText.headingName.normalHeading, value: "default"},
	        {name: window.kukuResource.menuText.headingName.heading1, value: "h1"},
	        {name: window.kukuResource.menuText.headingName.heading2, value: "h2"},
	        {name: window.kukuResource.menuText.headingName.heading3, value: "h3"},
	        {name: window.kukuResource.menuText.headingName.heading4, value: "h4"},
	        {name: window.kukuResource.menuText.headingName.heading5, value: "h5"},
	        {name: window.kukuResource.menuText.headingName.heading6, value: "h6"}
	    ],

	    fontFamily: [
	        {name: window.kukuResource.menuText.fontName.fontGothic, value: "나눔고딕, NanumGothic"},
	        {name: window.kukuResource.menuText.fontName.fontGulim, value: "굴림"},
	        {name: window.kukuResource.menuText.fontName.fontDotum, value: "돋움"},
	        {name: window.kukuResource.menuText.fontName.fontBatang, value: "바탕"},
	        {name: window.kukuResource.menuText.fontName.fontGungseo, value: "궁서"},
	        {name: window.kukuResource.menuText.fontName.fontMalgunGothic, value: "맑은 고딕"},
	        {name: window.kukuResource.menuText.fontName.fontArial, value: "Arial"},
	        {name: window.kukuResource.menuText.fontName.fontCourierNew, value: "Courier New"},
	        {name: window.kukuResource.menuText.fontName.fontGeorgia, value: "Geirgia"},
	        {name: window.kukuResource.menuText.fontName.fontTahoma, value: "Tahoma"},
	        {name: window.kukuResource.menuText.fontName.fontTimesNewRoman, value: "Times New Roman"},
	        {name: window.kukuResource.menuText.fontName.fontVerdana, value: "Verdana"}
	    ],

	    fontSize: [
	        {name: "8pt",  value: "8pt"},
	        {name: "9pt",  value: "9pt"},
	        {name: "10pt", value: "10pt"},
	        {name: "11pt", value: "11pt"},
	        {name: "12pt", value: "12pt"},
	        {name: "13pt", value: "13pt"},
	        {name: "14pt", value: "14pt"},
	        {name: "16pt", value: "16pt"},
	        {name: "18pt", value: "18pt"},
	        {name: "20pt", value: "20pt"},
	        {name: "22pt", value: "22pt"},
	        {name: "24pt", value: "24pt"},
	        {name: "26pt", value: "26pt"},
	        {name: "36pt", value: "36pt"},
	        {name: "54pt", value: "54pt"},
	        {name: "72pt", value: "72pt"}
	    ],

	    numbered_list : [
	        {name: window.kukuResource.menuText.listName.numberList.numberStyle1, value: "decimal", css: ""},
	        {name: window.kukuResource.menuText.listName.numberList.numberStyle2, value: "decimal_leading_zero", css: ""},
	        {name: window.kukuResource.menuText.listName.numberList.alphabetStyle1, value: "lower_alpha", css: ""},
	        {name: window.kukuResource.menuText.listName.numberList.alphabetStyle2, value: "upper_alpha", css: ""},
	        {name: window.kukuResource.menuText.listName.numberList.romeStyle1, value: "lower_roman", css: ""},
	        {name: window.kukuResource.menuText.listName.numberList.romeStyle2, value: "upper_roman", css: ""},
	        {name: window.kukuResource.menuText.listName.numberList.greekStyle1, value: "lower_greek", css: ""}

	    ],

	    bullet_list : [
	        {name: window.kukuResource.menuText.listName.bulletList.disc, value: "disc", css: ""},
	        {name: window.kukuResource.menuText.listName.bulletList.circle, value: "circle", css: ""},
	        {name: window.kukuResource.menuText.listName.bulletList.square, value: "square", css: ""}
	    ],

	    line_height: [
	        {name: "1.0", value: "1", css: ""},
	        {name: "1.2", value: "1.2", css: ""},
	        {name: "1.5", value: "1.5", css: ""},
	        {name: "2.0", value: "2", css: ""},
	        {name: "3.0", value: "3", css: ""}
	    ],

	    symbols: {
	        symbols_general: ["！", "＇", "，", "．", "／", "：", "；", "？", "＾", "＿", "｀", "｜", "、", "。", "·", "‥", "…", "¨", "〃", "­", "―", "∥", "＼", "∼", "´", "～", "ˇ", "˘", "˝", "˚", "˙", "¸", "˛", "¡", "¿", "ː", "＂", "（", "）", "［", "］", "｛", "｝", "‘", "’", "“", "”", "〔", "〕", "〈", "〉", "《", "》", "「", "」", "『", "』", "【", "】", "＋", "－", "＜", "＝", "＞", "±", "×", "÷", "≠", "≤", "≥", "∞", "∴", "♂", "♀", "∠", "⊥", "⌒", "∂", "∇", "≡", "≒", "≪", "≫", "√", "∽", "∝", "∵", "∫", "∬", "∈", "∋", "⊆", "⊇", "⊂", "⊃", "∪", "∩", "∧", "∨", "￢", "⇒", "⇔", "∀", "∃", "∮", "∑", "∏", "＃", "＆", "＊", "＠", "§", "※", "☆", "★", "○", "●", "◎", "◇", "◆", "□", "■", "△", "▲", "▽", "▼", "→", "←", "↑", "↓", "↔", "〓", "◁", "◀", "▷", "▶", "♤", "♠", "♡", "♥", "♧", "♣", "⊙", "◈", "▣", "◐", "◑", "▒", "▤", "▥", "▨", "▧", "▦", "▩", "♨", "☏", "☎", "☜", "☞", "¶", "†", "‡", "↕", "↗", "↙", "↖", "↘", "♩", "♪", "♬", "㉿", "㈜", "№", "㏇", "™", "㏂", "㏘", "℡", "ª", "º", "＄", "％", "￦", "€"],
	        symbols_number: ["０", "１", "２", "３", "４", "５", "６", "７", "８", "９", "ⅰ", "ⅱ", "ⅲ", "ⅳ", "ⅴ", "ⅵ", "ⅶ", "ⅷ", "ⅸ", "ⅹ", "Ⅰ", "Ⅱ", "Ⅲ", "Ⅳ", "Ⅴ", "Ⅵ", "Ⅶ", "Ⅷ", "Ⅸ", "Ⅹ", "½", "⅓", "⅔", "¼", "¾", "⅛", "⅜", "⅝", "⅞", "¹", "²", "³", "⁴", "ⁿ", "₁", "₂", "₃", "₄", "＄", "％", "￦", "Ｆ", "′", "″", "℃", "A", "￠", "￡", "￥", "¤", "℉", "‰", "㎕", "㎖", "㎗", "ℓ", "㎘", "㏄", "㎣", "㎤", "㎥", "㎦", "㎙", "㎚", "㎛", "㎜", "㎝", "㎞", "㎟", "㎠", "㎡", "㎢", "㏊", "㎍", "㎎", "㎏", "㏏", "㎈", "㎉", "㏈", "㎧", "㎨", "㎰", "㎱", "㎲", "㎳", "㎴", "㎵", "㎶", "㎷", "㎸", "㎹", "㎀", "㎁", "㎂", "㎃", "㎺", "㎻", "㎼", "㎽", "㎾", "㎿", "㎐", "㎑", "㎒", "㎓", "㎔", "Ω", "㏀", "㏁", "㎊", "㎋", "㎌", "㏖", "㏅", "㎭", "㎮", "㎯", "㏛", "㎩", "㎪", "㎫", "㎬", "㏝", "㏐", "㏃", "㏉", "㏜", "㏆"],
	        symbols_regrar: ["─", "│", "┌", "┐", "┘", "└", "├", "┬", "┤", "┴", "┼", "━", "┃", "┏", "┓", "┛", "┗", "┣", "┳", "┫", "┻", "╋", "┠", "┯", "┨", "┷", "┿", "┝", "┰", "┥", "┸", "╂", "┒", "┑", "┚", "┙", "┖", "┕", "┎", "┍", "┞", "┟", "┡", "┢", "┦", "┧", "┩", "┪", "┭", "┮", "┱", "┲", "┵", "┶", "┹", "┺", "┽", "┾", "╀", "╁", "╃", "╄", "╅", "╆", "╇", "╈", "╉", "╊"],
	        symbols_circleChar: ["㉠", "㉡", "㉢", "㉣", "㉤", "㉥", "㉦", "㉧", "㉨", "㉩", "㉪", "㉫", "㉬", "㉭", "㉮", "㉯", "㉰", "㉱", "㉲", "㉳", "㉴", "㉵", "㉶", "㉷", "㉸", "㉹", "㉺", "㉻", "㈀", "㈁", "㈂", "㈃", "㈄", "㈅", "㈆", "㈇", "㈈", "㈉", "㈊", "㈋", "㈌", "㈍", "㈎", "㈏", "㈐", "㈑", "㈒", "㈓", "㈔", "㈕", "㈖", "㈗", "㈘", "㈙", "㈚", "㈛", "ⓐ", "ⓑ", "ⓒ", "ⓓ", "ⓔ", "ⓕ", "ⓖ", "ⓗ", "ⓘ", "ⓙ", "ⓚ", "ⓛ", "ⓜ", "ⓝ", "ⓞ", "ⓞ", "ⓟ", "ⓠ", "ⓡ", "ⓢ", "ⓣ", "ⓤ", "ⓥ", "ⓦ", "ⓧ", "ⓨ", "ⓩ", "①", "②", "③", "④", "⑤", "⑥", "⑦", "⑧", "⑨", "⑩", "⑪", "⑫", "⑬", "⑭", "⑮", "⒜", "⒝", "⒞", "⒟", "⒠", "⒡", "⒢", "⒣", "⒤", "⒥", "⒦", "⒧", "⒨", "⒩", "⒪", "⒫", "⒬", "⒭", "⒮", "⒯", "⒰", "⒱", "⒲", "⒳", "⒴", "⒵", "⑴", "⑵", "⑶", "⑷", "⑸", "⑹", "⑺", "⑻", "⑼", "⑽", "⑾", "⑿", "⒀", "⒁", "⒂"],
	        symbols_kor: ["ㄱ", "ㄲ", "ㄳ", "ㄴ", "ㄵ", "ㄶ", "ㄷ", "ㄸ", "ㄹ", "ㄺ", "ㄻ", "ㄼ", "ㄽ", "ㄾ", "ㄿ", "ㅀ", "ㅁ", "ㅂ", "ㅃ", "ㅄ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅉ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ", "ㅏ", "ㅐ", "ㅑ", "ㅒ", "ㅓ", "ㅔ", "ㅕ", "ㅖ", "ㅗ", "ㅘ", "ㅙ", "ㅚ", "ㅛ", "ㅜ", "ㅝ", "ㅞ", "ㅟ", "ㅠ", "ㅡ", "ㅢ", "ㅣ", "ㅥ", "ㅦ", "ㅧ", "ㅨ", "ㅩ", "ㅪ", "ㅫ", "ㅬ", "ㅭ", "ㅮ", "ㅯ", "ㅰ", "ㅱ", "ㅲ", "ㅲ", "ㅳ", "ㅴ", "ㅵ", "ㅶ", "ㅷ", "ㅸ", "ㅹ", "ㅺ", "ㅻ", "ㅼ", "ㅽ", "ㅾ", "ㅿ", "ㆀ", "ㆁ", "ㆂ", "ㆃ", "ㆄ", "ㆅ", "ㆆ", "ㆇ", "ㆈ", "ㆉ", "ㆊ", "ㆋ", "ㆌ", "ㆍ", "ㆎ"],
	        symbols_latini: ["Α", "Β", "Γ", "Δ", "Ε", "Ζ", "Η", "Θ", "Ι", "Κ", "Λ", "Μ", "Ν", "Ξ", "Ο", "Π", "Ρ", "Σ", "Τ", "Υ", "Φ", "Χ", "Ψ", "Ω", "α", "β", "γ", "δ", "ε", "ζ", "η", "θ", "ι", "κ", "λ", "μ", "ν", "ξ", "ο", "π", "ρ", "σ", "τ", "υ", "φ", "χ", "ψ", "ω", "Æ", "Ð", "Ħ", "Ĳ", "Ŀ", "Ł", "Ø", "Œ", "Þ", "Ŧ", "Ŋ", "æ", "đ", "ð", "ħ", "ı", "ĳ", "ĸ", "ŀ", "ł", "ø", "œ", "ß", "þ", "ŧ", "ŋ", "ŉ", "А", "Б", "В", "Г", "Д", "Е", "Ё", "Ж", "З", "И", "Й", "К", "Л", "М", "Н", "О", "П", "Р", "С", "Т", "У", "Ф", "Х", "Ц", "Ч", "Ш", "Щ", "Ъ", "Ы", "Ь", "Э", "Ю", "Я", "а", "б", "в", "г", "д", "е", "ё", "ж", "з", "и", "й", "к", "л", "м", "н", "о", "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ъ", "ы", "ь", "э", "ю", "я"],
	        symbols_jap: ["ぁ", "あ", "ぃ", "い", "ぅ", "う", "ぇ", "え", "ぉ", "お", "か", "が", "き", "ぎ", "く", "ぐ", "け", "ぉ", "こ", "ご", "さ", "ざ", "し", "じ", "す", "ず", "せ", "ぜ", "そ", "ぞ", "た", "だ", "ち", "ぢ", "っ", "つ", "づ", "て", "で", "と", "ど", "な", "に", "ぬ", "ね", "の", "は", "ば", "ぱ", "ひ", "び", "ぴ", "ふ", "ぶ", "ぷ", "へ", "べ", "ぺ", "ほ", "ぼ", "ぽ", "ま", "み", "め", "も", "ゃ", "や", "ゅ", "ゆ", "ょ", "よ", "ら", "り", "る", "れ", "ろ", "ゎ", "わ", "ゐ", "ゑ", "を", "ん", "ァ", "ア", "ィ", "イ", "ゥ", "ウ", "ェ", "エ", "ォ", "オ", "カ", "ガ", "キ", "ギ", "ク", "グ", "ケ", "ゲ", "コ", "ゴ", "サ", "ザ", "シ", "ジ", "ス", "ズ", "セ", "ゼ", "ソ", "ゾ", "タ", "ダ", "チ", "ヂ", "ッ", "ツ", "ヅ", "テ", "デ", "ト", "ド", "ナ", "ニ", "ヌ", "ネ", "ノ", "ハ", "バ", "パ", "ヒ", "ビ", "ピ", "フ", "ブ", "プ", "ヘ", "ベ", "ペ", "ホ", "ボ", "ポ", "マ", "ミ", "ム", "メ", "モ", "ャ", "ヤ", "ュ", "ユ", "ョ", "ヨ", "ラ", "リ", "ル", "レ", "ロ", "ヮ", "ワ", "ヰ", "ヱ", "ヲ", "ン", "ヴ", "ヵ", "ヶ"],
	        symbols_normal: ["Ａ", "Ｂ", "Ｃ", "Ｄ", "Ｅ", "Ｆ", "Ｇ", "Ｈ", "Ｉ", "Ｊ", "Ｋ", "Ｌ", "Ｍ", "Ｎ", "Ｏ", "Ｐ", "Ｑ", "Ｒ", "Ｓ", "Ｔ", "Ｕ", "Ｖ", "Ｗ", "Ｘ", "Ｙ", "Ｚ", "ａ", "ｂ", "ｃ", "ｄ", "ｅ", "ｆ", "ｇ", "ｈ", "ｉ", "ｊ", "ｋ", "ｌ", "ｍ", "ｎ", "ｏ", "ｐ", "ｑ", "ｒ", "ｓ", "ｔ", "ｕ", "ｖ", "ｗ", "ｘ", "ｙ", "ｚ", "０", "１", "２", "３", "４", "５", "６", "７", "８", "９", "！", "＠", "＃", "＄", "％", "＾", "＆", "＊", "（", "）", "－", "＿", "＋", "＝", "｜", "￦", "＜", "＞", "［", "］", "｛", "｝", "＇", "＂", "：", "；", "？", "，", "．", "／", "｀", "∼"]
	    },


	    cell_border_size: [
	        {name: "1px", value: "1"},
	        {name: "2px", value: "2"},
	        {name: "3px", value: "3"},
	        {name: "4px", value: "4"},
	        {name: "5px", value: "5"}
	    ],

	    cell_border_style: [
	        {name: window.kukuResource.menuText.cellBorderStyleNoneName, value: "none"},
	        {name: '<div style="border-top: 1px solid #000000; height: 1px; margin-top: 9px;"/>', value: "solid"},
	        {name: '<div style="border-top: 1px dotted #000000; height: 1px; margin-top: 9px;"/>', value: "dotted"},
	        {name: '<div style="border-top: 1px dashed #000000; height: 1px; margin-top: 9px;"/>', value: "dashed"},
	        {name: '<div style="border-top: 3px double #000000; height: 1px; margin-top: 9px;"/>', value: "double"}
	    ],

	    imageOutline: [
	        {
	            name: "",
	            value: "simple|none",
	            css: "imageOutlineNone",
	            type: "image",
	            key: "borderStyleCompound|borderStyleDashed"
	        },
	        {
	            name: "",
	            value: "simple|solid",
	            css: "imageOutlineSolid",
	            type: "image",
	            key: "borderStyleCompound|borderStyleDashed"
	        },
	        {
	            name: "",
	            value: "simple|dashed",
	            css: "imageOutlineDash",
	            type: "image",
	            key: "borderStyleCompound|borderStyleDashed"
	        },
	        {
	            name: "",
	            value: "simple|dotted",
	            css: "imageOutlineDot",
	            type: "image",
	            key: "borderStyleCompound|borderStyleDashed"
	        },
	        {
	            name: "",
	            value: "double|double",
	            css: "imageOutlineDouble",
	            type: "image",
	            key: "borderStyleCompound|borderStyleDashed"
	        }
	    ],

	    imageLineWidth: [
	        {name: "1px", value: "1", css: "", type: "image", key: "borderWidth"},
	        {name: "2px", value: "2", css: "", type: "image", key: "borderWidth"},
	        {name: "3px", value: "3", css: "", type: "image", key: "borderWidth"},
	        {name: "4px", value: "4", css: "", type: "image", key: "borderWidth"},
	        {name: "5px", value: "5", css: "", type: "image", key: "borderWidth"},
	        {name: "6px", value: "6", css: "", type: "image", key: "borderWidth"}
	    ]
	};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Selection = __webpack_require__(14);

	function Dom(editorContentView, editorObject) {
	    this.editorContentView = null;
	    this.selection = null;
	    this.editorObject = null;

	    this.init(editorContentView, editorObject);
	}

	Dom.prototype.init = function(editorContentView, editorObject) {
	    this.editorContentView = $(editorContentView);
	    this.editorObject = editorObject;
	    this.selection = new Selection(this.editorContentView, this.editorObject);
	};

	module.exports = Dom;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);
	var wrapRange = __webpack_require__(15);

	function Selection(editorContentView, editorObject){
	    this.editorContentView = null;
	    this.editorObject = null;

	    this.init(editorContentView, editorObject);
	}



	// New Selection Method API

	Selection.prototype.init = function(editorContentView, editorObject) {
	    this.editorContentView = $(editorContentView);
	    this.editorObject = editorObject;
	};

	Selection.prototype.getSelection = function(){
	    var isWinSelection = Define.isWinSelection;

	    var eWindow = this.editorObject.editorWindow;
	    var eDocument = this.editorObject.editorDocument;

	    return (isWinSelection) ? eWindow.getSelection() : eDocument.selection;
	};

	Selection.prototype.getRange = function(selection){
	    var isWinSelection = Define.isWinSelection;
	    var eDocument = this.editorObject.editorDocument;
	    var editorContentView = this.editorObject.editorContentView;

	    var range = null;

	    var getLastChild = function () {
	        var lastChild = editorContentView;
	        while (lastChild.lastChild) {
	            lastChild = lastChild.lastChild;
	        }
	        return lastChild;
	    };

	    if (!selection) {
	        selection = this.getSelection();
	    }

	    
	    if (isWinSelection) {

	        if(selection == null){
	            selection = window.getSelection();
	        }

	        if (selection.getRangeAt) {
	            if (selection.rangeCount > 0) {
	                range = selection.getRangeAt(0);
	            }
	            else {
	                try {
	                    var lastChild = getLastChild();
	                    range = eDocument.createRange();
	                    range.setStart(lastChild, 0);
	                    selection.addRange(range);

	                } catch(exception) {

	                }
	            }
	        }
	        else {
	            range = eDocument.createRange();
	            range.setStart(selection.anchorNode, selection.anchorOffset);
	            range.setEnd(selection.focusNode, selection.focusOffset);
	        }
	    }
	    else {
	        range = (selection.createRange) ? selection.createRange() : eDocument.createTextRange();
	        if (!range) {
	            range = eDocument.body.createTextRange();
	        }
	    }

	    return range;
	};

	Selection.prototype.setRange = function(range){
	    var selection = this.getSelection();

	    try {
	        selection.removeAllRanges();
	        selection.addRange(range);
	    } catch (e) {
	        return false;
	        // selection.addRange(range);
	    }
	};

	Selection.prototype.isCollapsed = function(){
	    var selection = this.getSelection();

	    return selection.isCollapsed;
	};

	Selection.prototype.removeAllRanges = function(){
	    var selection = this.getSelection();

	    selection.removeAllRanges();
	};

	Selection.prototype.setFirstCollapse = function(isFirstFocus){
	    var firstChild = Util.getFirstChildNode(this.editorContentView[0]);
	    var range = null;

	    if (firstChild.nodeType == Node.ELEMENT_NODE && firstChild.nodeName == 'HR') {
	        var $pNode = this.createElement('p');
	        var $br = this.createElement('br');

	        var p = $pNode[0];
	        var br = $br[0];

	        p.appendChild(br);

	        $(firstChild).before(p);

	        range = this.createRange();
	        range.setStart(p, 0);
	        range.setEnd(p, 0);

	    } else {
	        range = this.createRange();
	        range.selectNode(firstChild);
	        range.collapse(true);
	    }

	    if (isFirstFocus || isFirstFocus === undefined) {
	        this.setRange(range);
	        this.setSaveRange(range);
	    }

	    return range;
	};

	Selection.prototype.createRange = function(){
	    var eDocument = this.editorObject.editorDocument;

	    return eDocument.createRange();
	};

	Selection.prototype.applyNewRange = function(startContainer, startOffset, endContainer, endOffset) {
	    var newRange = this.createRange();

	    newRange.setStart(startContainer, startOffset);
	    newRange.setEnd(endContainer, endOffset);

	    this.setRange(newRange);
	    this.setSaveRange(newRange);

	    return newRange;
	};

	Selection.prototype.applySelectNode = function(node) {
	    var newRange = this.createRange();

	    newRange.selectNode(node);

	    this.setRange(newRange);
	    this.setSaveRange(newRange);

	    return newRange;
	};

	Selection.prototype.queryCommandState = function(sCommand){
	    var eDocument = this.editorObject.editorDocument;

	    return eDocument.queryCommandState(sCommand)
	};

	Selection.prototype.queryCommandValue = function(sCommand){
	    var eDocument = this.editorObject.editorDocument;

	    return eDocument.queryCommandValue(sCommand)
	};

	Selection.prototype.forceExecCommand = function(sCommand, bUserInterface, vValue) {
	    var eDocument = this.editorObject.editorDocument;
	    var isSuccess = false;
	    var range = null;
	    var cmd = sCommand.toLowerCase();

	    if ((cmd == 'fontsize' || cmd == 'fontname') && $.browser.chrome) {
	        range = this.getRange();

	        if (range.startContainer == range.endContainer && range.startContainer.nodeType == Node.ELEMENT_NODE && range.startContainer.nodeName == 'TABLE') {
	            var table = range.startContainer;
	            var firstTD = table.rows[0].cells[0];
	            range.setStart(firstTD, 0);
	            this.setRange(range);
	        }

	        var wrapperObject = this.wrappingSpan();

	        if (wrapperObject && wrapperObject.nodes && wrapperObject.nodes.length) {

	            var spanNodes = wrapperObject.nodes;
	            var checkSpanNodes = [];

	            for (var i = 0, length = spanNodes.length; i < length; i++) {
	                var span = spanNodes[i];
	                var $span = $(span);

	                var parentNode = span.parentNode;

	                if (parentNode) {
	                    parentNode.normalize();
	                }

	                if (parentNode && parentNode.nodeName == 'SPAN' && parentNode.childNodes.length == 1 && parentNode.childNodes[0] == span) {
	                    $span.after(span.childNodes);
	                    $span.remove();
	                    checkSpanNodes.push(parentNode);
	                } else if (parentNode && parentNode.nodeName == 'SPAN' && parentNode.childNodes.length == 2 && parentNode.childNodes[0].id == Define.ID.TEMP_TEXT_NODE){
	                    $span.after(span.childNodes);
	                    $span.remove();
	                    checkSpanNodes.push(parentNode);
	                } else {
	                    checkSpanNodes.push(span);
	                }
	            }

	            var firstSpan = checkSpanNodes[0];
	            var lastSpan = checkSpanNodes[wrapperObject.nodes.length - 1];

	            var newRange = this.createRange();
	            newRange.setStartBefore(firstSpan);
	            newRange.setEndAfter(lastSpan);

	            range = newRange;
	            this.setRange(newRange);

	        } else {
	            isSuccess = eDocument.execCommand(sCommand, bUserInterface, vValue);
	            range = this.getRange();
	        }
	    } else {
	        isSuccess = eDocument.execCommand(sCommand, bUserInterface, vValue);
	        range = this.getRange();
	    }

	    this.setSaveRange(range);

	    return isSuccess;
	};

	Selection.prototype.execCommand = function(sCommand, bUserInterface, vValue){
	    var eDocument = this.editorObject.editorDocument;

	    var isSuccess = false;

	    var cmd = sCommand.toLowerCase();

	    if ($.browser.msie && this.editorObject.options.ieExecCommandEHnadling) {
	        var range = this.getRange();

	        switch(cmd) {
	            case 'inserttext' :
	                if (!range.collapsed) {
	                    eDocument.execCommand( "delete", false, "" );
	                }

	                if (vValue) {
	                    var textNode = eDocument.createTextNode(vValue);

	                    var newRange = this.createRange();

	                    range.insertNode(textNode);
	                    newRange.setStart(textNode, vValue.length);
	                    newRange.setEnd(textNode, vValue.length);
	                    this.setRange(newRange);
	                    this.setSaveRange();
	                } else {
	                    this.setRange(range.cloneRange());
	                    this.setSaveRange();
	                }

	                break;

	            case 'inserthtml' :
	                if (!range.collapsed) {
	                    eDocument.execCommand( "delete", false, "" );
	                }

	                var frag = eDocument.createDocumentFragment(), elem;
	                var lastNode = null;

	                if (typeof vValue === "string") {
	                    var tmpWrapper = eDocument.createElement("div");
	                    tmpWrapper.innerHTML = vValue;

	                    elem = tmpWrapper.firstChild;
	                    while (elem) {
	                        lastNode = frag.appendChild(elem);
	                        elem = tmpWrapper.firstChild;
	                    }
	                } else {
	                    lastNode = frag.appendChild(vValue);
	                }

	                range.insertNode(frag);

	                if (lastNode) {
	                    // console.log(lastNode);

	                    range = range.cloneRange();
	                    range.setStartAfter(lastNode);
	                    range.setEndAfter(lastNode);
	                    this.setRange(range);
	                    this.setSaveRange();
	                }

	                break;


	            case "bold" :
	            case "italic" :
	            case "underline" :
	            case "strikethrough" :
	            case "superscript" :
	            case "subscript" :
	                var checkParentNodeName = ['BODY', 'STRONG', 'B', 'I', 'EM', 'U', 'STRIKE', 'S', 'SUP', 'SUB'];

	                var startContainer = range.startContainer;
	                var endContainer = range.endContainer;

	                if (startContainer.nodeType == Node.TEXT_NODE && endContainer.nodeType == Node.TEXT_NODE
	                    && startContainer.parentNode == endContainer.parentNode
	                    && ($.inArray(startContainer.parentNode.nodeName, checkParentNodeName)) > -1
	                ) {
	                    var fragment = range.extractContents();
	                    var $span = this.createElement('span');
	                    $span.append(fragment.childNodes);

	                    var textNodes = $span.contents();
	                    textNodes.each(function(){
	                        if (this.id == Define.ID.TEMP_TEXT_NODE) {
	                            $(this).remove();
	                        }
	                    });

	                    $span[0].normalize();

	                    range.insertNode($span[0]);
	                    this.applyNewRange($span[0], 0, $span[0], $span[0].childNodes.length);
	                }

	                isSuccess = eDocument.execCommand(sCommand, bUserInterface, vValue);

	                break;

	            default:
	                isSuccess = eDocument.execCommand(sCommand, bUserInterface, vValue);

	                break;
	        }
	    } else {
	        isSuccess = eDocument.execCommand(sCommand, bUserInterface, vValue);
	        var range = this.getRange();

	        // if (range.collapsed) {
	        //     switch (cmd) {
	        //         case "bold" :
	        //         case "italic" :
	        //         case "underline" :
	        //         case "strikeThrough" :
	        //         case "superscript" :
	        //         case "subscript" :
	        //         case "fontname" :
	        //         case "fontsize" :
	        //             var startContainer = range.startContainer;
	        //
	        //             if (startContainer.nodeType == Node.ELEMENT_NODE && startContainer.nodeName == 'SPAN') {
	        //                 // console.log(">>>>>>");
	        //
	        //
	        //
	        //             } else if (startContainer.nodeType == Node.ELEMENT_NODE && startContainer.nodeName == 'BODY') {
	        //                 if (startContainer.innerHTML == '&nbsp;') {
	        //
	        //                     var style = '';
	        //                     var nodeName = 'span';
	        //
	        //                     switch (cmd) {
	        //                         case "bold" :
	        //                             style = 'font-weight:bold;';
	        //                             break;
	        //
	        //                         case "italic" :
	        //                             style = 'font-style: italic;';
	        //
	        //                             break;
	        //
	        //                         case "underline" :
	        //                             style = 'text-decoration: underline;';
	        //
	        //                             break;
	        //
	        //                         case "strikeThrough" :
	        //                             style = 'text-decoration: line-through;';
	        //
	        //                             break;
	        //
	        //                         case "superscript" :
	        //                             nodeName = 'sup';
	        //                             style = '';
	        //
	        //                             break;
	        //
	        //                         case "subscript" :
	        //                             nodeName = 'sub';
	        //                             style = '';
	        //
	        //                             break;
	        //
	        //                         case "fontname" :
	        //                             style = 'font-family: ' + vValue + ';';
	        //
	        //                             break;
	        //
	        //                         case "fontsize" :
	        //                             style = 'font-size: ' + vValue + ';';
	        //
	        //                             break;
	        //
	        //                     }
	        //
	        //                     startContainer.innerHTML = '<p><' + nodeName + ' style="' + style + '"><br></' + nodeName + '></p>';
	        //
	        //                     range.setStart(startContainer.childNodes[0].childNodes[0], 0);
	        //                     range.setEnd(startContainer.childNodes[0].childNodes[0], 0);
	        //                 }
	        //             }
	        //
	        //             break;
	        //     }
	        // }

	        this.setSaveRange(range);
	    }

	    return isSuccess;
	};

	Selection.prototype.editorFocus = function(){
	    var editorContentView = this.getEditorContentView();
	    editorContentView.focus();

	    this.setContentEditable(true);
	};

	Selection.prototype.editorBlur = function(){
	    var editorContentView = this.getEditorContentView();

	    if (!($.browser.msie && $.browser.version < 11)) {
	        editorContentView.blur();
	    }

	    if ($.browser.msie) {
	        this.setContentEditable(false);
	    }
	};

	Selection.prototype.setContentEditable = function(useEditable) {
	    this.editorContentView.attr(Define.ATTR.CONTENT_EDIT_ABLE, useEditable);
	};

	Selection.prototype.getEditorContentView = function(){
	    return this.editorContentView[0];
	};

	Selection.prototype.setSaveRange = function() {
	    var range = this.getRange();
	    this.saveRange = range.cloneRange();

	    return range;
	};

	Selection.prototype.getSaveRange = function() {
	    return this.saveRange;
	};

	Selection.prototype.restoreRange = function() {
	    if (this.saveRange) {
	        this.setRange(this.saveRange);
	    }
	};

	Selection.prototype.createElement = function(elementName) {
	    var eDocument = this.editorObject.editorDocument;

	    var element = eDocument.createElement(elementName);

	    return $(element);
	};




	//SPAN Wrapping
	Selection.prototype.wrappingSpan = function(range, elementName) {
	    var eDocument = this.editorObject.editorDocument;

	    var wrapper = eDocument.createElement(elementName || 'span');

	    range = range || this.getRange();

	    return wrapRange(wrapper, range);
	};

	Selection.prototype.setRangeMarking = function(nodes, unwrap) {
	    var eDocument = this.editorObject.editorDocument;
	    var selection = this.getSelection();

	    var endNode = eDocument.createElement("span");
	    $(endNode).attr("id", Define.ID.TEMP_END);

	    var startNode = eDocument.createElement("span");
	    $(startNode).attr("id", Define.ID.TEMP_START);

	    var $firstNode = $(nodes[0]);
	    var $lastNode = $(nodes[nodes.length - 1]);

	    $lastNode.after(endNode);
	    $firstNode.before(startNode);

	    if (unwrap){
	        unwrap();
	    }

	    var newRange = eDocument.createRange();
	    newRange.setStartAfter(startNode);
	    newRange.setEndBefore(endNode);

	    selection.removeAllRanges();
	    selection.addRange(newRange);

	    $(startNode).remove();
	    $(endNode).remove();
	};

	Selection.prototype.getSelectionWrapping = function(range, isNotMarking) {
	    var eDocument = this.editorObject.editorDocument;
	    var selection = this.getSelection();

	    range = range || this.getRange();

	    var nodes = [];
	    var unwrap = null;

	    if (this.isCollapsed()) {
	        var $span = this.createElement('span');

	        var span = $span[0];
	        var textNode = eDocument.createTextNode(Define.UNICODE_ZERO_WIDTH_SPACE);

	        span.appendChild(textNode);
	        range.insertNode(span);

	        var newRange = eDocument.createRange();
	        newRange.setStart(span, 1);
	        newRange.setEnd(span, 1);

	        selection.removeAllRanges();
	        selection.addRange(newRange);

	        nodes = [$span[0]];
	    } else {
	        var wrappingNodes = this.wrappingSpan();
	        nodes = wrappingNodes.nodes;
	        unwrap = function() {wrappingNodes.unwrap()};

	        if (!isNotMarking) {
	            if (nodes.length) {
	                this.setRangeMarking(nodes);
	            }
	        }
	    }

	    return {
	        nodes : $(nodes),
	        unwrap : unwrap
	    }
	};







	Selection.prototype.getSiblingAllNodes = function(node, untilSibling, untilNode, direction) {
	    var siblingAllNodes = node;

	    var targetNode = node;

	    if (node[0] != untilNode[0]) {
	        while(targetNode.length && targetNode[0][direction] && targetNode[0][direction] != untilSibling[0]) {
	            targetNode = $(targetNode[0][direction]);

	            siblingAllNodes = siblingAllNodes.add(targetNode);
	        }

	        var parentNode = node.parent();

	        if (parentNode[0] != untilNode[0]) {
	            var parentSiblingAll = this.getSiblingAllNodes(parentNode, untilSibling, untilNode, direction);
	            siblingAllNodes = siblingAllNodes.add(parentSiblingAll);
	        }
	    }

	    return siblingAllNodes;
	};

	Selection.prototype.setBoundaryBlock = function($node, nodeName) {
	    var eDocument = this.editorObject.editorDocument;
	    var blockNode = eDocument.createElement(nodeName);

	    var checkPositionNode = null;

	    var $parentBlock = $node.parentsUntil(Define.BLOCK_NODES.join(','));

	    if ($parentBlock.length) {
	        checkPositionNode = $parentBlock;
	    } else {
	        checkPositionNode = $node;
	    }

	    var prevAll = [];
	    var nextAll = [];

	    var prevNode = checkPositionNode[0];
	    var nextNode = checkPositionNode[0];

	    while(prevNode.previousSibling) {
	        prevNode = prevNode.previousSibling;
	        if ($.inArray(prevNode.nodeName, Define.BLOCK_NODES) == -1) {
	            prevAll.push(prevNode);
	        } else {
	            break;
	        }
	    }

	    while(nextNode.nextSibling) {
	        nextNode = nextNode.nextSibling;
	        if ($.inArray(nextNode.nodeName, Define.BLOCK_NODES) == -1) {
	            nextAll.push(nextNode);
	        } else {
	            break;
	        }
	    }

	    checkPositionNode = checkPositionNode.last().add(prevAll).add(nextAll);

	    checkPositionNode.first().before(blockNode);
	    $(blockNode).append(checkPositionNode);
	};

	Selection.prototype.getSelectedNode = function(nodeName, isNotClosest, otherRange, isSpecial) {
	    var range = otherRange || this.getRange();

	    var nodeNames = [];

	    if (nodeName instanceof Array) {
	        nodeNames = nodeName;
	    } else {
	        nodeNames = [nodeName];
	    }

	    var nodes = this.getRangeNodes(range, function (node) {
	        if (node.nodeType == Node.ELEMENT_NODE && nodeNames.indexOf(node.nodeName) > -1) {
	            return NodeFilter.FILTER_ACCEPT;
	        } else {
	            return NodeFilter.FILTER_SKIP;
	        }
	    });

	    nodes = $(nodes);

	    if (!isNotClosest) {
	        if (!nodes.length) {
	            var $startContainer = $(range.startContainer);

	            if ($startContainer[0].nodeName == 'BODY') {
	                $startContainer = $($startContainer[0].childNodes[range.startOffset]);
	            }

	            if (isSpecial) {
	                var content = $startContainer[0];

	                // while(content && content.parentNode && content.parentNode.nodeName && content.parentNode.nodeName != 'BODY') {
	                //     content = content.parentNode;
	                //
	                //     var nodeName = content.nodeName;
	                //
	                //     if (nodeNames.indexOf(nodeName.toLowerCase()) != -1 || nodeNames.indexOf(nodeName.toUpperCase()) != -1) {
	                //         nodes = $(content);
	                //
	                //         break;
	                //     }
	                // }

	                while(content && content.nodeName != 'BODY') {
	                    var nodeName = content.nodeName || "";

	                    if (nodeNames.indexOf(nodeName.toLowerCase()) != -1 || nodeNames.indexOf(nodeName.toUpperCase()) != -1) {
	                        nodes = $(content);

	                        break;
	                    }

	                    content = content.parentNode;
	                }

	            } else {
	                nodes = $startContainer.closest(nodeNames.join(','));
	            }
	        }
	    }

	    return nodes;
	};

	Selection.prototype.getSelectedAllNode = function(isNotClosest, otherRange, isSpecial) {
	    var range = otherRange || this.getRange();
	    var startContainer = range.startContainer;
	    var endContainer = range.endContainer;

	    var startOffset = range.startOffset;
	    var endOffset = range.endOffset;

	    if (!$.browser.msie) {

	        if (startContainer.nodeType == Node.ELEMENT_NODE && startContainer.nodeName == 'SPAN' && startContainer.nextSibling) {
	            range = range.cloneRange();
	            range.setStart(startContainer.nextSibling, 0);

	            startContainer = range.startContainer;
	            endContainer = range.endContainer;

	            startOffset = range.startOffset;
	            endOffset = range.endOffset;
	        }

	        if (startContainer.nodeType == Node.TEXT_NODE) {
	            var i = 0;
	            var child = startContainer;

	            while( (child = child.previousSibling) != null )
	                i++;

	            startOffset = i;
	            startContainer = startContainer.parentNode;
	        }

	        if (endContainer.nodeType == Node.TEXT_NODE) {
	            var i = 0;
	            var child = endContainer;

	            while( (child = child.previousSibling) != null )
	                i++;

	            endOffset = i;
	            endContainer = endContainer.parentNode;
	        }
	    }

	    if (startContainer.nodeType == Node.ELEMENT_NODE && startContainer.nodeName == 'BODY') {
	        startContainer = startContainer.childNodes[startOffset] || startContainer.childNodes[startContainer.childNodes.length - 1];
	    }

	    if (endContainer.nodeType == Node.ELEMENT_NODE && endContainer.nodeName == 'BODY') {
	        endContainer = endContainer.childNodes[endOffset] || endContainer.childNodes[endContainer.childNodes.length - 1];
	    }

	    var $startContainer = $(startContainer.parentNode || startContainer);
	    var $endContainer = $(endContainer.parentNode || endContainer);
	    var previousSibling = startContainer.previousSibling;
	    var nextSibling = endContainer.nextSibling;

	    var nodes = this.getRangeNodes(range, function (node) {
	        if (node.nodeType == Node.ELEMENT_NODE && $.inArray(node.nodeName, ['HTML', 'HEAD', 'BODY']) == -1) {

	            if ($startContainer.closest(node).length
	                || previousSibling == node
	                || $endContainer.closest(node).length
	                || nextSibling == node
	            ) {
	                return NodeFilter.FILTER_SKIP;
	            }

	            return NodeFilter.FILTER_ACCEPT;
	        } else {
	            return NodeFilter.FILTER_SKIP;
	        }
	    });

	    nodes = $(nodes);

	    return nodes;
	};

	Selection.prototype.getSelectedListItem = function(range) {
	    range = range || this.getRange();

	    var nodes = this.getRangeNodes(range, function (node) {
	        if (node.nodeType == Node.ELEMENT_NODE && node.nodeName == 'LI') {
	            return NodeFilter.FILTER_ACCEPT;
	        } else {
	            return NodeFilter.FILTER_SKIP;
	        }
	    });

	    nodes = $(nodes);

	    if (!nodes.length) {
	        var $startContainer = $(range.startContainer);

	        if ($startContainer[0].nodeName == 'BODY') {
	            $startContainer = $($startContainer[0].childNodes[range.startOffset]);
	        }

	        nodes = $startContainer.closest('LI');
	    }

	    return nodes;
	};

	Selection.prototype.getSelectedListWrapper = function(range) {
	    range = range || this.getRange();

	    var nodes = this.getRangeNodes(range, function (node) {
	        if (node.nodeType == Node.ELEMENT_NODE && Define.LIST_NODES.indexOf(node.nodeName) > -1) {
	            return NodeFilter.FILTER_ACCEPT;
	        } else {
	            return NodeFilter.FILTER_SKIP;
	        }
	    });

	    nodes = $(nodes);

	    if (!nodes.length) {
	        var $startContainer = $(range.startContainer);

	        if ($startContainer[0].nodeName == 'BODY') {
	            $startContainer = $($startContainer[0].childNodes[range.startOffset]);
	        }

	        nodes = $startContainer.closest(Define.LIST_NODES.join(','));
	    }

	    return nodes;
	};

	Selection.prototype.getSelectedParagraph = function(range, isNotUnwrap, isNotMarking) {
	    var _this = this;
	    var wrappingNodeName = 'p';
	    var nodes = null;

	    var isCollapsed = this.isCollapsed();

	    if (isCollapsed) {
	        range = range || this.getRange();

	        var $startContainer = $(range.startContainer);

	        if ($startContainer[0].nodeName == 'BODY') {
	            $startContainer = $($startContainer[0].childNodes[range.startOffset]);
	        }

	        nodes = $startContainer.closest(Define.PARAGRAPH_NODES.join(','));

	        if (!nodes.length) {
	            var startOffset = range.startOffset;
	            var endOffset = range.endOffset;

	            _this.setBoundaryBlock($startContainer, wrappingNodeName);

	            if (range.startContainer != $startContainer[0]) {
	                startOffset = endOffset;
	            }

	            this.applyNewRange($startContainer[0], startOffset, $startContainer[0], startOffset);
	        }

	        nodes = $startContainer.closest(Define.PARAGRAPH_NODES.join(','));

	    } else {
	        var wrappingObj = this.getSelectionWrapping(range, isNotMarking);
	        var $nodes = wrappingObj.nodes;

	        var $parentNodes = [];

	        var isBoundaryBlock = false;

	        $nodes.each(function(){
	            var $this = $(this);

	            var $parentNode = $(this).closest(Define.PARAGRAPH_NODES.join(','));

	            if (!$parentNode.length) {
	                isBoundaryBlock = true;
	                _this.setBoundaryBlock($this, wrappingNodeName);
	            } else {
	                $parentNodes.push($parentNode[0]);
	            }
	        });

	        if (!isNotMarking) {
	            if ($nodes.length) {
	                this.setRangeMarking($nodes, isNotUnwrap ? null : wrappingObj.unwrap);
	            }
	        }

	        range = this.getRange();

	        nodes = this.getRangeNodes(range, function (node) {
	            if (node.nodeType == Node.ELEMENT_NODE && Define.PARAGRAPH_NODES.indexOf(node.nodeName) > -1) {
	                return NodeFilter.FILTER_ACCEPT;
	            } else {
	                return NodeFilter.FILTER_SKIP;
	            }
	        });

	        nodes = $(nodes);
	    }

	    return nodes.length ? nodes : $($parentNodes);


	    // var $paragraph = $nodes.closest(Define.PARAGRAPH_NODES.join(','));
	    //
	    // this.setRangeMarking($nodes, isNotUnwrap ? null : wrappingObj.unwrap);
	    //
	    // return $paragraph;
	};

	Selection.prototype.getRangeNodes = function(range, filter) {
	    var _this = this;
	    var container = range.commonAncestorContainer
	        , nodes = this.getSelectNode(container.parentNode || container, filter);

	    return nodes.filter(function (node) {
	        return _this.rangeIntersectsNode(range, node);
	    })
	};

	Selection.prototype.getSelectNode = function(el, myfilter) {
	    var eDocument = this.editorObject.editorDocument;
	    var editorContentView = this.editorObject.editorContentView;

	    el = el || editorContentView[0];

	    var doc = el.ownerDocument || eDocument
	        , walker = doc.createTreeWalker(el, NodeFilter.SHOW_ELEMENT, myfilter, false)
	        , selectNodes = []
	        , node;

	    while (node = walker.nextNode()) {
	        selectNodes.push(node);
	    }

	    return selectNodes;
	};

	Selection.prototype.rangesIntersect = function(rangeA, rangeB) {
	    return rangeA.compareBoundaryPoints(Range.END_TO_START, rangeB) === -1 && rangeA.compareBoundaryPoints(Range.START_TO_END, rangeB) === 1;
	};

	Selection.prototype.rangeIntersectsNode = function(range, node) {
	    if (range.intersectsNode) {
	        return range.intersectsNode(node);
	    } else {
	        return this.rangesIntersect(range, this.createRangeFromNode(node));
	    }
	};

	Selection.prototype.createRangeFromNode = function (node) {
	    var range = node.ownerDocument.createRange();

	    try {
	        range.selectNode(node);
	    } catch (e) {
	        range.selectNodeContents(node);
	    }
	    return range;
	};

	Selection.prototype.selectAll = function() {
	    this.execCommand('selectAll', false, '');
	    var range = this.getRange();
	    this.setSaveRange(range);
	};

	Selection.prototype.getCurrentCell = function() {
	    var range = this.getRange();

	    var $startContainer = $(range.startContainer);

	    var $cellNode = $startContainer.closest(Define.CELL_TYPE.join(','));

	    return $cellNode;
	};

	Selection.prototype.removeSelectedCell = function() {
	    this.editorContentView.find('[' + Define.ATTR.KK_SELECTED_TD + ']').removeAttr(Define.ATTR.KK_SELECTED_TD);
	};

	Selection.prototype.getSelectedTd = function(){
	    return this.editorContentView.find(Define.CELL_TYPE.join('[' + Define.ATTR.KK_SELECTED_TD + '],') + '[' + Define.ATTR.KK_SELECTED_TD + ']');
	};

	Selection.prototype.getParentBlockNode = function(node){
	    var editorNode = this.getEditorContentView();

	    while(node && editorNode != node){
	        if (node && node.nodeType == 1 && Define.BLOCK_NODES.indexOf(node.nodeName) > -1){
	            break;
	        }

	        node = node.parentNode;
	    }

	    return node;
	};

	Selection.prototype.getHighlightStyle = function(){
	    return this.highlightStyle;
	};

	Selection.prototype.setHighlightStyle = function(highlightStyle){
	    this.highlightStyle = highlightStyle;
	};

	Selection.prototype.selectionAdjust = function(isZeroWidthSpace) {
	    var checkFormatElement = ['STRONG', 'B', 'I', 'EM', 'U', 'STRIKE', 'S', 'SUP', 'SUB'];

	    var eDocument = this.editorObject.editorDocument;

	    var selection = this;
	    var range = selection.getRange();

	    var startContainer = range.startContainer;
	    var startOffset = range.startOffset;
	    var endContainer = range.endContainer;
	    var endOffset = range.endOffset;

	    if (startContainer.nodeType == Node.TEXT_NODE && startContainer == endContainer) {
	        return;
	    }

	    var unicodeNbsp = isZeroWidthSpace ? Define.UNICODE_ZERO_WIDTH_SPACE : Define.UNICODE_NBSP;
	    var textNode = eDocument.createTextNode(unicodeNbsp);

	    textNode.id = Define.ID.TEMP_TEXT_NODE;

	    var returnNode = null;
	    var isNewRange = false;

	    if (startContainer.nodeType == Node.ELEMENT_NODE) {

	        var startNode = startContainer.childNodes[startOffset];

	        if (!startNode) {
	            if (Define.SINGLE_NODES.indexOf(startContainer.nodeName) > -1) {
	                $(startContainer).before(textNode);
	                returnNode = textNode;

	            } else {
	                startContainer.appendChild(textNode);
	                returnNode = textNode;
	            }
	        } else {
	            var node = null;
	            var isTableCols = (startNode.nodeName == 'COL' || startNode.nodeName == 'COLGROUP');
	            if (isTableCols) {
	                node = startNode.offsetParent;
	                var zeroTextNode = eDocument.createTextNode(Define.UNICODE_ZERO_WIDTH_SPACE);
	                $(node).before(zeroTextNode);
	                node = zeroTextNode;
	            } else {
	                node = Util.getFirstChildNode(startNode);
	            }

	            if ($.inArray(startNode.nodeName, checkFormatElement) == -1) {
	                $(node).before(textNode);
	                returnNode = textNode;

	                startContainer = textNode;
	                startOffset = 0;

	                if (textNode.parentNode == endContainer) {
	                    endOffset++;
	                }

	                isNewRange = true;
	            }
	        }
	    } else {
	        if (startContainer.textContent.length == startOffset) {
	            if (startOffset == 0) {
	                $(startContainer).before(unicodeNbsp);
	                returnNode = textNode;

	                isNewRange = true;
	            } else {
	                var $startContainer = $(startContainer);

	                var $parentNode = $startContainer.parent();

	                if ($parentNode[0] == this.editorContentView[0]) {
	                    if (!startContainer.nextSibling) {
	                        $startContainer.after(textNode);
	                        returnNode = textNode;
	                        isNewRange = true;
	                    }
	                } else {
	                    if (!startContainer.nextSibling) {
	                        var $parentNextNode = $parentNode.next();

	                        if (!$parentNextNode.length) {
	                            $startContainer.after(textNode);
	                            returnNode = textNode;

	                            startContainer = textNode;
	                            startOffset = 0;

	                            isNewRange = true;
	                        }
	                    }
	                }
	            }

	        }
	    }

	    if (isNewRange) {
	        selection.applyNewRange(startContainer, startOffset, endContainer, endOffset);
	    }

	    return returnNode;
	};







	Selection.prototype.getParentTagNode = function(node, tags, stopNode){
	    var editorContentView = this.getEditorContentView();

	    var rootNode = editorContentView.firstChild;

	    var parentNodes = [];
	    var curNode = node;

	    while (curNode && rootNode != curNode){

	        if (stopNode && stopNode == curNode){
	            break;
	        }

	        if (curNode && tags.indexOf(curNode.nodeName) > -1){
	            parentNodes.push(curNode);
	        }

	        curNode = curNode.parentNode;
	    }

	    return parentNodes;
	};

	Selection.prototype.geElementByClass = function(className){
	    return $(this.editorContentView).find('.' + className);
	};

	Selection.prototype.geElementByID = function(id){
	    return $(this.editorContentView).find('#' + id);
	};

	Selection.prototype.convertFontToSpan = function(fontNodes){
	    var eDocument = this.editorObject.editorDocument;

	    var $fontNodes = $(fontNodes);

	    $fontNodes.addClass(Define.CLASS.IE_FONT_RANGE);

	    $fontNodes.each(function(){
	        var $renamed = $(eDocument.createElement('span'));

	        $.each(this.attributes, function(i, attribute){
	            $renamed.attr(attribute.nodeName, attribute.nodeValue);
	        });

	        while (this.firstChild) {
	            $renamed[0].appendChild(this.firstChild);
	        }

	        this.parentNode.replaceChild($renamed[0], this);
	    });

	    $fontNodes = this.geElementByClass(Define.CLASS.IE_FONT_RANGE);

	    $fontNodes.removeClass(Define.CLASS.IE_FONT_RANGE);

	    $fontNodes.each(function(){
	        if (!this.getAttribute('class')) {
	            this.removeAttribute('class');
	        }
	    });

	    $($fontNodes.get().reverse()).each(function(){
	        var $fontNode = $(this);
	        var $parentNode = $fontNode.parent();

	        if ($parentNode.length && $parentNode[0].nodeName == 'SPAN') {

	            var $parentChildNodes = $($parentNode[0].childNodes);

	            $parentChildNodes = $parentChildNodes.filter(function(){
	                var $this = $(this);

	                return !$this.hasClass(Define.CLASS.IE_FONT_START) && !$this.hasClass(Define.CLASS.IE_FONT_END) && this.nodeName != 'BR';
	            });

	            if ($parentChildNodes.length == 1 && $fontNode[0].attributes.length == 1 && $fontNode[0].getAttribute('style')) {
	                if ($fontNode[0].style.length <= 2) {

	                    var isStyleUp = false;

	                    if (!$fontNode[0].style.length) {
	                        isStyleUp = true;
	                    } else {
	                        if ($fontNode[0].style.length == 2 && $fontNode[0].style['fontSize'] && $fontNode[0].style['fontFamily']) {
	                            $parentNode.css('fontSize', $fontNode[0].style['fontSize']);
	                            $parentNode.css('fontFamily', $fontNode[0].style['fontFamily']);
	                            isStyleUp = true;
	                        } else if ($fontNode[0].style.length == 1){
	                            if ($fontNode[0].style['fontSize']) {
	                                $parentNode.css('fontSize', $fontNode[0].style['fontSize']);
	                                isStyleUp = true;
	                            }

	                            if ($fontNode[0].style['fontFamily']) {
	                                $parentNode.css('fontFamily', $fontNode[0].style['fontFamily']);
	                                isStyleUp = true;
	                            }
	                        }
	                    }
	                }
	            }
	        }

	        if (isStyleUp) {
	            $fontNode.after($fontNode[0].childNodes);
	            $fontNode.remove();
	            // $fontNode = $parentNode;
	        }

	        // changeFonts.unshift($fontNode[0]);
	    });

	    // changeFonts = $(changeFonts);
	    //
	    // console.log(changeFonts);
	    //
	    // if (changeFonts.length) {
	    //     var newRange = eDocument.createRange();
	    //     newRange.setStartBefore(changeFonts[0]);
	    //     newRange.setEndAfter(changeFonts.last()[0]);
	    //
	    //     this.setRange(newRange);
	    // }
	};


	Selection.prototype.checkCollapsedFormat = function(){

	    var eDocument = this.editorObject.editorDocument;
	    var returnSpanNode = null;

	    var range = this.getRange();

	    if (range.collapsed) {
	        var startContainer = range.startContainer;
	        var startOffset = range.startOffset;

	        console.log(">>>>>>> Collapsed", range.collapsed, startContainer, startOffset);

	        if ($.browser.msie) {
	            if (startContainer.nodeType == Node.TEXT_NODE) {
	                var textContent = startContainer.textContent;

	                if (textContent.length == offset) {

	                } else {

	                }
	            } else {
	                var endContainer = range.endContainer;

	                var cloneRange = range.cloneRange();

	                cloneRange.setStartAfter(endContainer);
	                cloneRange.setEndAfter(endContainer);
	            }
	        } else {

	            if (startContainer.nodeType == Node.TEXT_NODE) {
	                var $spanNode = this.createElement('SPAN');

	                var textNode = eDocument.createTextNode(Define.UNICODE_ZERO_WIDTH_SPACE);
	                $spanNode[0].appendChild(textNode);

	                range.insertNode($spanNode[0]);

	                range.setStart($spanNode[0], 1);
	                range.setEnd($spanNode[0], 1);

	                this.setRange(range);
	                this.setSaveRange();

	                returnSpanNode = $spanNode;

	            } else {
	                if (startContainer.nodeName == 'SPAN') {
	                    if (startContainer.childNodes.length == 1
	                        && startContainer.childNodes[0].nodeType == Node.TEXT_NODE
	                        && startContainer.childNodes[0].textContent == Define.UNICODE_ZERO_WIDTH_SPACE) {

	                        returnSpanNode = $(startContainer);

	                        range.setStart(startContainer, 1);
	                        range.setEnd(startContainer, 1);

	                        this.setRange(range);
	                        this.setSaveRange();
	                    }
	                }
	            }
	        }
	    }

	    return returnSpanNode;
	};





	// Legacy Selection Method API


	Selection.prototype.setHoldImageRange = function(){
	    var holdImageObject = this.holdImageObject;

	    if (holdImageObject){
	        var eDocument = this.editorObject.editorDocument;

	        var sel = this.getSelection();
	        var rng = eDocument.createRange();

	        sel.removeAllRanges();

	        var parentNode = holdImageObject.parentNode;
	        var imageIndex = 0;

	        for (var i=0, length=parentNode.childNodes.length; i<length; i++){
	            var childNode = parentNode.childNodes[i];

	            if (childNode == holdImageObject){
	                imageIndex = i;
	                break;
	            }
	        }

	        rng.setStart(parentNode, imageIndex);
	        rng.setEnd(parentNode, imageIndex + 1);

	        sel.addRange(rng);
	    }

	    this.holdImageObject = null;
	};


	Selection.prototype.removeModifyTargetNode = function(){
	    this.editorContentView.find('.' + Define.CLASS.KK_MODIFY_OBJECT).removeClass(Define.CLASS.KK_MODIFY_OBJECT);
	};

	Selection.prototype.setModifyTargetNode = function(node){
	    this.removeModifyTargetNode();

	    if (node) {
	        $(node).addClass(Define.CLASS.KK_MODIFY_OBJECT);
	    }
	};

	Selection.prototype.getModifyTargetNode = function(){
	    return $(this.editorContentView).find('.' + Define.CLASS.KK_MODIFY_OBJECT);
	};


	///////////////////////////////////////////////////////////////////////////


	module.exports = Selection;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	// // return all text nodes that are contained within `el`
	// function getTextNodes(el) {
	//     el = el || document.body
	//
	//     var doc = el.ownerDocument || document
	//         , walker = doc.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false)
	//         , textNodes = []
	//         , node
	//
	//     while (node = walker.nextNode()) {
	//         textNodes.push(node)
	//     }
	//     return textNodes
	// }

	// return all text nodes that are contained within `el` => Customize

	var Define = __webpack_require__(3);

	function getTextNodes(el) {
	    var myfilter = function(node){
	        if (node.nodeType == Node.TEXT_NODE || (node.nodeType == Node.ELEMENT_NODE && node.nodeName == "IMG") || (node.nodeType == Node.ELEMENT_NODE && node.nodeName == "BR")) //filter out DIV and IMG elements, br tag
	            return NodeFilter.FILTER_ACCEPT
	        else
	            return NodeFilter.FILTER_SKIP
	    };

	    el = el || document.body

	    var doc = el.ownerDocument || document
	        , walker = doc.createTreeWalker(el, NodeFilter.SHOW_TEXT + NodeFilter.SHOW_ELEMENT, myfilter, false)
	        , textNodes = []
	        , node

	    while (node = walker.nextNode()) {
	        if (node.parentNode.nodeName != 'STYLE') {
	            textNodes.push(node)
	        }
	    }

	    return textNodes
	}

	// return true if `rangeA` intersects `rangeB`
	function rangesIntersect(rangeA, rangeB) {
	    return rangeA.compareBoundaryPoints(Range.END_TO_START, rangeB) === -1 &&
	        rangeA.compareBoundaryPoints(Range.START_TO_END, rangeB) === 1
	}

	// create and return a range that selects `node`
	function createRangeFromNode(node) {
	    var range = node.ownerDocument.createRange()
	    try {
	        range.selectNode(node)
	    } catch (e) {
	        range.selectNodeContents(node)
	    }
	    return range
	}

	// return true if `node` is fully or partially selected by `range`
	function rangeIntersectsNode(range, node) {
	    if (range.intersectsNode) {
	        return range.intersectsNode(node)
	    } else {
	        return rangesIntersect(range, createRangeFromNode(node))
	    }
	}

	// return all non-empty text nodes fully or partially selected by `range`
	function getRangeTextNodes(range) {
	    var container = range.commonAncestorContainer
	        , nodes = getTextNodes(container.parentNode || container)

	    return nodes;
	    // return nodes.filter(function (node) {
	    //     return rangeIntersectsNode(range, node) && isNonEmptyTextNode(node) && node.id != Define.ID.TEMP_TEXT_NODE
	    // })
	}

	// returns true if `node` has text content
	function isNonEmptyTextNode(node) {
	    return node.textContent.length > 0 || (node.nodeType == Node.ELEMENT_NODE && node.nodeName == 'IMG') || (node.nodeType == Node.ELEMENT_NODE && node.nodeName == 'BR')
	}

	// remove `el` from the DOM
	function remove(el) {
	    if (el.parentNode) {
	        el.parentNode.removeChild(el)
	    }
	}

	// replace `node` with `replacementNode`
	function replaceNode(replacementNode, node) {
	    remove(replacementNode)
	    node.parentNode.insertBefore(replacementNode, node)
	    remove(node)
	}

	// unwrap `el` by replacing itself with its contents
	function unwrap(el) {
	    var range = document.createRange()

	    if (el.getAttribute('style')){
	        return;
	    }

	    range.selectNodeContents(el)
	    replaceNode(range.extractContents(), el)
	}

	// undo the effect of `wrapRangeText`, given a resulting array of wrapper `nodes`
	function undo(nodes) {
	    nodes.forEach(function (node) {
	        var parent = node.parentNode
	        unwrap(node)

	        var isNormalize = true;
	        $.each(parent.childNodes, function(){
	            if (this.id == Define.ID.TEMP_TEXT_NODE) {
	                isNormalize = false;
	                return false;
	            }
	        });

	        if (isNormalize) {
	            parent.normalize();
	        }
	    })
	}

	// // create a node wrapper function
	// function createWrapperFunction(wrapperEl, range) {
	//     var startNode = range.startContainer
	//         , endNode = range.endContainer
	//         , startOffset = range.startOffset
	//         , endOffset = range.endOffset
	//
	//     return function wrapNode(node) {
	//         var currentRange = document.createRange()
	//             , currentWrapper = wrapperEl.cloneNode()
	//
	//         currentRange.selectNodeContents(node)
	//
	//         if (node === startNode && startNode.nodeType === 3) {
	//             currentRange.setStart(node, startOffset)
	//             startNode = currentWrapper
	//             startOffset = 0
	//         }
	//         if (node === endNode && endNode.nodeType === 3) {
	//             currentRange.setEnd(node, endOffset)
	//             endNode = currentWrapper
	//             endOffset = 1
	//         }
	//
	//         currentRange.surroundContents(currentWrapper)
	//         return currentWrapper
	//     }
	// }

	// create a node wrapper function => Customize
	function createWrapperFunction(wrapperEl, range) {
	    var startNode = range.startContainer;
	    var endNode = range.endContainer;
	    var startOffset = range.startOffset;
	    var endOffset = range.endOffset;

	    return function wrapNode(node) {
	        var parentNode = node.parentNode;

	        if (node !== startNode && node !== endNode && parentNode && parentNode.nodeName == 'SPAN' && parentNode.childNodes.length == 1) {
	            if (wrapperEl.classList.length) {
	                parentNode.classList.add(wrapperEl.classList[0]);
	            }
	            return parentNode;
	        }

	        var currentRange = document.createRange()
	            , currentWrapper = wrapperEl.cloneNode()

	        if (node.nodeType == Node.ELEMENT_NODE && node.nodeName == 'IMG') {
	            $(node).wrap(currentWrapper);
	        } else {
	            currentRange.selectNodeContents(node)

	            if (node === startNode && startNode.nodeType === 3) {
	                currentRange.setStart(node, startOffset)

	                if (parentNode && parentNode.nodeName == 'SPAN' && parentNode.childNodes.length == 1 && currentRange.startOffset == 0) {
	                    if (wrapperEl.classList.length) {
	                        parentNode.classList.add(wrapperEl.classList[0]);
	                    }
	                    return parentNode;
	                }

	                startNode = currentWrapper
	                startOffset = 0
	            }
	            if (node === endNode && endNode.nodeType === 3) {
	                currentRange.setEnd(node, endOffset)

	                if (parentNode && parentNode.nodeName == 'SPAN' && parentNode.childNodes.length == 1 && parentNode.textContent.length == currentRange.endOffset) {
	                    if (wrapperEl.classList.length) {
	                        parentNode.classList.add(wrapperEl.classList[0]);
	                    }

	                    return parentNode;
	                }

	                endNode = currentWrapper
	                endOffset = 1
	            }

	            currentRange.surroundContents(currentWrapper)
	        }

	        return currentWrapper
	    }
	}

	function wrapRangeText(wrapperEl, range) {
	    var nodes
	        , wrapNode
	        , wrapperObj = {}

	    if (typeof range === 'undefined') {
	        // get the current selection if no range is specified
	        range = window.getSelection().getRangeAt(0)
	    }

	    if (range.isCollapsed) {
	        // nothing to wrap
	        return []
	    }

	    if (typeof wrapperEl === 'undefined') {
	        wrapperEl = 'span'
	    }

	    if (typeof wrapperEl === 'string') {
	        // assume it's a tagname
	        wrapperEl = document.createElement(wrapperEl)
	    }

	    wrapNode = createWrapperFunction(wrapperEl, range)

	    nodes = getRangeTextNodes(range)
	    nodes = nodes.map(wrapNode)

	    wrapperObj.nodes = nodes
	    wrapperObj.unwrap = function () {
	        if (this.nodes.length) {
	            undo(this.nodes)
	            this.nodes = []
	        }
	    }

	    return wrapperObj
	}

	module.exports = wrapRangeText


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	var UndoRedo = __webpack_require__(17);
	var StatusHighlight = __webpack_require__(34);

	var Filter = __webpack_require__(35);

	var Define = __webpack_require__(3);

	var scrollIntoView = __webpack_require__(36);

	function Router(editorElement, editorContentView, $dom, options, context){
	    this.$dom = null;
	    this.editorElement = null;
	    this.editorContentView = null;

	    this.undoredo = null;
	    this.statusHighlight = null;
	    this.options = null;

	    this.clientFilter = null;

	    this.editorObject = null;

	    this.init(editorElement, editorContentView, $dom, options, context);
	}

	Router.prototype.init = function (editorElement, editorContentView, $dom, options, context){
	    this.editorElement = $(editorElement);
	    this.editorContentView = $(editorContentView);

	    this.$dom = $dom;
	    this.options = options;

	    this.editorObject = context;

	    this.clientFilter = new Filter($dom, options, editorElement, editorContentView, this.editorObject.editorDocument);

	    this.statusHighlight = new StatusHighlight(this.editorElement, this.editorContentView, this.$dom, this.editorObject, this.options);

	    this.undoredo = new UndoRedo(this.editorElement, this.editorContentView, this.$dom, this);
	    this.undoredo.changedUndoRedoButtonEnable();

	    this.processingMessage = $('<div class="' + Define.CLASS.PROCESSING + '"><div class="' + Define.CLASS.PROCESSING_MESSAGE + '">' + kukuResource.processingMessage + '</div></div>');

	    this.displayProcessingMessage("hide");

	    $(this.editorElement).append(this.processingMessage);

	    this.scrollConfig = {
	        allowHorizontalScroll : false,
	        onlyScrollIfNeeded : true,
	        offsetTop : this.editorContentView.height()
	    };
	};


	//scrollIntoView API

	Router.prototype.scrollIntoView = function (node, height){
	    this.scrollConfig.offsetTop = height || 100;
	    scrollIntoView(node, this.editorContentView[0], this.scrollConfig);
	};



	//UndoRedo API

	Router.prototype.externalSetUndoHistory = function (isKeydownInputKey){
	    this.undoredo.externalSetUndoHistory(isKeydownInputKey)
	};

	Router.prototype.setRedoHistory = function (){
	    this.undoredo.setRedoHistory();
	};

	Router.prototype.changedUndoRedoButtonEnable = function (){
	    this.undoredo.changedUndoRedoButtonEnable();
	};

	Router.prototype.setClearAllHistories = function (isNotUndoHistory){
	    this.undoredo.setClearAllHistories(isNotUndoHistory);
	};

	Router.prototype.getHistoriesLength = function (){
	    return this.undoredo.getHistoriesLength();
	};

	Router.prototype.getHistoryOffset = function (){
	    return this.undoredo.getHistoryOffset();
	};

	Router.prototype.clearRedoHistories = function (){
	    return this.undoredo.clearRedoHistories();
	};




	Router.prototype.doOperation = function (opSources, isNotRestoreRange){
	    if (!isNotRestoreRange) {
	        this.$dom.selection.restoreRange();
	    }

	    var response = this.routerSendOperation(opSources);

	    return response;
	};

	Router.prototype.throwOperation = function (menu){
	    this.undoredo.throwExecute(menu);
	};

	Router.prototype.routerSendOperation = function (opSources){
	    return this.undoredo.execute(opSources);
	};


	//StatusHighlight API

	Router.prototype.doStatusHighlight = function (node, isNotCheckTable){
	    if (!node) {
	        var range = this.$dom.selection.getRange();
	        node = range.startContainer;

	        if (node.nodeType != Node.TEXT_NODE && node.nodeName == 'HTML') {
	            var eDocument = this.editorObject.editorDocument;
	            node = eDocument.body;
	        }
	    }

	    this.statusHighlight.onChangedListener(node, isNotCheckTable);
	};

	Router.prototype.setStatusTableSelection = function ($table){
	    this.statusHighlight.setStatusTableSelection($table);
	};

	Router.prototype.clearStatusHighlight = function (){
	    this.statusHighlight.clearStatusHighlight();
	};

	Router.prototype.getStatusHighlight = function (){
	    return this.statusHighlight;
	};

	Router.prototype.displayProcessingMessage = function(action) {
	    this.processingMessage[action]();
	};

	Router.prototype.changeFontSize = function(val) {
	    this.statusHighlight.changeFontSize(val);
	};



	Router.prototype.fullHtmlParser = function(htmlString) {
	    this.clientFilter.fullHtmlParser(htmlString);
	};

	Router.prototype.getHtmlFilterString = function(htmlString, isPaste, cmode) {
	    return this.clientFilter.getHtmlFilterString(htmlString, isPaste, cmode);
	};

	Router.prototype.setEditorEnvironment = function() {
	    this.clientFilter.setEditorEnvironment();
	};

	Router.prototype.removeDevComments = function(htmlString) {
	    return this.clientFilter.removeDevComments(htmlString);
	};



	module.exports = Router;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);
	var ModuleManager = __webpack_require__(18);

	function UndoRedo(editorElement, editorContentView, $domObject, router) {
	    this.router = null;
	    this.$dom = null;

	    this.editorElement = null;
	    this.editorContentView = null;

	    this.toolbarElement = null;


	    this.UNDO_LIMIT = (router.options.undoRedoLimit == 0 ? 0 : router.options.undoRedoLimit) || 1000;

	    this.historyOffset = -1;
	    this.historyDatas = [];


	    this.init(editorElement, editorContentView, $domObject, router);
	}

	UndoRedo.prototype.init = function(editorElement, editorContentView, $domObject, router) {
	    this.$dom = $domObject;
	    this.router = router;
	    this.editorElement = $(editorElement);

	    this.editorContentView = $(editorContentView);

	    this.toolbarElement = this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR);


	    this.$undoButtonNode = this.toolbarElement.find(".menu_button[u-id='undo']");
	    this.$redoButtonNode = this.toolbarElement.find(".menu_button[u-id='redo']");

	    this.moduleManager = new ModuleManager(this.editorElement, this.$dom, this.router);
	};

	UndoRedo.prototype.changedUndoRedoButtonEnable = function() {

	    var historyLength = this.getHistoriesLength();

	    var undoStyle = "addClass";
	    var redoStyle = "addClass";

	    if (historyLength) {
	        undoStyle = this.historyOffset > 0 ? 'removeClass' : undoStyle;
	        redoStyle = this.historyOffset < historyLength - 1 ? 'removeClass' : redoStyle;
	    }

	    this.$undoButtonNode[undoStyle]("disabled");
	    this.$redoButtonNode[redoStyle]("disabled");
	};

	UndoRedo.prototype.externalSetUndoHistory = function(isKeydownInputKey) {
	    this.clearRedoHistories();
	    this.setUndoHistory(isKeydownInputKey);
	};




	UndoRedo.prototype.setUndoHistory = function(isKeydownInputKey, cloneHTML) {
	    if (this.getHistoriesLength() >= this.UNDO_LIMIT && this.UNDO_LIMIT != 0) {
	        this.shiftHistories();
	    }

	    if (!cloneHTML) {
	        cloneHTML = this.editorContentView[0].innerHTML;
	    }

	    // if (this.getHistoriesLength()) {
	    //     var lastHistoryData = this.historyDatas[this.historyDatas.length - 1];
	    //
	    //     if (lastHistoryData.data == cloneHTML) {
	    //         return;
	    //     }
	    // }

	    this.setHistories({
	        data : cloneHTML,
	        scrollTop : this.editorContentView[0].scrollTop,
	        scrollLeft : this.editorContentView[0].scrollLeft
	    }, isKeydownInputKey);
	};

	UndoRedo.prototype.setRedoHistory = function(isForce, cloneHTML) {
	    var _this = this;

	    var setHistory = function(){
	        if (!cloneHTML) {
	            cloneHTML = _this.editorContentView[0].innerHTML;
	        }

	        // if (_this.getHistoriesLength()) {
	        //     var lastHistoryData = _this.historyDatas[_this.historyDatas.length - 1];
	        //
	        //     if (lastHistoryData.data == cloneHTML) {
	        //         return;
	        //     }
	        // }

	        _this.setHistories({
	            data : cloneHTML,
	            scrollTop : _this.editorContentView[0].scrollTop,
	            scrollLeft : _this.editorContentView[0].scrollLeft
	        });
	    };

	    if (!$.browser.msie || isForce) {
	        setHistory()

	    } else {
	        setTimeout(function () {
	            setHistory();
	        }, 100);
	    }
	};

	UndoRedo.prototype.throwExecute = function(menu) {
	    this.moduleManager.throwExecute(menu);
	};



	UndoRedo.prototype.shiftHistories = function() {
	    var historyLength = this.getHistoriesLength();
	    this.historyDatas = this.historyDatas.splice(historyLength - this.UNDO_LIMIT, historyLength);
	    this.historyOffset = this.historyDatas.length - 1;
	};

	UndoRedo.prototype.setHistories = function(opList, isKeydownInputKey) {
	    this.historyDatas.push(opList);

	    if (!isKeydownInputKey) {
	        this.historyOffset++;
	    }
	};

	UndoRedo.prototype.doUndo = function() {
	    var _this = this;
	    if(this.historyOffset > 0) {
	        this.historyOffset--;

	        var undoHistoryDatas = this.getHistories()[this.historyOffset];

	        if (undoHistoryDatas) {
	            this.editorContentView[0].innerHTML = undoHistoryDatas.data;

	            (function(historyData){
	                setTimeout(function(){
	                    var $selectdCell = _this.$dom.selection.getSelectedTd();
	                    if ($selectdCell.length) {
	                        _this.router.editorObject.menuController.event.mouseEvent.selectedCellNodes = $selectdCell;
	                        var node = Util.getFirstChildNode($selectdCell[0]);
	                        _this.$dom.selection.applyNewRange(node, 0, node, 0);

	                    }
	                    if (historyData.scrollTop !== undefined) {
	                        _this.editorContentView[0].scrollTop = historyData.scrollTop;
	                    }

	                    if (historyData.scrollLeft !== undefined) {
	                        _this.editorContentView[0].scrollLeft = historyData.scrollLeft;
	                    }
	                }, 10);
	            })(undoHistoryDatas);
	        }

	    } else {
	        // console.log("Empty UndoHistories");
	    }
	};

	UndoRedo.prototype.doRedo = function() {
	    var _this = this;

	    if(this.getHistoriesLength() > this.historyOffset) {

	        this.historyOffset++;

	        var redoHistoryDatas = this.getHistories()[this.historyOffset];

	        if (redoHistoryDatas) {
	            this.editorContentView[0].innerHTML = redoHistoryDatas.data;

	            (function(historyData){
	                setTimeout(function(){
	                    var $selectdCell = _this.$dom.selection.getSelectedTd();
	                    if ($selectdCell.length) {
	                        _this.router.editorObject.menuController.event.mouseEvent.selectedCellNodes = $selectdCell;
	                        var node = Util.getFirstChildNode($selectdCell[0]);
	                        _this.$dom.selection.applyNewRange(node, 0, node, 0);

	                    }

	                    if (historyData.scrollTop !== undefined) {
	                        _this.editorContentView[0].scrollTop = historyData.scrollTop;
	                    }

	                    if (historyData.scrollLeft !== undefined) {
	                        _this.editorContentView[0].scrollLeft = historyData.scrollLeft;
	                    }
	                }, 10);
	            })(redoHistoryDatas);
	        }
	    } else {
	        // console.log("Empty RedoHistories");
	    }
	};









	UndoRedo.prototype.clearRedoHistories = function() {

	    var historyLength = this.historyDatas.length;

	    if (historyLength - 1 > this.historyOffset) {
	        this.historyDatas = this.historyDatas.splice(0, this.historyOffset);
	        this.historyOffset = this.historyDatas.length - 1;
	    }
	};

	UndoRedo.prototype.setClearAllHistories = function(isNotUndoHistory) {
	    this.historyDatas = [];
	    this.historyOffset = -1;

	    if (!isNotUndoHistory) {
	        this.setUndoHistory();
	        this.changedUndoRedoButtonEnable();
	    }
	};








	UndoRedo.prototype.execute = function(opSources){
	    var _this = this;

	    if (!(opSources instanceof Array)) {
	        opSources = [opSources];
	    }

	    // console.log(opSources);

	    if (opSources[0].name == "undo") {
	        var undoFunction = function(){
	            _this.doUndo();
	            _this.changedUndoRedoButtonEnable();
	            _this.router.doStatusHighlight();
	        };

	        undoFunction();

	    } else if (opSources[0].name == "redo") {
	        this.doRedo();
	        this.changedUndoRedoButtonEnable();
	        this.router.doStatusHighlight();

	    } else {

	        var opDataList = this.createOpList(opSources);
	        var opListLength = opDataList.length;
	        var lastOP = opDataList[opListLength - 1];

	        this.clearRedoHistories();
	        this.setUndoHistory();

	        var returnDatas = this._executeModule(opDataList);

	        if (opDataList.length && opDataList[0].name == 'fontSize') {
	            this.router.changeFontSize(opDataList[0].value);
	        } else {
	            this.router.doStatusHighlight();
	        }

	        if (!lastOP || !lastOP.isAPI) {
	            _this.setRedoHistory();
	        }

	        this.changedUndoRedoButtonEnable();
	        return returnDatas;
	    }
	};

	UndoRedo.prototype._executeModule = function(opDataList) {
	    var returnDatas = [];
	    var _this = this;

	    //check
	    $.each(opDataList, function(index, opData){
	        if (!opData.ignore) {
	            var returnData = _this.moduleManager.execute(opData);

	            if (returnData) {
	                returnDatas.push(returnData);
	            }
	        }
	    });

	    return returnDatas.length > 0 ? returnDatas : null;
	};

	UndoRedo.prototype.createOpList = function(opSources) {
	    var _this = this
	        , opDataList = [];

	    $.each(opSources, function(index, opSource){
	        var opData = _this.makeDefaultOperation(opSource);
	        opDataList.push(opData);
	    });

	    return opDataList;
	};

	UndoRedo.prototype.makeDefaultOperation = function(opSource){
	    return {
	        type : opSource.type ? opSource.type : 'create',
	        name : opSource.name ? opSource.name : '',
	        value : opSource.value ? opSource.value : '',
	        ignore : opSource.ignore ? opSource.ignore : false,
	        isAPI : opSource.isAPI || false,
	        range : opSource.range || null
	    }
	};

	//UndoHistories Getter
	UndoRedo.prototype.getHistories = function() {
	    return this.historyDatas;
	};

	//UndoHistories Getter
	UndoRedo.prototype.getHistoriesLength = function() {
	    return this.historyDatas.length;
	};

	UndoRedo.prototype.getHistoryOffset = function() {
	    return this.historyOffset;
	};

	module.exports = UndoRedo;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	var Image = __webpack_require__(19);
	var Video = __webpack_require__(21);
	var Layer = __webpack_require__(22);
	var HyperLink = __webpack_require__(23);
	var Paragraph = __webpack_require__(24);
	var List = __webpack_require__(25);
	var Table = __webpack_require__(26);
	var Symbol = __webpack_require__(27);
	var FindReplace = __webpack_require__(28);
	var PageBreak = __webpack_require__(29);
	var Horizontal = __webpack_require__(30);
	var Bookmark = __webpack_require__(31);
	var Tab = __webpack_require__(32);
	var UpperLower = __webpack_require__(33);

	function ModuleManager(editorElement, $domObject, router){
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;
	    this.init(editorElement, $domObject, router);
	}

	ModuleManager.prototype.init = function (editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObject;

	    this.image = new Image(this.editorElement, this.$dom, this.router);
	    this.video = new Video(this.editorElement, this.$dom, this.router);
	    this.layer = new Layer(this.editorElement, this.$dom, this.router);
	    this.hyperlink = new HyperLink(this.editorElement, this.$dom, this.router);
	    this.paragraph = new Paragraph(this.editorElement, this.$dom, this.router);
	    this.list = new List(this.editorElement, this.$dom, this.router);
	    this.table = new Table(this.editorElement, this.$dom, this.router);
	    this.symbol = new Symbol(this.editorElement, this.$dom, this.router);
	    this.pageBreak = new PageBreak(this.editorElement, this.$dom, this.router);
	    this.horizontal = new Horizontal(this.editorElement, this.$dom, this.router);
	    this.bookmark = new Bookmark(this.editorElement, this.$dom, this.router);
	    this.tab = new Tab(this.editorElement, this.$dom, this.router);
	    this.upperLower = new UpperLower(this.editorElement, this.$dom, this.router);

	    this.findReplace = new FindReplace(this.editorElement, this.$dom, this.router);
	};

	ModuleManager.prototype.throwExecute = function(menu) {
	    switch(menu.id){
	        case "find_replace" :
	            this.findReplace.execute(menu);
	            break;
	        default :
	            break;
	    }
	};

	ModuleManager.prototype.execute = function(opData) {
	    //check
	    var returnData = null;
	    var _this = this;

	    // console.log(opData);
	    this.$dom.selection.setContentEditable(true);
	    this.$dom.selection.editorFocus();
	    //console.log(opData)

	    opData.type = (opData.type == "delete") ? "del" : opData.type;
	    switch (opData.name) {
	        case "image" :
	            returnData = this.image[opData.type](opData);
	            break;
	        case "video" :
	            returnData = this.video[opData.type](opData);
	            break;
	        case "layer" :
	            returnData = this.layer[opData.type](opData);
	            break;
	        case "hyperlink" :
	            returnData = this.hyperlink[opData.type](opData);
	            break;
	        case "horizontal" :
	            returnData = this.horizontal[opData.type](opData);
	            break;
	        case "page_break" :
	            returnData = this.pageBreak[opData.type](opData);
	            break;
	        case "table" :
	            returnData = this.table[opData.type](opData);
	            break;
	        case "symbol" :
	            returnData = this.symbol[opData.type](opData);
	            break;
	        case "bookmark" :
	            returnData = this.bookmark[opData.type](opData);
	            break;
	        case "tab" :
	            returnData = this.tab[opData.type](opData);
	            break;
	        case "upperLower" :
	            returnData = this.upperLower[opData.type](opData);
	            break;

	        case "heading" :
	        case "fontFamily" :
	        case "fontSize" :
	        case "paragraphMargin" :
	        case "textFormatPaste" :
	        case "bold" :
	        case "italic" :
	        case "underline" :
	        case "strikeThrough" :
	        case "remove_format" :
	        case "paragraph_remove_format" :
	        case "color" :
	        case "backgroundColor" :
	        case "superscript" :
	        case "subscript" :
	        case "dir_ltr" :
	        case "dir_rtl" :
	        case "s" :
	            returnData = this.paragraph[opData.type](opData);
	            break;
	        case "indent":
	        case "outdent":
	        case "align_left" :
	        case "align_center" :
	        case "align_right" :
	        case "align_justify":
	        case "line_height":
	            returnData = this.paragraph[opData.type](opData);

	            break;

	        case "list" :
	            returnData = this.list[opData.type](opData);

	            break;

	        default :
	            // console.log("Unknown Module : " + opData.name);

	            break;
	    }

	    return returnData;
	};

	module.exports = ModuleManager;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(20);
	var Define = __webpack_require__(3);

	function Image(editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Image.prototype, new AbstractModule());

	Image.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Image.prototype.setHyperlinkProperty = function (wrapSpanNode, hyperlink) {
	    var $wrapSpanNode = $(wrapSpanNode);

	    $wrapSpanNode[0].setAttribute(Define.ATTR.HREF, hyperlink.url);

	    if (hyperlink.type === 'url') {
	        if (hyperlink.title) {
	            $wrapSpanNode[0].setAttribute(Define.ATTR.TITLE, hyperlink.title);
	        }

	        if (hyperlink.target) {
	            $wrapSpanNode[0].setAttribute(Define.ATTR.TARGET, hyperlink.target);
	        }

	        if (hyperlink.id) {
	            $wrapSpanNode[0].setAttribute(Define.ATTR.ID, hyperlink.id);
	        }

	        if (hyperlink.className) {
	            $wrapSpanNode.addClass(hyperlink.className);
	        }
	    } else if (hyperlink.type === 'bookmark') {
	        $wrapSpanNode[0].removeAttribute(Define.ATTR.TITLE);
	        $wrapSpanNode[0].removeAttribute(Define.ATTR.TARGET);
	        $wrapSpanNode[0].removeAttribute(Define.ATTR.ID);
	        $wrapSpanNode[0].removeAttribute(Define.ATTR.CLASS);
	    }
	};

	Image.prototype.setImageProperty = function (imageNode, srcValues) {
	    var $image = $(imageNode);

	    if (srcValues.imageSrc !== null) {
	        $image.attr('src', srcValues.imageSrc);
	    }

	    if (srcValues.imageTitle !== null) {
	        $image.attr('title', srcValues.imageTitle);
	    }

	    if (srcValues.imageAlt !== null) {
	        $image.attr('alt', srcValues.imageAlt);
	    }

	    if (srcValues.width !== null) {
	        if (srcValues.width === -1) {
	            $image.css('width', '');
	            $image.removeAttr('width');
	        } else {
	            $image.css('width', srcValues.width + 'px');
	            $image.attr('width', srcValues.width);
	        }
	    }

	    if (srcValues.height !== null) {
	        if (srcValues.height === -1) {
	            $image.css('height', '');
	            $image.removeAttr('height');
	        } else {
	            $image.css('height', srcValues.height + 'px');
	            $image.attr('height', srcValues.height);
	        }
	    }

	    if (srcValues.margin) {
	        if (srcValues.margin.left !== null) {
	            $image.css('marginLeft', srcValues.margin.left + 'px');
	        }
	        if (srcValues.margin.right !== null) {
	            $image.css('marginRight', srcValues.margin.right + 'px');
	        }
	        if (srcValues.margin.top !== null) {
	            $image.css('marginTop', srcValues.margin.top + 'px');
	        }
	        if (srcValues.margin.bottom !== null) {
	            $image.css('marginBottom', srcValues.margin.bottom + 'px');
	        }
	    }

	    if (srcValues.align !== null) {
	        $image.css('verticalAlign', srcValues.align);
	    }

	    if (srcValues.borderType !== null) {
	        $image.css({
	            'border-style' : srcValues.borderType
	        });
	    }

	    if (srcValues.borderWidth !== null) {
	        $image.css({
	            'border-width' : srcValues.borderWidth
	        });
	    }

	    if (srcValues.borderColor !== null) {
	        $image.css({
	            'border-color' : srcValues.borderColor
	        });
	    }

	    if (srcValues.id !== null) {
	        $image.attr('id', srcValues.id);
	    }

	    if (srcValues.className !== null) {
	        $image.attr(Define.ATTR.CLASS, srcValues.className);
	    }

	    return $image;
	};

	Image.prototype.create = function (opData) {
	    var srcValues = opData.value;

	    var selection = this.$dom.selection;

	    var $insertNode = $('<img>');
	    this.setImageProperty($insertNode, srcValues);

	    if (srcValues.hyperlink.type) {
	        var $anchorNode = $('<a/>');

	        this.setHyperlinkProperty($anchorNode, srcValues.hyperlink);

	        $insertNode = $anchorNode.append($insertNode);
	    }

	    var $span = selection.createElement('span');
	    $span.html($insertNode[0].outerHTML);

	    selection.execCommand('insertHTML', false, $span[0].outerHTML);

	    return null;

	};

	Image.prototype.update = function (opData) {
	    var image = this.$dom.selection.getModifyTargetNode();

	    if (image.length && image.is('img')) {
	        var srcValues = opData.value;

	        this.setImageProperty(image, srcValues);

	        if (srcValues.hyperlink.type) {
	            var parent = image.parent();

	            if (!parent.is('a')) {
	                image.wrap('<a/>');

	                parent = image.parent();
	            }

	            this.setHyperlinkProperty(parent, srcValues.hyperlink);
	        }
	    }

	    this.$dom.selection.removeModifyTargetNode();
	};

	Image.prototype.read = function () {
	    // console.log("Image Read Method");
	};

	module.exports = Image;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	function AbstractModule(){}

	AbstractModule.prototype.create = function() {
	    // console.log("Must implement the inherited abstract method 'create' ");
	};

	AbstractModule.prototype.update = function() {
	    // console.log("Must implement the inherited abstract method 'update' ");
	};

	AbstractModule.prototype.read = function() {
	    // console.log("Must implement the inherited abstract method 'read' ");
	};

	AbstractModule.prototype.del = function(op) {
	    // console.log("Must implement the inherited abstract method 'delete' ");
	};

	module.exports = AbstractModule;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(20);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function Video(editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Video.prototype, new AbstractModule());

	Video.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Video.prototype.setVideoProperty = function ($video, srcValues) {
	    var $video = $($video);

	    $video.attr(Define.ATTR.TYPE, srcValues.videoExt);

	    if (srcValues.videoUrl) {
	        $video.attr('src', srcValues.videoUrl);
	    }

	    if (srcValues.width) {
	        $video.css('width', srcValues.width + 'px');
	    }

	    if (srcValues.height) {
	        $video.css('height', srcValues.height + 'px');
	    }

	    if (srcValues.isAutostart) {
	        $video.attr(Define.ATTR.VIDEO_AUTO_PLAY, Define.ATTR.VIDEO_AUTO_PLAY);
	    }

	    if (srcValues.isShowcontrols) {
	        $video.attr(Define.ATTR.VIDEO_CONTROL, Define.ATTR.VIDEO_CONTROL);
	    }

	    if (srcValues.isLoop) {
	        $video.attr(Define.ATTR.VIDEO_LOOP, Define.ATTR.VIDEO_LOOP);
	    }

	    if (srcValues.isShowaudiocontrols) {
	        $video.attr(Define.ATTR.VIDEO_AUDIO, Define.ATTR.VIDEO_AUDIO);
	    }

	    return $video;
	};

	Video.prototype.setEmbedProperty = function ($embed, srcValues) {
	    var $embed = $($embed);

	    if (srcValues.videoUrl) {
	        $embed.attr('src', srcValues.videoUrl);
	    }

	    if (srcValues.width) {
	        $embed.css('width', srcValues.width + 'px');
	    }

	    if (srcValues.height) {
	        $embed.css('height', srcValues.height + 'px');
	    }

	    $embed.attr(Define.ATTR.AUTO_START, srcValues.isAutostart ? "1" : "0");
	    $embed[0].setAttribute(Define.ATTR.LOOP, srcValues.isLoop ? "1" : "0");
	    $embed.attr(Define.ATTR.SHOW_TRACKER, srcValues.isShowtracker ? "1" : "0");
	    $embed.attr(Define.ATTR.SHOW_STATUSBAR, srcValues.isShowstatusbar ? "1" : "0");
	    $embed.attr(Define.ATTR.SHOW_CONTROLS, srcValues.isShowcontrols ? "1" : "0");
	    $embed.attr(Define.ATTR.SHOW_AUDIO_CONTROLS, srcValues.isShowaudiocontrols ? "1" : "0");
	    $embed.attr(Define.ATTR.SHOW_DISPLAY, srcValues.isShowdisplay ? "1" : "0");
	    $embed.attr(Define.ATTR.SHOW_POSITION_CONTROLS, srcValues.isShowpositioncontrols ? "1" : "0");
	    $embed.attr(Define.ATTR.PLAY, srcValues.isPlay ? "true" : "false");
	    $embed.attr(Define.ATTR.MENU, srcValues.isMenu ? "true" : "false");
	    $embed.attr(Define.ATTR.ALLOW_FULLSCREEN, srcValues.isAllowfullscreen ? "true" : "false");

	    $embed.attr(Define.ATTR.TYPE, srcValues.isAllowfullscreen ? "true" : "false");

	    return $embed;
	};

	Video.prototype.getVideoData = function (srcValues) {

	    if (srcValues.videoExt === 'mp4' || srcValues.videoExt === 'ogg' || srcValues.videoExt === 'webm') {
	        var $video = this.$dom.selection.createElement('video');
	        this.setVideoProperty($video, srcValues);

	        var $source = this.$dom.selection.createElement('source');
	        $source.attr(Define.ATTR.SRC, srcValues.videoUrl);
	        $source.attr(Define.ATTR.TYPE, 'video/' + srcValues.videoExt);
	        $video.append($source);
	        return $video;
	    } else {
	        var $embed = this.$dom.selection.createElement('embed');
	        this.setEmbedProperty($embed, srcValues);

	        if (srcValues.videoExt === 'swf') {
	            $embed.attr(Define.ATTR.TYPE, Define.ATTR.KK_FLASH_TYPE);
	            $embed.attr(Define.ATTR.PLUGINSPAGE, Define.ATTR.KK_FLASH_PLUGIN);

	            return $embed;
	        } else if (srcValues.videoExt === 'avi' || srcValues.videoExt === 'wmv' || srcValues.videoExt === 'asf') {
	            $embed[0].setAttribute(Define.ATTR.TYPE, Define.ATTR_VALUE.KK_VIDEO_TYPE);
	            $embed[0].setAttribute(Define.ATTR.PLUGINSPAGE, Define.ATTR_VALUE.KK_VIDEO_PLUGIN);

	            return $embed;
	        } else {
	            var $object = this.$dom.selection.createElement('object');

	            $object.attr(Define.ATTR.DATA, srcValues.videoUrl);
	            $object.css({
	                width : srcValues.width,
	                height : srcValues.height
	            });

	            $object.append($embed);

	            var $source = this.$dom.selection.createElement('source');
	            $source.attr(Define.ATTR.SRC, srcValues.videoUrl);
	            $source.attr(Define.ATTR.TYPE, 'video/' + srcValues.videoExt);

	            var $video = this.$dom.selection.createElement('video');
	            $video.css({
	                width : srcValues.width,
	                height : srcValues.height
	            });
	            $video.attr('controls', 'true');

	            $video.append($source);
	            $video.append($object);

	            return $video;
	        }
	    }
	};

	Video.prototype.create = function (opData) {
	    var $videoImg = this.$dom.selection.createElement('img');
	    $videoImg.attr(Define.ATTR.SRC, this.router.options.playImageURL);

	    var srcValues = opData.value;

	    var $video = null;

	    if (srcValues.videoType === 'file') {
	        $video = this.getVideoData(srcValues);
	    } else if (srcValues.videoType === 'source') {
	        $video = $(srcValues.videoSource);
	    }

	    $video.attr(Define.ATTR.DATA_VIDEO_TYPE, srcValues.videoType);

	    $videoImg.attr(Define.ATTR.DATA_VIDEO_SOURCE, encodeURIComponent($video[0].outerHTML));
	    $videoImg.attr(Define.ATTR.DATA_VIDEO_TYPE, srcValues.videoType);
	    $videoImg.attr(Define.ATTR.STYLE, $video.attr(Define.ATTR.STYLE));

	    if ($video && $video.length) {
	        var selection = this.$dom.selection;

	        var $span = selection.createElement('span');
	        $span.html($videoImg[0].outerHTML);
	        selection.execCommand('insertHTML', false, $span[0].outerHTML);
	    }
	};

	Video.prototype.update = function (opData) {

	    var targetVideoImage = this.$dom.selection.getModifyTargetNode();

	    if (targetVideoImage.length && targetVideoImage.is('img')) {
	        var srcValues = opData.value;

	        var $video = null;

	        if (srcValues.videoType === 'file') {
	            $video = this.getVideoData(srcValues);
	        } else if (srcValues.videoType === 'source') {
	            $video = $(srcValues.videoSource);
	        }

	        $video.attr(Define.ATTR.DATA_VIDEO_TYPE, srcValues.videoType);

	        var $videoImg = this.$dom.selection.createElement('img');
	        $videoImg.attr(Define.ATTR.SRC, this.router.options.playImageURL);

	        $videoImg.attr(Define.ATTR.DATA_VIDEO_SOURCE, encodeURIComponent($video[0].outerHTML));
	        $videoImg.attr(Define.ATTR.DATA_VIDEO_TYPE, srcValues.videoType);
	        $videoImg.attr(Define.ATTR.STYLE, $video.attr(Define.ATTR.STYLE));

	        targetVideoImage.replaceWith($videoImg[0].outerHTML);
	    }

	    this.$dom.selection.removeModifyTargetNode();
	};

	Video.prototype.read = function () {
	    // console.log("Video Read Method");
	};

	module.exports = Video;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(20);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function Layer(editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Layer.prototype, new AbstractModule());

	Layer.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Layer.prototype.setLayerProperty = function ($div, srcValues) {
	    if (srcValues.width) {
	        $div.css('width', srcValues.width + 'px');
	    }

	    if (srcValues.height) {
	        $div.css('height', srcValues.height + 'px');
	    }

	    if (srcValues.positionX) {
	        $div.css('left', srcValues.positionX + 'px');
	    }

	    if (srcValues.positionY) {
	        $div.css('top', srcValues.positionY + 'px');
	    }

	    if (srcValues.id) {
	        $div.attr('id', srcValues.id);
	    }

	    if (srcValues.className) {
	        $div.attr(Define.ATTR.CLASS, srcValues.className);
	    }

	    $div.css('position', 'relative');
	    $div.css('border', '1px dashed #000000');
	    $div.css('overflow-y', 'auto');
	    $div.css('overflow-x', 'hidden');

	    $div.attr(Define.ATTR.TYPE, Define.ATTR_VALUE.KK_LAYER);

	    return $div;
	};

	Layer.prototype.create = function (opData) {
	    var selection = this.$dom.selection;

	    var $div = $('<div/>');

	    $div.html(Define.DEFAULT_P_STYLE + '<span>' + window.kukuResource.layerDialog.new_layer_msg + '</span></p>');

	    var srcValues = opData.value;

	    $div = this.setLayerProperty($div, srcValues);

	    selection.execCommand('inserthtml', false, Define.DEFAULT_PARAGRAPH_HTML + $div[0].outerHTML+ Define.DEFAULT_PARAGRAPH_HTML);
	};

	Layer.prototype.update = function (opData) {

	    var targetLayer = this.$dom.selection.getModifyTargetNode();

	    if (targetLayer.length && targetLayer.attr(Define.ATTR.TYPE) === Define.ATTR_VALUE.KK_LAYER) {
	        var srcValues = opData.value;

	        this.setLayerProperty(targetLayer, srcValues);
	    }

	    this.$dom.selection.removeModifyTargetNode();
	};

	Layer.prototype.read = function () {
	    // console.log("Layer Read Method");
	};

	module.exports = Layer;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(20);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);


	function HyperLink(editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(HyperLink.prototype, new AbstractModule());

	HyperLink.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	HyperLink.prototype.create = function (opData) {
	    var selection = this.$dom.selection;
	    var $editorContentView = this.router.editorObject.editorContentView;
	    this.$dom.selection.setContentEditable(true);
	    this.$dom.selection.editorFocus();

	    var opValue = opData.value;

	    var isCollapsed = selection.isCollapsed();
	    var $aNodes = null;

	    if (isCollapsed) {
	        var range = selection.getRange();
	        var $hyperlinkNode = $(range.startContainer).closest("a");

	        if ($hyperlinkNode.length) {
	            $aNodes = $hyperlinkNode;
	        } else {
	            if ($.browser.msie) {
	                $aNodes = selection.createElement('A');
	                $aNodes.attr('href', Define.LINK_TO_CHANGE);
	                $aNodes.html(opValue.text);
	                range.insertNode($aNodes[0]);

	            } else {
	                selection.execCommand( "createLink", false, Define.LINK_TO_CHANGE );
	                $aNodes = $editorContentView.find('a[href="' + Define.LINK_TO_CHANGE + '"]');
	                $aNodes.html(opValue.text);
	            }
	        }
	    } else {
	        selection.execCommand( "unlink", false, "");
	        selection.execCommand( "createLink", false, Define.LINK_TO_CHANGE );
	        $aNodes = $editorContentView.find('a[href="' + Define.LINK_TO_CHANGE + '"]');
	    }

	    $aNodes.attr(Define.ATTR.HREF, opValue.url);

	    if (opValue.type === 'url') {
	        if (opValue.title) {
	            $aNodes.attr(Define.ATTR.TITLE, opValue.title);
	        }

	        if (opValue.target) {
	            $aNodes.attr(Define.ATTR.TARGET, opValue.target);
	        }

	        if (opValue.id) {
	            $aNodes.attr(Define.ATTR.ID, opValue.id);
	        }

	        if (opValue.className) {
	            $aNodes.attr(Define.ATTR.CLASS, opValue.className);
	        }

	        if (opValue.fileType) {
	            $aNodes.attr(Define.ATTR.FILE_TYPE, Define.ATTR_VALUE.KK_FILE);
	        }
	    } else {
	        $aNodes.removeAttr(Define.ATTR.TITLE);
	        $aNodes.removeAttr(Define.ATTR.TARGET);
	        $aNodes.removeAttr(Define.ATTR.ID);
	        $aNodes.removeAttr(Define.ATTR.CLASS);
	        $aNodes.removeAttr(Define.ATTR.FILE_TYPE);
	    }

	    this.$dom.selection.editorFocus();
	    this.$dom.selection.applyNewRange($aNodes.last()[0], $aNodes.last()[0].childNodes.length, $aNodes.last()[0], $aNodes.last()[0].childNodes.length);
	};

	HyperLink.prototype.update = function (opData) {
	    var selection = this.$dom.selection;
	    var opValue = opData.value;

	    if (opValue === "remove"){

	        if ($.browser.chrome && selection.isCollapsed()) {
	            var range = selection.getRange();

	            var startContainer = range.startContainer;
	            var $startContainer = $(startContainer);

	            var $hyperlinkNodes = $startContainer.closest('a');

	            if ($hyperlinkNodes.length) {
	                selection.applyNewRange($hyperlinkNodes[0], 0, $hyperlinkNodes[0], $hyperlinkNodes[0].childNodes.length);
	            }
	        }

	        selection.execCommand( "unlink", false, "" );
	    }
	};

	HyperLink.prototype.read = function () {};

	module.exports = HyperLink;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(20);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function Paragraph (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Paragraph.prototype, new AbstractModule());

	Paragraph.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	    this.editorContentView = this.router.editorObject.editorContentView;
	};

	Paragraph.prototype.update = function (opData) {
	    var _this = this;
	    var selection = this.$dom.selection;
	    var isCollapsed = selection.isCollapsed();

	    var selectedCellNodes = this.router.editorObject.menuController.mouseEvent.selectedCellNodes;

	    var isAllSelect = false;
	    var $table = null;

	    if (selectedCellNodes) {
	        $table = selectedCellNodes.closest('table');

	        var rows = $table[0].rows;
	        var $childCells = $(rows).children(Define.CELL_TYPE.join(','));

	        if ($childCells.length == selectedCellNodes.length) {
	            isAllSelect = true;

	            if ($.browser.chrome && (opData.name == 'fontFamily' || opData.name == 'fontSize')) {
	                isAllSelect = false;
	                isCollapsed = true;
	            }
	        }
	    }

	    if (isCollapsed && selectedCellNodes && !isAllSelect) {

	        if (selectedCellNodes.length) {
	            this.cellModuleUpdate(opData, true);
	            return;
	        }
	    } else {
	        if (isCollapsed && isAllSelect && $table) {
	            var rows = $table[0].rows;
	            var $cells = $(rows).children(Define.CELL_TYPE.join(','));

	            if ($.browser.msie) {
	                var newRange = _this.$dom.selection.createRange();

	                var firstCell = $table[0].rows[0].cells[0];

	                if (!firstCell.textContent.length) {
	                    var eDocument = this.router.editorObject.editorDocument;
	                    var nbsp = eDocument.createTextNode(Define.UNICODE_NBSP);

	                    var firstChild = firstCell.firstChild;
	                    if (firstChild && firstChild.nodeType == Node.ELEMENT_NODE && Define.PARAGRAPH_NODES.indexOf(firstChild.nodeName) > -1) {
	                        $(firstChild).prepend(nbsp);
	                    } else {
	                        $(firstCell).prepend(nbsp);
	                    }
	                }

	                var lastNode = Util.getLastChildNode(selectedCellNodes.last()[0]);

	                newRange.setStartBefore($table[0]);

	                if ($.inArray(lastNode.nodeName, Define.SINGLE_NODES) != -1) {
	                    if (!lastNode.previousSibling && $.inArray(lastNode.parentNode.nodeName, Define.CONTENT_NODES) == -1) {
	                        var $spanNode = selection.createElement('SPAN');
	                        $spanNode.html(Define.UNICODE_ZERO_WIDTH_SPACE);
	                        $(lastNode).after($spanNode);
	                        $spanNode.append(lastNode);

	                        newRange.setEndAfter($table[0]);

	                    } else {
	                        newRange.setEndAfter(lastNode);
	                    }
	                } else {
	                    if (lastNode.nodeType == Node.TEXT_NODE) {
	                        newRange.setEnd(lastNode, lastNode.textContent.length);
	                    } else {
	                        newRange.setEnd(lastNode, lastNode.childNodes.length);
	                    }
	                }

	                selection.setRange(newRange);
	                selection.setSaveRange(newRange);
	            } else {
	                //Table 전체 선택의 경우에는 실제 Selection 적용
	                // _this.$dom.selection.applyNewRange($cells[0], 0, $cells.last()[0], $cells.last()[0].childNodes.length);
	                _this.$dom.selection.applyNewRange($cells[0], 0, rows[rows.length - 1], rows[rows.length - 1].childNodes.length);
	            }
	        } else {

	            if (opData.name == 'bold' || opData.name == 'italic' || opData.name == 'strikeThrough' || opData.name == 'underline'){

	                var checkNodes = [].concat(Define.CELL_TYPE);

	                var boundaryCellNodes = selection.getSelectedNode(checkNodes, true);

	                if (boundaryCellNodes.length) {
	                    if (opData.name == 'bold'){
	                        boundaryCellNodes.css('font-weight', '');
	                    }

	                    if (opData.name == 'italic'){
	                        boundaryCellNodes.css('font-style', '');
	                    }

	                    if (opData.name == 'strikeThrough' || opData.name == 'underline') {
	                        boundaryCellNodes.each(function(){
	                            var $cell = $(this);

	                            if (opData.name == 'strikeThrough') {
	                                var textDecoration = $cell.css('text-decoration');
	                                textDecoration = textDecoration.replace('line-through', '');
	                                $cell.css('text-decoration', textDecoration);
	                            }

	                            if (opData.name == 'underline'){
	                                var textDecoration = $cell.css('text-decoration');
	                                textDecoration = textDecoration.replace(opData.name, '');
	                                $cell.css('text-decoration', textDecoration)
	                            }
	                        });
	                    }
	                }
	            }
	        }

	        var tempNode = selection.selectionAdjust($.browser.msie);

	        if (tempNode && $.browser.chrome) {
	            tempNode.id = Define.ID.TEMP_TEXT_NODE;
	        }

	        var isReturn = this.moduleUpdate(opData);

	        if (isReturn) {
	            if (tempNode) {
	                if (tempNode.nodeType == Node.TEXT_NODE && tempNode.id && tempNode.id == Define.ID.TEMP_TEXT_NODE && tempNode.textContent.length > 1 && tempNode.textContent[0] == Define.UNICODE_NBSP) {
	                    tempNode.id = "";

	                    var textContent = tempNode.textContent;
	                    textContent = textContent.substring(1, textContent.length);

	                    tempNode.textContent = textContent;
	                } else {
	                    $(tempNode).remove();
	                }
	            }
	            return;
	        }

	        if (tempNode) {
	            if (!isAllSelect) {
	                var range = selection.getRange();

	                try {
	                    var cloneRange = range.cloneRange();

	                    range.setStartAfter(tempNode);
	                    range.setEnd(range.endContainer, range.endOffset);

	                    var returnFalse = selection.setRange(range);

	                    if (returnFalse === false) {
	                        selection.setRange(cloneRange);
	                    }

	                } catch (e){
	                    //console.log(e);
	                }
	            }

	            $(tempNode).remove();
	        }
	    }

	    selection.setSaveRange();
	};

	Paragraph.prototype.cellModuleUpdate = function (opData, isNotMarking) {
	    var _this = this;

	    var selectedCellNodes = this.router.editorObject.menuController.mouseEvent.selectedCellNodes;

	    var selection = this.$dom.selection;

	    var tempNode = null;

	    var isStateAction = false;
	    var isValueAction = false;

	    var changeCellNodes = selectedCellNodes;
	    var firstState = null;

	    switch(opData.name){
	        case "bold":
	        case "italic":
	        case "strikeThrough":
	        case "underline":
	        case "superscript":
	        case "subscript":
	            if (opData.name == 'bold'){
	                selectedCellNodes.css('font-weight', '');
	            }

	            if (opData.name == 'italic'){
	                selectedCellNodes.css('font-style', '');
	            }

	            if (opData.name == 'strikeThrough' || opData.name == 'underline') {
	                selectedCellNodes.each(function(){
	                    var $cell = $(this);

	                    if (opData.name == 'strikeThrough') {
	                        var textDecoration = $cell.css('text-decoration');
	                        textDecoration = textDecoration.replace('line-through', '');
	                        $cell.css('text-decoration', textDecoration)
	                    }

	                    if (opData.name == 'underline'){
	                        var textDecoration = $cell.css('text-decoration');
	                        textDecoration = textDecoration.replace(opData.name, '');
	                        $cell.css('text-decoration', textDecoration)
	                    }
	                });
	            }

	            isStateAction = true;

	            break;
	        case "color":
	        case "backgroundColor":
	        case "fontFamily":
	        case "fontSize":
	        case "textFormatPaste":
	            isValueAction = true;

	            break;

	        case "align_left" :
	        case "align_center" :
	        case "align_right" :
	        case "align_justify" :
	            var childNodes = selectedCellNodes.find(Define.CELL_TYPE.join(','));
	            changeCellNodes = selectedCellNodes.add(childNodes);
	            changeCellNodes.removeAttr('align').css('text-align', opData.name.replace("align_", ""));

	            var $childTable = selectedCellNodes.find('table');
	            $childTable.attr('align', opData.name.replace("align_", ""));

	            var paragraphNodes = ['div'].concat(Define.PARAGRAPH_NODES);

	            var $childParagraph = selectedCellNodes.find(paragraphNodes.join(','));
	            $childParagraph.removeAttr('align').css('text-align', opData.name.replace("align_", ""));

	            return;

	            break;
	        case "blockquote" :
	            changeCellNodes = selectedCellNodes.first();
	            selectedCellNodes.removeAttr(Define.ATTR.KK_SELECTED_TD);
	            this.router.editorObject.menuController.mouseEvent.selectedCellNodes = selectedCellNodes = null;
	            break;
	        default:
	            break;
	    }

	    var parentsTR = selectedCellNodes.closest('tr');

	    if ($.browser.msie) {
	        if (opData.name == 'fontSize') {
	            parentsTR.each(function(){
	                var selectedCell = $(this).find('[' + Define.ATTR.KK_SELECTED_TD + ']');

	                var $spanNodes = selectedCell.find('span, font');
	                $spanNodes.css('font-size', opData.value).removeAttr('size');

	                selectedCell.each(function(){
	                    var range = selection.createRange();

	                    var firstNode = Util.getFirstChildNode(this);
	                    var lastNode = Util.getLastChildNode(this);

	                    if ($.inArray(firstNode.nodeName, Define.SINGLE_NODES) != -1) {
	                        range.setStartBefore(firstNode);
	                    } else {
	                        range.setStart(firstNode, 0);
	                    }

	                    if ($.inArray(lastNode.nodeName, Define.SINGLE_NODES) != -1) {
	                        range.setEndAfter(lastNode);
	                    } else {
	                        if (lastNode.nodeType == Node.TEXT_NODE) {
	                            range.setEnd(lastNode, lastNode.textContent.length);
	                        } else {
	                            range.setEnd(lastNode, lastNode.childNodes.length);
	                        }
	                    }

	                    selection.setRange(range);

	                    _this.moduleUpdate(opData, isNotMarking);
	                });
	            });
	        } else {
	            parentsTR.each(function(){
	                var selectedCell = $(this).find('[' + Define.ATTR.KK_SELECTED_TD + ']');

	                selectedCell.each(function(){
	                    var range = selection.createRange();

	                    var firstNode = Util.getFirstChildNode(this);
	                    var lastNode = Util.getLastChildNode(this);

	                    if ($.inArray(firstNode.nodeName, Define.SINGLE_NODES) != -1) {
	                        range.setStartBefore(firstNode);
	                    } else {
	                        range.setStart(firstNode, 0);
	                    }

	                    if ($.inArray(lastNode.nodeName, Define.SINGLE_NODES) != -1) {
	                        range.setEndAfter(lastNode);
	                    } else {
	                        if (lastNode.nodeType == Node.TEXT_NODE) {
	                            range.setEnd(lastNode, lastNode.textContent.length);
	                        } else {
	                            range.setEnd(lastNode, lastNode.childNodes.length);
	                        }
	                    }

	                    selection.setRange(range);

	                    if (isStateAction) {
	                        tempNode = selection.selectionAdjust(true);

	                        if (tempNode) {
	                            var newRange = selection.createRange();

	                            newRange.setStart(tempNode, 0);

	                            if ($.inArray(lastNode.nodeName, Define.SINGLE_NODES) != -1) {
	                                newRange.setEnd(lastNode.parentNode, lastNode.parentNode.childNodes.length);
	                            } else {
	                                if (lastNode.nodeType == Node.TEXT_NODE) {
	                                    newRange.setEnd(lastNode, lastNode.textContent.length);
	                                } else {
	                                    newRange.setEnd(lastNode, lastNode.childNodes.length);
	                                }
	                            }

	                            selection.setRange(newRange);
	                        }

	                        _this.moduleUpdate(opData, true);

	                        var state = selection.queryCommandState(opData.name);

	                        if (firstState === null) {
	                            firstState = state;
	                        } else {
	                            if (state != firstState) {
	                                _this.moduleUpdate(opData, true);
	                            }
	                        }
	                    } else {
	                        _this.moduleUpdate(opData, isNotMarking);
	                    }
	                });
	            });
	        }

	    } else {

	        if ($.browser.chrome && (opData.name == 'fontSize' || opData.name == 'fontFamily')) {
	            parentsTR.each(function(){
	                var selectedCell = $(this).find('[' + Define.ATTR.KK_SELECTED_TD + ']');

	                selectedCell.each(function(){
	                    var range = selection.createRange();

	                    var firstNode = Util.getFirstChildNode(this);
	                    var lastNode = Util.getLastChildNode(this);

	                    if ($.inArray(firstNode.nodeName, Define.SINGLE_NODES) != -1) {
	                        range.setStartBefore(firstNode);
	                    } else {
	                        range.setStart(firstNode, 0);
	                    }

	                    if ($.inArray(lastNode.nodeName, Define.SINGLE_NODES) != -1) {
	                        range.setEndAfter(lastNode);
	                    } else {
	                        if (lastNode.nodeType == Node.TEXT_NODE) {
	                            range.setEnd(lastNode, lastNode.textContent.length);
	                        } else {
	                            range.setEnd(lastNode, lastNode.childNodes.length);
	                        }
	                    }

	                    selection.setRange(range);

	                    if (!this.textContent) {
	                        tempNode = selection.selectionAdjust();

	                        if (tempNode) {
	                            range.setStart(tempNode, 0);
	                            selection.setRange(range);
	                        }
	                    }

	                    _this.moduleUpdate(opData, isNotMarking);

	                    if (tempNode) {
	                        if (tempNode.parentNode && tempNode.parentNode.nodeName == 'SPAN' && tempNode.parentNode.childNodes.length == 1) {
	                            tempNode.id = '';
	                            if (tempNode.parentNode.nextSibling && tempNode.parentNode.nextSibling.nodeType == Node.ELEMENT_NODE && tempNode.parentNode.nextSibling.nodeName == 'BR') {
	                                tempNode.parentNode.append(tempNode.parentNode.nextSibling);
	                                $(tempNode).remove();
	                            } else {
	                                tempNode.textContent = Define.UNICODE_ZERO_WIDTH_SPACE;
	                            }
	                        } else {
	                            $(tempNode).remove();
	                        }
	                    }
	                });
	            });

	        } else {
	            parentsTR.each(function(){
	                var selectedCell = $(this).find('[' + Define.ATTR.KK_SELECTED_TD + ']');

	                var range = selection.createRange();

	                var node = Util.getFirstChildNode(selectedCell[0]);
	                range.setStart(node, 0);
	                range.setEndAfter(selectedCell.last()[0]);

	                selection.setRange(range);

	                if (isStateAction) {
	                    tempNode = selection.selectionAdjust();

	                    if (tempNode) {
	                        range.setStart(tempNode, 0);
	                        selection.setRange(range);
	                    }

	                    _this.moduleUpdate(opData, true);

	                    var state = selection.queryCommandState(opData.name);

	                    if (firstState === null) {
	                        firstState = state;
	                    } else {
	                        if (state != firstState) {
	                            _this.moduleUpdate(opData, true);
	                        }
	                    }
	                } else {
	                    _this.moduleUpdate(opData, isNotMarking);
	                }

	                if (tempNode) {
	                    $(tempNode).remove();
	                }
	            });
	        }
	    }

	    // changeCellNodes.each(function(){
	    //     if (isStateAction || isValueAction) {
	    //         if (!this.textContent.length) {
	    //             return;
	    //         }
	    //     }
	    //
	    //     var range = selection.createRange();
	    //
	    //     if ($.browser.msie) {
	    //         range.selectNode(this);
	    //
	    //     } else {
	    //         var node = Util.getFirstChildNode(this);
	    //         range.setStart(node, 0);
	    //         range.setEnd(this, this.childNodes.length);
	    //     }
	    //
	    //     selection.setRange(range);
	    //
	    //     if (isStateAction) {
	    //         tempNode = selection.selectionAdjust();
	    //
	    //         if (tempNode) {
	    //             range.setStart(tempNode, 0);
	    //             selection.setRange(range);
	    //         }
	    //
	    //         _this.moduleUpdate(opData, true);
	    //
	    //         var state = selection.queryCommandState(opData.name);
	    //
	    //         if (firstState === null) {
	    //             firstState = state;
	    //         } else {
	    //             if (state != firstState) {
	    //                 _this.moduleUpdate(opData, true);
	    //             }
	    //         }
	    //     } else {
	    //         _this.moduleUpdate(opData, isNotMarking);
	    //     }
	    //
	    //     if (tempNode) {
	    //         $(tempNode).remove();
	    //     }
	    //     tempNode = null;
	    // });

	    if (selectedCellNodes) {
	        var node = Util.getFirstChildNode(selectedCellNodes[0]);

	        var newRange = selection.createRange();

	        if ($.inArray(node.nodeName, Define.SINGLE_NODES) != -1) {
	            newRange.setStartBefore(node);
	            newRange.setEndBefore(node);
	        } else {
	            newRange.setStart(node, 0);
	            newRange.setEnd(node, 0);
	        }

	        selection.setRange(newRange);
	        selection.setSaveRange(newRange);
	    }
	};

	Paragraph.prototype.moduleUpdate = function (opData, isNotMarking) {
	    var isResult = false;

	    switch (opData.name) {
	        case "align_left" :
	        case "align_center" :
	        case "align_right" :
	        case "align_justify" :
	            this.applyParagraphAlign(opData.name.replace("align_", ""), isNotMarking);
	            break;

	        case "heading":
	            this.applyParagraphHeading(opData.value);

	            break;

	        case "paragraph_remove_format":
	            this.applyParagraphRemoveFormat(opData.value);

	            break;

	        case "indent":
	        case "outdent":
	            this.applyParagraphIndentOutdent(opData.name, isNotMarking);
	            break;

	        case "line_height":
	            this.applyParagraphLineHeight(opData.value, isNotMarking);
	            break;

	        case "paragraphMargin":
	            this.applyParagraphSpacing(opData.name, opData.value, isNotMarking);

	            break;

	        case "dir_ltr":
	        case "dir_rtl":
	            this.applyParagraphDir(opData.name, isNotMarking);
	            break;

	        case "blockquote":
	            isResult = this.applyBlockQuote(opData.value, isNotMarking);

	            break;

	        case "remove_format":
	            this.applyParagraphAllRemoveFormat();

	            break;

	        case "textFormatPaste":
	            var isCollapsed = this.$dom.selection.isCollapsed();

	            if (!isCollapsed) {
	                this.applyFontStylePaste(opData.value);
	            }

	            break;

	        case "fontFamily" :
	        case "fontSize":
	        case "bold":
	        case "italic":
	        case "underline":
	        case "strikeThrough":
	        case "color":
	        case "backgroundColor":
	        case "superscript":
	        case "subscript":
	            isResult = this.applyFontStyle(opData);

	            break;

	    }

	    return isResult;
	};


	//Success Paragraph Spec

	Paragraph.prototype.applyParagraphAlign = function(align, isNotMarking){
	    var cmd = '';
	    var isSelectEscape = false;
	    var selection = this.$dom.selection;

	    switch (align) {
	        case "left" :
	            cmd = 'justifyLeft';
	            break;

	        case "right" :
	            cmd = 'justifyRight';

	            break;

	        case "center" :
	            cmd = 'justifyCenter';

	            break;

	        case "justify" :
	            cmd = 'justifyFull';

	            break;
	    }

	    if ($.browser.msie) {
	        var $hrNodes = selection.getSelectedNode('HR');

	        if ($hrNodes && $hrNodes.length) {
	            isSelectEscape = true;

	            $hrNodes.replaceWith(function(){
	                return '<' + 'img' + ' ' + Define.ATTR.KK_LIST_ESCAPE_TEMP + '="' + encodeURIComponent(this.outerHTML) + '"/>';
	            });
	        }
	    }

	    this.$dom.selection.execCommand(cmd, false, '');

	    if (!isNotMarking) {
	        var tableNodeTypeNames = [].concat(Define.CELL_TYPE);
	        tableNodeTypeNames.push('TABLE');

	        var paragraphNames = [].concat(Define.PARAGRAPH_NODES);
	        paragraphNames.push('DIV');

	        var findNodeTypesNames = tableNodeTypeNames.concat(paragraphNames);

	        var $findNodes = selection.getSelectedNode(findNodeTypesNames, isNotMarking);

	        if ($findNodes && $findNodes.length){
	            var $tableTypeNodes = $findNodes.filter(tableNodeTypeNames.join(','));
	            var $tableNodes = $tableTypeNodes.filter('TABLE');
	            $tableNodes.attr('align', align);

	            var $cellNodes = $tableTypeNodes.not('TABLE');

	            var $otherNodes = $findNodes.not(tableNodeTypeNames.join(','));
	            $otherNodes = $otherNodes.not($otherNodes.parents());

	            $otherNodes = $otherNodes.add($cellNodes);
	            $otherNodes.css('text-align', align).removeAttr('align');
	        }
	    } else {
	        var paragraphNames = [].concat(Define.PARAGRAPH_NODES);
	        paragraphNames.push('DIV');
	        var $findNodes = selection.getSelectedNode(paragraphNames, isNotMarking);
	        $findNodes.css('text-align', align).removeAttr('align');
	    }

	    if (isSelectEscape) {
	        var $escapeNode = this.editorContentView.find('[' + Define.ATTR.KK_LIST_ESCAPE_TEMP + ']');

	        if ($escapeNode && $escapeNode.length) {
	            $escapeNode.replaceWith(function(){
	                return decodeURIComponent(this.getAttribute(Define.ATTR.KK_LIST_ESCAPE_TEMP));
	            });
	        }
	    }
	};

	Paragraph.prototype.applyParagraphIndentOutdent = function(type, isNotMarking){
	    var value = 40;

	    var selection = this.$dom.selection;

	    var paragraphs = selection.getSelectedParagraph(null, null, isNotMarking);

	    var $filterParagraph = paragraphs;

	    if (!selection.isCollapsed()) {
	        var $tableNodes = selection.getSelectedNode('TABLE', isNotMarking);

	        if ($tableNodes && $tableNodes.length) {
	            var $childParagraphs = $tableNodes.find(Define.PARAGRAPH_NODES.join(','));
	            var $childTables = $tableNodes.find('table');

	            $tableNodes = $tableNodes.not($childTables);

	            $filterParagraph = paragraphs.not($childParagraphs);

	            $filterParagraph = $filterParagraph.add($tableNodes);
	        }
	    }

	    if (type == "outdent"){
	        value = value * -1;
	    }

	    $filterParagraph.each(function(idx, node){
	        var $this = $(this);

	        var parentMarginLeft = $this.css("margin-left");
	        parentMarginLeft = parentMarginLeft.replace("px", "") * 1;

	        var resultMarginLeft = parentMarginLeft + value;
	        resultMarginLeft = resultMarginLeft < 0 ? 0 : resultMarginLeft;

	        $this.css("margin-left", resultMarginLeft + "px");
	    });


	};

	Paragraph.prototype.applyFontStyle = function(opData){
	    var _this = this;
	    var selection = this.$dom.selection;
	    var val = opData.value;
	    var eDocument = this.router.editorObject.editorDocument;

	    if (opData.name == "color"){

	        if ($.browser.msie && $.browser.version < 11 ) {
	            var range = selection.getRange();

	            if (range.collapsed) {
	                var spanNode = range.startContainer;
	                if (spanNode.nodeType == Node.TEXT_NODE) {
	                    spanNode = spanNode.parentNode;
	                }

	                if (spanNode.nodeName == 'SPAN' && (!spanNode.childNodes.length || (spanNode.childNodes.length == 1 && spanNode.childNodes[0].nodeType == Node.TEXT_NODE && (spanNode.childNodes[0].textContent == '' || spanNode.childNodes[0].textContent == Define.UNICODE_NBSP)))) {
	                    $(spanNode).css('color', val);

	                    range = range.cloneRange();
	                    range.setStart(spanNode, 0);
	                    range.setEnd(spanNode, 0);
	                    this.$dom.selection.setRange(range);
	                    this.$dom.selection.setSaveRange();
	                } else {
	                    if (spanNode.nodeName != 'SPAN' || (spanNode.nodeName == 'SPAN' && spanNode.childNodes.length)) {
	                        var $span = this.$dom.selection.createElement('span');
	                        $span.html('');
	                        $span.css('color', val);

	                        var frag = eDocument.createDocumentFragment();
	                        var lastNode = frag.appendChild($span[0]);
	                        range.insertNode(frag);

	                        if (lastNode) {
	                            range = range.cloneRange();
	                            range.setStart(lastNode, 0);
	                            range.setEnd(lastNode, 0);
	                            this.$dom.selection.setRange(range);
	                            this.$dom.selection.setSaveRange();
	                        }
	                    }
	                }

	            } else {
	                // 3줄입력하여 폰트 색 변경 후 사이즈 변경 시 중간 텍스트 색 검정색으로 변경되는 현상
	                // var fontColor = $this.css('color');
	                // fontColor = fontColor.replace(opData.name, '');
	                var $spanNodes = selection.getSelectedNode(['SPAN']);
	                $spanNodes.each(function(){
	                    var $this = $(this);
	                    $this.css('color', val);
	                });
	            }
	        } else {
	            if ($.browser.msie) {
	                selection.execCommand('styleWithCSS', false, true);
	                selection.execCommand( "foreColor", false, val );
	                var $spanNodes = selection.getSelectedNode(['SPAN', 'FONT']);
	                $spanNodes.each(function(){
	                    var $this = $(this);
	                    $this.css('color', val);
	                });
	            }
	            else {
	                selection.execCommand('styleWithCSS', false, true);
	                selection.execCommand( "foreColor", false, val );
	            }

	        }

	    }else if (opData.name == "backgroundColor"){

	        if ($.browser.msie && $.browser.version < 11) {

	            var range = selection.getRange();
	            if (range.collapsed) {
	                var spanNode = range.startContainer;
	                if (spanNode.nodeType == Node.TEXT_NODE) {
	                    spanNode = spanNode.parentNode;
	                }

	                if (spanNode.nodeName == 'SPAN' && (!spanNode.childNodes.length || (spanNode.childNodes.length == 1 && spanNode.childNodes[0].nodeType == Node.TEXT_NODE && (spanNode.childNodes[0].textContent == '' || spanNode.childNodes[0].textContent == Define.UNICODE_NBSP)))) {
	                    $(spanNode).css('backgroundColor', val);

	                    range = range.cloneRange();
	                    range.setStart(spanNode, 0);
	                    range.setEnd(spanNode, 0);
	                    this.$dom.selection.setRange(range);
	                    this.$dom.selection.setSaveRange();
	                } else {
	                    if (spanNode.nodeName != 'SPAN' || (spanNode.nodeName == 'SPAN' && spanNode.childNodes.length)) {
	                        var $span = this.$dom.selection.createElement('span');
	                        $span.html('');
	                        $span.css('backgroundColor', val);

	                        var frag = eDocument.createDocumentFragment();
	                        var lastNode = frag.appendChild($span[0]);
	                        range.insertNode(frag);

	                        if (lastNode) {
	                            range = range.cloneRange();
	                            range.setStart(lastNode, 0);
	                            range.setEnd(lastNode, 0);
	                            this.$dom.selection.setRange(range);
	                            this.$dom.selection.setSaveRange();
	                        }
	                    }
	                }

	            } else {
	                selection.execCommand( "backColor", false,  val || 'transparent' )
	            }

	        } else {
	            if( !selection.execCommand( "hiliteColor", false, val || 'transparent' ) ){
	                selection.execCommand( "backColor", false,  val || 'transparent' )
	            }
	        }


	        // var range = selection.getRange();
	        //
	        // var collapsedChangeStyle = function(){
	        //     var isSuccess = false;
	        //
	        //     var spanNode = range.startContainer;
	        //     if (spanNode.nodeType == Node.TEXT_NODE) {
	        //         spanNode = spanNode.parentNode;
	        //     }
	        //
	        //     if (spanNode.nodeName == 'SPAN' && (!spanNode.childNodes.length || (spanNode.childNodes.length == 1 && spanNode.childNodes[0].nodeType == Node.TEXT_NODE && (spanNode.childNodes[0].textContent == '' || spanNode.childNodes[0].textContent == Define.UNICODE_NBSP)))) {
	        //         $(spanNode).css('backgroundColor', val);
	        //
	        //         range = range.cloneRange();
	        //         range.setStart(spanNode, 0);
	        //         range.setEnd(spanNode, 0);
	        //         _this.$dom.selection.setRange(range);
	        //         _this.$dom.selection.setSaveRange();
	        //
	        //         isSuccess = true;
	        //     } else {
	        //         if (spanNode.nodeName != 'SPAN' || (spanNode.nodeName == 'SPAN' && spanNode.childNodes.length)) {
	        //             var $span = _this.$dom.selection.createElement('span');
	        //             $span.html('');
	        //             $span.css('backgroundColor', val);
	        //
	        //             var frag = eDocument.createDocumentFragment();
	        //             var lastNode = frag.appendChild($span[0]);
	        //             range.insertNode(frag);
	        //
	        //             if (lastNode) {
	        //                 range = range.cloneRange();
	        //                 range.setStart(lastNode, 0);
	        //                 range.setEnd(lastNode, 0);
	        //                 _this.$dom.selection.setRange(range);
	        //                 _this.$dom.selection.setSaveRange();
	        //             }
	        //
	        //             isSuccess = true;
	        //         }
	        //     }
	        //
	        //     return isSuccess;
	        // };
	        //
	        // if ($.browser.msie && $.browser.msie < 11) {
	        //     if (range.collapsed) {
	        //         if (!collapsedChangeStyle()) {
	        //             selection.execCommand( "backColor", false,  val || 'transparent' )
	        //         }
	        //     } else {
	        //         selection.execCommand( "backColor", false,  val || 'transparent' )
	        //     }
	        //
	        // } else {
	        //     if ($.browser.msie) {
	        //         if (range.collapsed) {
	        //             if (!collapsedChangeStyle()) {
	        //                 if( !selection.execCommand( "hiliteColor", false, val || 'transparent' ) ){
	        //                     selection.execCommand( "backColor", false,  val || 'transparent' )
	        //                 }
	        //             }
	        //         } else {
	        //             if( !selection.execCommand( "hiliteColor", false, val || 'transparent' ) ){
	        //                 selection.execCommand( "backColor", false,  val || 'transparent' )
	        //             }
	        //         }
	        //     } else {
	        //         if( !selection.execCommand( "hiliteColor", false, val || 'transparent' ) ){
	        //             selection.execCommand( "backColor", false,  val || 'transparent' )
	        //         }
	        //     }
	        // }

	    }else if (opData.name == "fontFamily"){

	        if ($.browser.msie){
	            // var $fontNodes = selection.getSelectedNode(Define.CONTENT_NODES);
	            //
	            // $fontNodes = $fontNodes.filter(function(){
	            //     return this.getAttribute('face');
	            // });
	            //
	            // $fontNodes.css({'font-family' : val}).removeAttr('face');
	            //
	            // selection.convertFontToSpan($fontNodes);


	            var range = selection.getRange();

	            var eDocument = this.router.editorObject.editorDocument;
	            var tempStartSpanNode = eDocument.createElement('SPAN');
	            var tempEndSpanNode = eDocument.createElement('SPAN');

	            $(tempStartSpanNode).addClass(Define.CLASS.IE_FONT_START);
	            $(tempEndSpanNode).addClass(Define.CLASS.IE_FONT_END);

	            var startCloneRange = selection.createRange();
	            startCloneRange.setStart(range.startContainer, range.startOffset);
	            startCloneRange.setEnd(range.startContainer, range.startOffset);

	            var endCloneRange = selection.createRange();
	            endCloneRange.setStart(range.endContainer, range.endOffset);
	            endCloneRange.setEnd(range.endContainer, range.endOffset);

	            startCloneRange.insertNode(tempStartSpanNode);
	            endCloneRange.insertNode(tempEndSpanNode);

	            range.setStartAfter(tempStartSpanNode);
	            range.setEndBefore(tempEndSpanNode);

	            selection.execCommand("fontName", false, val);

	            range = selection.getRange();

	            var $tempStartSpanNode = selection.geElementByClass(Define.CLASS.IE_FONT_START);
	            var $tempEndSpanNode = selection.geElementByClass(Define.CLASS.IE_FONT_END);

	            if ($tempStartSpanNode.length && $tempEndSpanNode.length) {
	                range.setStartAfter($tempStartSpanNode[0]);
	                range.setEndBefore($tempEndSpanNode[0]);
	            }

	            var $fontNodes = selection.getSelectedNode(Define.CONTENT_NODES);

	            $fontNodes = $fontNodes.filter(function(){
	                return this.getAttribute('face');
	            });

	            $fontNodes.css({'font-family' : val}).removeAttr('face');

	            selection.convertFontToSpan($fontNodes);

	            var newRange = eDocument.createRange();
	            newRange.setStartAfter(tempStartSpanNode);
	            newRange.setEndBefore(tempEndSpanNode);
	            selection.setRange(newRange);

	            $tempStartSpanNode.remove();
	            $tempEndSpanNode.remove();
	        } else if ($.browser.chrome) {
	            var $selectedCellNodes = selection.getSelectedTd();

	            var range = selection.getRange();

	            if ($selectedCellNodes.length) {
	                selection.execCommand("fontName", false, val);
	            } else {
	                selection.forceExecCommand("fontName", false, val);
	            }

	            try {
	                var CONTENTS_NODES = [].concat(Define.CONTENT_NODES, Define.MS_SPECIAL_NODES);

	                var $spanNodes = selection.getSelectedNode(CONTENTS_NODES, false, null, true);
	                var $targetSpans = $spanNodes.not($spanNodes.parents($spanNodes));
	                $targetSpans.css({'font-family' : val});

	            } catch (exception) {
	                var $spanNodes = selection.getSelectedNode(Define.CONTENT_NODES);
	                var $targetSpans = $spanNodes.not($spanNodes.parents($spanNodes));
	                $targetSpans.css({'font-family' : val});

	                var $specialNodes = selection.getSelectedNode(Define.MS_SPECIAL_NODES, false, null, true);
	                var $targetSpecial = $specialNodes.not($specialNodes.parents($specialNodes));
	                $targetSpecial.css({'font-family' : val});
	            }

	            return true;
	        } else {
	            selection.execCommand("fontName", false, val);
	        }

	    }else if (opData.name == "fontSize"){

	        if ($.browser.chrome) {
	            var $selectedCellNodes = selection.getSelectedTd();
	            var range = selection.getRange();

	            if ($selectedCellNodes.length) {
	                selection.execCommand("fontSize", false, val);
	                $selectedCellNodes.find('[style*="font-size: xxx-large"]').css("font-size", val);
	            } else {
	                selection.forceExecCommand("fontSize", false, val);
	            }

	            try {
	                var CONTENTS_NODES = [].concat(Define.CONTENT_NODES, Define.MS_SPECIAL_NODES);
	                var $spanNodes = selection.getSelectedNode(CONTENTS_NODES, false, null, true);
	                var $targetSpans = $spanNodes.not($spanNodes.parents($spanNodes));
	                $targetSpans.css({'font-size' : val});
	            } catch (exception) {
	                var $spanNodes = selection.getSelectedNode(Define.CONTENT_NODES);
	                var $targetSpans = $spanNodes.not($spanNodes.parents($spanNodes));
	                $targetSpans.css({'font-size' : val});

	                var $specialNodes = selection.getSelectedNode(Define.MS_SPECIAL_NODES, false, null, true);
	                var $targetSpecial = $specialNodes.not($specialNodes.parents($specialNodes));
	                $targetSpecial.css({'font-size' : val});
	            }

	            return true;

	        } else if ($.browser.msie){
	            var eDocument = this.router.editorObject.editorDocument;
	            var $selectedCellNodes = selection.getSelectedTd();

	            var execFontSizeForIE = function(){
	                var range = selection.getRange();

	                var tempStartSpanNode = eDocument.createElement('SPAN');
	                var tempEndSpanNode = eDocument.createElement('SPAN');

	                $(tempStartSpanNode).addClass(Define.CLASS.IE_FONT_START);
	                $(tempEndSpanNode).addClass(Define.CLASS.IE_FONT_END);

	                var startCloneRange = selection.createRange();
	                startCloneRange.setStart(range.startContainer, range.startOffset);
	                startCloneRange.setEnd(range.startContainer, range.startOffset);

	                var endCloneRange = selection.createRange();
	                endCloneRange.setStart(range.endContainer, range.endOffset);
	                endCloneRange.setEnd(range.endContainer, range.endOffset);

	                startCloneRange.insertNode(tempStartSpanNode);
	                endCloneRange.insertNode(tempEndSpanNode);

	                range.setStartAfter(tempStartSpanNode);
	                range.setEndBefore(tempEndSpanNode);

	                selection.execCommand("fontSize", false, '1');

	                range = selection.getRange();

	                var $tempStartSpanNode = selection.geElementByClass(Define.CLASS.IE_FONT_START);
	                var $tempEndSpanNode = selection.geElementByClass(Define.CLASS.IE_FONT_END);

	                if ($tempStartSpanNode.length && $tempEndSpanNode.length) {
	                    range.setStartAfter($tempStartSpanNode[0]);
	                    range.setEndBefore($tempEndSpanNode[0]);
	                }

	                var $fontNodes = selection.getSelectedNode(Define.CONTENT_NODES);

	                $fontNodes = $fontNodes.filter(function(){
	                    return this.getAttribute('size') == 1;
	                });

	                $fontNodes.css({'font-size' : val}).removeAttr('size');

	                selection.convertFontToSpan($fontNodes);

	                var newRange = eDocument.createRange();
	                newRange.setStartAfter(tempStartSpanNode);
	                newRange.setEndBefore(tempEndSpanNode);
	                selection.setRange(newRange);

	                $tempStartSpanNode.remove();
	                $tempEndSpanNode.remove();
	            };

	            if ($selectedCellNodes.length) {
	                selection.execCommand("fontSize", false, '1');
	                var $fontNodes = selection.getSelectedNode(Define.CONTENT_NODES);

	                $fontNodes = $fontNodes.filter(function(){
	                    return this.getAttribute('size') == 1;
	                });

	                $fontNodes.css({'font-size' : val}).removeAttr('size');

	                selection.convertFontToSpan($fontNodes);
	            } else {
	                execFontSizeForIE();
	            }

	        } else {
	            var wrappingObj = selection.getSelectionWrapping();
	            var $nodes = wrappingObj.nodes;

	            $nodes.css("fontSize", val);
	        }

	    }else if (opData.name == "bold"){
	        if ($.browser.msie){
	            if (opData.value != 'on') {
	                var $headNodes = selection.getSelectedNode(Define.HEADING_NODES);

	                if ($headNodes && $headNodes.length) {
	                    var wrappingObj = selection.getSelectionWrapping();
	                    var $nodes = wrappingObj.nodes;

	                    $nodes.css("font-weight", 'normal');

	                    return;
	                }
	            }
	        }

	        selection.execCommand("bold", false, null);

	        if ($.browser.msie && $.browser.version < 11) {
	            var $spanNodes = selection.getSelectedNode(['SPAN', 'FONT']);
	            $spanNodes.css("font-weight", '');
	        }

	    }else if (opData.name == "italic"){

	        selection.execCommand("italic", false, null);

	        if ($.browser.msie && $.browser.version < 11) {
	            var $spanNodes = selection.getSelectedNode(['SPAN', 'FONT']);
	            $spanNodes.css("font-style", '');
	        }

	    }else if (opData.name == "underline"){

	        selection.execCommand("underline", false, null);

	        // if ($.browser.msie && $.browser.version < 11) {
	        //     var $spanNodes = selection.getSelectedNode(['SPAN', 'FONT']);
	        //
	        //     $spanNodes.each(function(){
	        //         var $this = $(this);
	        //
	        //         var textDecoration = $this.css('text-decoration');
	        //         textDecoration = textDecoration.replace(opData.name, '');
	        //         $this.css('text-decoration', textDecoration);
	        //     });
	        // }

	        // var $spanNodes = selection.getSelectedNode(['SPAN', 'U']);

	        // $spanNodes.each(function(){
	        //     var $this = $(this);

	        //     var textDecoration = $this.css('text-decoration');
	        //     textDecoration = textDecoration.replace('underline', '');
	        //     $this.css('text-decoration', 'underline');
	        // });

	        if ($.browser.msie && $.browser.version < 11) {
	            var $spanNodes = selection.getSelectedNode(['SPAN', 'U']);
	            $spanNodes.css("text-decoration", '');
	        }

	    }else if (opData.name == "strikeThrough"){


	        // selection.execCommand("strikeThrough", false, null);
	        //
	        // if ($.browser.msie && $.browser.version < 11) {
	        //     var $spanNodes = selection.getSelectedNode(['SPAN', 'FONT']);
	        //
	        //     $spanNodes.each(function(){
	        //         var $this = $(this);
	        //
	        //         var textDecoration = $this.css('text-decoration');
	        //         textDecoration = textDecoration.replace('line-through', '');
	        //         $this.css('text-decoration', textDecoration);
	        //     });
	        // }

	        // selection.execCommand('styleWithCSS', false, true);
	        selection.execCommand("strikeThrough", false, null);
	        // selection.execCommand('styleWithCSS', false, false);
	        // var $spanNodes = selection.getSelectedNode(['SPAN', 'FONT']);
	        //
	        // $spanNodes.each(function(){
	        //     var $this = $(this);
	        //     var strikeDom = $("<strike />").text($this.text());
	        //     $this.text("").append(strikeDom);
	        // });
	        var $spanNodes = selection.getSelectedNode(['SPAN', 'STRIKE']);

	        $spanNodes.each(function(){
	            var $this = $(this);

	            var textDecoration = $this.css('text-decoration');
	            textDecoration = textDecoration.replace('line-through', '');
	            $this.css('text-decoration', 'line-through');
	        });

	    }else if (opData.name == "superscript") {

	        if (!$.browser.msie || ($.browser.msie && $.browser.version > 10)) {
	            selection.execCommand('styleWithCSS', false, false);
	            selection.execCommand( "superscript", false, "" );
	            selection.execCommand('styleWithCSS', false, true);
	        } else {
	            selection.execCommand( "superscript", false, "" );
	        }

	        if ($.browser.msie) {
	            var isSubscript = eDocument.queryCommandState('subscript');

	            if (isSubscript) {
	                if (!$.browser.msie || ($.browser.msie && $.browser.version > 10)) {
	                    selection.execCommand('styleWithCSS', false, false);
	                    selection.execCommand( "subscript", false, "" );
	                    selection.execCommand('styleWithCSS', false, true);
	                } else {
	                    selection.execCommand( "subscript", false, "" );
	                }
	            }
	        }


	    }else if (opData.name == "subscript") {

	        if (!$.browser.msie || ($.browser.msie && $.browser.version > 10)) {
	            selection.execCommand('styleWithCSS', false, false);
	            selection.execCommand( "subscript", false, "" );
	            selection.execCommand('styleWithCSS', false, true);
	        } else {
	            selection.execCommand( "subscript", false, "" );
	        }

	        if ($.browser.msie) {
	            var isSuperscript = eDocument.queryCommandState('superscript');

	            if (isSuperscript) {
	                if (!$.browser.msie || ($.browser.msie && $.browser.version > 10)) {
	                    selection.execCommand('styleWithCSS', false, false);
	                    selection.execCommand( "superscript", false, "" );
	                    selection.execCommand('styleWithCSS', false, true);
	                } else {
	                    selection.execCommand( "superscript", false, "" );
	                }
	            }
	        }
	    }
	};

	Paragraph.prototype.applyParagraphSpacing = function(opName, value, isNotMarking){
	    var paragraphs = this.$dom.selection.getSelectedParagraph(null, null, isNotMarking);

	    paragraphs.each(function(idx, node){
	        var $node = $(node);

	        for(var idx = 0, length = value.length; idx < length; idx++) {
	            var marginData = value[idx];

	            if (marginData.name == 'marginLeft'){
	                if (marginData.value > 0){
	                    $node.css('margin-left', marginData.value + 'px');
	                }else{
	                    $node.css('margin-left', '');
	                }
	            }else if (marginData.name == 'marginRight'){
	                if (marginData.value > 0){
	                    $node.css('margin-right', marginData.value + 'px');
	                }else{
	                    $node.css('margin-right', '');
	                }
	            }else if (marginData.name == 'marginTop'){
	                if (marginData.value > 0){
	                    $node.css('margin-top', marginData.value + 'px');
	                }else{
	                    $node.css('margin-top', '');
	                }
	            }else if (marginData.name == 'marginBottom'){
	                if (marginData.value > 0){
	                    $node.css('margin-bottom', marginData.value + 'px');
	                }else{
	                    $node.css('margin-bottom', '');
	                }
	            }else if (marginData.name == 'letterSpacing'){
	                if (marginData.value > 0){
	                    $node.css('letter-spacing', marginData.value + 'px');
	                }else{
	                    $node.css('letter-spacing', '');
	                }
	            }else if (marginData.name == 'wordSpacing'){
	                if (marginData.value > 0){
	                    $node.css('word-spacing', marginData.value + 'px');
	                }else{
	                    $node.css('word-spacing', '');
	                }
	            }
	        }
	    });
	};

	Paragraph.prototype.applyParagraphLineHeight = function(value, isNotMarking){
	    var paragraphs = this.$dom.selection.getSelectedParagraph(null, null, isNotMarking);

	    paragraphs.each(function(idx, node){
	        var $this = $(this);
	        $this.css("line-height", value);
	    });
	};

	Paragraph.prototype.applyParagraphAllRemoveFormat = function(isNotUnlink){

	    var selection = this.$dom.selection;

	    if (!isNotUnlink) {
	        selection.execCommand("unlink", false, "");
	    }

	    selection.execCommand("removeFormat", false, "");

	    if ($.browser.msie) {
	        var wrappingObj = selection.getSelectionWrapping();
	        var $nodes = wrappingObj.nodes;

	        $nodes.each(function(idx, node){
	            var contentParents = $(node).parentsUntil(Define.BLOCK_NODES.join(',') + ',a');

	            if (contentParents.length) {
	                Util.splitOn(contentParents.last()[0].parentNode, node);
	            }
	        });

	        $nodes.attr('style', '');
	        selection.applyNewRange($nodes.first()[0], 0, $nodes.last()[0], $nodes.last()[0].childNodes.length);
	    }
	};

	Paragraph.prototype.applyFontStylePaste = function(props){
	    this.applyParagraphAllRemoveFormat(true);

	    for (var key in props){
	        var value = props[key];

	        var opData = {
	            name : key,
	            value : value
	        };

	        switch(key){
	            case "color":
	            case "backgroundColor":
	            case "fontFamily":
	            case "fontSize":
	            case "bold":
	            case "italic":
	            case "strikeThrough":
	            case "underline":
	            case "superscript":
	            case "subscript":
	                if (value) {
	                    this.applyFontStyle(opData);
	                }

	                break;
	            default:
	                break;
	        }
	    }
	};

	Paragraph.prototype.applyParagraphDir = function(dir, isNotMarking){
	    var selection = this.$dom.selection;

	    var paragraphs = selection.getSelectedParagraph(null, null, isNotMarking);

	    var direction = dir == 'dir_ltr' ? 'ltr' : 'rtl';

	    var $closestParagraph = paragraphs.parents(paragraphs);

	    paragraphs = paragraphs.not($closestParagraph);

	    paragraphs.each(function(idx, node){
	        var $this = $(this);
	        $this.attr("dir", direction);
	    });
	};

	Paragraph.prototype.applyBlockQuote = function(quoteType, isNotMarking){
	    var selection = this.$dom.selection;

	    var paragraphs = selection.getSelectedParagraph(null, null, isNotMarking);

	    var firstNode = paragraphs[0];
	    var lastNode = paragraphs[paragraphs.length - 1];

	    var style = 'border-left: 3px solid gray; padding: 10px; color: gray;';
	    switch (quoteType){
	        case 'quote1':
	            style = 'border-left: 3px solid gray; padding: 10px; color: gray;';
	            break;
	        case 'quote2':
	            style = 'border: 1px dashed #e9e9e9; padding:10px; color:#e9e9e9;';
	            break;
	        case 'quote3':
	            style = 'border: 1px dashed #6b9ad0; padding:10px; color:#6b9ad0;';
	            break;
	        case 'quote4':
	            style = 'border: 1px dashed #6b9ad0; background-color:#e9e9e9; padding:10px; color:#6b9ad0;';
	            break;
	        case 'quote5':
	            style = 'border: 1px solid gray; padding:10px; color:gray;';
	            break;
	        case 'quote6':
	            style = 'border: 1px solid #6b9ad0; padding:10px; color:#6b9ad0;';
	            break;
	        case 'quote7':
	            style = 'border: 4px solid gray; padding:10px; color:gray;';
	            break;
	        case 'quote8':
	            style = 'border: 4px solid gray; background-color:#e9e9e9; padding:10px; color:gray;';
	            break;
	    }

	    var $closestStartBlockQuoteNode = $(firstNode).closest('blockquote');
	    var $closestEndBlockQuoteNode = $(lastNode).closest('blockquote');
	    if ($closestStartBlockQuoteNode.length || $closestEndBlockQuoteNode.length){

	        $closestStartBlockQuoteNode.attr('style', style);
	        $closestEndBlockQuoteNode.attr('style', style);

	        return;
	    }

	    var firstNodeCellParents = $(firstNode).closest(Define.CELL_TYPE.join(','));
	    var lastNodeCellParents = $(lastNode).closest(Define.CELL_TYPE.join(','));

	    if (firstNodeCellParents.length || lastNodeCellParents.length ){
	        if (!firstNodeCellParents.is(lastNodeCellParents)) {
	            var firstParents = $(firstNode).parents('TABLE');
	            var lastParents = $(lastNode).parents('TABLE');

	            if (firstParents.length) {
	                firstNode = firstParents.last()[0];
	            }

	            if (lastParents.length) {
	                lastNode = lastParents.last()[0];
	            }
	        }
	    }

	    var $blockQuoteNode = selection.createElement('blockquote');
	    $blockQuoteNode.attr('style', style);

	    paragraphs.first().before($blockQuoteNode);

	    var $pNode = selection.createElement('p');
	    $pNode[0].innerHTML = Define.DEFAULT_TEXT_HTML_BR;

	    $blockQuoteNode.before($pNode.clone(true));
	    $blockQuoteNode.after($pNode.clone(true));

	    var newRange = selection.createRange();

	    newRange.setStart(firstNode, 0);
	    newRange.setEnd(lastNode, lastNode.childNodes.length);

	    var fragment = newRange.extractContents();

	    $blockQuoteNode.append(fragment.childNodes);

	    selection.applyNewRange($blockQuoteNode[0], 0, $blockQuoteNode[0], 0);

	    return true;
	};

	Paragraph.prototype.applyParagraphRemoveFormat = function(){
	    var paragraphNodeNames = [].concat(Define.PARAGRAPH_NODES);
	    paragraphNodeNames.push('DIV');

	    var tableNodeNames = [].concat(Define.CELL_TYPE);
	    tableNodeNames.push('TABLE');

	    var findNodeNames = paragraphNodeNames.concat(tableNodeNames);

	    var $findNodes = this.$dom.selection.getSelectedNode(findNodeNames);

	    var $paragraphNodes = $findNodes.not(tableNodeNames.join(','));
	    $paragraphNodes.attr('style', '').attr('align', '');

	    var $tableTypeNodes = $findNodes.filter(tableNodeNames.join(','));

	    if ($tableTypeNodes && $tableTypeNodes.length) {
	        var $tableNodes = $tableTypeNodes.filter('TABLE');

	        $tableTypeNodes.css({
	            'border' : Define.DEFAULT_CELL_BORDER_STYLE,
	            'text-align' : '',
	            'font-size' : '',
	            'background' : '',
	            'background-image' : '',
	            'background-color' : ''
	        }).removeAttr('align');

	        $tableNodes.css({
	            'border-collapse' : 'collapse'
	        });
	    }
	};

	Paragraph.prototype.applyParagraphHeading = function(value){
	    var selection = this.$dom.selection;

	    var changeParagraphNodeName = value;
	    if (value == "default") {
	        changeParagraphNodeName = "p";
	    }

	    var isSelectEscape = false;

	    if ($.browser.msie) {
	        var $hrNodes = selection.getSelectedNode('HR');

	        if ($hrNodes && $hrNodes.length) {
	            isSelectEscape = true;

	            $hrNodes.replaceWith(function(){
	                return '<' + 'img' + ' ' + Define.ATTR.KK_LIST_ESCAPE_TEMP + '="' + encodeURIComponent(this.outerHTML) + '"/>';
	            });
	        }
	    }

	    selection.execCommand('formatBlock', false, '<' + changeParagraphNodeName + '>');

	    if (isSelectEscape) {
	        var $escapeNode = this.editorContentView.find('[' + Define.ATTR.KK_LIST_ESCAPE_TEMP + ']');

	        if ($escapeNode && $escapeNode.length) {
	            $escapeNode.replaceWith(function(){
	                return decodeURIComponent(this.getAttribute(Define.ATTR.KK_LIST_ESCAPE_TEMP));
	            });
	        }
	    }


	    var $pNodes = selection.getSelectedNode(changeParagraphNodeName.toUpperCase());
	    $pNodes.attr('class', 'kk_heading_'+changeParagraphNodeName);
	    $pNodes.css({'font-size' : '', 'font-weight' : ''});

	    if ($.browser.msie) {
	        var parentTR = $pNodes.parent('tr');
	        var childPnodes = parentTR.children(Define.HEADING_NODES.join(',') + ', p');
	        childPnodes.remove();
	    }

	    var childAllNodes = $pNodes.find('*');
	    childAllNodes = childAllNodes.not(Define.TABLE_TYPE.join(','));

	    var paragraphNodes = childAllNodes.filter(Define.HEADING_NODES.join(',') + ', p');
	    paragraphNodes.css({'font-size' : '', 'font-weight' : ''});
	    paragraphNodes = $(paragraphNodes.get().reverse());
	    paragraphNodes.changeTagName(changeParagraphNodeName);
	};

	module.exports = Paragraph;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(20);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function List (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(List.prototype, new AbstractModule());

	List.prototype.TYPE = {
	    NUMBERED : 'numbered',
	    BULLET : 'bullet'
	};

	var NUMBER_LIST_TEMPLATE = ['decimal', 'upper-alpha', 'lower-alpha', 'upper-roman', 'lower-roman', 'lower-greek'];
	var BULLET_LIST_TEMPLATE = ['disc', 'circle', 'square'];

	var SPECIFIC_LIST_TYPE = {
	    numbered_decimal     : 'decimal',
	    numbered_decimal_leading_zero : 'decimal-leading-zero',
	    numbered_alpha       : 'lower-alpha',
	    numbered_upper_alpha : 'upper-alpha',
	    numbered_roman       : 'lower-roman',
	    numbered_upper_roman : 'upper-roman',
	    numbered_lower_greek : 'lower-greek',

	    bullet_disc          : 'disc',
	    bullet_circle        : 'circle',
	    bullet_square        : 'square'
	};

	List.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	List.prototype.findParentNodes = function(node, selector, stopSelector){
	    if (!node) {
	        return null;
	    }

	    var nodes = [];
	    while (node) {
	        if($(node).hasClass(Define.CLASS.KKEDITOR)){
	            return nodes;
	        }else if ($(node).is(stopSelector)){
	            return nodes;
	        }else if ($(node).is(selector)){
	            nodes.push(node);
	        }

	        node = node.parentNode;
	    }

	    return nodes;
	};

	List.prototype.create = function(opData){
	    try{
	        var selection = this.$dom.selection;
	        var isCollapsed = selection.isCollapsed();

	        var selectedCellNodes = this.router.editorObject.menuController.mouseEvent.selectedCellNodes;

	        if (selectedCellNodes) {
	            if (selectedCellNodes.length) {
	                this.listModuleUpdate(opData, true);

	                return;
	            }
	        } else {
	            this.moduleUpdate(opData);
	        }

	    }catch(e){
	        // console.log(e);
	    }
	};

	List.prototype.listModuleUpdate = function(opData, isNotMarking) {
	    var _this = this;
	    var selection = this.$dom.selection;
	    var selectedCellNodes = this.router.editorObject.menuController.mouseEvent.selectedCellNodes;
	    var tempNode = null;

	    var changeCellNodes = selectedCellNodes;

	    if (opData.value.status != 'off') {
	        var parentsTR = selectedCellNodes.closest('tr');

	        parentsTR.each(function(){
	            var selectedCell = $(this).find('[' + Define.ATTR.KK_SELECTED_TD + ']');

	            var range = selection.createRange();

	            var node = Util.getFirstChildNode(selectedCell[0]);
	            range.setStart(node, 0);
	            range.setEnd(selectedCell.last()[0], selectedCell.last()[0].childNodes.length);

	            selection.setRange(range);

	            if ($.browser.msie) {
	                tempNode = selection.selectionAdjust();

	                if (tempNode) {
	                    range.setStart(tempNode, 0);
	                    selection.setRange(range);
	                }
	            }

	            _this.moduleUpdate(opData, isNotMarking);

	            if (tempNode) {
	                $(tempNode).remove();
	            }

	            tempNode = null;
	        });
	    } else {
	        $.each(changeCellNodes, function(){
	            var range = selection.createRange();
	            var node = Util.getFirstChildNode(this);
	            range.setStart(node, 0);
	            range.setEnd(this, this.childNodes.length);

	            selection.setRange(range);

	            _this.moduleUpdate(opData, isNotMarking);
	        });
	    }

	    if (selectedCellNodes) {
	        var node = Util.getFirstChildNode(selectedCellNodes[0]);

	        var newRange = selection.createRange();
	        newRange.setStart(node, 0);
	        newRange.setEnd(node, 0);

	        selection.setRange(newRange);
	        selection.setSaveRange(newRange);
	    }
	};

	List.prototype.moduleUpdate = function(opData, isNotMarking){
	    if (opData && opData.value.isTab){

	        this.setListIndent(isNotMarking);

	    }else if (opData && opData.value.isUnTab){

	        this.setListOutdent(isNotMarking);

	    }else if (opData && opData.value && opData.value.listType){

	        this.setApplyList(opData, isNotMarking);
	    }
	};

	List.prototype.setListIndent = function(isNotMarking) {
	    var editorContentView = this.router.editorObject.editorContentView;
	    editorContentView[0].normalize();

	    var listWrapperNodeNames = Define.LIST_NODES.join(',');

	    var selection = this.$dom.selection;

	    var isCollapsed = selection.isCollapsed();

	    var $listNodes = selection.getSelectedListItem();

	    if (!$listNodes.length) {
	        return;
	    }

	    var isSelectEscape = false;

	    var $hrNode = selection.getSelectedNode('HR', isNotMarking || isCollapsed);

	    if ($hrNode && $hrNode.length) {
	        isSelectEscape = true;

	        $hrNode.replaceWith(function(){
	            return '<' + ($.browser.chrome ? 'br' : 'img') + ' ' + Define.ATTR.KK_LIST_ESCAPE_TEMP + '="' + encodeURIComponent(this.outerHTML) + '"/>';
	        });
	    }

	    if ($.browser.chrome) {
	        var $tableNode = selection.getSelectedNode('TABLE', isNotMarking || isCollapsed);

	        if ($tableNode.length) {

	            if (!$listNodes.closest($tableNode).length) {
	                isSelectEscape = true;

	                $tableNode.replaceWith(function(){
	                    return '<br ' + Define.ATTR.KK_LIST_ESCAPE_TEMP + '="' + encodeURIComponent(this.outerHTML) + '"/>';
	                });
	            }
	        }
	    }

	    $listNodes.addClass(Define.CLASS.LIST_MARKING);

	    $listNodes.each(function(){

	        var $this = $(this);
	        var newListStyleType = '';
	        var beforeListStyleType = '';

	        var $parentWrapperNode = $this.closest(listWrapperNodeNames);

	        if ($parentWrapperNode.length) {
	            var parentNodeName = $parentWrapperNode[0].nodeName;

	            beforeListStyleType = $parentWrapperNode.css('list-style-type');

	            if (beforeListStyleType) {
	                var listIndex = 0;

	                if (parentNodeName == 'OL') {
	                    listIndex = NUMBER_LIST_TEMPLATE.indexOf(beforeListStyleType) + 1;

	                    if (listIndex == NUMBER_LIST_TEMPLATE.length) {
	                        listIndex = 0;
	                    }

	                    newListStyleType = NUMBER_LIST_TEMPLATE[listIndex];
	                } else {
	                    listIndex = BULLET_LIST_TEMPLATE.indexOf(beforeListStyleType) + 1;

	                    if (listIndex == BULLET_LIST_TEMPLATE.length) {
	                        listIndex = 0;
	                    }

	                    newListStyleType = BULLET_LIST_TEMPLATE[listIndex];
	                }
	            }
	        }

	        var defaultListStyleType = '';

	        if (this.previousSibling) {
	            if (Define.LIST_NODES.indexOf(this.previousSibling.nodeName) > -1) {
	                defaultListStyleType = this.previousSibling.style.listStyleType;
	            }
	        }

	        selection.applyNewRange(this, 0, this, 0);
	        selection.execCommand('indent');

	        var range = selection.getRange();

	        var $changeParentsNode = $(range.startContainer).closest(listWrapperNodeNames);

	        if ($changeParentsNode.length) {
	            if (defaultListStyleType) {
	                $changeParentsNode.css('list-style-type', defaultListStyleType);
	            } else {
	                defaultListStyleType = $changeParentsNode[0].style.listStyleType;

	                if ($.browser.msie) {
	                    if (beforeListStyleType == defaultListStyleType) {
	                        $changeParentsNode.css('list-style-type', newListStyleType);
	                    }
	                }

	                if (!defaultListStyleType) {
	                    $changeParentsNode.css('list-style-type', newListStyleType);
	                }
	            }
	        }
	    });

	    if (isSelectEscape) {
	        var $escapeNode = editorContentView.find('[' + Define.ATTR.KK_LIST_ESCAPE_TEMP + ']');

	        if ($escapeNode && $escapeNode.length) {
	            $escapeNode.replaceWith(function(){
	                return decodeURIComponent(this.getAttribute(Define.ATTR.KK_LIST_ESCAPE_TEMP));
	            });
	        }
	    }

	    $listNodes = editorContentView.find('.' + Define.CLASS.LIST_MARKING);

	    $listNodes.removeClass(Define.CLASS.LIST_MARKING);

	    selection.applyNewRange($listNodes.first()[0], 0, $listNodes.last()[0], $listNodes.last()[0].childNodes.length);

	};

	List.prototype.setListOutdent = function(isNotMarking) {
	    var editorContentView = this.router.editorObject.editorContentView;
	    editorContentView[0].normalize();

	    var selection = this.$dom.selection;

	    var isCollapsed = selection.isCollapsed();

	    var $listNodes = selection.getSelectedListItem();

	    if (!$listNodes.length) {
	        return;
	    }

	    var isSelectEscape = false;

	    var $hrNode = selection.getSelectedNode('HR', isNotMarking || isCollapsed);

	    if ($hrNode && $hrNode.length) {
	        isSelectEscape = true;

	        $hrNode.replaceWith(function(){
	            return '<' + ($.browser.chrome ? 'input' : 'img') + ' ' + Define.ATTR.KK_LIST_ESCAPE_TEMP + '="' + encodeURIComponent(this.outerHTML) + '"/>';
	        });
	    }


	    if ($.browser.chrome) {
	        var $tableNode = selection.getSelectedNode('TABLE', isNotMarking || isCollapsed);

	        if ($tableNode.length) {
	            if (!$listNodes.closest($tableNode).length) {
	                isSelectEscape = true;

	                $tableNode.replaceWith(function () {
	                    return '<input ' + Define.ATTR.KK_LIST_ESCAPE_TEMP + '="' + encodeURIComponent(this.outerHTML) + '"/>';
	                });
	            }
	        }
	    }

	    if ($.browser.msie) {
	        selection.execCommand('formatBlock', false, '<p>');
	    }

	    selection.execCommand('outdent');

	    if (isSelectEscape) {
	        var $escapeNode = editorContentView.find('[' + Define.ATTR.KK_LIST_ESCAPE_TEMP + ']');

	        if ($escapeNode && $escapeNode.length) {
	            $escapeNode.replaceWith(function(){
	                return decodeURIComponent(this.getAttribute(Define.ATTR.KK_LIST_ESCAPE_TEMP));
	            });
	        }
	    }
	};

	List.prototype.setApplyList = function(opData, isNotMarking) {
	    var selection = this.$dom.selection;

	    var isCollapsed = selection.isCollapsed();

	    var specificListType = '';

	    var cmdString = opData.value.listType == 'numbered' ? 'insertOrderedList' : 'insertUnorderedList';

	    if (opData.value.specificType){
	        specificListType = SPECIFIC_LIST_TYPE[opData.value.specificType];
	    }

	    var listState = selection.queryCommandState(cmdString);
	    var status = opData.value.status;

	    //List의 경우 HR & TABLE 태그가 가운데 끼어 있으면 Error가 나므로 Image로 잠시 변경시킨다.
	    var isSelectEscape = false;

	    var $hrNode = selection.getSelectedNode('HR', isNotMarking || isCollapsed);

	    if ($hrNode && $hrNode.length) {
	        isSelectEscape = true;

	        $hrNode.replaceWith(function(){
	            return '<img ' + Define.ATTR.KK_LIST_ESCAPE_TEMP + '="' + encodeURIComponent(this.outerHTML) + '"/>';
	        });
	    }

	    if ($.browser.chrome) {
	        var $tableNode = selection.getSelectedNode('TABLE', isNotMarking || isCollapsed);

	        if ($tableNode.length) {
	            var range = selection.getRange();

	            if (!$(range.startContainer).closest($tableNode).length) {
	                isCollapsed = false;

	                isSelectEscape = true;

	                $tableNode.replaceWith(function () {
	                    return '<img ' + Define.ATTR.KK_LIST_ESCAPE_TEMP + '="' + encodeURIComponent(this.outerHTML) + '"/>';
	                });
	            }
	        }
	    }

	    if ($.browser.msie && status == 'on') {
	        selection.execCommand('formatBlock', false, '<P>');
	    }

	    if ((listState && !specificListType) || (!listState && status == 'on') || status == 'off') {
	        selection.execCommand(cmdString);

	        listState = selection.queryCommandState(cmdString);
	    }

	    if (specificListType && status == 'on') {
	        if (!listState) {
	            selection.execCommand(cmdString);
	        }

	        var $listNodes = selection.getSelectedListWrapper();

	        if ($listNodes && $listNodes.length){
	            var listNodeType = cmdString == 'insertUnorderedList' ? 'UL' : 'OL';
	            $listNodes.filter(listNodeType).css('list-style-type', specificListType).attr('class', "KK_list_" + specificListType);
	            console.log(specificListType)
	        }
	    }

	    var $endMakingNode = null;

	    if ($.browser.chrome) {
	        var range = selection.getRange();

	        var endContainer = range.endContainer;
	        var endOffset = range.endOffset;

	        if (isSelectEscape && !$(endContainer).closest(Define.LIST_NODES.join(',')).length) {
	            var newRange = selection.createRange();

	            newRange.setStart(endContainer, endOffset);
	            newRange.setEnd(endContainer, endOffset);

	            $endMakingNode = selection.createElement('span');
	            $endMakingNode.html(Define.NBSP);
	            $endMakingNode.attr('id', Define.TEMP);

	            newRange.insertNode($endMakingNode[0]);
	        }
	    }

	    var editorContentView = this.router.editorObject.editorContentView;

	    if (isSelectEscape) {
	        var $escapeNode = editorContentView.find('[' + Define.ATTR.KK_LIST_ESCAPE_TEMP + ']');

	        if ($escapeNode && $escapeNode.length) {
	            $escapeNode.replaceWith(function(){
	                return decodeURIComponent(this.getAttribute(Define.ATTR.KK_LIST_ESCAPE_TEMP));
	            });
	        }
	    }

	    if ($.browser.chrome) {
	        if (status == 'off') {
	            var $tableNode = selection.getSelectedNode('TABLE', isNotMarking || isCollapsed);

	            if ($tableNode.length) {
	                $tableNode.each(function (idx, node) {
	                    var $table = $(node);

	                    var $parentLI = $table.closest('li');

	                    if (!$parentLI.length) {
	                        var contentParents = $table.closest('p');

	                        if (contentParents.length) {
	                            Util.splitOn(contentParents[0].parentNode, node);
	                        }
	                    }
	                });
	            }
	        }
	    }

	    if ($endMakingNode) {
	        $endMakingNode = editorContentView.find('#' + Define.TEMP);
	        var range = selection.getRange().cloneRange();
	        range.setEndBefore($endMakingNode[0]);

	        selection.setRange(range);
	        $endMakingNode.remove();
	    }

	    if (!isNotMarking) {
	        editorContentView[0].normalize();

	        selection.setSaveRange();
	        selection.restoreRange();
	    }
	};

	List.prototype.update = function(){};

	List.prototype.del = function(opData){ };

	module.exports = List;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(20);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function Table (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Table.prototype, new AbstractModule());

	Table.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Table.prototype.setTableStyle = function (table, tableStyle) {

	    var defaultHeight = 40;

	    if(this.router.options.defaultFontSize) {
	        table.css('font-size', this.router.options.defaultFontSize);
	    }

	    if (tableStyle.width !== null) {
	        table.css('width', tableStyle.width + 'px');
	        table.attr('width', tableStyle.width);
	    } else {
	        if (this.router.options.defaultTableWidth) {
	            table.css('width', this.router.options.defaultTableWidth + 'px');
	            table.attr('width', this.router.options.defaultTableWidth);
	        }
	    }

	    if (tableStyle.height !== null) {
	        table.css('height', tableStyle.height + 'px');
	        table.attr('height', tableStyle.height);
	    } else {
	        if (!tableStyle.isModify) {
	            table.css('height', (defaultHeight * tableStyle.row) + 'px');
	            table.attr('height', (defaultHeight * tableStyle.row));
	        }
	    }

	    if (tableStyle.marginLeft !== null) {
	        table.css('margin-left', tableStyle.marginLeft + 'px');
	    }

	    if (tableStyle.borderSeparate !== null) {

	        var isSeparate = tableStyle.borderSeparate;

	        table.css('border-collapse', isSeparate ? 'separate' : 'collapse');
	        table.css('border-style', isSeparate ? 'solid' : 'none');
	    }

	    if (tableStyle.cellSpacing !== null) {
	        table.attr('cellspacing', tableStyle.cellSpacing);
	    }

	    if (tableStyle.cellPadding !== null) {
	        table.attr('cellpadding', tableStyle.cellPadding);
	    }

	    if (tableStyle.align !== null) {
	        table.attr('align', tableStyle.align);
	    }

	    if (tableStyle.id !== null) {
	        table.attr('id', tableStyle.id);
	    }

	    if (tableStyle.className !== null) {
	        table.attr(Define.ATTR.CLASS, tableStyle.className);
	    }

	    if (tableStyle.summary !== null) {
	        table.attr('summary', tableStyle.summary);
	    }

	    if (tableStyle.image !== null) {
	        if (tableStyle.image) {
	            table.css('background-image', 'url(' + tableStyle.image + ')');
	        } else {
	            table.css('background-image', 'none');
	        }
	    }

	    if (tableStyle.attachment !== null) {
	        table.css('background-attachment', tableStyle.attachment);
	    }

	    if (tableStyle.repeat !== null) {
	        table.css('background-repeat', tableStyle.repeat);
	    }

	    if (tableStyle.positionX !== null) {
	        table.css('background-position-x', (tableStyle.positionX || 0) + 'px');
	    }

	    if (tableStyle.positionY !== null) {
	        table.css('background-position-y', (tableStyle.positionY || 0) + 'px' );
	    }

	    if (tableStyle.backgroundColor !== null) {
	        table.css('background-color', tableStyle.backgroundColor);
	    }
	};

	Table.prototype.setBorder = function (td, borderPostion, borderStyle) {
	    td.css(borderPostion, borderStyle.width + 'px ' + borderStyle.type + ' ' + borderStyle.color);
	};

	Table.prototype.setTemplate = function ($td, templateType, row, col, i, j) {

	    switch (templateType + "") {
	        case "0" :

	            break;
	        case "1" :
	            var type1_border =  { width : 2, type : 'solid', color : '#0000ff' };
	            var type1_border_none =  { width : 1, type : 'none', color : '#0000ff' };

	            if (i === 0) {
	                this.setBorder($td, 'border-top', type1_border);
	            }

	            if (i === row - 1) {
	                this.setBorder($td, 'border-bottom', type1_border);
	            }

	            if (j === 0) {
	                this.setBorder($td, 'border-left', type1_border_none);
	            }

	            if (j === col - 1) {
	                this.setBorder($td, 'border-right', type1_border_none);
	            }

	            break;
	        case "2" :
	            if (!(i % 2)) {
	                $td.css('background-color', '#eeeeee');
	            }

	            break;
	        case "3" :
	            var type3_border = { width : 1, type : 'dotted', color : '#000000' };

	            if (i === 0) {
	                this.setBorder($td, 'border-top', type3_border);
	            }

	            if (i === row - 1) {
	                this.setBorder($td, 'border-bottom', type3_border);
	            }

	            if (j === 0) {
	                this.setBorder($td, 'border-left', type3_border);
	            }

	            if (j === col - 1) {
	                this.setBorder($td, 'border-right', type3_border);
	            }
	            break;
	        case "4" :
	            var defaultBorder = { width : 1, type : 'solid', color : '#000000' };
	            var type4_border = { width : 1, type : 'dotted', color : '#000000' };

	            this.setBorder($td, 'border', type4_border);

	            if (i === 0) {
	                this.setBorder($td, 'border-top', defaultBorder);
	            }

	            if (i === row - 1) {
	                this.setBorder($td, 'border-bottom', defaultBorder);
	            }

	            if (j === 0) {
	                this.setBorder($td, 'border-left', defaultBorder);
	            }

	            if (j === col - 1) {
	                this.setBorder($td, 'border-right', defaultBorder);
	            }

	            break;
	        case "5" :
	            if (i === 0) {
	                if (j == 0) {
	                    $td.css('background-color', '#eeeeee');
	                    $td.attr('colspan', col);
	                } else {
	                    $td.remove()
	                }
	            }

	            break;
	        case "6" :
	            if (i === 0) {
	                $td.css('background-color', '#eeeeee');
	            }

	            break;
	        case "7" :
	            var defaultBorder = { width : 1, type : 'solid', color : '#000000' };
	            var type7_border = { width : 1, type : 'none', color : '#000000' };

	            this.setBorder($td, 'border', type7_border);

	            if (i === 0) {
	                this.setBorder($td, 'border-top', defaultBorder);
	            }

	            if (i === row - 1) {
	                this.setBorder($td, 'border-bottom', defaultBorder);
	            }

	            if (j === 0) {
	                this.setBorder($td, 'border-left', defaultBorder);
	            }

	            if (j === col - 1) {
	                this.setBorder($td, 'border-right', defaultBorder);
	            }

	            break;
	        case "8" :
	            if (j === 0) {
	                $td.css('background-color', '#a6a4ff');
	            }

	            break;
	        case "9" :
	            if (i === 0) {
	                $td.css('background-color', '#eeeeee');
	            }

	            if (i === row - 1) {
	                $td.css('background-color', '#a6a4ff');
	            }

	            break;
	        case "10" :
	            if (i === 0 && j !== 0) {
	                $td.css('background-color', '#eeeeee');
	            }

	            if (i !== 0 && j === 0) {
	                $td.css('background-color', '#a6a4ff');
	            }

	            break;
	        case "11" :
	            if (j == 0) {
	                if (i == 0) {
	                    $td.css('background-color', '#eeeeee');
	                }
	                $td.attr('colspan', col);
	            } else {
	                $td.remove()
	            }

	            break;
	    }


	    // td.css(borderPostion, borderStyle.width + 'px ' + borderStyle.type + ' ' + borderStyle.color);
	};

	Table.prototype.read = function () {
	    // console.log("Table Read Method");
	};

	Table.prototype.create = function (opData) {

	    var tableSet = opData.value;

	    var $table = $('<table/>').css({
	        //Default Style
	        'word-break' : 'break-all',
	        'word-wrap' : 'break-word',
	        'border-collapse' : 'collapse',
	        'border' : '1px none #000000'
	    });
	    $table.attr('class', 'kk_table');

	    var isTemplate = !!tableSet.template;

	    this.setTableStyle($table, tableSet);

	    if (tableSet.caption !== null) {
	        $table.append($('<caption>' +  tableSet.caption + '</caption>'));
	    }

	    var width = tableSet.width;

	    var scope = tableSet.scope;
	    var headerType = tableSet.headerType;

	    var row = tableSet.row;
	    var col = tableSet.col;

	    var cellWidth = parseInt(width / col);
	    var border = tableSet.border;

	    var defaultBorder = { width : 1, type : 'solid', color : '#000000' };

	    var $tBody = $('<tbody></tbody>');

	    for(var i = 0; i < row; i++){
	        var $tr = $('<tr></tr>');
	        for (var j = 0; j < col; j++){

	            var cellNodeTag = 'td';

	            if (headerType !== 'none') {
	                if ((headerType == 'left_top' && (i == 0 || j == 0))
	                    || (headerType == 'left' && (j == 0))
	                    || (headerType == 'top' && (i == 0))
	                ) {
	                    cellNodeTag = 'th';
	                }
	            }

	            var $td = $('<' + cellNodeTag + ' style="vertical-align: middle;' + 'width:' + cellWidth + 'px;' + '">' + Define.DEFAULT_PARAGRAPH_HTML + '</' + cellNodeTag + '>');

	            if (i === 0) {
	                this.setBorder($td, 'border-top', border.top || defaultBorder);
	                this.setBorder($td, 'border-bottom', border.middle || defaultBorder);
	            }

	            if (i === row - 1) {
	                this.setBorder($td, 'border-top', border.middle || defaultBorder);
	                this.setBorder($td, 'border-bottom', border.bottom || defaultBorder);
	            }

	            if (i !== 0 && i !== row - 1) {
	                this.setBorder($td, 'border-top', border.middle || defaultBorder);
	                this.setBorder($td, 'border-bottom', border.middle || defaultBorder);
	            }

	            if (j === 0) {
	                this.setBorder($td, 'border-left', border.left || defaultBorder);
	                this.setBorder($td, 'border-right', border.center || defaultBorder);
	            }

	            if (j === col - 1) {
	                this.setBorder($td, 'border-left', border.center || defaultBorder);
	                this.setBorder($td, 'border-right', border.right || defaultBorder);
	            }

	            if (j !== 0 && j !== col - 1) {
	                this.setBorder($td, 'border-left', border.center || defaultBorder);
	                this.setBorder($td, 'border-right', border.center || defaultBorder);
	            }

	            if (cellNodeTag == 'th' && scope) {
	                if (j === 0) {
	                    $td.attr('scope', 'row');
	                } else if (i === 0) {
	                    $td.attr('scope', 'col');
	                }
	            }

	            $tr.append($td);

	            if (isTemplate) {
	                this.setTemplate($td, tableSet.template.type, row, col, i, j);
	            }
	        }
	        $tBody.append($tr);
	    }

	    $table.append($tBody);




	    $table.addClass(Define.CLASS.TABLE_MARKING);


	    var editorContentView = this.router.editorObject.editorContentView;

	    var $insertTable = null;

	    if ($.browser.chrome) {
	        var eDocument = this.router.editorObject.editorDocument;
	        var range = this.$dom.selection.getRange();

	        var startContainer = range.startContainer;
	        var $startContainer = $(startContainer);

	        var $parentTable = $startContainer.closest('table');

	        if ($parentTable.length) {
	            var $parentP = $parentTable.closest('p');

	            if ($parentP.length) {
	                if (!range.collapsed) {
	                    eDocument.execCommand( "delete", false, "" );
	                }

	                range.insertNode($table[0]);
	                range = this.$dom.selection.getRange();
	                this.$dom.selection.setSaveRange(range);
	                $insertTable = $table;

	            } else {
	                this.$dom.selection.execCommand('insertHTML', false, $table[0].outerHTML+"<p><br></p>");
	                $insertTable = editorContentView.find('.' + Define.CLASS.TABLE_MARKING);
	            }

	        } else {
	            var $listNodes = $startContainer.closest(Define.LIST_NODES.join(','));

	            if ($listNodes.length) {
	                if (!range.collapsed) {
	                    eDocument.execCommand( "delete", false, "" );
	                }

	                range.insertNode($table[0]);
	                range = this.$dom.selection.getRange();
	                this.$dom.selection.setSaveRange(range);
	                $insertTable = $table;
	            } else {
	                this.$dom.selection.execCommand('insertHTML', false, $table[0].outerHTML+"<p><br></p>");
	                $insertTable = editorContentView.find('.' + Define.CLASS.TABLE_MARKING);
	            }
	        }
	    } else {
	        this.$dom.selection.execCommand('insertHTML', false, $table[0].outerHTML+"<p><br></p>");
	        $insertTable = editorContentView.find('.' + Define.CLASS.TABLE_MARKING);
	    }


	    if ($.browser.msie) {
	        var contentParents = $insertTable.closest(Define.HEADING_NODES.join(',') + ',p');

	        if (contentParents.length) {
	            Util.splitOn(contentParents.last()[0].parentNode, $insertTable[0]);
	        }
	    }

	    $insertTable.removeClass(Define.CLASS.TABLE_MARKING);

	    var firstCell = $insertTable[0].rows[0].cells[0];

	    var firstChild = firstCell.firstChild;

	    this.$dom.selection.applyNewRange(firstChild, 0, firstChild, 0);
	};

	Table.prototype.update = function (opData) {

	    var val = opData.value;

	    if (val.isModify) {

	        var $parentTable = null;

	        var selection = this.$dom.selection;

	        var $selectedCell = selection.getSelectedTd();

	        if (!$selectedCell.length) {
	            $parentTable = selection.getSelectedNode('TABLE')
	        } else {
	            $parentTable = $selectedCell.closest('TABLE');
	        }

	        if ($parentTable.length) {
	            this.setTableUpdate($parentTable.first(), val);
	        }

	    } else {
	        var type = val.subType;

	        switch(type){

	            case "insertTop":
	                this.insertTop();
	                break;

	            case "insertBottom":
	                this.insertBottom();
	                break;

	            case "insertLeft":
	                this.insertLeft();
	                break;

	            case "insertRight":
	                this.insertRight();
	                break;

	            case "removeRow":
	                this.removeRow();
	                break;

	            case "removeCol":
	                this.removeCol();
	                break;

	            case "removeTable":
	                this.removeTable();
	                break;

	            case "mergeCell":
	                this.mergeCell();
	                break;

	            case "splitCol":
	                this.splitCol(opData);
	                break;

	            case "splitRow":
	                this.splitRow(opData);
	                break;

	            case "tableBackgroundColor":
	                this.setBackgroundColor(opData);
	                break;

	            case "tableToText" :
	                this.tableToText();
	                break;

	            case "vertical_align_top" :
	            case "vertical_align_middle" :
	            case "vertical_align_bottom" :
	            case "vertical_align_baseline" :
	                this.setVerticalAlign(type);
	                break;

	            case "calculate_horizontal_sum":
	            case "calculate_vertical_sum":
	            case "calculate_horizontal_avg":
	            case "calculate_vertical_avg":
	                this.setCalculate(type);
	                break;

	            case "cell_horizontal_size":
	            case "cell_vertical_size":
	            case "cell_both_size":
	                this.setCellSizeAdjust(type);
	                break;

	            case "cellModify" :
	               this.setCellModify(val);

	                break;
	        }
	    }
	};

	Table.prototype.setCellUpdate = function(tdNodes, value) {
	    var _this = this;
	    var $cell = $(tdNodes);

	    if (value.align !== null) {
	        $cell.css('textAlign', value.align);
	    }

	    if (value.verticalAlign !== null) {
	        $cell.css('verticalAlign', value.verticalAlign);
	    }

	    if (value.whiteSpace !== null) {
	        var whiteSpace = value.whiteSpace;
	        if (whiteSpace === 'normal') {
	            whiteSpace = '';
	        }
	        $cell.css('whiteSpace', whiteSpace);
	    }

	    if (value.headerType !== null) {
	        $cell = $cell.changeTagName(value.headerType);
	    }

	    if (value.scopeType !== null) {
	        var scopeType = value.scopeType;
	        if (scopeType === 'none') {
	            $cell.removeAttr('scope');
	        } else {
	            $cell.attr('scope', scopeType);
	        }
	    }

	    if (value.border !== null) {
	        var $table = $cell.closest('table');
	        var tableMatrix = Util.getTableMatrix($table[0]);

	        var isMultipleCell = !!$cell.length;

	        var firstCellPosition = $cell.first().cellPos();

	        var startTop = firstCellPosition.top;
	        var endTop = firstCellPosition.top;
	        var startLeft = firstCellPosition.left;
	        var endLeft = firstCellPosition.left;

	        var useNoneBorderVisualize = _this.router.options.useNoneBorderVisualize && _this.router.options.isNoneBorderVisualize;
	        var noneBorderVisualizeValue = 'on';

	        $cell.each(function(){
	            var cellPosition = $(this).cellPos();

	            if (endTop < (cellPosition.top + this.rowSpan - 1)) {
	                endTop = (cellPosition.top + this.rowSpan - 1);
	            }

	            if (endLeft < (cellPosition.left + this.colSpan - 1)) {
	                endLeft = (cellPosition.left + this.colSpan - 1);
	            }
	        });


	        $cell.each(function(idx, node){

	            var $cellNode = $(node);
	            var cellPosition = $cellNode.cellPos();

	            var $cellInfo = tableMatrix[cellPosition.top][cellPosition.left];

	            if (!$cellInfo || !$cellInfo.length) {
	                return;
	            }

	            var cellInfo = $cellInfo[0];

	            if (value.border.top) {
	                var borderString = value.border.top.width + 'px ' + value.border.top.type + ' ' + value.border.top.color;

	                //Multi Selectd Cell 일 경우 상단 Cell만 변경
	                if (!(isMultipleCell && startTop != cellPosition.top)) {
	                    $cellNode.css('border-top', borderString);

	                    $cellNode[0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_TOP);
	                    if (useNoneBorderVisualize && (value.border.top.type == 'none' || value.border.top.width == 0)) {
	                        $cellNode[0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_TOP, noneBorderVisualizeValue);
	                    }

	                    if (cellPosition.top != 0) {
	                        for (var idx = cellPosition.left, length = cellPosition.left + cellInfo.colSpan - 1; idx <= length; idx++ ) {
	                            tableMatrix[cellPosition.top - 1][idx][0].style.borderBottom = borderString;

	                            tableMatrix[cellPosition.top - 1][idx][0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_BOTTOM);
	                            if (useNoneBorderVisualize && (value.border.top.type == 'none' || value.border.top.width == 0)) {
	                                tableMatrix[cellPosition.top - 1][idx][0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_BOTTOM, noneBorderVisualizeValue);
	                            }
	                        }
	                    }
	                }
	            }

	            if (value.border.middle) {
	                var borderString = value.border.middle.width + 'px ' + value.border.middle.type + ' ' + value.border.middle.color;

	                //Multi Selectd Cell 일 경우 가로 Middle Cell만 변경
	                if (isMultipleCell) {
	                    if (startTop == cellPosition.top) {
	                        $cellNode.css('border-bottom', borderString);

	                        $cellNode[0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_BOTTOM);
	                        if (useNoneBorderVisualize && (value.border.middle.type == 'none' || value.border.middle.width == 0)) {
	                            $cellNode[0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_BOTTOM, noneBorderVisualizeValue);
	                        }

	                    } else if (endTop == (cellPosition.top + cellInfo.rowSpan - 1)){
	                        $cellNode.css('border-top', borderString);

	                        $cellNode[0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_TOP);
	                        if (useNoneBorderVisualize && (value.border.middle.type == 'none' || value.border.middle.width == 0)) {
	                            $cellNode[0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_TOP, noneBorderVisualizeValue);
	                        }

	                    } else {
	                        $cellNode[0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_TOP);
	                        if (useNoneBorderVisualize && (value.border.middle.type == 'none' || value.border.middle.width == 0)) {
	                            $cellNode[0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_TOP, noneBorderVisualizeValue);
	                        }

	                        $cellNode[0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_BOTTOM);
	                        if (useNoneBorderVisualize && (value.border.middle.type == 'none' || value.border.middle.width == 0)) {
	                            $cellNode[0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_BOTTOM, noneBorderVisualizeValue);
	                        }

	                        $cellNode.css('border-top', borderString);
	                        $cellNode.css('border-bottom', borderString);
	                    }
	                }
	            }

	            if (value.border.bottom) {
	                var borderString = value.border.bottom.width + 'px ' + value.border.bottom.type + ' ' + value.border.bottom.color;

	                //Multi Selectd Cell 일 경우 하단 Cell만 변경
	                if (!(isMultipleCell && endTop != (cellPosition.top + cellInfo.rowSpan - 1))) {
	                    $cellNode.css('border-bottom', borderString);

	                    $cellNode[0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_BOTTOM);
	                    if (useNoneBorderVisualize && (value.border.bottom.type == 'none' || value.border.bottom.width == 0)) {
	                        $cellNode[0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_BOTTOM, noneBorderVisualizeValue);
	                    }

	                    if ((cellPosition.top + cellInfo.rowSpan - 1) != tableMatrix.length - 1) {

	                        for (var idx = cellPosition.left, length = cellPosition.left + cellInfo.colSpan - 1; idx <= length; idx++ ) {
	                            tableMatrix[cellPosition.top + cellInfo.rowSpan][idx][0].style.borderTop = borderString;

	                            tableMatrix[cellPosition.top + cellInfo.rowSpan][idx][0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_TOP);
	                            if (useNoneBorderVisualize && (value.border.bottom.type == 'none' || value.border.bottom.width == 0)) {
	                                tableMatrix[cellPosition.top + cellInfo.rowSpan][idx][0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_TOP, noneBorderVisualizeValue);
	                            }
	                        }
	                    }
	                }
	            }

	            if (value.border.left) {
	                var borderString = value.border.left.width + 'px ' + value.border.left.type + ' ' + value.border.left.color;

	                //Multi Selectd Cell 일 경우 좌측 Cell만 변경
	                if (!(isMultipleCell && startLeft != cellPosition.left)) {
	                    $cellNode.css('border-left', borderString);

	                    $cellNode[0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_LEFT);
	                    if (useNoneBorderVisualize && (value.border.left.type == 'none' || value.border.left.width == 0)) {
	                        $cellNode[0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_LEFT, noneBorderVisualizeValue);
	                    }

	                    if (cellPosition.left != 0) {

	                        for (var idx = cellPosition.top, length = cellPosition.top + cellInfo.rowSpan - 1; idx <= length; idx++ ) {

	                            var targetCellInfo = tableMatrix[idx][cellPosition.left - 1][0];
	                            targetCellInfo.style.borderRight = borderString;

	                            targetCellInfo.removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_RIGHT);
	                            if (useNoneBorderVisualize && (value.border.left.type == 'none' || value.border.left.width == 0)) {
	                                targetCellInfo.setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_RIGHT, noneBorderVisualizeValue);
	                            }
	                        }
	                    }
	                }
	            }

	            if (value.border.center) {
	                var borderString = value.border.center.width + 'px ' + value.border.center.type + ' ' + value.border.center.color;

	                //Multi Selectd Cell 일 경우 Center Cell만 변경
	                if (isMultipleCell) {
	                    if (startLeft == cellPosition.left) {
	                        $cellNode.css('border-right', borderString);

	                        $cellNode[0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_RIGHT);
	                        if (useNoneBorderVisualize && (value.border.center.type == 'none' || value.border.center.width == 0)) {
	                            $cellNode[0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_RIGHT, noneBorderVisualizeValue);
	                        }

	                    } else if (endLeft  == (cellPosition.left + cellInfo.colSpan - 1)){
	                        $cellNode.css('border-left', borderString);

	                        $cellNode[0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_LEFT);
	                        if (useNoneBorderVisualize && (value.border.center.type == 'none' || value.border.center.width == 0)) {
	                            $cellNode[0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_LEFT, noneBorderVisualizeValue);
	                        }

	                    } else {

	                        $cellNode[0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_LEFT);
	                        if (useNoneBorderVisualize && (value.border.center.type == 'none' || value.border.center.width == 0)) {
	                            $cellNode[0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_LEFT, noneBorderVisualizeValue);
	                        }

	                        $cellNode[0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_RIGHT);
	                        if (useNoneBorderVisualize && (value.border.center.type == 'none' || value.border.center.width == 0)) {
	                            $cellNode[0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_RIGHT, noneBorderVisualizeValue);
	                        }

	                        $cellNode.css('border-left', borderString);
	                        $cellNode.css('border-right', borderString);
	                    }
	                }
	            }

	            if (value.border.right) {
	                var borderString = value.border.right.width + 'px ' + value.border.right.type + ' ' + value.border.right.color;

	                //Multi Selectd Cell 일 경우 우측 Cell만 변경
	                if (!(isMultipleCell && endLeft != (cellPosition.left + cellInfo.colSpan - 1))) {
	                    $cellNode.css('border-right', borderString);

	                    $cellNode[0].removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_RIGHT);
	                    if (useNoneBorderVisualize && (value.border.right.type == 'none' || value.border.right.width == 0)) {
	                        $cellNode[0].setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_RIGHT, noneBorderVisualizeValue);
	                    }

	                    if ((cellPosition.left + cellInfo.colSpan - 1) != tableMatrix[0].length - 1) {

	                        for (var idx = cellPosition.top, length = cellPosition.top + cellInfo.rowSpan - 1; idx <= length; idx++ ) {
	                            var targetCellInfo = tableMatrix[idx][cellPosition.left + cellInfo.colSpan][0];
	                            targetCellInfo.style.borderLeft = borderString;

	                            targetCellInfo.removeAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_LEFT);
	                            if (useNoneBorderVisualize && (value.border.right.type == 'none' || value.border.right.width == 0)) {
	                                targetCellInfo.setAttribute(Define.ATTR.KK_NONE_BORDER_VISUALIZE_LEFT, noneBorderVisualizeValue);
	                            }
	                        }
	                    }
	                }
	            }
	        });
	    }

	    if (value.image !== null) {
	        if (value.image) {
	            $cell.css('background-image', 'url(' + value.image + ')');
	        } else {
	            $cell.css('background-image', 'none');
	        }
	    }

	    if (value.attachment !== null) {
	        $cell.css('background-attachment', value.attachment);
	    }

	    if (value.repeat !== null) {
	        $cell.css('background-repeat', value.repeat);
	    }

	    if (value.positionX !== null) {
	        $cell.css('background-position-x', (value.positionX || 0) + 'px');
	    }

	    if (value.positionY !== null) {
	        $cell.css('background-position-y', (value.positionY || 0) + 'px' );
	    }

	    if (value.backgroundColor !== null) {
	        $cell.css('background-color', value.backgroundColor);
	    }
	};

	Table.prototype.setTableUpdate = function(table, tableSet){
	    var $table = $(table).css({
	        //Default Style
	        'word-break' : 'break-all',
	        'word-wrap' : 'break-word'
	    });

	    this.setTableStyle($table, tableSet);

	    if (tableSet.caption !== null) {
	        if ($table[0].caption) {
	            $table[0].caption.innerHTML = tableSet.caption;
	        } else {
	            $table.prepend($('<caption>' +  tableSet.caption + '</caption>'));
	        }
	    }

	    var scope = tableSet.scope;
	    var headerType = tableSet.headerType;

	    var row = tableSet.row;
	    var col = tableSet.col;

	    var border = tableSet.border;

	    if (border){
	        var cellUpdateObj = {
	            align : null,
	            verticalAlign : null,
	            whiteSpace : null,
	            headerType : null,
	            scopeType : null,
	            image : null,
	            attachment : null,
	            repeat : null,
	            positionX : null,
	            positionY : null,
	            backgroundColor : null,
	            border : border
	        };

	        var borderTargetNodes = [];

	        for(var i = 0; i < row; i++){
	            var $tr = $($table[0].rows[i]);

	            for (var j = 0; j < col; j++){

	                if ($tr[0].cells[j]){
	                    var $td = $($tr[0].cells[j]);

	                    var cellType = '';

	                    if (headerType !== null) {
	                        if ((headerType == 'left_top' && (i == 0 || j == 0))
	                            || (headerType == 'left' && (j == 0))
	                            || (headerType == 'top' && (i == 0))
	                        ) {
	                            cellType = 'th';
	                        } else {
	                            cellType = 'td';
	                        }

	                        if (cellType !== $td[0].nodeName.toLowerCase()) {
	                            $td = $td.changeTagName(cellType);
	                        }
	                    }

	                    if (scope !== null){
	                        if (cellType === 'th' && scope) {
	                            if (j === 0) {
	                                $td.attr('scope', 'row');
	                            } else if (i === 0) {
	                                $td.attr('scope', 'col');
	                            }
	                        } else {
	                            $td.removeAttr('scope');
	                        }
	                    }

	                    if (tableSet.backgroundColor !== null) {
	                        $td.css('background-color', tableSet.backgroundColor);
	                    }

	                    borderTargetNodes.push($td[0]);
	                }
	            }
	        }

	        if (borderTargetNodes.length) {
	            this.setCellUpdate(borderTargetNodes, cellUpdateObj);
	        }

	    }
	};







	Table.prototype.setCellModify = function(val) {
	    var $tdNodes = this.$dom.selection.getSelectedTd();

	    if (!$tdNodes.length) {
	        $tdNodes = this.$dom.selection.getSelectedNode(Define.CELL_TYPE.join(','));
	    }

	    this.setCellUpdate($tdNodes, val);
	};

	Table.prototype.setVerticalAlign = function(type) {
	    var verticalAlignType = type.replace('vertical_align_', '');

	    var $tdNodes = this.$dom.selection.getSelectedTd();

	    if (!$tdNodes.length) {
	        $tdNodes = this.$dom.selection.getSelectedNode(Define.CELL_TYPE.join(','));
	    }

	    var $childNodes = $tdNodes.find(Define.CELL_TYPE.join(','));

	    $tdNodes.css('vertical-align', verticalAlignType);
	    $childNodes.css('vertical-align', verticalAlignType);
	};

	Table.prototype.setCalculate = function(type) {

	    var $tdNodes = this.$dom.selection.getSelectedTd();

	    if (!$tdNodes.length) {
	        $tdNodes = this.$dom.selection.getSelectedNode(Define.CELL_TYPE.join(','));
	    }

	    if (!$tdNodes.length) {
	        return;
	    }

	    var calcValue = 0;

	    if (type == 'calculate_horizontal_sum' || type == 'calculate_horizontal_avg') {
	        var $prevAllNodes = $tdNodes.prevAll(Define.CELL_TYPE.join(','));

	        if ($prevAllNodes.length) {
	            var avgCount = 0;

	            var isFormat = false;

	            $prevAllNodes.each(function(){
	                var textContent = this.textContent;

	                var indexComma = textContent.indexOf(',');

	                if (indexComma > -1) {
	                    textContent = textContent.split(',').join('');
	                    isFormat = true;
	                }

	                if (textContent) {
	                    var value = textContent * 1;

	                    if (!isNaN(value)) {
	                        avgCount++;
	                        calcValue += value;
	                    }
	                }
	            });

	            if (type == 'calculate_horizontal_avg') {
	                if (calcValue) {
	                    calcValue = calcValue / avgCount;
	                }
	            }

	            if (isFormat && calcValue) {
	                var reg = /(^[+-]?\d+)(\d{3})/;
	                var n = (calcValue + '');

	                while (reg.test(n)) n = n.replace(reg, '$1' + ',' + '$2');

	                calcValue = n;
	            }
	        }

	    } else if (type == 'calculate_vertical_sum' || type == 'calculate_vertical_avg') {
	        var avgCount = 0;

	        var $tableNode = $tdNodes.closest('TABLE');
	        var rows = $tableNode[0].rows;
	        var cellPos = $tdNodes.cellPos(true);

	        var leftPosition = cellPos.left;
	        var topPosition = cellPos.top;

	        for (var trIdx = 0, trLength = topPosition; trIdx < trLength; trIdx++) {
	            var row = rows[trIdx];

	            var cells = row.cells;

	            for (var cellIdx = 0, cellLength = cells.length; cellIdx < cellLength; cellIdx++) {
	                var targetCell = cells[cellIdx];
	                var $targetCell = $(targetCell);
	                var targetCellPos = $targetCell.cellPos();

	                if (targetCellPos.left == leftPosition || targetCellPos.left + (targetCell.colSpan - 1) == leftPosition) {
	                    var textContent = targetCell.textContent;

	                    var indexComma = textContent.indexOf(',');

	                    if (indexComma > -1) {
	                        textContent = textContent.split(',').join('');
	                        isFormat = true;
	                    }

	                    if (textContent) {

	                        var value = textContent * 1;

	                        if (!isNaN(value)) {
	                            avgCount++;
	                            calcValue += value;
	                        }
	                    }
	                }
	            }
	        }

	        if (type == 'calculate_vertical_avg') {
	            if (calcValue) {
	                calcValue = calcValue / avgCount;
	            }
	        }

	        if (isFormat && calcValue) {
	            var reg = /(^[+-]?\d+)(\d{3})/;
	            var n = (calcValue + '');

	            while (reg.test(n)) n = n.replace(reg, '$1' + ',' + '$2');

	            calcValue = n;
	        }
	    }

	    $tdNodes[0].innerHTML = '<p><span>' + calcValue + '</span></p>';
	};

	Table.prototype.setCellSizeAdjust = function(type) {
	    var $selectedCells = this.$dom.selection.getSelectedTd();

	    if ($selectedCells.length) {
	        var totalWidth = 0;
	        var totalHeight = 0;

	        var $first = $selectedCells.first();
	        var $table = $first.closest('TABLE');

	        var rows = $table[0].rows;

	        var rowSizeInfo = [];

	        var firstCellPosition = $first.cellPos();

	        var startTop = firstCellPosition.top;
	        var endTop = firstCellPosition.top;
	        var startLeft = firstCellPosition.left;
	        var endLeft = firstCellPosition.left;

	        $selectedCells.each(function () {
	            var cellPosition = $(this).cellPos();

	            if (endTop < (cellPosition.top + this.rowSpan - 1)) {
	                endTop = (cellPosition.top + this.rowSpan - 1);
	            }

	            if (endLeft < (cellPosition.left + this.colSpan - 1)) {
	                endLeft = (cellPosition.left + this.colSpan - 1);
	            }
	        });

	        $(rows).each(function(){
	            var cells = this.cells;
	            var cellSizeInfo = [];
	            $(cells).each(function(){
	                var $this = $(this);

	                var cellPos = $this.cellPos();

	                var width = this.offsetWidth - parseInt($this.css('padding-left')) - parseInt($this.css('padding-right')) - parseInt($this.css('border-left-width')) - ($.browser.msie ? 1 : 0);
	                var height = this.offsetHeight - ($.browser.msie ? 1 : 0);

	                var cellInfo = {
	                    cell : $this,
	                    width : width,
	                    height : height
	                };

	                cellSizeInfo.push(cellInfo);

	                if (startLeft <= cellPos.left && (cellPos.left + this.colSpan - 1) <= endLeft && cellPos.top == startTop) {
	                    totalWidth += width;
	                }

	                if (startTop <= cellPos.top && (cellPos.top + this.rowSpan - 1) <= endTop && cellPos.left == startLeft) {
	                    totalHeight += height;
	                }
	            });

	            rowSizeInfo.push(cellSizeInfo);
	        });

	        var countLeftTD = endLeft - startLeft + 1;
	        var countTopTR = endTop - startTop + 1;

	        var changeWidth = parseInt(totalWidth / countLeftTD);
	        var changeHeight = parseInt(totalHeight / countTopTR);

	        var changeHeightNodes = [];
	        var changeWidthNodes = [];

	        for (var rowIdx = 0, rowLength = rowSizeInfo.length; rowIdx < rowLength; rowIdx++) {
	            var cellInfoList = rowSizeInfo[rowIdx];

	            for (var colIdx = 0, colLength = cellInfoList.length; colIdx < colLength; colIdx++) {
	                var cellInfo = cellInfoList[colIdx];

	                var cell = cellInfo.cell;
	                var cellPos = cell.cellPos();

	                if (type == "cell_horizontal_size" || type == "cell_both_size") {
	                    if (startLeft != endLeft) {
	                        if (changeWidth && (cellPos.left >= startLeft && (cellPos.left + cell[0].colSpan - 1) <= endLeft)) {
	                            var cellWidth = changeWidth * cell[0].colSpan;

	                            cell.css("width", cellWidth + "px");
	                            cell.attr("width", cellWidth);

	                            changeWidthNodes.push(cell);
	                        }
	                    }
	                }

	                if (type == "cell_vertical_size" || type == "cell_both_size") {
	                    if (startTop != endTop) {
	                        if (changeHeight && (cellPos.top >= startTop && (cellPos.top + cell[0].rowSpan - 1) <= endTop)) {
	                            var cellHeight = changeHeight * cell[0].rowSpan;

	                            cell.css("height", cellHeight + "px");
	                            cell.attr("height", cellHeight);

	                            changeHeightNodes.push(cell);
	                        }
	                    }
	                }
	            }
	        }

	        if (changeHeightNodes.length) {
	            var maxHeight = 0;

	            for (var idx = 0, length = changeHeightNodes.length; idx < length ; idx++) {
	                var changeHeightCellNode = changeHeightNodes[idx];

	                var currentHeight = changeHeightCellNode[0].offsetHeight / changeHeightCellNode[0].rowSpan;

	                if (maxHeight < currentHeight) {
	                    maxHeight = currentHeight;
	                }
	            }

	            if (maxHeight > changeHeight + 2) {
	                for (var idx = 0, length = changeHeightNodes.length; idx < length ; idx++) {
	                    var changeHeightCellNode = changeHeightNodes[idx];

	                    var cellHeight = maxHeight * changeHeightCellNode[0].rowSpan;

	                    changeHeightCellNode.css("height", cellHeight + "px");
	                    changeHeightCellNode.attr("height", cellHeight);
	                }
	            }
	        }
	    }
	};

	Table.prototype.insertTop = function(){
	    var $cellNode = this.$dom.selection.getCurrentCell();

	    if ($cellNode.length) {
	        var cellPos = $cellNode.cellPos(true);

	        var $table = $cellNode.closest('table');

	        var rows = $table[0].rows;
	        var parentTrNode = rows[cellPos.top];
	        var $parentTrNode = $(parentTrNode);

	        var height = $parentTrNode.height();

	        var cloneTrNode = parentTrNode.cloneNode(true);
	        var $cloneTrNode = $(cloneTrNode);

	        var $cloneCellNodes = $cloneTrNode.find(Define.CELL_TYPE.join(','));
	        $cloneCellNodes.html(Define.DEFAULT_PARAGRAPH_HTML);
	        $cloneCellNodes.removeAttr('rowspan');
	        $cloneCellNodes.css('height', height + 'px');
	        $cloneCellNodes.attr('height', height);

	        //Merge된 TD에 Rowspan을 증가
	        var $rows = $($table[0].rows);

	        $rows.each(function(rowIndex, rowNode){
	            var $cells = $(rowNode.cells);

	            $cells.each(function(cellIndex, cellNode){
	                var cellPosition = $(cellNode).cellPos();
	                var maxRowIndex = cellNode.rowSpan - 1;

	                if (cellPosition.top < cellPos.top && cellPos.top <= (cellPosition.top + maxRowIndex)) {
	                    cellNode.rowSpan = cellNode.rowSpan + 1;
	                }
	            });
	        });

	        var tableHeight = $table.height() + height;

	        $parentTrNode.before($cloneTrNode);

	        $table.css('height', tableHeight + 'px').attr('height', tableHeight);
	    }
	};

	Table.prototype.insertBottom = function(isSplit){
	    var $cellNode = this.$dom.selection.getCurrentCell();

	    if ($cellNode.length) {
	        var cellPos = $cellNode.cellPos(true);
	        var top = cellPos.top + ($cellNode[0].rowSpan - 1);

	        var $table = $cellNode.closest('table');

	        var rows = $table[0].rows;
	        var parentTrNode = rows[top];
	        var $parentTrNode = $(parentTrNode);

	        var height = $parentTrNode.height();

	        var cloneTrNode = parentTrNode.cloneNode(false);
	        var $cloneTrNode = $(cloneTrNode);

	        //Merge된 TD에 Rowspan을 증가
	        var $rows = $($table[0].rows);
	        var tdNodes = [];

	        $rows.each(function(rowIndex, rowNode){
	            var $cells = $(rowNode.cells);

	            $cells.each(function(cellIndex, cellNode){
	                var $cell = $(cellNode);
	                var cellPosition = $cell.cellPos();
	                var maxRowIndex = cellNode.rowSpan - 1;

	                if ((cellPosition.top == top && top == (cellPosition.top + maxRowIndex))
	                    || (cellPosition.top <= top && top == (cellPosition.top + maxRowIndex))
	                ) {
	                    var cloneCell = null;
	                    var $cloneCell = null;

	                    if (isSplit) {
	                        if (cellNode == $cellNode[0]) {
	                            $cellNode.css('height', height / 2 + "px");
	                            $cellNode.attr('height', height / 2);

	                            cloneCell = cellNode.cloneNode(false);
	                            $cloneCell = $(cloneCell);

	                            $cloneCell.html(Define.DEFAULT_PARAGRAPH_HTML);
	                            $cloneCell.removeAttr('rowspan');

	                            tdNodes[cellPosition.left] = $cloneCell;
	                        } else {
	                            cellNode.rowSpan = cellNode.rowSpan + 1;
	                        }
	                    } else {
	                        cloneCell = cellNode.cloneNode(false);
	                        $cloneCell = $(cloneCell);

	                        $cloneCell.html(Define.DEFAULT_PARAGRAPH_HTML);
	                        $cloneCell.removeAttr('rowspan');

	                        $cloneCell.css('height', height + 'px');
	                        $cloneCell.attr('height', height);

	                        tdNodes[cellPosition.left] = $cloneCell;
	                    }

	                } else if (cellPosition.top <= top && top <= (cellPosition.top + maxRowIndex)) {
	                    cellNode.rowSpan = cellNode.rowSpan + 1;
	                }
	            });
	        });

	        if (isSplit) {
	            $cloneTrNode.append(tdNodes);
	            $parentTrNode.after($cloneTrNode);

	        } else {
	            var tableHeight = $table.height() + height;

	            $cloneTrNode.append(tdNodes);
	            $parentTrNode.after($cloneTrNode);

	            $table.css('height', tableHeight + 'px').attr('height', tableHeight);
	        }
	    }
	};

	Table.prototype.insertLeft = function(isSplit){
	    this.insertColumns('left', isSplit);
	};

	Table.prototype.insertRight = function(isSplit){
	    this.insertColumns('right', isSplit);
	};

	Table.prototype.insertColumns = function(type, isSplit) {
	    var $currentNode = this.$dom.selection.getCurrentCell();

	    if ($currentNode.length) {
	        var insertPositionFnName = (type === 'right' ? 'after' : 'before');

	        var $tableNode = $currentNode.closest('TABLE');
	        var rows = $tableNode[0].rows;

	        var cellPos = $currentNode.cellPos(true);

	        var leftPosition = cellPos.left;

	        if (type === 'right') {
	            leftPosition += $currentNode[0].colSpan - 1;
	        }

	        var width = 0;
	        var cloneCells = [];

	        var tableWidth = $tableNode.width();
	        var cellWidth = $.browser.msie ? $currentNode.width() : $currentNode[0].clientWidth - parseInt($currentNode[0].style.borderLeftWidth) - parseInt($currentNode[0].style.borderRightWidth);

	        for (var trIdx = 0, trLength = rows.length; trIdx < trLength; trIdx++) {
	            var row = rows[trIdx];

	            var cells = row.cells;

	            for (var cellIdx = 0, cellLength = cells.length; cellIdx < cellLength; cellIdx++) {
	                var targetCell = cells[cellIdx];
	                var $targetCell = $(targetCell);
	                var targetCellPos = $targetCell.cellPos();

	                if (targetCellPos.left == leftPosition || targetCellPos.left + (targetCell.colSpan - 1) == leftPosition) {
	                    if ((type === 'right' && targetCellPos.left == leftPosition && targetCellPos.left + (targetCell.colSpan - 1) > leftPosition)
	                        || (type === 'left' && targetCellPos.left < leftPosition && targetCellPos.left + (targetCell.colSpan - 1) == leftPosition)
	                    ) {
	                        $targetCell.attr('colspan', targetCell.colSpan + 1);
	                    } else {

	                        if (isSplit) {
	                            if ($targetCell[0] == $currentNode[0]) {

	                                var newCellWidth = parseInt(cellWidth / 2);

	                                $targetCell.css('width', newCellWidth + "px");
	                                $targetCell.attr('width', newCellWidth);

	                                var $cloneCell = $targetCell.clone();
	                                $cloneCell.html(Define.DEFAULT_PARAGRAPH_HTML);
	                                $cloneCell.attr('colspan', '');
	                                $targetCell[insertPositionFnName]($cloneCell);

	                            } else {
	                                $targetCell[0].colSpan = $targetCell[0].colSpan + 1;
	                            }
	                        } else {
	                            cellWidth = $targetCell.width();

	                            if (width < cellWidth) {
	                                width = cellWidth;
	                            }

	                            var $cloneCell = $targetCell.clone();
	                            $cloneCell.html(Define.DEFAULT_PARAGRAPH_HTML);
	                            $cloneCell.attr('colspan', '');
	                            $targetCell[insertPositionFnName]($cloneCell);

	                            cloneCells.push($cloneCell[0]);
	                        }
	                    }

	                    break;
	                } else if (targetCellPos.left < leftPosition && targetCellPos.left + (targetCell.colSpan - 1) > leftPosition) {
	                    $targetCell.attr('colspan', targetCell.colSpan + 1);
	                }
	            }
	        }

	        if (!isSplit) {
	            $(cloneCells).css('width', width + 'px').attr('width', width);
	            $tableNode.css('width', (tableWidth + width) + 'px').attr('width', (tableWidth + width));
	        }
	    }
	};

	Table.prototype.removeCol = function(){

	    var $cellNode = this.$dom.selection.getCurrentCell();

	    if ($cellNode.length) {
	        var $nextCellNode = $cellNode.next();
	        var $prevCellNode = $cellNode.prev();

	        var cellPos = $cellNode.cellPos(true);

	        var $table = $cellNode.closest('table');

	        var $rows = $($table[0].rows);

	        var tableWidth = $table.width();

	        var cellWidth = 0;

	        var singleRow = [];

	        $rows.each(function(rowIndex, rowNode){
	            var $row = $(rowNode);
	            var $cells = $(rowNode.cells);

	            $cells.each(function(cellIndex, cellNode){
	                var $cellNode = $(cellNode);
	                var cellPosition = $cellNode.cellPos();
	                var maxColIndex = cellNode.colSpan - 1;

	                if (cellPosition.left == cellPos.left && cellPos.left == (cellPosition.left + maxColIndex)) {
	                    var targetCellWidth = $cellNode.width();

	                    if (cellWidth < targetCellWidth) {
	                        cellWidth = targetCellWidth;
	                    }

	                    $cellNode.remove();
	                } else if (cellPosition.left == cellPos.left && cellPos.left < (cellPosition.left + maxColIndex)) {
	                    cellNode.colSpan = cellNode.colSpan - 1;
	                } else if (cellPosition.left < cellPos.left && cellPos.left <= (cellPosition.left + maxColIndex)) {
	                    cellNode.colSpan = cellNode.colSpan - 1;
	                }
	            });

	            if (!$row[0].cells.length) {
	                singleRow.push($row[0]);
	            }
	        });

	        if (singleRow.length) {
	            $rows = $($table[0].rows);

	            for (var i = 0, length = singleRow.length ; i < length; i++) {
	                var row = singleRow[i];

	                var removeRowIndex = row.rowIndex;

	                $rows.each(function(rowIndex, rowNode){
	                    var $cells = $(rowNode.cells);

	                    $cells.each(function(cellIndex, cellNode){
	                        var $cellNode = $(cellNode);
	                        var cellPosition = $cellNode.cellPos();
	                        var maxRowIndex = cellNode.rowSpan - 1;

	                        if (cellPosition.top < removeRowIndex && removeRowIndex <= (cellPosition.top + maxRowIndex)) {
	                            cellNode.rowSpan = cellNode.rowSpan - 1;
	                        }
	                    });
	                });
	            }

	            $(singleRow).remove();
	        }

	        if ($table[0].rows.length) {
	            $table.css({
	                width : tableWidth - cellWidth + 'px'
	            }).attr({
	                width : tableWidth - cellWidth
	            });

	            if ($cellNode[0].cellIndex > 0) {
	                this.$dom.selection.applyNewRange($cellNode[0], 0, $cellNode[0], 0);
	            } else {
	                if ($nextCellNode.length) {
	                    this.$dom.selection.applyNewRange($nextCellNode[0], 0, $nextCellNode[0], 0);
	                } else if ($prevCellNode.length) {
	                    this.$dom.selection.applyNewRange($prevCellNode[0], 0, $prevCellNode[0], 0);
	                }
	            }
	        } else {
	            $table.remove();
	        }
	    }
	};

	Table.prototype.removeRow = function(){
	    var $cellNode = this.$dom.selection.getCurrentCell();

	    if ($cellNode.length) {
	        var cellPos = $cellNode.cellPos(true);

	        var $table = $cellNode.closest('table');

	        var rows = $table[0].rows;
	        var parentTrNode = rows[cellPos.top];

	        //Merge된 TD에 Rowspan을 감소
	        var $rows = $($table[0].rows);

	        var nextTrNode = rows[cellPos.top + 1];

	        var nextTdNodes = [];

	        $rows.each(function(rowIndex, rowNode){
	            var $cells = $(rowNode.cells);

	            $cells.each(function(cellIndex, cellNode){
	                var cellPosition = $(cellNode).cellPos();
	                var maxRowIndex = cellNode.rowSpan - 1;

	                if (cellPosition.top == cellPos.top && cellPos.top < (cellPosition.top + maxRowIndex)) {
	                    cellNode.rowSpan = cellNode.rowSpan - 1;
	                    nextTdNodes[cellPosition.left] = cellNode;
	                } else if (cellPosition.top < cellPos.top && cellPos.top <= (cellPosition.top + maxRowIndex)) {
	                    cellNode.rowSpan = cellNode.rowSpan - 1;
	                }
	            });
	        });

	        if (nextTrNode) {
	            var nextCells = $(nextTrNode.cells);

	            nextCells.each(function(cellIndex, cellNode){
	                var cellPosition = $(cellNode).cellPos();

	                nextTdNodes[cellPosition.left] = cellNode;
	            });

	            $(nextTrNode).append(nextTdNodes);
	        }

	        var $parentNode = $(parentTrNode);
	        var trHeight = $parentNode.height();

	        var tableHeight = $table.height() - trHeight;

	        $table[0].deleteRow(cellPos.top);
	        $table.css('height', tableHeight + 'px').attr('height', tableHeight);

	        if ($table[0].rows.length) {
	            var positionTr = $table[0].rows[cellPos.top];
	            if (!positionTr) {
	                positionTr = $table[0].rows[cellPos.top - 1];
	            }

	            var firstCell = positionTr.cells[0];

	            this.$dom.selection.applyNewRange(firstCell, 0, firstCell, 0);
	        } else {
	            $table.remove();
	        }
	    }
	};

	Table.prototype.removeTable = function(){
	    var range = this.$dom.selection.getRange();

	    var startContainer = range.startContainer;
	    var $startContainer = $(startContainer);

	    var $tableNode = $startContainer.closest('table');

	    if ($tableNode.length) {
	        var newRange = this.$dom.selection.createRange();

	        try {
	            newRange.selectNode($tableNode[0]);
	        } catch (e) {
	            newRange.selectNodeContents($tableNode[0]);
	        }

	        this.$dom.selection.setRange(newRange);
	        this.$dom.selection.execCommand('delete', false, null);
	    }
	};

	Table.prototype.splitRow = function(){

	    var $cellNode = this.$dom.selection.getCurrentCell();

	    if ($cellNode.length) {
	        var targetRowSpan = $cellNode[0].rowSpan;
	        if (targetRowSpan > 1) {
	            var cellPos = $cellNode.cellPos(true);
	            var $table = $cellNode.closest('table');
	            var $trNode = $cellNode.closest('tr');

	            var rowIndex = $trNode[0].rowIndex;

	            var rows = $table[0].rows;

	            var nextRow = rows[rowIndex + 1];

	            var rowHeight = $trNode.height();

	            var tdNodes = [];

	            var $nextRowCells = $(nextRow.cells);

	            $nextRowCells.each(function(cellIndex, cellNode){
	                var $cell = $(cellNode);
	                var cellPosition = $cell.cellPos();

	                tdNodes[cellPosition.left] = cellNode;
	            });

	            var cellHeight = $cellNode.height() - rowHeight;
	            $cellNode.css('height', rowHeight + 'px').attr('height', rowHeight);
	            $cellNode[0].rowSpan = 1;

	            var cloneCell = $cellNode[0].cloneNode(false);
	            var $cloneCell = $(cloneCell);

	            $cloneCell.html(Define.DEFAULT_PARAGRAPH_HTML);
	            $cloneCell[0].rowSpan = targetRowSpan - 1;
	            $cloneCell.css('height', cellHeight + 'px').attr('height', cellHeight);

	            tdNodes[cellPos.left] = $cloneCell;

	            $(nextRow).append(tdNodes);

	        } else {
	            this.insertBottom(true);
	        }
	    }
	};

	Table.prototype.splitCol = function () {

	    var $cellNode = this.$dom.selection.getCurrentCell();

	    if ($cellNode.length) {
	        var targetColSpan = $cellNode[0].colSpan;

	        if (targetColSpan > 1) {
	            var cellWidth = $.browser.msie ? $cellNode.width() : $cellNode[0].clientWidth - parseInt($cellNode[0].style.borderLeftWidth) - parseInt($cellNode[0].style.borderRightWidth);

	            $cellNode[0].colSpan = 1;
	            $cellNode.css('width', '').attr('width', '');

	            var currentWidth = $.browser.msie ? $cellNode.width() : $cellNode[0].clientWidth - parseInt($cellNode[0].style.borderLeftWidth) - parseInt($cellNode[0].style.borderRightWidth);

	            $cellNode.css('width', currentWidth + 'px').attr('width', currentWidth);

	            var cloneCell = $cellNode[0].cloneNode(false);
	            var $cloneCell = $(cloneCell);

	            $cloneCell.html(Define.DEFAULT_PARAGRAPH_HTML);
	            $cloneCell[0].colSpan = targetColSpan - 1;
	            $cloneCell.css('width', cellWidth - currentWidth + 'px').attr('width', cellWidth - currentWidth);

	            $cellNode.after($cloneCell);
	        } else {
	            this.insertRight(true);
	        }
	    }
	};

	Table.prototype.setBackgroundColor = function(opData){
	    var selection = this.$dom.selection;

	    var tableSelectedNodes = selection.getSelectedTd();
	    var color = opData.value.color;

	    if (!tableSelectedNodes.length) {
	        tableSelectedNodes = selection.getSelectedNode(Define.CELL_TYPE);
	    }

	    if (color){
	        tableSelectedNodes.css('backgroundColor', color);
	    }
	};

	Table.prototype.mergeCell = function(){
	    var $selectedTdNodes = this.$dom.selection.getSelectedTd();

	    $selectedTdNodes.removeAttr(Define.ATTR.KK_SELECTED_TD);

	    if ($selectedTdNodes.length) {

	        var $table = $selectedTdNodes.first().closest('table');

	        var childNodesHTML = '';

	        var startLeft = 0;
	        var startTop = 0;
	        var maxLeft = 0;
	        var maxTop = 0;

	        for (var tdIdx = 0, tdLength = $selectedTdNodes.length; tdIdx < tdLength; tdIdx++){
	            var $tdNode = $selectedTdNodes.eq(tdIdx);

	            var tdCellPos = null;

	            if (tdIdx == 0) {
	                tdCellPos = $tdNode.cellPos(true);
	                maxLeft = startLeft = tdCellPos.left;
	                maxTop = startTop = tdCellPos.top;
	            } else {
	                tdCellPos = $tdNode.cellPos();
	            }

	            var cellPositionLeft = tdCellPos.left + $tdNode[0].colSpan - 1;
	            var cellPositionTop = tdCellPos.top + $tdNode[0].rowSpan - 1;

	            if (cellPositionLeft > maxLeft) {
	                maxLeft = cellPositionLeft;
	            }

	            if (cellPositionTop > maxTop) {
	                maxTop = cellPositionTop;
	            }

	            if ($tdNode[0].childNodes.length == 1) {
	                var firstChild = $tdNode[0].childNodes[0];

	                if (Util.isCheckParagraphEmpty(firstChild, true)) {
	                    continue;
	                }
	            }

	            childNodesHTML += $tdNode.html();
	        }

	        var colspan = maxLeft - startLeft + 1;
	        var rowspan = maxTop - startTop + 1;

	        var $firstTd = $selectedTdNodes.first();
	        var nextSiblingNode = $firstTd.nextAll('[' + Define.ATTR.KK_SELECTED_TD + ']');

	        var width = $firstTd[0].clientWidth + (parseInt($firstTd.css('border-left-width')) || 1) + (parseInt($firstTd.css('border-right-width')) || 1);

	        nextSiblingNode.each(function(){
	            var $cell = $(this);
	            width += $cell[0].clientWidth + (parseInt($cell.css('border-left-width')) || 1);
	        });

	        $firstTd.width(width);
	        $firstTd.attr('width', width);

	        if (childNodesHTML){
	            $firstTd.html(childNodesHTML);
	        }

	        $firstTd.attr('rowspan', rowspan);
	        $firstTd.attr('colspan', colspan);

	        var $rows = $selectedTdNodes.parent();
	        $selectedTdNodes.not($firstTd).remove();

	        if (startTop == 0 && rowspan == $table[0].rows.length) {
	            $firstTd.attr('colspan', '');
	        }

	        if (startLeft == 0 && !$firstTd.next().length) {
	            $firstTd.attr('rowspan', '');

	            $rows.each(function(){
	                if (this.cells.length == 0) {
	                    $(this).remove();
	                }
	            });
	        }

	        var node = Util.getFirstChildNode($selectedTdNodes[0]);
	        var selection = this.$dom.selection;
	        var newRange = selection.createRange();

	        if ($.inArray(node.nodeName, Define.SINGLE_NODES) != -1) {
	            newRange.setStartBefore(node);
	            newRange.setEndBefore(node);
	        } else {
	            newRange.setStart(node, 0);
	            newRange.setEnd(node, 0);
	        }

	        selection.setRange(newRange);
	        selection.setSaveRange(newRange);
	    }
	};

	Table.prototype.tableToText = function(){
	    var range = this.$dom.selection.getRange();

	    var startContainer = range.startContainer;
	    var $startContainer = $(startContainer);

	    var $tableNode = $startContainer.closest('table');

	    if ($tableNode.length) {
	        var tableToString = $tableNode.text();

	        var newRange = this.$dom.selection.createRange();

	        try {
	            newRange.selectNode($tableNode[0]);
	        } catch (e) {
	            newRange.selectNodeContents($tableNode[0]);
	        }

	        this.$dom.selection.setRange(newRange);
	        this.$dom.selection.execCommand('delete', false, null);
	        this.$dom.selection.execCommand('insertText', false, tableToString);
	    }
	};



	module.exports = Table;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(20);

	function Symbol (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Symbol.prototype, new AbstractModule());

	Symbol.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Symbol.prototype.create = function (opData) {
	    var textValue = opData.value;

	    var selection = this.$dom.selection;

	    selection.execCommand('insertText', false, textValue);

	    return null;
	};

	Symbol.prototype.update = function () {};

	Symbol.prototype.read = function () {};

	module.exports = Symbol;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(20);
	var Define = __webpack_require__(3);

	function FindReplace(editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(FindReplace.prototype, new AbstractModule());

	FindReplace.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	    this.editorContentView = this.router.editorObject.editorContentView;

	    if ($.browser.msie) {
	        var eDocument = this.router.editorObject.editorDocument;
	        this.findRange = eDocument.body.createTextRange();
	    }
	};

	FindReplace.prototype.create = function () {};

	FindReplace.prototype.update = function () {};

	FindReplace.prototype.read = function () {};

	FindReplace.prototype.execute = function (executeData) {
	    if (executeData.type == "find") {
	        this.doFind(executeData);
	    } else if (executeData.type == "replace") {
	        this.doReplace(executeData);

	    } else if (executeData.type == "replaceAll") {
	        this.doReplaceAll(executeData);
	    }
	};

	FindReplace.prototype.getArgsForIE = function(directionDown, caseSensitive, wholeWord) {
	    var isCaseSensitive = (caseSensitive) ? 4 : 0;
	    var isWholeWord = (wholeWord) ? 2 : 0;
	    var isBackwards = (directionDown) ? 1 : 0;

	    return isCaseSensitive ^ isWholeWord ^ isBackwards;
	};

	FindReplace.prototype.findExecute = function(executeData, isNotSelection) {
	    this.editorContentView[0].normalize();
	    this.editorContentView.focus();
	    var eDocument = this.router.editorObject.editorDocument;

	    var eWindow = this.router.editorObject.editorWindow;

	    var isCaseSensitive = executeData.value.isCase
	        , isWord = executeData.value.isWord
	        , findText = executeData.value.findText
	        , directionDown = executeData.value.directionDown
	        , isRestart = executeData.value.isRestart;

	    var isFound = false;

	    if ($.browser.msie) {
	        if (this.findRange) {

	            var args = this.getArgsForIE(!directionDown, isCaseSensitive, isWord);
	            isFound = this.findRange.findText(findText, 1, args);

	            if (isFound) {
	                if (!isNotSelection) {
	                    this.findRange.scrollIntoView();
	                }

	                this.findRange.select();
	                this.findRange.move("character", 1);

	            } else {
	                if (isRestart) {
	                    this.findRange = eDocument.body.createTextRange();

	                    if (!directionDown) {
	                        this.findRange.moveToElementText(this.editorContentView[0]);
	                    }

	                    isFound = this.findRange.findText(findText, 1, args);

	                    if (isFound) {
	                        this.findRange.scrollIntoView();
	                        this.findRange.select();
	                    }
	                }
	            }
	        }

	    } else {
	        isFound = eWindow.find(findText, isCaseSensitive, !directionDown, isRestart, isWord);
	    }

	    if (!isNotSelection && isFound) {
	        this.$dom.selection.setSaveRange();
	    }

	    return isFound;
	};

	FindReplace.prototype.doFind = function(executeData) {
	    var isFound = this.findExecute(executeData);

	    if (!isFound) {
	        alert(window.kukuResource.alertMessage.notFoundTextErrorMessage);
	    }

	    return;
	};

	FindReplace.prototype.doReplace = function(executeData) {
	    try {
	        if ($.browser.msie) {
	            var selection = this.$dom.selection;

	            if (this.findRange) {
	                this.$dom.selection.editorFocus();
	                this.$dom.selection.restoreRange();

	                var range = this.$dom.selection.getRange();

	                if (!range.collapsed) {
	                    var selectText = range.cloneContents().textContent;

	                    if (selectText == executeData.value.findText) {
	                        this.router.externalSetUndoHistory();
	                        selection.execCommand('insertText', false, executeData.value.replaceText);
	                        this.router.setRedoHistory();
	                        this.router.changedUndoRedoButtonEnable();
	                        return;
	                    }
	                }

	                range.collapse(executeData.value.directionDown);

	                var isFound = this.findExecute(executeData);

	                if (!isFound) {
	                    alert(window.kukuResource.alertMessage.notFoundTextErrorMessage);
	                    return;
	                }

	                this.router.externalSetUndoHistory();

	                selection.execCommand('insertText', false, executeData.value.replaceText);

	                this.router.setRedoHistory();
	                this.router.changedUndoRedoButtonEnable();

	            }
	        } else {
	            var range = this.$dom.selection.getRange();
	            range.collapse(executeData.value.directionDown);

	            var isFound = this.findExecute(executeData);

	            if (!isFound) {
	                alert(window.kukuResource.alertMessage.notFoundTextErrorMessage);
	                return;
	            }

	            this.router.externalSetUndoHistory();

	            var selection = this.$dom.selection;
	            selection.setRange(this.$dom.selection.getRange());
	            selection.execCommand('insertText', false, executeData.value.replaceText);

	            this.router.setRedoHistory();
	            this.router.changedUndoRedoButtonEnable();
	        }

	    }catch(e){
	        // console.log(e);
	    }

	};

	FindReplace.prototype.doReplaceAll = function(executeData) {
	    try {
	        var count = 0;
	        var eDocument = this.router.editorObject.editorDocument;

	        executeData.value.isRestart = false;
	        executeData.value.directionDown = true;

	        var findAndReplace = function (searchText, replacement, searchNode) {
	            if (!searchText || typeof replacement === 'undefined') {
	                // Throw error here if you want...
	                return;
	            }
	            var regex = typeof searchText === 'string' ? new RegExp(searchText, (!executeData.value.isCase ? 'i' : '' ) + 'g') : searchText;
	            var childNodes = (searchNode || document.body).childNodes;
	            var cnLength = childNodes.length;
	            var excludes = 'html,head,style,title,link,meta,script,object,iframe';

	            while (cnLength--) {
	                var currentNode = childNodes[cnLength];
	                if (currentNode.nodeType === 1 &&
	                    (excludes + ',').indexOf(currentNode.nodeName.toLowerCase() + ',') === -1) {
	                    arguments.callee(searchText, replacement, currentNode);
	                }
	                if (currentNode.nodeType !== 3 || !regex.test(currentNode.data) ) {
	                    continue;
	                }
	                var parent = currentNode.parentNode,
	                    frag = (function(){
	                        var html = currentNode.data.replace(regex, function(){
	                                count++;
	                                return replacement;
	                            }),
	                            wrap = document.createElement('div'),
	                            frag = document.createDocumentFragment();

	                        wrap.innerHTML = html.replace(/</ig, '&lt;').replace(/>/ig, '&gt;');
	                        while (wrap.firstChild) {
	                            frag.appendChild(wrap.firstChild);
	                        }
	                        return frag;
	                    })();
	                parent.insertBefore(frag, currentNode);
	                parent.removeChild(currentNode);
	            }
	        };

	        var selection = this.$dom.selection;
	        selection.setFirstCollapse();

	        if ($.browser.msie) {
	            this.findRange = eDocument.body.createTextRange();
	        }

	        var isFound = this.findExecute(executeData, true);
	        selection.setFirstCollapse();

	        if ($.browser.msie) {
	            this.findRange = eDocument.body.createTextRange();
	        }

	        if (isFound) {
	            this.router.externalSetUndoHistory();

	            if ($.browser.msie) {
	                var isCaseSensitive = executeData.value.isCase
	                    , isWord = executeData.value.isWord
	                    , directionDown = executeData.value.directionDown;

	                this.findRange = eDocument.body.createTextRange();
	                this.findRange.moveToElementText(eDocument.body);
	                var args = this.getArgsForIE(!directionDown, isCaseSensitive, isWord);

	                for (var i = 0; this.findRange.findText(executeData.value.findText, 1000000, args); i++) {
	                    this.findRange.text = executeData.value.replaceText;
	                    this.findRange.collapse(false)  ;
	                }

	                count = i;

	            } else {
	                while(this.findExecute(executeData, true)) {
	                    count++;
	                    selection.execCommand('insertText', false, executeData.value.replaceText);
	                }
	            }

	            this.router.setRedoHistory();
	            this.router.changedUndoRedoButtonEnable();

	            alert(window.kukuResource.findReplace.totalReplaceCount.replace('@@count@@', (count + "")));

	        } else {
	            alert(window.kukuResource.alertMessage.notFoundTextErrorMessage);
	        }

	    }catch(e){
	        // console.log(e);
	    }

	};

	module.exports = FindReplace;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(20);
	var Define = __webpack_require__(3);

	function PageBreak (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(PageBreak.prototype, new AbstractModule());

	PageBreak.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	PageBreak.prototype.create = function (opData) {
	    var selection = this.$dom.selection;

	    var pageBreak = $('<hr style="page-break-after: always; border: none;" class="' + Define.CLASS.PAGE_BREAK + '"/>');

	    selection.execCommand('inserthtml', false, Define.DEFAULT_PARAGRAPH_HTML + pageBreak[0].outerHTML + Define.DEFAULT_PARAGRAPH_HTML);

	    return null;
	};

	PageBreak.prototype.update = function (opData) {
	};

	module.exports = PageBreak;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(20);
	var Define = __webpack_require__(3);

	function Horizontal (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Horizontal.prototype, new AbstractModule());

	Horizontal.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Horizontal.prototype.create = function (opData) {
	    var selection = this.$dom.selection;

	    var $hrNode = selection.createElement('hr');

	    $hrNode.attr({
	        'style' : opData.value.style,
	        'align' : opData.value.align
	    });

	    selection.execCommand('inserthtml', false, Define.DEFAULT_PARAGRAPH_HTML + $hrNode[0].outerHTML + Define.DEFAULT_PARAGRAPH_HTML);

	    return null;
	};

	Horizontal.prototype.update = function (opData) {
	    var $hrNode = this.$dom.selection.getModifyTargetNode();

	    if ($hrNode && $hrNode.length) {
	        $hrNode.attr('style', opData.value.style);
	        $hrNode.attr('align', opData.value.align);

	        this.$dom.selection.removeModifyTargetNode();
	    }
	};

	module.exports = Horizontal;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(20);
	var Define = __webpack_require__(3);

	function Bookmark (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Bookmark.prototype, new AbstractModule());

	Bookmark.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Bookmark.prototype.create = function (opData) {
	    var _this = this;
	    var selection = this.$dom.selection;

	    var range = selection.getRange();

	    var bookmarkId = opData.value;

	    var $span = selection.createElement('span');

	    var bookmarkHTML = '<' + Define.CUSTOM_BOOKMARK_NODE + ' id="' + bookmarkId + '" ' + Define.ATTR.KK_TYPE + '="' + Define.ATTR_VALUE.KK_TYPE_BOOKMARK + '" ' + 'class="' + Define.CLASS.KK_BOOKMARK_VIEW + '" ' + 'style="border: none;" ' + Define.ATTR.UNSELECTABLE + '="on" ' + Define.ATTR.CONTENT_EDIT_ABLE + '="false">&#65279;</bookmark>';

	    $span.attr('id', Define.ID.TEMP_START);
	    $span.html(bookmarkHTML);

	    range.insertNode($span[0]);

	    if ($.browser.msie) {
	        setTimeout(function(){
	            var editorContentView = _this.router.editorObject.editorContentView;
	            var $span = editorContentView.find('#' + Define.ID.TEMP_START);
	            $span.removeAttr('id');
	            selection.applyNewRange($span[0], 1, $span[0], 1);
	        }, 10);
	        selection.editorBlur();

	    } else {
	        $span.removeAttr('id');
	        selection.applyNewRange($span[0], 1, $span[0], 1);
	        selection.editorBlur();
	    }

	    return null;
	};

	Bookmark.prototype.update = function (opData) {
	    var $editorContentView = this.router.editorObject.editorContentView;

	    var originalBookmarkId = opData.value.originalBookmark;
	    var changeBookmarkId = opData.value.changeBookmark;
	    
	    var $originalBookmark = $editorContentView.find('#' + originalBookmarkId);

	    $originalBookmark[0].id = changeBookmarkId;

	    return null;
	};

	Bookmark.prototype.del = function (opData) {
	    var $editorContentView = this.router.editorObject.editorContentView;

	    var bookmarkId = opData.value;
	    var $originalBookmark = $editorContentView.find('#' + bookmarkId);

	    var bookmarkHTML = $originalBookmark.html();

	    bookmarkHTML = bookmarkHTML.replace(/\uFEFF/ig, '');

	    if (bookmarkHTML.length) {
	        var $parent = $originalBookmark.parent();
	        if ($parent.is('span')) {
	            $originalBookmark[0].outerHTML = bookmarkHTML;
	        } else {
	            $originalBookmark.replaceWith('<span>' + bookmarkHTML + '</span>');
	        }
	    } else {
	        $originalBookmark.remove();
	    }

	    return null;
	};

	Bookmark.prototype.read = function () {};

	module.exports = Bookmark;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(20);

	function Tab (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Tab.prototype, new AbstractModule());

	Tab.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Tab.prototype.create = function (opData) {
	    var space = String.fromCharCode(160);

	    var tabString = '';
	    var tabSpaceSize = this.router.options.tabSpaceSize || 4;

	    while(tabSpaceSize--) {
	        tabString += space;
	    }

	    this.$dom.selection.execCommand('insertText', false, tabString);

	    return null;
	};

	Tab.prototype.update = function () {};

	Tab.prototype.read = function () {};

	module.exports = Tab;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(20);
	var Util = __webpack_require__(5);
	var Define = __webpack_require__(3);

	function UpperLower (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(UpperLower.prototype, new AbstractModule());

	UpperLower.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	UpperLower.prototype.create = function (opData) {
	    var capitalize = function(t) {
	        return t.toLowerCase().replace(/\b\w/g, function (m) {
	            return m.toUpperCase();
	        });
	    };

	    var editorContentView = this.router.editorObject.editorContentView;
	    var selection = this.$dom.selection;

	    var caseValue = opData.value;
	    var isUpperLower = ['upper', 'lower'].indexOf(caseValue) > -1;
	    var upperLowerMethod = caseValue == 'upper' ? 'toUpperCase' : 'toLowerCase';

	    editorContentView[0].normalize();

	    var $selectedCells = this.$dom.selection.getSelectedTd();

	    var textNodes = null;
	    var $nodes = null;

	    var isSelectedCell = !!$selectedCells.length;

	    if (isSelectedCell) {
	        var $checkedNodes = $selectedCells.find('*').add($selectedCells);

	        textNodes = $checkedNodes.contents().filter(function() {
	            return this.nodeType === 3;
	        });

	    } else {
	        var wrappingObj = selection.getSelectionWrapping();
	        $nodes = wrappingObj.nodes;

	        textNodes = $nodes.contents().filter(function() {
	            return this.nodeType === 3;
	        });
	    }

	    if (isUpperLower) {
	        $.each(textNodes, function (idx, node) {
	            node.nodeValue = node.nodeValue[upperLowerMethod]();
	        });
	    } else {
	        $.each(textNodes, function (idx, node) {
	            node.nodeValue = capitalize(node.nodeValue);
	        });
	    }

	    if (!isSelectedCell && $nodes && $nodes.length) {
	        selection.setRangeMarking($nodes);
	    }
	};

	UpperLower.prototype.update = function () {};

	UpperLower.prototype.read = function () {};

	module.exports = UpperLower;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function StatusHighlight(editorElement, editorContentView, $domObject, editorObject, options) {
	    this.runStyleProp = ['fontFamily', 'fontSize', 'fontWeight', 'color', 'backgroundColor', 'textAlign', 'lineHeight', 'textDecoration', 'verticalAlign', 'fontStyle'];

	    this.editorElement = null;
	    this.editorContentView = null;

	    this.toolbarElement = null;
	    this.cache = null;
	    this.$dom = null;

	    this.init(editorElement, editorContentView, $domObject, editorObject, options);
	}

	StatusHighlight.prototype.init = function(editorElement, editorContentView, $domObject, editorObject, options) {
	    this.$dom = $domObject;

	    this.editorElement = $(editorElement);
	    this.toolbarElement = this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR);
	    this.editorContentView = $(editorContentView);
	    this.editorObject = editorObject;
	    this.options = options || {};

	    this.cache = {
	        $heading : this.toolbarElement.find('a[u-id="heading"]'),
	        $font_family : this.toolbarElement.find('a[u-id="fontFamily"]'),
	        $font_size : this.toolbarElement.find('a[u-id="fontSize"]'),
	        $bold : this.toolbarElement.find('a[u-id="bold"]'),
	        $italic : this.toolbarElement.find('a[u-id="italic"]'),
	        $underline : this.toolbarElement.find('a[u-id="underline"]'),
	        $pageBreak : this.toolbarElement.find('a[u-id="page_break"]'),

	        $superscript : this.toolbarElement.find('a[u-id="superscript"]'),
	        $subscript : this.toolbarElement.find('a[u-id="subscript"]'),

	        $lineHeight : this.toolbarElement.find('a[u-id="line_height"]'),

	        // $lineHeightList : this.toolbarElement.find('a[u-id="line_height"]').find('li'),
	        // $lineHeightList : null,

	        $textFormatCopy : this.toolbarElement.find('a[u-id="textFormatCopy"]'),
	        $textFormatPaste : this.toolbarElement.find('a[u-id="textFormatPaste"]'),

	        $strikeThrough : this.toolbarElement.find('a[u-id="strikeThrough"]'),

	        $numbered_list : this.toolbarElement.find('a[u-id="numbered_list"]'),
	        $bullet_list : this.toolbarElement.find('a[u-id="bullet_list"]'),

	        $align : {
	            Left : this.toolbarElement.find('a[u-id="align_left"]'),
	            Right : this.toolbarElement.find('a[u-id="align_right"]'),
	            Center : this.toolbarElement.find('a[u-id="align_center"]'),
	            Justify : this.toolbarElement.find('a[u-id="align_justify"]')
	        },

	        $dir : {
	            Ltr : this.toolbarElement.find('a[u-id="dir_ltr"]'),
	            Rtl : this.toolbarElement.find('a[u-id="dir_rtl"]')
	        },

	        $list : {
	            Numbered : this.toolbarElement.find('a[u-id="numbered_list"]'),
	            Bullet : this.toolbarElement.find('a[u-id="bullet_list"]')
	        },

	        $table : [
	            this.toolbarElement.find('a[u-id="table_insert_left"]'),
	            this.toolbarElement.find('a[u-id="table_insert_right"]'),
	            this.toolbarElement.find('a[u-id="table_insert_top"]'),
	            this.toolbarElement.find('a[u-id="table_insert_bottom"]'),

	            this.toolbarElement.find('a[u-id="table_remove_col"]'),
	            this.toolbarElement.find('a[u-id="table_remove_row"]'),
	            this.toolbarElement.find('a[u-id="table_remove_table"]'),

	            this.toolbarElement.find('a[u-id="table_merge"]'),
	            this.toolbarElement.find('a[u-id="table_split_col"]'),
	            this.toolbarElement.find('a[u-id="table_split_row"]'),

	            this.toolbarElement.find('a[u-id="cell_horizontal_size"]'),
	            this.toolbarElement.find('a[u-id="cell_vertical_size"]'),

	            this.toolbarElement.find('a[u-id="table_lock"]'),
	            this.toolbarElement.find('a[u-id="cell_lock"]'),

	            this.toolbarElement.find('a[u-id="border_visualize"]'),

	            this.toolbarElement.find('a[u-id="table_background_color"]'),
	            this.toolbarElement.find('a[u-id="table_border_style"]')
	        ],

	        $tableNode : {
	            table : this.toolbarElement.find('a[u-id="table"]'),
	            insertLeft : this.toolbarElement.find('a[u-id="table_insert_left"]'),
	            insertRight : this.toolbarElement.find('a[u-id="table_insert_right"]'),
	            insertTop : this.toolbarElement.find('a[u-id="table_insert_top"]'),
	            insertBottom : this.toolbarElement.find('a[u-id="table_insert_bottom"]'),

	            removeCol : this.toolbarElement.find('a[u-id="table_remove_col"]'),
	            removeRow : this.toolbarElement.find('a[u-id="table_remove_row"]'),
	            removeTable : this.toolbarElement.find('a[u-id="table_remove_table"]'),

	            merge : this.toolbarElement.find('a[u-id="table_merge"]'),
	            spliteCol : this.toolbarElement.find('a[u-id="table_split_col"]'),
	            spliteRow : this.toolbarElement.find('a[u-id="table_split_row"]'),

	            cellHorizontalSize : this.toolbarElement.find('a[u-id="cell_horizontal_size"]'),
	            cellVerticalSize : this.toolbarElement.find('a[u-id="cell_vertical_size"]'),

	            tableLock : this.toolbarElement.find('a[u-id="table_lock"]'),
	            cellLock : this.toolbarElement.find('a[u-id="cell_lock"]'),
	            borderVisualize : this.toolbarElement.find('a[u-id="border_visualize"]'),

	            backgroundColor : this.toolbarElement.find('a[u-id="table_background_color"]'),
	            borderStyle : this.toolbarElement.find('a[u-id="table_border_style"]'),
	        },

	        $common : {
	            $outdent : this.toolbarElement.find('a[u-id="outdent"]'),
	            $indent : this.toolbarElement.find('a[u-id="indent"]'),
	            $paragraphMargin : this.toolbarElement.find('a[u-id="paragraph_margin"]'),
	            $link : this.toolbarElement.find('a[u-id="link"]'),
	            $unlink : this.toolbarElement.find('a[u-id="unlink"]'),
	            $bookmark : this.toolbarElement.find('a[u-id="bookmark"]'),
	            $horizontal : this.toolbarElement.find('a[u-id="horizontal"]'),
	            $date_format : this.toolbarElement.find('a[u-id="date_format"]'),
	            $background_image : this.toolbarElement.find('a[u-id="background_image"]'),
	            $image : this.toolbarElement.find('a[u-id="image"]'),
	            $video : this.toolbarElement.find('a[u-id="video"]'),
	            $file : this.toolbarElement.find('a[u-id="file"]'),
	            $symbol : this.toolbarElement.find('a[u-id="symbol"]'),
	            $emoticon : this.toolbarElement.find('a[u-id="emoticon"]'),
	            $upper_lower : this.toolbarElement.find('a[u-id="upper_lower"]'),
	            $blockquote : this.toolbarElement.find('a[u-id="blockquote"]'),
	            $layer : this.toolbarElement.find('a[u-id="layer"]')
	        }

	    };

	    this.cache.$textFormatPaste.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);

	};

	StatusHighlight.prototype.setStatusTableSelection = function($table){
	    this.clearStatusHighlight();

	    this.cache.$bold.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	    this.cache.$italic.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	    this.cache.$underline.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	    this.cache.$strikeThrough.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	    this.cache.$superscript.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	    this.cache.$subscript.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);

	    this.cache.$list.Numbered.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	    this.cache.$list.Bullet.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);

	    for (var subKey in this.cache.$align) {
	        this.cache.$align[subKey].removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	    }

	    var $selectedCell = this.$dom.selection.getSelectedTd();

	    if ($selectedCell.length > 1) {
	        this.cache.$tableNode.merge.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	        this.cache.$tableNode.cellHorizontalSize.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	        this.cache.$tableNode.cellVerticalSize.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	        this.cache.$tableNode.tableLock.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	        this.cache.$tableNode.cellLock.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	    }
	    this.cache.$tableNode.backgroundColor.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	    this.cache.$tableNode.borderStyle.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	};

	StatusHighlight.prototype.clearStatusHighlight = function(){
	    for (var key in this.cache) {
	        switch (key) {
	            case "$align" :
	            case "$dir" :
	            case "$list" :
	            case "$tableNode" :
	            case "$common" :
	                for (var subKey in this.cache[key]) {
	                    this.cache[key][subKey].removeClass('on');
	                    this.cache[key][subKey].addClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	                }

	                break;

	            case "$table" :
	            case "$heading" :
	            case "$font_family" :
	            case "$font_size" :

	                break;

	            default:
	                this.cache[key].removeClass('on');
	                this.cache[key].addClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	                break;
	        }
	    }
	};

	StatusHighlight.prototype.resetStatusHighlight = function(){
	    for (var key in this.cache) {
	        switch (key) {
	            case "$align" :
	            case "$dir" :
	            case "$list" :
	            case "$tableNode" :
	            case "$common" :
	                for (var subKey in this.cache[key]) {
	                    this.cache[key][subKey].removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	                }

	                break;

	            case "$table" :
	            case "$heading" :
	            case "$font_family" :
	            case "$font_size" :

	                break;

	            default:
	                this.cache[key].removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	                break;
	        }
	    }
	};

	StatusHighlight.prototype.onChangedListener = function(node, isNotCheckTable){
	    var selection = this.$dom.selection;

	    this.resetStatusHighlight();

	    if (! node || (! node instanceof Node && Object.keys(node).length == 0)){
	        var range = selection.getRange();

	        if (selection.isCollapsed() && !node) {
	            this.cache.$pageBreak.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	        } else {
	            this.cache.$pageBreak.addClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	        }

	        node = range.startContainer;
	    }

	    if (! node){
	        return ;
	    }

	    var isTableChildren = false;
	    var highStyle = this.getHighlightStyle(node);

	    if (!isNotCheckTable) {
	        var range = selection.getRange();
	        var startContainer = range.startContainer;
	        var endContainer = range.endContainer;

	        if (range.collapsed) {
	            var $startContainer = $(startContainer);
	            var $startTable = $startContainer.closest('table');

	            if ($startTable.length) {
	                isTableChildren = true;
	            }

	        } else {
	            var $startContainer = $(startContainer);
	            var $endContainer = $(endContainer);

	            var $startTable = $startContainer.closest('table');
	            var $endTable = $endContainer.closest('table');

	            if ($.browser.msie) {
	                if (startContainer.nodeType == Node.ELEMENT_NODE && startContainer.nodeName == 'BODY'
	                    && endContainer.nodeType == Node.ELEMENT_NODE && endContainer.nodeName == 'BODY') {
	                    var $selectedTdNodes = this.$dom.selection.getSelectedTd();

	                    if ($selectedTdNodes.length) {
	                        var $firstTDNode = $selectedTdNodes.first();
	                        var $lastTDNode = $selectedTdNodes.last();

	                        $startTable = $firstTDNode.closest('table');
	                        $endTable = $lastTDNode.closest('table');
	                    }
	                }
	            }

	            if ($startTable.length && $endTable.length){
	                if ($startTable[0] == $endTable[0]) {
	                    isTableChildren = true;
	                }
	            }
	        }
	    }

	    highStyle.isTableChildren = isTableChildren;

	    if (! highStyle.runStyles){
	        return ;
	    }

	    selection.setHighlightStyle(highStyle.runStyles);

	    this.changeRunStyleUI(highStyle.runStyles);

	    var blockNode = this.$dom.selection.getParentBlockNode(node);

	    this.cache.$list.Numbered.removeClass('on');
	    this.cache.$list.Bullet.removeClass('on');



	    //BlockNode Style

	    if (blockNode && blockNode.nodeType == 1 && blockNode.nodeName == 'LI'){
	        var parentNode = blockNode.parentNode;

	        if (parentNode.nodeName == 'OL'){
	            this.cache.$list.Numbered.addClass('on');
	        }else if (parentNode.nodeName == 'UL'){
	            this.cache.$list.Bullet.addClass('on');
	        }
	    }


	    var blockDir = blockNode ? blockNode.getAttribute(Define.ATTR.DIR) : '';

	    if (blockDir && blockDir == 'rtl'){
	        this.cache.$dir.Ltr.removeClass('on');
	        this.cache.$dir.Rtl.addClass('on');
	    }else{
	        this.cache.$dir.Ltr.addClass('on');
	        this.cache.$dir.Rtl.removeClass('on');
	    }

	    if (this.$dom.selection.isCollapsed()){
	        this.cache.$pageBreak.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	    }else{
	        this.cache.$pageBreak.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	    }

	    if (highStyle.isTableChildren){
	        this.cache.$pageBreak.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);

	        this.cache.$table.forEach(function(tableUi){
	            $(tableUi).removeClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	        });

	        var $selectedTdNodes = this.$dom.selection.getSelectedTd();

	        this.cache.$tableNode.tableLock.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	        this.cache.$tableNode.cellLock.removeClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);

	        if ($selectedTdNodes.length > 0){
	            this.cache.$tableNode.table.addClass(Define.CLASS.TOOLBAR_BUTTON_DISABLED);

	            if (! $selectedTdNodes.length > 1){
	                this.cache.$tableNode.merge.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	                this.cache.$tableNode.cellHorizontalSize.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	                this.cache.$tableNode.cellVerticalSize.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	            }

	            this.cache.$tableNode.table.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	            this.cache.$tableNode.insertTop.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	            this.cache.$tableNode.insertBottom.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	            this.cache.$tableNode.insertLeft.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	            this.cache.$tableNode.insertRight.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);

	            this.cache.$tableNode.removeCol.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	            this.cache.$tableNode.removeRow.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);

	            this.cache.$tableNode.spliteCol.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	            this.cache.$tableNode.spliteRow.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);

	        } else{
	            this.cache.$tableNode.table.removeClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	            this.cache.$tableNode.merge.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	            this.cache.$tableNode.cellHorizontalSize.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	            this.cache.$tableNode.cellVerticalSize.addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	        }
	    }else{
	        this.cache.$table.forEach(function(tableUi){
	            $(tableUi).addClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	        });
	        this.cache.$tableNode.table.removeClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);
	    }

	    this.cache.$tableNode.borderVisualize.removeClass( Define.CLASS.TOOLBAR_BUTTON_DISABLED);

	    if (this.options.isNoneBorderVisualize) {
	        this.cache.$tableNode.borderVisualize.addClass('on');
	    } else {
	        this.cache.$tableNode.borderVisualize.removeClass('on');
	    }
	};

	StatusHighlight.prototype.changeRunStyleUI = function(props){
	    if (! props){
	        return ;
	    }

	    for (var key in props){
	        var val = props[key];

	        switch(key){
	            case "heading":
	                this.changeSelectBoxValue(key, this.cache.$heading, val);
	                break;

	            case "textAlign":
	                for (var prop in this.cache.$align){
	                    $(this.cache.$align[prop]).removeClass("on");
	                }

	                var name = Util.firstToUpperCase(val);
	                if (name == "Start"){ name = "Left"; }

	                if (['Left', 'Center', 'Right', 'Justify'].indexOf(name) == -1){
	                    name = 'Left';
	                }

	                if (name.length > 0){
	                    this.cache.$align[name].addClass("on");
	                }

	                break;

	            case "fontFamily":
	                if (!val) {
	                    val = window.kukuResource.defaultFontMenuName;
	                }

	                val = val.replace(/'/g, "");
	                val = val.replace(/"/g, "");

	                if (val == "맑은고딕"){ val = "맑은 고딕"; }

	                var split = val.split(",");
	                if (split.length > 1){
	                    $(split).each(function(i){
	                        if (this.length > 1){
	                            val = this + "";
	                            return false;
	                        }
	                    });
	                }

	                val = val.trim();
	                val = val.replace(/"/g, '');

	                if (val == 'MalgunGothic' || val == 'Malgun Gothic'){
	                    val = '맑은 고딕';

	                }else if (val == 'NanumGothic' || val == 'Nanum Gothic'){
	                    val = '나눔 고딕';

	                }else{

	                    var notFoundFont = true;
	                    if (val && val != ''){
	                        var values = val.split(' ');

	                        if (values.length > 0){
	                            val = '';

	                            for (var j=0; j<values.length; j++){
	                                if (val != ''){
	                                    val += ' ';
	                                }

	                                if (values.length > 0 && values[j] && values[j][0] && values[j][0].length > 0){
	                                    val += values[j][0].toUpperCase() + values[j].substring(1);
	                                    notFoundFont = false;
	                                }
	                            }
	                        }
	                    }

	                    if (notFoundFont || ! val){
	                        val = window.kukuResource.defaultFontMenuName;
	                    }
	                }

	                this.changeSelectBoxValue(key, this.cache.$font_family, val);

	                break;

	            case "fontSize":
	                this.changeSelectBoxValue(key, this.cache.$font_size, val);

	                break;

	            case "bold":
	                if (val){
	                    this.cache.$bold.addClass("on");

	                } else {
	                    this.cache.$bold.removeClass("on");

	                }

	                break;

	            case "italic":
	                if (val){
	                    this.cache.$italic.addClass("on");

	                }else{
	                    this.cache.$italic.removeClass("on");

	                }

	                break;

	            case "underline":
	                if (val){
	                    this.cache.$underline.addClass("on");

	                } else {
	                    this.cache.$underline.removeClass("on");

	                }

	                break;

	            case "strikeThrough":
	                if (val){
	                    this.cache.$strikeThrough.addClass("on");

	                } else {
	                    this.cache.$strikeThrough.removeClass("on");

	                }

	                break;

	            case "superscript":
	                if (val){
	                    this.cache.$superscript.addClass("on");

	                } else {
	                    this.cache.$superscript.removeClass("on");

	                }

	                break;

	            case "subscript":
	                if (val){
	                    this.cache.$subscript.addClass("on");

	                } else {
	                    this.cache.$subscript.removeClass("on");

	                }

	                break;

	            default:
	                break;
	        }
	    }
	};

	StatusHighlight.prototype.changeFontSize = function(val){
	    this.changeSelectBoxValue('fontSize', this.cache.$font_size, val);
	};

	StatusHighlight.prototype.changeSelectBoxValue = function(boxType, $node, val){
	    $node.find("li[selected]").removeAttr("selected");

	    var item = $node.find("li[data-value='" + val + "']");
	    item.attr("selected","selected");

	    if (boxType == 'heading') {
	        item = $(item[0]); // li 하나만 선택
	        var text = item.text();
	        $node.find("label").text(text);

	    } else{
	        $node.find("label").text(val);
	    }

	};

	StatusHighlight.prototype.getHighlightStyle = function(nodes){
	    var styleNodes = (nodes instanceof Array || nodes instanceof jQuery) ? nodes : [nodes];

	    var runStyle = {};

	    if (styleNodes.length) {
	        var styleNode = styleNodes[0];

	        if (styleNode.nodeType == 3){
	            styleNode = styleNode.parentNode;
	        }

	        runStyle = Util.getCurrentStyle(styleNode, null, this.editorObject);
	    }


	    return{ runStyles : runStyle };
	};

	module.exports = StatusHighlight;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function Filter($dom, options, element, editorContentView, editorDocument) {
	    this.$dom = $dom;
	    this.options = options;
	    this.editorElement = $(element);
	    this.editorContentView = editorContentView;
	    this.editorDocument = editorDocument;

	    this.$exportIframe = $('#' + Define.ID.KK_EXPORT);
	    this.$exportDocument = $(this.$exportIframe[0].contentWindow.document);

	    this.eDocument = this.editorDocument;
	}

	Filter.prototype.init = function () {};

	Filter.prototype.fullHtmlParser = function (htmlString) {
	    var _this = this;

	    if (this.options.useSecurityScript) {
	        htmlString = this.removeScript(htmlString);
	    }

	    this.$exportDocument[0].documentElement.innerHTML = htmlString;

	    var $exportBody = $(this.$exportDocument[0].body);

	    var $headChildNodes = $exportBody.find(Define.HEAD_NODES.join(','));

	    var $eHeadNode = Util.getHeaderNode(this.eDocument);
	    $eHeadNode.html('');
	    $eHeadNode.append($headChildNodes);

	    this.editorContentView.removeAttributes();

	    var attributes = $exportBody.prop("attributes");

	    $.each(attributes, function () {
	        _this.editorContentView.attr(this.name, this.value);
	    });

	    this.setEditorEnvironment();

	    if (this.options.useSecurityEvent) {
	        var allNodes = $exportBody.find('*');
	        this.removeEvent(allNodes);
	    }

	    htmlString = $exportBody[0].innerHTML;
	    htmlString = Util.changeWhitespaceTrim(htmlString, this.options.useRemoveWhitespaceEmptyTag);

	    this.editorContentView[0].innerHTML = htmlString || Define.DEFAULT_PARAGRAPH_HTML;
	    this.editorContentView[0].normalize();
	    this.editorContentView.focus();

	    $exportBody[0].innerHTML = '';
	};

	Filter.prototype.getHtmlFilterString = function (htmlString, isPaste, cmode) {


	    if (this.options.useSecurityScript) {
	        htmlString = this.removeScript(htmlString);
	    }

	    if (this.options.removeDevComments) {
	        //htmlString = this.removeDevComments(htmlString);
	    }

	    htmlString = htmlString.replace(/\<\!\-\-StartFragment\-\-\>/g, '').replace(/\<\!\-\-EndFragment\-\-\>/g, '');
	    //htmlString = htmlString.replace(/-ms-word-break/ig, 'word-break').replace(/-ms-word-wrap/ig, 'word-wrap');

	    var $exportBody = $(this.$exportDocument[0].body);
	    this.$exportDocument[0].body.innerHTML = htmlString;

	    if (this.options.useSecurityEvent) {
	        var allNodes = $exportBody.find('*');
	        this.removeEvent(allNodes);
	    }

	    var $headChildNodes = $exportBody.find(Define.HEAD_NODES.join(','));
	    if ($headChildNodes.length) {
	        var headerNodeFilter = ':not(';
	        headerNodeFilter += 'STYLE';
	        if (!this.options.useSecurityScript) {
	            headerNodeFilter += ', SCRIPT, VBSCRIPT';
	        }
	        headerNodeFilter += ')';
	        $headChildNodes = $headChildNodes.filter(headerNodeFilter);
	        $headChildNodes.remove();
	    }

	    var $tableNodes = $exportBody.find('TABLE');

	    if ($tableNodes.length) {
	        Util.tableColGroupSetting($tableNodes);
	    }

	    if (isPaste) {
	        this.htmlStyleNodeConvertFilter($exportBody);
	    }


	    function removeNoUseCode(innerHTML) {
	        innerHTML = innerHTML.replace(/(\<span style\=\")line-height[0-9a-zA-Zㄱ-ㅎㅏ-ㅣ가-힣 :%\-]*(\;)/g, "$1 $2");
	        innerHTML = innerHTML.replace(/mso\-fareast\-font\-family/gi, "font-family");
	        innerHTML = innerHTML.replace(/mso\-ascii\-font\-family/gi, "font-family");
	        innerHTML = innerHTML.replace(/mso\-hansi\-font\-family/gi, "font-family");
	        innerHTML = innerHTML.replace(/mso\-[0-9a-zA-Zㄱ-ㅎㅏ-ㅣ가-힣 :%\-]*\;/gi, "");
	        innerHTML = innerHTML.replace(/lang\=\"[0-9a-zA-Zㄱ-ㅎㅏ-ㅣ가-힣 :%\-]*\"/g, "");
	        innerHTML = innerHTML.replace(/lang\=\"[0-9a-zA-Zㄱ-ㅎㅏ-ㅣ가-힣 :%\-]*\"/g, "");
	        //innerHTML = innerHTML.replace(/\;\;/g, "");

	        return innerHTML;
	    }

	    function removeHtmlHeight(innerHTML) {
	        innerHTML = innerHTML.replace(/<tr\sheight=\"[0-9]*\"\s/gi, "<tr ");
	        innerHTML = innerHTML.replace(/<td\sheight=\"[0-9]*\"\s/gi, "<td ");
	        return innerHTML;
	    }

	    htmlString = $exportBody[0].innerHTML;
	    htmlString = removeNoUseCode(htmlString);
	    //htmlString = removeHtmlHeight(htmlString);

	    if (isPaste && isPaste.isHtml) {
	        htmlString = Util.changeWhitespaceTrimUseHtml(htmlString, this.options.useRemoveWhitespaceEmptyTag);
	    }
	    else {
	        htmlString = Util.changeWhitespaceTrim(htmlString, this.options.useRemoveWhitespaceEmptyTag, cmode);
	    }


	    $exportBody[0].innerHTML = '';

	    // if(isPaste && isPaste.isHtml) {
	    //     console.log(htmlString)
	    // }
	    return htmlString;
	};

	Filter.prototype.htmlStyleNodeConvertFilter = function ($container) {
	    var $styleNodes = $container.find("style");

	    if ($styleNodes.length) {
	        var selectorList = ['p'];

	        for (var idx = $styleNodes.length - 1; idx >= 0; idx--) {
	            var styleNode = $styleNodes[idx];

	            var cssRules = styleNode.sheet.cssRules;

	            for (var i = cssRules.length - 1; i >= 0; i--) {
	                var cssRule = cssRules[i];

	                if (cssRule.type === CSSRule.STYLE_RULE) {
	                    var selector = cssRule.selectorText;

	                    selector = selector.replace(Define.CLASS.PREFIX, "");

	                    if (selector == "p") {
	                        continue;
	                    }

	                    var selectorItemList = selector.split(",");

	                    if (selectorItemList.length) {
	                        for (var selectorIdx = 0, length = selectorItemList.length; selectorIdx < length; selectorIdx++) {
	                            var selectorItem = selectorItemList[selectorIdx];

	                            if (selectorItem.indexOf(':') != -1) {
	                                selectorItem = selectorItem.split(':')[0];
	                            }

	                            selectorList.push(selectorItem.trim());
	                        }

	                    } else {
	                        selectorList.push(selector.trim());
	                    }

	                    var cssText = cssRule.cssText;

	                    var startOffset = cssText.indexOf("{");
	                    var endOffset = cssText.indexOf("}");

	                    cssText = cssText.substring(startOffset + 1, endOffset);

	                    var $findNodes = $container.find(selector);

	                    $findNodes.attr("style_copy", function () {
	                        var $selectorNode = $(this);

	                        var styleInfo = $selectorNode.attr("style_copy") || "";

	                        var styleString = cssText + ';' + styleInfo + ";";

	                        styleString = styleString.replace(' .5pt', ' 1px');
	                        styleString = styleString.replace('0.5pt', '1px');

	                        return styleString;
	                    });
	                }
	            }
	        }

	        $styleNodes.remove();

	        $container.find('[style_copy]').each(function () {
	            var $this = $(this);

	            var styleCopyInfo = $this.attr("style_copy") || "";
	            var styleInfo = $this.attr("style") || "";

	            $this.attr("style", styleCopyInfo + styleInfo).removeAttr('style_copy');
	        });

	        try {
	            $container.find(selectorList.join(',')).removeAttr("class");
	        } catch (e) {
	            // console.log("Selector List Parsing Error");
	        }
	    }

	    return $container;
	};

	Filter.prototype.removeDevComments = function (htmlString) {
	    // 엑셀에서 표 복사붙여넣기시 선이 없어지는 버그
	    var RegExpDS = /<!--(?!>)[\S\s]*?-->/g;
	    var rehtmlString = htmlString.replace(RegExpDS,"");
	    return rehtmlString;
	};

	Filter.prototype.removeScript = function (htmlString) {
	    //<video src="" onloadstart="alert('xss')"></video>
	    htmlString = htmlString.replace(/<script[^>](.*?)<\/script>/ig, "").replace(/<vbscript[^>](.*?)<\/vbscript>/ig, "").replace(/onloadstart/ig, "undefined");
	    return htmlString;
	};

	Filter.prototype.removeEvent = function (allNodes) {
	    var eventAttributes = [].concat(Define.EVENT_ATTRIBUTES);

	    if (this.options.notRemoveEventTypes && this.options.notRemoveEventTypes.length) {
	        var notRemoveEventTypes = [].concat(this.options.notRemoveEventTypes);
	        notRemoveEventTypes = notRemoveEventTypes.map(function(x){ return x.toUpperCase() });

	        function filterNotRemoveEvent(eventName) {
	            return notRemoveEventTypes.indexOf(eventName) == -1;
	        }

	        eventAttributes = eventAttributes.filter(filterNotRemoveEvent);
	    }

	    allNodes.each(function(){
	        for (var i = 0, length = eventAttributes.length; i < length; i++) {
	            this.removeAttribute(eventAttributes[i]);
	        }
	    });
	};

	Filter.prototype.setEditorEnvironment = function () {
	    var $eHeadNode = Util.getHeaderNode(this.eDocument);

	    var $metaNodes = $eHeadNode.find('meta[charset]');

	    if (!$metaNodes.length) {
	        if (this.options.defaultCharset) {
	            var $metaNode = this.$dom.selection.createElement('meta');
	            $metaNode.attr({
	                'http-equiv': 'Content-Type',
	                'content': 'text/html',
	                'charset': this.options.defaultCharset
	            });

	            $eHeadNode.append($metaNode);
	        }
	    }

	    var editorLinkNode = $eHeadNode.find('link#' + Define.ID.EDITOR_STYLE);

	    if (!editorLinkNode.length) {
	        if (this.options.defaultEditorStylePath) {
	            var $linkNode = this.$dom.selection.createElement('link');
	            $linkNode.attr({
	                'id': Define.ID.EDITOR_STYLE,
	                'type': 'text/css',
	                'rel': 'stylesheet',
	                'href': this.options.defaultEditorStylePath
	            });

	            $eHeadNode.append($linkNode);
	        }
	    }

	    this.$dom.selection.setContentEditable(true);

	    this.editorContentView.attr('spellcheck', false);

	    if (this.options.defaultFontSize) {
	        this.editorContentView.css('font-size', this.options.defaultFontSize);
	    }

	    if (this.options.defaultFontFamily) {
	        this.editorContentView.css('font-family', this.options.defaultFontFamily);
	    }

	    if (!$.browser.msie || ($.browser.msie && $.browser.version > 10)) {
	        this.$dom.selection.execCommand('styleWithCSS', false, true);
	    }
	};

	module.exports = Filter;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(37);

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(38);

	function scrollIntoView(elem, container, config) {
	  config = config || {};
	  // document 归一化到 window
	  if (container.nodeType === 9) {
	    container = util.getWindow(container);
	  }

	  var allowHorizontalScroll = config.allowHorizontalScroll;
	  var onlyScrollIfNeeded = config.onlyScrollIfNeeded;
	  var alignWithTop = config.alignWithTop;
	  var alignWithLeft = config.alignWithLeft;
	  var offsetTop = config.offsetTop || 0;
	  var offsetLeft = config.offsetLeft || 0;
	  var offsetBottom = config.offsetBottom || 0;
	  var offsetRight = config.offsetRight || 0;

	  allowHorizontalScroll = allowHorizontalScroll === undefined ? true : allowHorizontalScroll;

	  var isWin = util.isWindow(container);
	  var elemOffset = util.offset(elem);
	  var eh = util.outerHeight(elem);
	  var ew = util.outerWidth(elem);
	  var containerOffset = undefined;
	  var ch = undefined;
	  var cw = undefined;
	  var containerScroll = undefined;
	  var diffTop = undefined;
	  var diffBottom = undefined;
	  var win = undefined;
	  var winScroll = undefined;
	  var ww = undefined;
	  var wh = undefined;

	  if (isWin) {
	    win = container;
	    wh = util.height(win);
	    ww = util.width(win);
	    winScroll = {
	      left: util.scrollLeft(win),
	      top: util.scrollTop(win)
	    };
	    // elem 相对 container 可视视窗的距离
	    diffTop = {
	      left: elemOffset.left - winScroll.left - offsetLeft,
	      top: elemOffset.top - winScroll.top - offsetTop
	    };
	    diffBottom = {
	      left: elemOffset.left + ew - (winScroll.left + ww) + offsetRight,
	      top: elemOffset.top + eh - (winScroll.top + wh) + offsetBottom
	    };
	    containerScroll = winScroll;
	  } else {
	    containerOffset = util.offset(container);
	    ch = container.clientHeight;
	    cw = container.clientWidth;
	    containerScroll = {
	      left: container.scrollLeft,
	      top: container.scrollTop
	    };
	    // elem 相对 container 可视视窗的距离
	    // 注意边框, offset 是边框到根节点
	    diffTop = {
	      left: elemOffset.left - (containerOffset.left + (parseFloat(util.css(container, 'borderLeftWidth')) || 0)) - offsetLeft,
	      top: elemOffset.top - (containerOffset.top + (parseFloat(util.css(container, 'borderTopWidth')) || 0)) - offsetTop
	    };
	    diffBottom = {
	      left: elemOffset.left + ew - (containerOffset.left + cw + (parseFloat(util.css(container, 'borderRightWidth')) || 0)) + offsetRight,
	      top: elemOffset.top + eh - (containerOffset.top + ch + (parseFloat(util.css(container, 'borderBottomWidth')) || 0)) + offsetBottom
	    };
	  }

	  if (diffTop.top < 0 || diffBottom.top > 0) {
	    // 强制向上
	    if (alignWithTop === true) {
	      util.scrollTop(container, containerScroll.top + diffTop.top);
	    } else if (alignWithTop === false) {
	      util.scrollTop(container, containerScroll.top + diffBottom.top);
	    } else {
	      // 自动调整
	      if (diffTop.top < 0) {
	        util.scrollTop(container, containerScroll.top + diffTop.top);
	      } else {
	        util.scrollTop(container, containerScroll.top + diffBottom.top);
	      }
	    }
	  } else {
	    if (!onlyScrollIfNeeded) {
	      alignWithTop = alignWithTop === undefined ? true : !!alignWithTop;
	      if (alignWithTop) {
	        util.scrollTop(container, containerScroll.top + diffTop.top);
	      } else {
	        util.scrollTop(container, containerScroll.top + diffBottom.top);
	      }
	    }
	  }

	  if (allowHorizontalScroll) {
	    if (diffTop.left < 0 || diffBottom.left > 0) {
	      // 强制向上
	      if (alignWithLeft === true) {
	        util.scrollLeft(container, containerScroll.left + diffTop.left);
	      } else if (alignWithLeft === false) {
	        util.scrollLeft(container, containerScroll.left + diffBottom.left);
	      } else {
	        // 自动调整
	        if (diffTop.left < 0) {
	          util.scrollLeft(container, containerScroll.left + diffTop.left);
	        } else {
	          util.scrollLeft(container, containerScroll.left + diffBottom.left);
	        }
	      }
	    } else {
	      if (!onlyScrollIfNeeded) {
	        alignWithLeft = alignWithLeft === undefined ? true : !!alignWithLeft;
	        if (alignWithLeft) {
	          util.scrollLeft(container, containerScroll.left + diffTop.left);
	        } else {
	          util.scrollLeft(container, containerScroll.left + diffBottom.left);
	        }
	      }
	    }
	  }
	}

	module.exports = scrollIntoView;

/***/ }),
/* 38 */
/***/ (function(module, exports) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;

	function getClientPosition(elem) {
	  var box = undefined;
	  var x = undefined;
	  var y = undefined;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
	  box = elem.getBoundingClientRect();

	  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
	  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
	  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

	  x = box.left;
	  y = box.top;

	  // In IE, most of the time, 2 extra pixels are added to the top and left
	  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
	  // IE6 standards mode, this border can be overridden by setting the
	  // document element's border to zero -- thus, we cannot rely on the
	  // offset always being 2 pixels.

	  // In quirks mode, the offset can be determined by querying the body's
	  // clientLeft/clientTop, but in standards mode, it is found by querying
	  // the document element's clientLeft/clientTop.  Since we already called
	  // getClientBoundingRect we have already forced a reflow, so it is not
	  // too expensive just to query them all.

	  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
	  // 窗口边框标准是设 documentElement ,quirks 时设置 body
	  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
	  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
	  // 标准 ie 下 docElem.clientTop 就是 border-top
	  // ie7 html 即窗口边框改变不了。永远为 2
	  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;

	  return {
	    left: x,
	    top: y
	  };
	}

	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}

	function getScrollLeft(w) {
	  return getScroll(w);
	}

	function getScrollTop(w) {
	  return getScroll(w, true);
	}

	function getOffset(el) {
	  var pos = getClientPosition(el);
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScrollLeft(w);
	  pos.top += getScrollTop(w);
	  return pos;
	}
	function _getComputedStyle(elem, name, computedStyle_) {
	  var val = '';
	  var d = elem.ownerDocument;
	  var computedStyle = computedStyle_ || d.defaultView.getComputedStyle(elem, null);

	  // https://github.com/kissyteam/kissy/issues/61
	  if (computedStyle) {
	    val = computedStyle.getPropertyValue(name) || computedStyle[name];
	  }

	  return val;
	}

	var _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');
	var RE_POS = /^(top|right|bottom|left)$/;
	var CURRENT_STYLE = 'currentStyle';
	var RUNTIME_STYLE = 'runtimeStyle';
	var LEFT = 'left';
	var PX = 'px';

	function _getComputedStyleIE(elem, name) {
	  // currentStyle maybe null
	  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
	  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];

	  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
	  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
	  // 在 ie 下不对，需要直接用 offset 方式
	  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了

	  // From the awesome hack by Dean Edwards
	  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	  // If we're not dealing with a regular pixel number
	  // but a number that has a weird ending, we need to convert it to pixels
	  // exclude left right for relativity
	  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
	    // Remember the original values
	    var style = elem.style;
	    var left = style[LEFT];
	    var rsLeft = elem[RUNTIME_STYLE][LEFT];

	    // prevent flashing of content
	    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];

	    // Put in the new values to get a computed value out
	    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
	    ret = style.pixelLeft + PX;

	    // Revert the changed values
	    style[LEFT] = left;

	    elem[RUNTIME_STYLE][LEFT] = rsLeft;
	  }
	  return ret === '' ? 'auto' : ret;
	}

	var getComputedStyleX = undefined;
	if (typeof window !== 'undefined') {
	  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
	}

	function each(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(arr[i]);
	  }
	}

	function isBorderBoxFn(elem) {
	  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
	}

	var BOX_MODELS = ['margin', 'border', 'padding'];
	var CONTENT_INDEX = -1;
	var PADDING_INDEX = 2;
	var BORDER_INDEX = 1;
	var MARGIN_INDEX = 0;

	function swap(elem, options, callback) {
	  var old = {};
	  var style = elem.style;
	  var name = undefined;

	  // Remember the old values, and insert the new ones
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      old[name] = style[name];
	      style[name] = options[name];
	    }
	  }

	  callback.call(elem);

	  // Revert the old values
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      style[name] = old[name];
	    }
	  }
	}

	function getPBMWidth(elem, props, which) {
	  var value = 0;
	  var prop = undefined;
	  var j = undefined;
	  var i = undefined;
	  for (j = 0; j < props.length; j++) {
	    prop = props[j];
	    if (prop) {
	      for (i = 0; i < which.length; i++) {
	        var cssProp = undefined;
	        if (prop === 'border') {
	          cssProp = prop + which[i] + 'Width';
	        } else {
	          cssProp = prop + which[i];
	        }
	        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
	      }
	    }
	  }
	  return value;
	}

	/**
	 * A crude way of determining if an object is a window
	 * @member util
	 */
	function isWindow(obj) {
	  // must use == for ie8
	  /* eslint eqeqeq:0 */
	  return obj != null && obj == obj.window;
	}

	var domUtils = {};

	each(['Width', 'Height'], function (name) {
	  domUtils['doc' + name] = function (refWin) {
	    var d = refWin.document;
	    return Math.max(
	    // firefox chrome documentElement.scrollHeight< body.scrollHeight
	    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
	    d.documentElement['scroll' + name],
	    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
	    d.body['scroll' + name], domUtils['viewport' + name](d));
	  };

	  domUtils['viewport' + name] = function (win) {
	    // pc browser includes scrollbar in window.innerWidth
	    var prop = 'client' + name;
	    var doc = win.document;
	    var body = doc.body;
	    var documentElement = doc.documentElement;
	    var documentElementProp = documentElement[prop];
	    // 标准模式取 documentElement
	    // backcompat 取 body
	    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
	  };
	});

	/*
	 得到元素的大小信息
	 @param elem
	 @param name
	 @param {String} [extra]  'padding' : (css width) + padding
	 'border' : (css width) + padding + border
	 'margin' : (css width) + padding + border + margin
	 */
	function getWH(elem, name, extra) {
	  if (isWindow(elem)) {
	    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
	  } else if (elem.nodeType === 9) {
	    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
	  }
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	  var borderBoxValue = name === 'width' ? elem.offsetWidth : elem.offsetHeight;
	  var computedStyle = getComputedStyleX(elem);
	  var isBorderBox = isBorderBoxFn(elem, computedStyle);
	  var cssBoxValue = 0;
	  if (borderBoxValue == null || borderBoxValue <= 0) {
	    borderBoxValue = undefined;
	    // Fall back to computed then un computed css if necessary
	    cssBoxValue = getComputedStyleX(elem, name);
	    if (cssBoxValue == null || Number(cssBoxValue) < 0) {
	      cssBoxValue = elem.style[name] || 0;
	    }
	    // Normalize '', auto, and prepare for extra
	    cssBoxValue = parseFloat(cssBoxValue) || 0;
	  }
	  if (extra === undefined) {
	    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
	  }
	  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
	  var val = borderBoxValue || cssBoxValue;
	  if (extra === CONTENT_INDEX) {
	    if (borderBoxValueOrIsBorderBox) {
	      return val - getPBMWidth(elem, ['border', 'padding'], which, computedStyle);
	    }
	    return cssBoxValue;
	  }
	  if (borderBoxValueOrIsBorderBox) {
	    var padding = extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which, computedStyle) : getPBMWidth(elem, ['margin'], which, computedStyle);
	    return val + (extra === BORDER_INDEX ? 0 : padding);
	  }
	  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which, computedStyle);
	}

	var cssShow = {
	  position: 'absolute',
	  visibility: 'hidden',
	  display: 'block'
	};

	// fix #119 : https://github.com/kissyteam/kissy/issues/119
	function getWHIgnoreDisplay(elem) {
	  var val = undefined;
	  var args = arguments;
	  // in case elem is window
	  // elem.offsetWidth === undefined
	  if (elem.offsetWidth !== 0) {
	    val = getWH.apply(undefined, args);
	  } else {
	    swap(elem, cssShow, function () {
	      val = getWH.apply(undefined, args);
	    });
	  }
	  return val;
	}

	function css(el, name, v) {
	  var value = v;
	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	    for (var i in name) {
	      if (name.hasOwnProperty(i)) {
	        css(el, i, name[i]);
	      }
	    }
	    return undefined;
	  }
	  if (typeof value !== 'undefined') {
	    if (typeof value === 'number') {
	      value += 'px';
	    }
	    el.style[name] = value;
	    return undefined;
	  }
	  return getComputedStyleX(el, name);
	}

	each(['width', 'height'], function (name) {
	  var first = name.charAt(0).toUpperCase() + name.slice(1);
	  domUtils['outer' + first] = function (el, includeMargin) {
	    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
	  };
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

	  domUtils[name] = function (elem, val) {
	    if (val !== undefined) {
	      if (elem) {
	        var computedStyle = getComputedStyleX(elem);
	        var isBorderBox = isBorderBoxFn(elem);
	        if (isBorderBox) {
	          val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);
	        }
	        return css(elem, name, val);
	      }
	      return undefined;
	    }
	    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
	  };
	});

	// 设置 elem 相对 elem.ownerDocument 的坐标
	function setOffset(elem, offset) {
	  // set position first, in-case top/left are set even on static elem
	  if (css(elem, 'position') === 'static') {
	    elem.style.position = 'relative';
	  }

	  var old = getOffset(elem);
	  var ret = {};
	  var current = undefined;
	  var key = undefined;

	  for (key in offset) {
	    if (offset.hasOwnProperty(key)) {
	      current = parseFloat(css(elem, key)) || 0;
	      ret[key] = current + offset[key] - old[key];
	    }
	  }
	  css(elem, ret);
	}

	module.exports = _extends({
	  getWindow: function getWindow(node) {
	    var doc = node.ownerDocument || node;
	    return doc.defaultView || doc.parentWindow;
	  },
	  offset: function offset(el, value) {
	    if (typeof value !== 'undefined') {
	      setOffset(el, value);
	    } else {
	      return getOffset(el);
	    }
	  },

	  isWindow: isWindow,
	  each: each,
	  css: css,
	  clone: function clone(obj) {
	    var ret = {};
	    for (var i in obj) {
	      if (obj.hasOwnProperty(i)) {
	        ret[i] = obj[i];
	      }
	    }
	    var overflow = obj.overflow;
	    if (overflow) {
	      for (var i in obj) {
	        if (obj.hasOwnProperty(i)) {
	          ret.overflow[i] = obj.overflow[i];
	        }
	      }
	    }
	    return ret;
	  },
	  scrollLeft: function scrollLeft(w, v) {
	    if (isWindow(w)) {
	      if (v === undefined) {
	        return getScrollLeft(w);
	      }
	      window.scrollTo(v, getScrollTop(w));
	    } else {
	      if (v === undefined) {
	        return w.scrollLeft;
	      }
	      w.scrollLeft = v;
	    }
	  },
	  scrollTop: function scrollTop(w, v) {
	    if (isWindow(w)) {
	      if (v === undefined) {
	        return getScrollTop(w);
	      }
	      window.scrollTo(getScrollLeft(w), v);
	    } else {
	      if (v === undefined) {
	        return w.scrollTop;
	      }
	      w.scrollTop = v;
	    }
	  },

	  viewportWidth: 0,
	  viewportHeight: 0
	}, domUtils);

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);

	var Event = __webpack_require__(40);

	var Util = __webpack_require__(5);

	var HyperlinkDialog = __webpack_require__(46);
	var SymbolsDialog = __webpack_require__(48);
	var ImageDialog = __webpack_require__(49);
	var HorizontalDialog = __webpack_require__(51);
	var BackgroundImageDialog = __webpack_require__(52);
	var VideoDialog = __webpack_require__(53);
	var FileDialog = __webpack_require__(54);
	var LayoutDialog = __webpack_require__(55);
	var EmoticonDialog = __webpack_require__(56);
	var TextPasteDialog = __webpack_require__(57);
	var ParagraphDialog = __webpack_require__(58);
	var FileOpenDialog = __webpack_require__(59);
	var AutoSaveLoadDialog = __webpack_require__(60);
	var TemplateDialog = __webpack_require__(61);
	var DateFormatDialog = __webpack_require__(62);
	var BookmarkDialog = __webpack_require__(63);
	var TableDialog = __webpack_require__(64);
	var CellDialog = __webpack_require__(65);
	var SettingDialog = __webpack_require__(66);

	var AboutDialog = __webpack_require__(67);
	// var AboutDialog = require('./../layout/dialog/AboutDialogYooncoms');

	var UpperLowerDialog = __webpack_require__(68);
	var BlockQuoteDialog = __webpack_require__(69);
	var LayerDialog = __webpack_require__(70);

	var textFormatCopyObj = null;

	function MenuController(editorElement, editorContentView, $domObject, router, api){
	    this.editorElement = null;
	    this.editorContentView = null;

	    this.toolbarElement = null;

	    this.$dom = null;
	    this.router = null;
	    this.api = null;

	    this.keyboardEvent = null;

	    this.init(editorElement, editorContentView, $domObject, router, api);
	}

	MenuController.prototype.init = function (editorElement, editorContentView, $domObject, router, api){
	    this.$dom = $domObject;

	    this.editorElement = $(editorElement);
	    this.editorContentView = $(editorContentView);
	    this.toolbarElement = this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR);

	    this.router = router;
	    this.api = api;

	    this.event = new Event(this.editorElement, this.editorContentView, this.$dom, this.router, this, api);

	    this.keyboardEvent = this.event.getKeyboardEvent();
	    this.mouseEvent = this.event.getMouseEvent();

	    this.dialogCache = {
	        hyperlinkDialog : null,
	        symbolDialog : null,
	        imageDialog : null,
	        horizontalDialog : null,
	        backgroundImageDialog : null,
	        videoDialog : null,
	        fileDialog : null,
	        layoutDialog : null,
	        emoticonDialog : null,
	        textPasteDialog : null,
	        paragraphDialog : null,
	        fileOpenDialog : null,
	        autoSaveLoadDialog : null,
	        templateDialog : null,
	        dateFormatDialog : null,
	        bookmarkDialog : null,
	        tableDialog : null,
	        cellDialog : null,
	        settingDialog : null,
	        aboutDialog : null,
	        upperLowerDialog : null,
	        blockQuoteDialog : null,
	        layerDialog : null,
	    };
	};

	MenuController.prototype.menuSwitch = function(menu, options) {
	    var _this = this;

	    if (this.mouseEvent.removeResizeHandleController) {
	        this.mouseEvent.removeResizeHandleController();
	    }

	    this.closeAllToolbarBox();

	    // console.log(menu, options);

	    if (options && $(options.node).hasClass("disabled")){
	        return ;
	    }

	    switch(menu.id){

	        // 새 문서 - Success
	        case "new" :
	            var $contents = this.editorContentView;

	            var $previewContents = this.editorElement.find("." + Define.CLASS.PREVIEW_CONTENTS);

	            var $preview = null;

	            if ($previewContents.length) {
	                if ($previewContents[0].contentWindow && $previewContents[0].contentWindow.document) {
	                    $preview = $($previewContents[0].contentWindow.document.body);
	                }
	            }

	            if ($contents.html() == Define.DEFAULT_PARAGRAPH_HTML){
	                this.router.setClearAllHistories();
	                this.router.changedUndoRedoButtonEnable();
	                this.event.keyboardEvent.setClearInputKeyInfo();

	                return;
	            } else{
	                var isNew = false;

	                if (Util.isCheckEmpty($contents)) {
	                    isNew = true;
	                } else {
	                    isNew = confirm(window.kukuResource.confirmMessage.newRemoveContentMessage);
	                }

	                if (isNew){
	                    $contents.html(Define.DEFAULT_PARAGRAPH_HTML);

	                    this.router.setClearAllHistories();
	                    this.router.changedUndoRedoButtonEnable();
	                    this.event.keyboardEvent.setClearInputKeyInfo();

	                    this.$dom.selection.setFirstCollapse();

	                    $contents.css({
	                        'background-image' : '',
	                        'background-repeat' : '',
	                        'background-position-x' : '',
	                        'background-position-y' : '',
	                        'background-attachment' : '',
	                        'background-color' : ''
	                    });

	                    if ($preview && $preview.length) {
	                        $preview.html('');
	                        $preview.css({
	                            'background-image' : '',
	                            'background-repeat' : '',
	                            'background-position-x' : '',
	                            'background-position-y' : '',
	                            'background-attachment' : '',
	                            'background-color' : ''
	                        });
	                    }

	                    this.router.doStatusHighlight();
	                }
	            }
	            break;

	        // Print - Success
	        case "print" :
	            var $contentArea = this.api.editorContentView;

	            var eWindow = this.api.editorWindow;

	            $contentArea.find("img").each(function(idx, node){
	                var $node = $(node);
	                $node.attr("src", $node[0].src);

	                $node.css({
	                    width : $node.width(),
	                    height : $node.height()
	                })
	            });

	            var $pageBreak = $contentArea.find('.' + Define.CLASS.PAGE_BREAK);

	            $pageBreak.css('opacity', 0);

	            eWindow.focus();
	            eWindow.print();
	            $pageBreak.css('opacity', '');

	            break;

	        // all_select - Success
	        case "all_select" :
	            this.$dom.selection.selectAll();

	            break;

	        // fullscreen - Success
	        case "fullscreen" :
	            var $fullScreenButton = this.toolbarElement.find('[u-id="fullscreen"]');

	            if (this.editorElement.hasClass(Define.CLASS.FULL_SCREEN)){

	                $fullScreenButton.removeClass('on');

	                this.editorElement.removeClass(Define.CLASS.FULL_SCREEN);

	                var width = this.editorElement.attr(Define.ATTR.CURRENT_WIDTH);
	                var height = this.editorElement.attr(Define.ATTR.CURRENT_HEIGHT);

	                this.editorElement.removeAttr(Define.ATTR.CURRENT_WIDTH);
	                this.editorElement.removeAttr(Define.ATTR.CURRENT_HEIGHT);

	                this.api.setResize(width, height);
	            } else {
	                $fullScreenButton.addClass('on');

	                this.editorElement.addClass(Define.CLASS.FULL_SCREEN);

	                var currentWidth = this.editorElement[0].style.width || this.editorElement.css('width');
	                var currentHeight = this.editorElement[0].style.height || this.editorElement.css('height');

	                this.editorElement.attr(Define.ATTR.CURRENT_WIDTH, currentWidth);
	                this.editorElement.attr(Define.ATTR.CURRENT_HEIGHT, currentHeight);

	                this.api.setResize();
	            }

	            break;

	        // Save - Success
	        case "save" :
	            var htmlString = this.api.GetContentHTMLFile();

	            if ($.browser.msie) {
	                htmlString = htmlString.replace(/-ms-word-break/ig, 'word-break').replace(/-ms-word-wrap/ig, 'word-wrap');
	                if (window.navigator && window.navigator.msSaveBlob) {
	                    var blobObject = new Blob([htmlString]);
	                    window.navigator.msSaveBlob(blobObject, 'KukudocsEditor_' + (new Date().format('yyyyMMdd-hhmmss')) + '.html'); // The user only has the option of clicking the Save button.
	                } else {
	                    var $iframe = $('<iframe style="display: none;"/>');

	                    $(document.body).append($iframe);
	                    setTimeout(function(){
	                        var ifd = $iframe[0].contentWindow.document;
	                        ifd.open('text/plain', 'replace');
	                        ifd.write(htmlString);
	                        ifd.close();
	                        ifd.charset = _this.api.options.defaultCellSet;
	                        ifd.execCommand('saveas', true, 'KukudocsEditor_' + (new Date().format('yyyyMMdd-hhmmss')));

	                        $iframe.remove();
	                    }, 100);
	                }
	            } else {
	                var $anchor = $('<a />').attr({
	                    download: 'KukudocsEditor_' + (new Date().format('yyyyMMdd-hhmmss')) + '.html',
	                    href: "data:text/html," + htmlString
	                });

	                $anchor[0].click();
	            }

	            break;

	        // HTML File Open - Success
	        case "file_open" :

	            if (!this.dialogCache.fileOpenDialog) {
	                this.dialogCache.fileOpenDialog = new FileOpenDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.fileOpenDialog.openDialog();

	            break;

	        // auto_save_load - Success
	        case "auto_save_load" :

	            if (!this.dialogCache.autoSaveLoadDialog) {
	                this.dialogCache.autoSaveLoadDialog = new AutoSaveLoadDialog(this.editorElement, this.$dom, this.router, this.api).initDialog();
	            }

	            this.dialogCache.autoSaveLoadDialog.openDialog();

	            break;

	        // help - Success
	        case "help" :
	            var options = this.api.getOptions();
	            window.open(options.helpURL, '_blank');

	            break;

	        // setting - Success
	        case "setting" :
	            if (!this.dialogCache.settingDialog){
	                this.dialogCache.settingDialog = new SettingDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.settingDialog.openDialog();

	            break;

	        // setting - Success
	        case "about" :

	            if (!this.dialogCache.aboutDialog) {
	                this.dialogCache.aboutDialog = new AboutDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.aboutDialog.openDialog();

	            break;

	        // template - Success
	        case "template" :

	            if (!this.dialogCache.templateDialog) {
	                this.dialogCache.templateDialog = new TemplateDialog(this.editorElement, this.$dom, this.router, this.api).initDialog();
	            }

	            this.dialogCache.templateDialog.openDialog();

	            break;

	        // layout - Success
	        case "layout" :

	            if (!this.dialogCache.layoutDialog) {
	                this.dialogCache.layoutDialog = new LayoutDialog(this.editorElement, this.$dom, this.router, this.api).initDialog();
	            }

	            this.dialogCache.layoutDialog.openDialog();

	            break;

	        // text_paste - Success
	        case "text_paste" :

	            if (!this.dialogCache.textPasteDialog) {
	                this.dialogCache.textPasteDialog = new TextPasteDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.textPasteDialog.openDialog();
	            break;

	        // paragraph_margin - Success
	        case "paragraph_margin" :
	            if (!this.dialogCache.paragraphDialog) {
	                this.dialogCache.paragraphDialog = new ParagraphDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.paragraphDialog.openDialog();

	            break;

	        // blockquote - Success
	        case "blockquote" :
	            if (!this.dialogCache.blockQuoteDialog) {
	                this.dialogCache.blockQuoteDialog = new BlockQuoteDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.blockQuoteDialog.openDialog(menu.value);
	            break;

	        // layer - Success
	        case "layer" :
	        case "layerModifyDialog" :

	            if (!this.dialogCache.layerDialog) {
	                this.dialogCache.layerDialog = new LayerDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.layerDialog.openDialog(menu.value);
	            break;

	        // image - Success
	        case "image" :
	        case "imageModifyDialog" :
	            if (!this.dialogCache.imageDialog) {
	                this.dialogCache.imageDialog = new ImageDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.imageDialog.openDialog(menu.value);
	            break;

	        // video - Success
	        case "video" :
	        case "videoModifyDialog" :
	            if (!this.dialogCache.videoDialog) {
	                this.dialogCache.videoDialog = new VideoDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.videoDialog.openDialog(menu.value);
	            break;



	        //Below Operation Action
	        ///////////////////////////////////////////////////////////////

	        // textFormatCopy - Success
	        case "textFormatCopy":
	            var highlightStyle = this.$dom.selection.getHighlightStyle();

	            if (highlightStyle){
	                textFormatCopyObj = Util.cloneObject(highlightStyle);
	                this.toolbarElement.find('a[u-id="textFormatPaste"]').removeClass('disabled');
	            }

	            break;

	        // textFormatPaste - Success
	        case "textFormatPaste":
	            var isCollapsed = this.$dom.selection.isCollapsed();

	            if ((textFormatCopyObj !== null && !isCollapsed) || (textFormatCopyObj !== null && this.mouseEvent.selectedCellNodes)) {
	                _this.router.doOperation({type:"update", name:menu.id, value:textFormatCopyObj});
	            }
	            break;





	        // Paragraph_remove_format - Success
	        case "paragraph_remove_format":

	        // heading - Success
	        case "heading":

	        // line_height - Success
	        case "line_height":

	        // indent - Success
	        case "indent":

	        // outdent - Success
	        case "outdent":

	        // dir_ltr - Success
	        case "dir_ltr":

	        // dir_rtl - Success
	        case "dir_rtl":

	        // align_left - Success
	        case "align_left":

	        // align_center - Success
	        case "align_center":

	        // align_right - Success
	        case "align_right":

	        // align_justify - Success
	        case "align_justify":

	            if(menu.color){
	                menu.val = menu.color;
	            }

	            _this.router.doOperation({type:"update", name:menu.id, value:menu.val});

	            break;





	        // fontFamily - Success
	        case "fontFamily":

	        // fontSize - Success
	        case "fontSize":
	            var fontChangeNodeOffset = $.browser.msie ? 0 : 1;

	            var isCollapsed = false;

	            var lazyApplyFont = function(){
	                var eDocument = _this.router.editorObject.editorDocument;

	                var range = _this.$dom.selection.getRange();

	                var collapsed = range.collapsed;

	                var $selectedTD = _this.$dom.selection.getSelectedTd();

	                if ($selectedTD && $selectedTD.length > 0) {
	                    collapsed = false;
	                }

	                if (collapsed){
	                    try {
	                        var startContainer = range.startContainer;
	                        var startOffset = range.startOffset;

	                        var $startContainer = $(startContainer);

	                        var $spanNode = null;

	                        if (startContainer.nodeType == Node.TEXT_NODE) {
	                            var isClosest = true;

	                            if ($.browser.msie) {
	                                if (startContainer.length == startOffset) {
	                                    if (startContainer.nextSibling) {
	                                        var nextNode = startContainer.nextSibling;

	                                        if (nextNode.nodeType == Node.ELEMENT_NODE
	                                            && (nextNode.nodeName == 'SPAN' || nextNode.nodeName == 'FONT' )) {

	                                            if (nextNode.textContent == Define.UNICODE_ZERO_WIDTH_SPACE) {
	                                                range.setStart(nextNode, 0);
	                                                range.setEnd(nextNode, 0);

	                                                _this.$dom.selection.setRange(range);
	                                                _this.$dom.selection.setSaveRange();

	                                                $spanNode = $(nextNode);
	                                                isClosest = false;
	                                            }
	                                        }
	                                    }
	                                }
	                            }

	                            if (isClosest) {
	                                $spanNode = $startContainer.closest('span, font');
	                            }

	                        } else if (startContainer.nodeName == 'SPAN' || startContainer.nodeName == 'FONT') {
	                            $spanNode = $startContainer;
	                        }

	                        if ($spanNode && $spanNode.length && $spanNode.html() != Define.UNICODE_ZERO_WIDTH_SPACE) {
	                            $spanNode = null;
	                        }

	                        if (!$spanNode || !$spanNode.length) {
	                            $spanNode = _this.$dom.selection.createElement('SPAN');

	                            var textNode = eDocument.createTextNode(Define.UNICODE_ZERO_WIDTH_SPACE);
	                            $spanNode[0].appendChild(textNode);

	                            range.insertNode($spanNode[0]);

	                            range.setStart($spanNode[0], fontChangeNodeOffset);
	                            range.setEnd($spanNode[0], fontChangeNodeOffset);

	                            _this.$dom.selection.setRange(range);
	                            _this.$dom.selection.setSaveRange();
	                        }

	                        switch (menu.id) {
	                            case "fontFamily" :
	                                if ($spanNode[0].nodeName == 'FONT') {
	                                    $spanNode.removeAttr('face');
	                                }

	                                break;

	                            case "fontSize" :
	                                if ($spanNode[0].nodeName == 'FONT') {
	                                    $spanNode.removeAttr('size');
	                                }

	                                break;
	                        }

	                        $spanNode.css(menu.id, menu.val);
	                    } catch(exception) {
	                        console.log('Collapsed Font Change Error');
	                    }

	                } else {
	                    _this.router.doOperation({type:"update", name:menu.id, value:menu.val});
	                }
	            };

	            if ($.browser.msie) {
	                var range = _this.$dom.selection.getRange();

	                isCollapsed = range.collapsed;

	                setTimeout(function(){
	                    _this.$dom.selection.setContentEditable(true);

	                    lazyApplyFont();
	                }, 100);

	            } else {
	                lazyApplyFont();
	            }

	            break;


	        // color - Success
	        case "color":

	        // backgroundColor - Success
	        case "backgroundColor":

	        // bold - Success
	        case "bold":

	        // italic - Success
	        case "italic":

	        // underline - Success
	        case "underline":

	        // strikeThrough - Success
	        case "strikeThrough":

	        // superscript - Success
	        case "superscript":

	        // subscript - Success
	        case "subscript":

	            var isCollapsed = false;

	            var lazyApplyFormat = function(){
	                if(menu.color){
	                    menu.val = menu.color;
	                }

	                if ($.browser.msie) {
	                    var range = _this.$dom.selection.getRange();
	                    var collapsed = range.collapsed;

	                    var $selectedTD = _this.$dom.selection.getSelectedTd();

	                    if ($selectedTD && $selectedTD.length > 0) {
	                        collapsed = false;
	                    }

	                    if (collapsed){
	                        var cmd = '';
	                        var value = menu.val;

	                        if (range.startContainer.nodeType == Node.TEXT_NODE) {
	                            if (isCollapsed) {
	                                var startContainer = range.startContainer;
	                                var startOffset = range.startOffset;

	                                var beforeText = startContainer.textContent[startOffset - 1] ;
	                                var afterText = startContainer.textContent[startOffset];

	                                if (beforeText && afterText) {
	                                    if ((beforeText != ' ' && beforeText != Define.UNICODE_ZERO_WIDTH_SPACE) && (afterText != ' ' && afterText != Define.UNICODE_ZERO_WIDTH_SPACE)) {
	                                        _this.router.doOperation({type:"update", name:menu.id, value:menu.val});
	                                        return;
	                                    }
	                                }
	                            }
	                        }

	                        switch (menu.id) {
	                            case "color" :
	                                cmd = 'foreColor';

	                                break;

	                            case "backgroundColor" :
	                                cmd = 'backColor';

	                                break;

	                            case "bold" :
	                                cmd = "bold";
	                                value = menu.val == 'on';
	                                break;

	                            case "italic" :
	                                cmd = "italic";
	                                value = menu.val == 'on';

	                                break;

	                            case "underline" :
	                                cmd = 'underline';
	                                value = menu.val == 'on';

	                                break;

	                            case "strikeThrough" :
	                                cmd = 'strikeThrough';
	                                value = menu.val == 'on';

	                                break;

	                            case "superscript" :
	                                cmd = 'superscript';
	                                value = menu.val == 'on';

	                                break;

	                            case "subscript" :
	                                cmd = 'subscript';
	                                value = menu.val == 'on';

	                                break;
	                        }

	                        var eDocument = _this.router.editorObject.editorDocument;

	                        var $span = _this.$dom.selection.createElement('span');
	                        $span.html(Define.UNICODE_ZERO_WIDTH_SPACE);
	                        range.insertNode($span[0]);
	                        _this.$dom.selection.applyNewRange($span[0], 0, $span[0], $span[0].childNodes.length);

	                        eDocument.execCommand(cmd, false, value);
	                        _this.$dom.selection.getSelection().collapseToEnd();
	                        _this.$dom.selection.setSaveRange();

	                    } else {
	                        _this.router.doOperation({type:"update", name:menu.id, value:menu.val});
	                    }

	                } else {
	                    _this.router.doOperation({type:"update", name:menu.id, value:menu.val});
	                }
	            };

	            if ($.browser.msie) {
	                var range = _this.$dom.selection.getRange();

	                isCollapsed = range.collapsed;

	                setTimeout(function(){
	                    _this.$dom.selection.setContentEditable(true);

	                    lazyApplyFormat();
	                }, 100);

	            } else {
	                lazyApplyFormat();
	            }

	            break;


	        // remove_format - Success
	        case "remove_format":
	            if ($.browser.msie) {
	                this.$dom.selection.setContentEditable(false);

	                setTimeout(function(){
	                    _this.router.doOperation({type:"update", name:menu.id, value:menu.val});
	                }, 10);
	            } else {
	                _this.router.doOperation({type:"update", name:menu.id, value:menu.val});
	            }

	            break;





	        // link - Success
	        case "link" :

	            if (!this.dialogCache.hyperlinkDialog) {
	                this.dialogCache.hyperlinkDialog = new HyperlinkDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.hyperlinkDialog.openDialog();
	            break;

	        // unlink - Success
	        case "unlink" :
	            var valueObject = {type:"update", name:"hyperlink", value:"remove"};

	            _this.router.doOperation(valueObject);
	            break;

	        // file Link - Success
	        case "file" :
	            if (!this.dialogCache.fileDialog) {
	                this.dialogCache.fileDialog = new FileDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.fileDialog.openDialog();
	            break;

	        // bookmark - Success
	        case "bookmark" :

	            if (!this.dialogCache.bookmarkDialog) {
	                this.dialogCache.bookmarkDialog = new BookmarkDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.bookmarkDialog.openDialog();
	            break;

	        // horizontal - Success
	        case "horizontal" :
	        case "horizontal_modify" :

	            if (!this.dialogCache.horizontalDialog) {
	                this.dialogCache.horizontalDialog = new HorizontalDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.horizontalDialog.openDialog(menu.value);
	            break;

	        // date_format - Success
	        case "date_format" :

	            if (!this.dialogCache.dateFormatDialog) {
	                this.dialogCache.dateFormatDialog = new DateFormatDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.dateFormatDialog.openDialog();
	            break;

	        // symbol - Success
	        case "symbol" :

	            if (!this.dialogCache.symbolDialog) {
	                this.dialogCache.symbolDialog = new SymbolsDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.symbolDialog.openDialog();

	            break;

	        // emoticon - Success
	        case "emoticon" :

	            if (!this.dialogCache.emoticonDialog) {
	                this.dialogCache.emoticonDialog = new EmoticonDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.emoticonDialog.openDialog();

	            break;

	        // background_image - Success
	        case "background_image" :
	            if (!this.dialogCache.backgroundImageDialog) {
	                this.dialogCache.backgroundImageDialog = new BackgroundImageDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.backgroundImageDialog.openDialog(menu.value);
	            break;

	        // upper_lower - Success
	        case "upper_lower" :
	            if (!this.dialogCache.upperLowerDialog) {
	                this.dialogCache.upperLowerDialog = new UpperLowerDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.upperLowerDialog.openDialog(menu.value);
	            break;

	        case "uppercase" :
	            var sendOperation = {type:"create", name:"upperLower", value: 'upper' };
	            _this.router.doOperation(sendOperation);

	            break;

	        case "lowercase" :
	            var sendOperation = {type:"create", name:"upperLower", value: 'lower' };
	            _this.router.doOperation(sendOperation);

	            break;

	        // page_break - Success
	        case "page_break":

	            var isCollapsed = this.$dom.selection.isCollapsed();

	            if (isCollapsed) {
	                _this.router.doOperation({type:"create", name:"page_break", value: ""});
	            }

	            break;

	        // find_replace - Success
	        case "find_replace" :
	            _this.router.throwOperation(menu);

	            break;

	        // List - Success
	        case "numbered_list":
	        case "bullet_list":

	            // ********** 변경할때 Menubar에 항목도 같이 변경해줘야함 **********

	            var sendOperation = {type:"create", name:"list", value: menu.value };

	            _this.router.doOperation(sendOperation);

	            break;







	        // Below Table Spec

	        // Cell Dialog - Success
	        case "cellModifyDialog":

	            var initData = {
	                type : "modify"
	            };

	            if (menu.value) {
	                initData = $.extend(true, {}, initData, menu.value);
	            }

	            if (!this.dialogCache.cellDialog) {
	                this.dialogCache.cellDialog = new CellDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.cellDialog.openDialog(initData);

	            break;

	        // Table Insert & Modify Dialog - Success
	        case "tableInsertDialog":
	        case "tableModifyDialog":
	            var initData = {
	                type : "insert"
	            };

	            if (menu.id === "tableModifyDialog") {
	                initData.type = "modify";

	                if (menu.value) {
	                    initData = $.extend(true, {}, initData, menu.value);
	                }
	            }

	            if (!this.dialogCache.tableDialog) {
	                this.dialogCache.tableDialog = new TableDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.tableDialog.openDialog(initData);

	            break;

	        // table insert - Success
	        case "table":
	            var width = 0;

	            var range = this.$dom.selection.getRange();
	            var node = range.startContainer;

	            var parentBlock = this.$dom.selection.getParentBlockNode(node);

	            var $parentBlock = $(parentBlock);

	            var editorContentView = this.api.editorContentView;

	            if ($parentBlock.length && $parentBlock.is(Define.PARAGRAPH_NODES.join(',') + ',div')) {
	                width = $(parentBlock).width();
	            } else {
	                width = editorContentView.width();
	            }

	            if (this.api.options.defaultTableWidth) {
	                if (width > this.api.options.defaultTableWidth) {
	                    width = this.api.options.defaultTableWidth;
	                }
	            }

	            var defaultTableSet = {
	                isModify : false,
	                row : menu.value.row || 3,
	                col : menu.value.col || 3,
	                width : width,
	                height : null,
	                marginLeft : null,
	                align : null,
	                id : null,
	                className : null,
	                borderSeparate : null,
	                border : {
	                    //defaultBorder : { width : 0, type : 'solid', color : '#000000' },
	                    //top : { width : 0, type : 'solid', color : '#000000' },
	                    //middle : { width : 0, type : 'solid', color : '#000000' },
	                    //bottom : { width : 0, type : 'solid', color : '#000000' },
	                    //left : { width : 0, type : 'solid', color : '#000000' },
	                    //center : { width : 0, type : 'solid', color : '#000000' },
	                    //right : { width : 0, type : 'solid', color : '#000000' }
	                },
	                cellSpacing : null,
	                cellPadding : null,
	                caption : null,
	                summary : null,

	                image : null,

	                attachment : null,
	                repeat : null,
	                positionX : null,
	                positionY : null,

	                backgroundColor :null,
	                scope : null,
	                headerType : null
	            };

	            var opList = [];

	            opList.push({type:"create", name:"table", value: defaultTableSet});
	            _this.router.doOperation(opList);
	            break;

	        // table_merge - Success
	        case "table_merge":
	            var obj = {type:"update", name:"table", value: { subType : "mergeCell"}};

	            _this.router.doOperation(obj);

	            break;

	        // table_split_col - Success
	        case "table_split_col":
	            var obj = {type:"update", name:"table", value: { subType : "splitCol"}};

	            _this.router.doOperation(obj);
	            break;

	        // table_split_row - Success
	        case "table_split_row":
	            var obj = {type:"update", name:"table", value: { subType : "splitRow"}};

	            _this.router.doOperation(obj);
	            break;

	        // table_background_color - Success
	        case "table_background_color":
	            if(!menu.color){
	                return;
	            }

	            var obj = {type:"update", name:"table", value: { subType : "tableBackgroundColor"}};

	            obj.value.color = menu.color;

	            _this.router.doOperation(obj);

	            break;

	        // table_border_style - Success
	        case "table_border_style":
	            if(!menu.type){
	                return;
	            }

	            var obj = {
	                type:"update",
	                name:"table",
	                value: {
	                    subType : "cellModify",
	                    align : null,
	                    verticalAlign : null,
	                    whiteSpace : null,
	                    headerType : null,
	                    scopeType : null,
	                    image : null,
	                    attachment : null,
	                    repeat : null,
	                    positionX : null,
	                    positionY : null,
	                    backgroundColor : null
	                }
	            };

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            //type : type, size : menu.size, style : menu.style, color : menu.color

	            var borderStyle = {
	                width : menu.size,
	                type : menu.style,
	                color : menu.color
	            };

	            switch (menu.type) {
	                case "tb_out" :
	                    obj.value.border = {
	                        top : borderStyle,
	                        left : borderStyle,
	                        right : borderStyle,
	                        bottom : borderStyle
	                    };

	                    break;

	                case "tb_none" :
	                    borderStyle.type = 'none';

	                    obj.value.border = {
	                        top : borderStyle,
	                        left : borderStyle,
	                        right : borderStyle,
	                        bottom : borderStyle
	                    };

	                    break;
	                case "tb_top" :
	                    obj.value.border = {
	                        top : borderStyle
	                    };
	                    break;
	                case "tb_left" :
	                    obj.value.border = {
	                        left : borderStyle
	                    };
	                    break;
	                case "tb_right" :
	                    obj.value.border = {
	                        right : borderStyle
	                    };
	                    break;
	                case "tb_bottom" :
	                    obj.value.border = {
	                        bottom : borderStyle
	                    };
	                    break;
	            }

	            _this.router.doOperation(obj);

	            break;

	        // table_insert_top - Success
	        case "table_insert_top":
	            var obj = {type:"update", name:"table", value: { subType : "insertTop"}};

	            _this.router.doOperation(obj);
	            break;

	        // table_insert_bottom - Success
	        case "table_insert_bottom":
	            var obj = {type:"update", name:"table", value: { subType : "insertBottom"}};

	            _this.router.doOperation(obj);
	            break;

	        // table_insert_left - Success
	        case "table_insert_left":
	            var obj = {type:"update", name:"table", value: { subType : "insertLeft"}};

	            _this.router.doOperation(obj);
	            break;

	        // table_insert_right - Success
	        case "table_insert_right":
	            var obj = {type:"update", name:"table", value: { subType : "insertRight"}};

	            _this.router.doOperation(obj);
	            break;

	        // table_remove_col - Success
	        case "table_remove_col":
	            var obj = {type:"update", name:"table", value: { subType : "removeCol"}};

	            _this.router.doOperation(obj);

	            break;

	        // table_remove_row - Success
	        case "table_remove_row":
	            var obj = {type:"update", name:"table", value: { subType : "removeRow"}};

	            _this.router.doOperation(obj);

	            break;

	        // vertical_align - Success
	        case "vertical_align_top":
	        case "vertical_align_middle":
	        case "vertical_align_bottom":
	        case "vertical_align_baseline":
	            var obj = {type:"update", name:"table", value: { subType : menu.id }};

	            _this.router.doOperation(obj);

	            break;

	        //Calculate Cell
	        case "calculate_horizontal_sum":
	        case "calculate_vertical_sum":
	        case "calculate_horizontal_avg":
	        case "calculate_vertical_avg":
	            var obj = {type:"update", name:"table", value: { subType : menu.id }};

	            _this.router.doOperation(obj);

	            break;

	        // cell_size - Success
	        case "cell_horizontal_size":
	        case "cell_vertical_size":
	        case "cell_both_size":
	            var obj = {type:"update", name:"table", value: { subType : menu.id }};

	            _this.router.doOperation(obj);

	            break;

	        // table_remove_table - Success
	        case "table_remove_table":
	            var obj = {type:"update", name:"table", value: { subType : "removeTable"}};

	            _this.router.doOperation(obj);

	            break;

	        // table_to_text - Success
	        case "table_to_text":
	            _this.router.doOperation({type:"update", name:"table", value: { subType : "tableToText" }});

	            break;




	        // Below Special Operation
	        case "copy" :
	            if ($.browser.msie) {
	                this.$dom.selection.execCommand('Copy');
	            } else {
	                alert(window.kukuResource.alertMessage.copyKeydownMessage);
	            }
	            break;

	        case "paste" :
	            if ($.browser.msie) {
	                this.$dom.selection.execCommand('Paste');
	            } else {
	                alert(window.kukuResource.alertMessage.pasteKeydownMessage);
	            }
	            break;

	        case "cut" :
	            if ($.browser.msie) {
	                this.$dom.selection.execCommand('cut');
	            } else {
	                alert(window.kukuResource.alertMessage.cutKeydownMessage);
	            }
	            break;

	        case "undo" :
	            this.event.keyboardEvent.checkedKeydownInputKey();

	            _this.router.doOperation({type:"update", name:"undo"});

	            if ($.browser.msie) {
	                this.$dom.selection.setContentEditable(false);
	                this.$dom.selection.setContentEditable(true);
	            }
	            this.event.keyboardEvent.setClearInputKeyInfo();

	            break;

	        case "redo" :
	            _this.router.doOperation({type:"update", name:"redo"});

	            if ($.browser.msie) {
	                this.$dom.selection.setContentEditable(false);
	                this.$dom.selection.setContentEditable(true);
	            }

	            this.event.keyboardEvent.setClearInputKeyInfo();

	            break;

	        case "table_lock" :

	            if (_this.api.options.useLockMenu) {

	                if (!_this.api.options.cell_lock_name) {
	                    alert(window.kukuResource.alertMessage.notSetCellLockNameError);
	                    return;
	                }

	                var $cellNode = _this.$dom.selection.getSelectedTd();

	                if (!$cellNode || !$cellNode.length) {
	                    $cellNode = _this.$dom.selection.getCurrentCell();
	                }

	                if ($cellNode && $cellNode.length) {
	                    var $table = $cellNode.closest('TABLE');

	                    if ($table.length) {
	                        var isCellLock = false;

	                        $table.each(function(){
	                            isCellLock = this.hasAttribute(_this.api.options.cell_lock_name);

	                            if (isCellLock) {
	                                return false;
	                            }
	                        });

	                        if (isCellLock) {
	                            $table.removeAttr(_this.api.options.cell_lock_name);
	                        } else {
	                            $table.attr(_this.api.options.cell_lock_name, _this.api.options.cell_lock_name);
	                        }

	                        _this.router.externalSetUndoHistory();
	                        _this.router.changedUndoRedoButtonEnable();
	                    }
	                }
	            }

	            break;

	        case "cell_lock" :

	            if (_this.api.options.useLockMenu) {

	                if (!_this.api.options.cell_lock_name) {
	                    alert(window.kukuResource.alertMessage.notSetCellLockNameError);
	                    return;
	                }

	                var $cellNode = _this.$dom.selection.getSelectedTd();

	                if (!$cellNode || !$cellNode.length) {
	                    $cellNode = _this.$dom.selection.getCurrentCell();
	                }

	                if ($cellNode && $cellNode.length) {

	                    var isCellLock = false;

	                    $cellNode.each(function(){
	                        isCellLock = this.hasAttribute(_this.api.options.cell_lock_name);

	                        if (isCellLock) {
	                            return false;
	                        }
	                    });

	                    if (isCellLock) {
	                        $cellNode.removeAttr(_this.api.options.cell_lock_name);
	                    } else {
	                        $cellNode.attr(_this.api.options.cell_lock_name, _this.api.options.cell_lock_name);
	                    }

	                    _this.router.externalSetUndoHistory();
	                    _this.router.changedUndoRedoButtonEnable();
	                }
	            }

	            break;

	        case "cell_lock" :

	            if (_this.api.options.useLockMenu) {

	                if (!_this.api.options.cell_lock_name) {
	                    alert(window.kukuResource.alertMessage.notSetCellLockNameError);
	                    return;
	                }

	                var $cellNode = _this.$dom.selection.getSelectedTd();

	                if (!$cellNode || !$cellNode.length) {
	                    $cellNode = _this.$dom.selection.getCurrentCell();
	                }

	                if ($cellNode && $cellNode.length) {

	                    var isCellLock = false;

	                    $cellNode.each(function(){
	                        isCellLock = this.hasAttribute(_this.api.options.cell_lock_name);

	                        if (isCellLock) {
	                            return false;
	                        }
	                    });

	                    if (isCellLock) {
	                        $cellNode.removeAttr(_this.api.options.cell_lock_name);
	                    } else {
	                        $cellNode.attr(_this.api.options.cell_lock_name, _this.api.options.cell_lock_name);
	                    }

	                    _this.router.externalSetUndoHistory();
	                    _this.router.changedUndoRedoButtonEnable();
	                }
	            }

	            break;

	        case "border_visualize" :

	            if (_this.api.options.useNoneBorderVisualize) {

	                var eDocument = _this.router.editorObject.editorDocument;

	                var $eBody = $(eDocument.body);

	                var $cellNodes = $eBody.find(Define.CELL_TYPE.join(','));

	                if ($cellNodes.length) {
	                    if (_this.api.options.isNoneBorderVisualize) {
	                        Util.removeAllNoneBorderVisualize($cellNodes);
	                    } else {
	                        Util.setNoneBorderVisualize($cellNodes);
	                    }
	                }

	                _this.api.options.isNoneBorderVisualize = !_this.api.options.isNoneBorderVisualize;

	                this.router.doStatusHighlight();
	            }

	            break;
	        
	        case "more" :
	            var menuMoreBtn = $('.menus .menu_more');
	            var menuMoreWrap = $('.menus .menu_more_wrap');
	            if (menuMoreBtn.hasClass("active")) {
	                menuMoreBtn.removeClass("active");
	                menuMoreWrap.removeClass("active");
	            } else {
	                menuMoreBtn.addClass("active");
	                menuMoreWrap.addClass("active");
	            }
	            break;

	        default :

	            console.log("Unknown Menu : ", menu.id);
	            break;
	    }
	};

	MenuController.prototype.setRouter = function(router) {
	    this.router = router;
	};

	MenuController.prototype.getRouter = function() {
	    return this.router;
	};

	MenuController.prototype.closeAllDialog = function(isNotClearToolbar) {
	    for (var key in this.dialogCache) {
	        if (this.dialogCache[key]) {
	            this.dialogCache[key].closeDialog();
	        }
	    }

	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_FIND_REPLACE).hide();

	    if (!isNotClearToolbar) {
	        this.closeAllToolbarBox();
	    }
	};

	MenuController.prototype.closeAllToolbarBox = function() {
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_ACTIVE).removeClass(Define.WIDGET_CLASS.UI_ACTIVE);
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_SELECT_LIST).hide();
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_COMBO_BOX).hide();
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_COLOR_PICKER).hide();
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_LIST_PICKER).hide();
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_TABLE_PICKER).hide();
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_CUSTOM_BOX).hide();

	    if (this.api.menuBar) {
	        this.api.menuBar.hideMenuBar();
	    }
	};

	module.exports = MenuController;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	var Clipboard = __webpack_require__(41);
	var Keyboard = __webpack_require__(43);
	var Mouse = __webpack_require__(44);
	var ContextMenu = __webpack_require__(45);

	function Event(editorElement, editorContentView, $domObject, router, menuController, api){
	    this.editorElement = null;
	    this.editorContentView = null;

	    this.router = null;
	    this.$dom = null;
	    this.menuController = null;

	    this.clipboardEvent = null;
	    this.keyboardEvent = null;
	    this.mouseEvent = null;
	    this.contextMenu = null;

	    this.init(editorElement, editorContentView, $domObject, router, menuController, api);
	}

	Event.prototype.init = function(editorElement, editorContentView, $domObject, router, menuController, api) {
	    this.$dom = $domObject;

	    this.editorElement = $(editorElement);
	    this.editorArea = this.editorElement.find("." + Define.CLASS.EDITOR_AREA);
	    this.toolbarElement = this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR);
	    this.footerElement = this.editorElement.find('.' + Define.CLASS.EDITOR_FOOTER);

	    this.editorContentView = $(editorContentView);

	    this.router = router;
	    this.menuController = menuController;
	    this.api = api;

	    this.createWindowEventGuard();

	    this.initClipboardEvent();

	    this.initKeyboardEvent();

	    this.initMouseEvent();

	    this.initDocumentEvent();

	    this.initToolbarEvent();

	    this.initDialogEvent();

	    this.initFooterEvent();
	};

	Event.prototype.createWindowEventGuard = function() {
	    var _this = this;

	    this.$guardDiv = $('<div class="' + Define.CLASS.GUARD_WRAPPING + '"/>');
	    this.$guardDiv.on('mousedown', function() {
	        _this.hideGuard();
	    });

	    this.hideGuard();
	    this.editorArea.prepend(this.$guardDiv);
	};

	Event.prototype.showGuard = function(cursor) {
	    this.$guardDiv.css('cursor', cursor);
	    this.$guardDiv.show();
	};

	Event.prototype.hideGuard = function() {
	    this.$guardDiv.css('cursor', '');
	    this.$guardDiv.hide();
	};

	Event.prototype.initClipboardEvent = function(){
	    this.clipboardEvent = new Clipboard(this.editorElement, this.editorContentView, this.$dom, this.router, this.menuController, this);

	    var eventList = ["paste", "copy", "cut"];

	    this.editorContentView.on(eventList.join(' '), $.proxy(this.fireClipboardEvents, this));
	};

	Event.prototype.initKeyboardEvent = function() {
	    this.keyboardEvent = new Keyboard(this.editorElement, this.editorContentView, this.$dom, this.router, this.menuController, this);

	    var eDocument = this.router.editorObject.editorDocument;

	    var eventList = ["keydown", "keyup", "keypress", "compositionstart", "compositionend"];

	    $(eDocument).on(eventList.join(' '), $.proxy(this.fireKeyboardEvents, this));

	    this.initTextAreaKeyboardEvent();
	};

	Event.prototype.initTextAreaKeyboardEvent = function() {
	    var $htmlView = this.editorElement.find("." + Define.CLASS.HTML_VIEW);
	    var $textView = this.editorElement.find("." + Define.CLASS.TEXT_VIEW);

	    var $htmlContents = $htmlView.find('.' + Define.CLASS.HTML_CONTENTS);
	    var $textContents = $textView.find('.' + Define.CLASS.TEXT_CONTENTS);

	    var textAreaTabEvent = function(e) {
	        if(e.keyCode === 9) { // tab was pressed

	            // get caret position/selection
	            var start = this.selectionStart;
	            var end = this.selectionEnd;

	            var $this = $(this);
	            var value = $this.val();

	            // set textarea value to: text before caret + tab + text after caret
	            $this.val(value.substring(0, start)
	                + "\t"
	                + value.substring(end));

	            // put caret at right position again (add one for the tab)
	            this.selectionStart = this.selectionEnd = start + 1;

	            // prevent the focus lose
	            e.preventDefault();
	        }
	    };

	    $htmlContents.keydown(textAreaTabEvent);
	    $textContents.keydown(textAreaTabEvent);
	};

	Event.prototype.initMouseEvent = function() {
	    this.mouseEvent = new Mouse(this.editorElement, this.editorContentView, this.$dom, this.router, this.menuController, this);

	    var normalEventList = ["mousedown", "mousemove", "mouseup", "click", "dblclick", "mouseleave", "mouseenter", "scroll" /*, "mousewheel", "DOMMouseScroll"*/ ];

	    if ($.browser.mobile) {
	        normalEventList.push('touchstart');
	        normalEventList.push('touchmove');
	        normalEventList.push('touchend');
	    }

	    var dragEventList = ["drag", "dragstart", "dragend", "drop", "dragexit", "dragover", "dragenter", "dragleave"];

	    var eventList = normalEventList.concat(dragEventList);

	    // Editor Event Setting
	    this.editorContentView.on(eventList.join(' '), $.proxy(this.fireMouseEvents, this));
	};

	Event.prototype.initDocumentEvent = function() {
	    var _this = this;

	    var $window = $(window);
	    var $document = $(document);

	    var eDocument = this.router.editorObject.editorDocument;
	    var $eDocument = $(eDocument);

	    this.contextMenu = new ContextMenu(this.editorElement, this.editorContentView, this.$dom, this.router, this.menuController);

	    this.editorContentView.on("contextmenu", function(e) {
	        _this.resetEditorControl(true);
	        _this.contextMenu.showContextMenu(e);
	        _this.stop(e);

	        return false;
	    });

	    $eDocument.on("contextmenu", function(e){
	        _this.hideGuard();

	        _this.$dom.selection.setContentEditable(true);
	        _this.$dom.selection.editorFocus();
	        _this.contextMenu.hideContextMenu(e);

	        _this.stop(e);

	        return false;
	    });

	    $eDocument.on('scroll', function(e){
	        _this.mouseEvent.fireEvent(e);
	    });

	    $eDocument.on('mouseup', function(e){
	        if (_this.mouseEvent.isForwardLeaveEvent) {
	            _this.mouseEvent.fireEvent(e);
	        }
	    });

	    $eDocument.on('mscontrolselect', function(e){
	        var target = e.target;
	        var stopWindowResizeNodes = ['TABLE', 'IMG'];

	        if (target.nodeType == Node.ELEMENT_NODE && stopWindowResizeNodes.indexOf(target.nodeName) > -1) {
	            _this.stop(e);
	            return false;
	        }

	        if (['INPUT'].indexOf(target.nodeName) > -1) {
	            // _this.stop(e);
	            // target.focus();

	            if (target.type == 'radio' || target.type == 'checkbox') {
	                // target.click();
	            }

	            return true;
	        }

	        if (['SELECT'].indexOf(target.nodeName) > -1) {
	            // target.focus();
	            // _this.stop(e);
	            return true;
	            // return false;
	        }

	        // if (target.nodeName == 'INPUT') {
	        //     if (target.type == 'radio' || target.type == 'checkbox') {
	        //         _this.stop(e);
	        //         return false;
	        //     }
	        // }

	        this.isMsControlSelection = {
	            node : target,
	            width : target.clientWidth,
	            height : target.clientHeight
	        }
	    });

	    $document.on('contextmenu', function(e){
	        _this.hideGuard();

	        var target = e.target;

	        if (target.nodeType == Node.ELEMENT_NODE && ['INPUT', 'TEXTAREA'].indexOf(target.nodeName) > -1) {
	            return;
	        }

	        _this.stop(e);
	        return false;
	    });

	    $window.on('keydown', function(e){
	        var isCtrl = e.ctrlKey;
	        var isAlt = e.altKey;
	        var isShift = e.shiftKey;
	        var isMetaKey = e.metaKey;

	        if (!isCtrl && !isAlt && !isShift && !isMetaKey && [8, 27].indexOf(e.keyCode) > -1) {
	            var target = e.target;

	            if (target.nodeType == Node.ELEMENT_NODE && ['SELECT', 'INPUT', 'TEXTAREA'].indexOf(target.nodeName) > -1) {
	                return;
	            }
	            _this.keyboardEvent.fireEvent(e);
	        }
	    });

	    $window.on('mousedown mousemove mouseup', function(e){
	        var target = e.target;

	        if (target.nodeType == Node.ELEMENT_NODE && ['INPUT', 'TEXTAREA'].indexOf(target.nodeName) > -1) {
	            return;
	        }

	        _this.mouseEvent.fireWindowEvent(e);
	    });

	    $window.on('blur', function(e){

	        _this.contextMenu.hideContextMenu();

	        if (_this.editorContentView.attr(Define.ATTR.CONTENT_EDIT_ABLE) != 'false'){
	            // window.console.log("Window Blur");
	            _this.$dom.selection.setSaveRange();
	        }
	    });

	    $document.on('blur', function(e){
	        // console.log("$document Blur");
	    });
	};

	Event.prototype.initToolbarEvent = function() {
	    var _this = this;

	    //Root Editor Event Setting
	    this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).on("mousedown", function(e){
	        _this.contextMenu.hideContextMenu();

	        if(e.target.nodeName != "INPUT"){
	            e.preventDefault();
	            return false;
	        }
	    });
	    
	};

	Event.prototype.initDialogEvent = function() {
	    var _this = this;

	    //Dialog 사용시 빈 공간 클릭시 자동으로 닫힘 처리
	    this.editorElement.find("." + Define.CLASS.DIALOG).on("mousedown", function(e){
	        _this.contextMenu.hideContextMenu();

	        var $target = $(e.target);

	        if ($target.is("." + Define.CLASS.DIALOG)) {
	            _this.$dom.selection.removeModifyTargetNode();
	            $target.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();
	            $target.hide();

	            _this.$dom.selection.editorFocus();
	            _this.$dom.selection.setContentEditable(true);
	            _this.$dom.selection.restoreRange();

	            _this.stop(e);

	            return false;
	        }
	    });
	};

	Event.prototype.initFooterEvent = function() {

	    var _this = this;

	    var $document = $(document);

	    this.footerElement.on("mousedown touchstart", function(e){
	        _this.resetEditorControl();

	        if (e.type == "touchstart") {
	            e.preventDefault();
	        }

	        if (_this.api.options.useEditorResize) {
	            var $target = $(e.target);
	            var footerMenu = $target.hasClass(Define.CLASS.EDITOR_FOOTER_MENU)[0];

	            if(!footerMenu){
	                footerMenu = $target.closest("." + Define.CLASS.EDITOR_FOOTER_MENU);
	            }

	            if($target.hasClass(Define.CLASS.EDITOR_FOOTER_RESIZE_BAR)){
	                _this.showGuard('ns-resize');

	                if(_this.actionObj == null){
	                    _this.actionObj = {};
	                }

	                var startClientY = e.clientY;

	                if (e.type == "touchstart") {
	                    // e.preventDefault();
	                    // e.stopPropagation();
	                    startClientY = (e.originalEvent.touches[0] ||  e.originalEvent.changedTouches[0]).pageY;
	                }

	                _this.actionObj.height = _this.editorArea.height();
	                _this.actionObj.y = startClientY;
	                _this.actionObj.action=true;

	                $(window).attr(Define.ATTR.UNSELECTABLE, 'on').on('selectstart', false).css('user-select', 'none').css('UserSelect', 'none').css('MozUserSelect', 'none');

	                if (e.type != "touchstart") {
	                    e.stopPropagation();
	                }

	                if (_this.editorElement.hasClass(Define.CLASS.FULL_SCREEN)){
	                    return;
	                }

	                var footerResizeMouseMove = function(e){
	                    if(_this.actionObj && _this.actionObj.action == true){
	                        var clientY = e.clientY;

	                        if (e.type == "touchmove") {
	                            clientY = (e.originalEvent.touches[0] ||  e.originalEvent.changedTouches[0]).pageY;
	                        }

	                        var resizeH = clientY - _this.actionObj.y;
	                        var newH = _this.actionObj.height + resizeH;

	                        if (newH > _this.router.options.minHeight) {
	                            var maxHeight = _this.router.options.maxHeight || (window.innerHeight - (_this.toolbarElement.height() + _this.footerElement.height() + Define.EDITOR_HEIGHT_BUFFER_SIZE + Define.FOOTER_BUFFER_SIZE + Define.BORDER_BUFFER_SIZE + 3));

	                            if (newH > maxHeight) {
	                                newH = maxHeight;
	                            }

	                            _this.editorArea.height(newH);
	                            _this.editorElement.height(_this.toolbarElement.height() + _this.footerElement.height() + newH + Define.EDITOR_HEIGHT_BUFFER_SIZE + Define.FOOTER_BUFFER_SIZE + Define.BORDER_BUFFER_SIZE);
	                        }
	                    }

	                    _this.stop(e);
	                    return false;
	                };

	                var footerResizeMouseUp = function(e){
	                    _this.hideGuard();
	                    _this.actionObj.action = false;

	                    var clientY = e.clientY;

	                    if (e.type == "touchend") {
	                        e.preventDefault();
	                        e.stopPropagation();
	                        clientY = (e.originalEvent.touches[0] ||  e.originalEvent.changedTouches[0]).pageY;
	                    }

	                    var resizeH = clientY - _this.actionObj.y;
	                    var newH = _this.actionObj.height + resizeH;

	                    if (newH > _this.router.options.minHeight) {
	                        var maxHeight = _this.router.options.maxHeight || (window.innerHeight - (_this.toolbarElement.height() + _this.footerElement.height() + Define.EDITOR_HEIGHT_BUFFER_SIZE + Define.FOOTER_BUFFER_SIZE + Define.BORDER_BUFFER_SIZE + 3));

	                        if (newH > maxHeight) {
	                            newH = maxHeight;
	                        }

	                        _this.editorArea.height(newH);
	                        _this.editorElement.height(_this.toolbarElement.height() + _this.footerElement.height() + newH + Define.EDITOR_HEIGHT_BUFFER_SIZE + Define.FOOTER_BUFFER_SIZE + Define.BORDER_BUFFER_SIZE);
	                    }

	                    $document.off("mousemove touchmove", footerResizeMouseMove).off("mouseup touchend", footerResizeMouseUp);

	                    $(window).removeAttr(Define.ATTR.UNSELECTABL).off('selectstart').css('user-select', null).css('UserSelect', null).css('MozUserSelect', null);

	                    _this.actionObj = null;

	                    _this.stop(e);
	                    return false;
	                };

	                $document.on("mousemove touchmove", footerResizeMouseMove).on("mouseup touchend", footerResizeMouseUp);
	            }

	            if (!footerMenu.length) {
	                e.preventDefault();
	                return false;
	            }
	        }
	    });

	    //Mode 전환시 Event 처리
	    this.footerElement.on("click", function(e){
	        _this.resetEditorControl();

	        var $target = $(e.target);

	        var footerMenu = $target.hasClass(Define.CLASS.EDITOR_FOOTER_MENU)[0];

	        if(!footerMenu){
	            footerMenu = Util.findParentNode($target[0], "." + Define.CLASS.EDITOR_FOOTER_MENU);
	        }

	        var $footerMenu = $(footerMenu);

	        if(! $target.hasClass(Define.CLASS.EDITOR_FOOTER_RESIZE_BAR) && !$target.hasClass(Define.CLASS.EDITOR_FOOTER) && !$footerMenu.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE)){
	            var $footerMenus = $footerMenu.closest('.' + Define.CLASS.EDITOR_FOOTER_MENUS);
	            var $currentActiveMenu = $footerMenus.find('.' + Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);

	            _this.router.displayProcessingMessage("show");

	            setTimeout(function(){
	                var $selectedFooterMenu = $footerMenu;

	                var useTextEditor = false;

	                if ($selectedFooterMenu.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_TEXT)) {
	                    useTextEditor = window.confirm(window.kukuResource.alertMessage.textModeChangeConfirmMessage);

	                    if (!useTextEditor) {
	                        _this.router.displayProcessingMessage("hide");

	                        return;
	                    }
	                }

	                try {
	                    _this.changeModeMenu(footerMenu, useTextEditor);
	                } catch (e) {
	                    // console.log(e);
	                    $footerMenus.find('.' + Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE).removeClass(Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);
	                    $currentActiveMenu.addClass(Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);
	                    _this.router.displayProcessingMessage("hide");
	                    alert(window.kukuResource.alertMessage.errorParsingError);
	                }
	            }, 100);
	        }

	        e.preventDefault();
	        return false;
	    });
	};

	Event.prototype.fireClipboardEvents = function(e) {
	    this.clipboardEvent.fireEvent(e);
	};

	Event.prototype.fireKeyboardEvents = function(e) {
	    if (this.api.options.Key_event) {
	        if (this.api.options.Key_event[e.type]) {
	            this.api.options.Key_event[e.type](e);
	        }
	    }

	    this.keyboardEvent.fireEvent(e);
	};

	Event.prototype.fireMouseEvents = function(e) {
	    if (this.api.options.Mouse_event) {
	        if (this.api.options.Mouse_event[e.type]) {
	            this.api.options.Mouse_event[e.type](e);
	        }
	    }

	    this.mouseEvent.fireEvent(e);
	};

	Event.prototype.changeModeMenu = function(footerMenu, isForceChange) {
	    var _this = this;

	    this.menuController.closeAllDialog();
	    this.resetEditorControl();

	    var $selectedFooterMenu = $(footerMenu);

	    var $footerMenus = $selectedFooterMenu.closest("." + Define.CLASS.EDITOR_FOOTER_MENUS);
	    var footerMenuActive = $footerMenus.find("." + Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);

	    if (footerMenuActive[0] === $selectedFooterMenu[0]) {
	        this.router.displayProcessingMessage("hide");
	        return;
	    }

	    footerMenuActive.removeClass(Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);

	    var $editorView = this.editorElement.find("." + Define.CLASS.EDITOR_VIEW);
	    var $htmlView = this.editorElement.find("." + Define.CLASS.HTML_VIEW);
	    var $textView = this.editorElement.find("." + Define.CLASS.TEXT_VIEW);
	    var $preView = this.editorElement.find("." + Define.CLASS.PRE_VIEW);

	    var $contents = $editorView.find('.' + Define.CLASS.CONTENT_VIEW);
	    var $htmlContents = $htmlView.find('.' + Define.CLASS.HTML_CONTENTS);
	    var $textContents = $textView.find('.' + Define.CLASS.TEXT_CONTENTS);
	    var $previewContents = $preView.find('.' + Define.CLASS.PREVIEW_CONTENTS);

	    var menuMoreBtn = $('.menus .menu_more');
	    var menuMoreWrap = $('.menus .menu_more_wrap');
	    
	    var closeMenuMoreWrap = function () {
	        if (menuMoreBtn.hasClass("active")) {
	            menuMoreBtn.removeClass("active");
	            menuMoreWrap.removeClass("active");
	        }
	    }

	    var footerModeShow = function(mode){
	        $editorView.addClass(Define.CLASS.VIEW_HIDE);
	        $htmlView.addClass(Define.CLASS.VIEW_HIDE);
	        $textView.addClass(Define.CLASS.VIEW_HIDE);
	        $preView.addClass(Define.CLASS.VIEW_HIDE);

	        if (mode == 'editor') {
	            $editorView.removeClass(Define.CLASS.VIEW_HIDE);

	        } else if (mode == 'html') {
	            $htmlView.removeClass(Define.CLASS.VIEW_HIDE);
	            closeMenuMoreWrap();

	        } else if (mode == 'text') {
	            $textView.removeClass(Define.CLASS.VIEW_HIDE);
	            closeMenuMoreWrap();
	        } else {
	            $preView.removeClass(Define.CLASS.VIEW_HIDE);
	            closeMenuMoreWrap();
	        }
	    };

	    var eDocument = $contents[0].contentWindow.document;
	    var $eBody = $(eDocument.body);

	    var previewDocument = null;

	    if ($previewContents.length) {
	        if ($previewContents[0].contentWindow && $previewContents[0].contentWindow.document) {
	            previewDocument = $previewContents[0].contentWindow.document;
	        }

	        if (previewDocument) {
	            previewDocument.body.innerHTML = '';
	        }
	    }

	    //HTML Mode 선택
	    if ($selectedFooterMenu.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_HTML)) {
	        this.keyboardEvent.isCellLock = false;

	        var $htmlDivWrap = $('<div/>');
	        var prettyHtml = '';

	        if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_EDITOR) || footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW)) {

	            Util.setInputChecked($eBody);

	            var $clone = null;

	            /**
	             * TODO : IE에서 문제 발생으로 인한 추가 로직 검증 필요.
	             */
	            if (this.api.options.useHtmlModeAutoPosition) {

	                var range = this.$dom.selection.getRange();

	                var firstRange = range.cloneRange();
	                var lastRange = range.cloneRange();

	                firstRange.collapse(true);
	                lastRange.collapse(false);

	                var firstPositionTextNode = eDocument.createTextNode(Define.KUKUDOCS_FIRST_POSITION_FOR_HTML);
	                var lastPositionTextNode = eDocument.createTextNode(Define.KUKUDOCS_LAST_POSITION_FOR_HTML);

	                lastRange.insertNode(lastPositionTextNode);
	                firstRange.insertNode(firstPositionTextNode);

	                $eBody.hide();
	                $clone = $eBody.clone();

	                $(firstPositionTextNode).remove();
	                $(lastPositionTextNode).remove();

	            } else {
	                $eBody.hide();
	                $clone = $eBody.clone();
	            }


	            $eBody.show();

	            Util.videoImageToObjectNode($clone);
	            Util.removeAllNoneBorderVisualize($clone.find(Define.CELL_TYPE.join(',')));

	            var htmlString = $clone[0].innerHTML;

	            if (this.api.options.useAdjustForChrome) {
	                var chromeDocument = this.api.getChromeIframeDocument();
	                chromeDocument.body.innerHTML = htmlString;
	                htmlString = chromeDocument.body.innerHTML;
	            }

	            htmlString = htmlString.replace(/\t/gi, "&nbsp;&nbsp;&nbsp;&nbsp;");

	            $htmlDivWrap[0].innerHTML = htmlString;

	            Util.paragraphReRenderHTMLForIE($htmlDivWrap[0]);

	        } else if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_TEXT)) {
	            var plainText = $textContents.val();
	            plainText = Util.textToHTML(plainText);

	            $htmlDivWrap[0].innerHTML = plainText || Define.DEFAULT_PARAGRAPH_HTML;
	        }

	        prettyHtml = Util.prettyHtml($htmlDivWrap[0], this.api.options.useHtmlModeTextIndent);

	        var htmlText = prettyHtml ? prettyHtml.trim() : $htmlDivWrap.html();

	        if (this.api.options.useHtmlModeAutoPosition) {
	            var firstPositionRegexp = new RegExp(Define.KUKUDOCS_FIRST_POSITION_FOR_HTML, 'ig');
	            var lastPositionRegexp = new RegExp(Define.KUKUDOCS_LAST_POSITION_FOR_HTML, 'ig');


	            var firstIndex = htmlText.indexOf(Define.KUKUDOCS_FIRST_POSITION_FOR_HTML);
	            var lastIndex = htmlText.indexOf(Define.KUKUDOCS_LAST_POSITION_FOR_HTML);

	            htmlText = htmlText.replace(firstPositionRegexp, '').replace(lastPositionRegexp, '');

	            $htmlContents.val(htmlText);
	            footerModeShow('html');

	            Util.setTextareaSelectionRange($htmlContents[0], firstIndex, lastIndex - Define.KUKUDOCS_FIRST_POSITION_FOR_HTML.length);

	        } else {
	            $htmlContents.val(htmlText);
	            footerModeShow('html');

	            $htmlContents[0].scrollTop = 0;
	            $htmlContents[0].scrollLeft = 0;
	        }

	        this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).addClass(Define.CLASS.DISABLED);

	        this.router.setClearAllHistories(true);
	        this.router.changedUndoRedoButtonEnable();
	    }

	    //Editor Mode 선택
	    else if ($(footerMenu).hasClass(Define.CLASS.EDITOR_FOOTER_MENU_EDITOR)) {
	        this.keyboardEvent.isCellLock = false;

	        if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_HTML)) {
	            if ($htmlContents.val() == "") {
	                $eBody[0].innerHTML = Define.DEFAULT_PARAGRAPH_HTML;
	            } else {
	                var htmlContentsString = $htmlContents.val();
	                htmlContentsString = this.router.getHtmlFilterString(htmlContentsString);

	                if (this.api.options.useAdjustForChrome) {
	                    var chromeDocument = this.api.getChromeIframeDocument();
	                    chromeDocument.body.innerHTML = htmlContentsString;
	                    htmlContentsString = chromeDocument.body.innerHTML;
	                }

	                $eBody[0].innerHTML = htmlContentsString || Define.DEFAULT_PARAGRAPH_HTML ;

	                Util.objectNodeToVideoImage($eBody, _this.router.options.playImageURL);

	                if (this.api.options.useNoneBorderVisualize && this.api.options.isNoneBorderVisualize) {
	                    Util.setNoneBorderVisualize($eBody.find(Define.CELL_TYPE.join(',')));
	                } else {
	                    Util.removeAllNoneBorderVisualize($eBody.find(Define.CELL_TYPE.join(',')));
	                }

	                $($eBody[0]).find('select').change(function() {
	                    var $target = $(this);
	                    var val = $target.val();
	                    $target.find('option').attr('selected', false);
	                    $target.val(val);
	                    $target.find('option[value = ' + val +']').attr('selected', true);
	                });

	                this.$dom.selection.setContentEditable(true);
	            }
	        } else if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_TEXT)) {
	            var plainText = $textContents.val();
	            plainText = Util.textToHTML(plainText);

	            $eBody[0].innerHTML = plainText || Define.DEFAULT_PARAGRAPH_HTML;
	        }

	        footerModeShow('editor');

	        this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).removeClass(Define.CLASS.DISABLED);

	        this.router.setClearAllHistories();
	        this.router.changedUndoRedoButtonEnable();

	        setTimeout(function(){
	            var range = _this.$dom.selection.setFirstCollapse();
	            _this.router.doStatusHighlight(range.startContainer);
	        }, 10);

	    }

	    //Text Mode 선택
	    else if ($selectedFooterMenu.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_TEXT)) {
	        this.keyboardEvent.isCellLock = false;

	        var useTextEditor = isForceChange || window.confirm(window.kukuResource.alertMessage.textModeChangeConfirmMessage);

	        if (useTextEditor) {
	            var $htmlDivWrap = $('<div/>');
	            var htmlString = '';

	            if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_EDITOR) || footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW)) {
	                htmlString = $eBody[0].innerHTML;

	            } else if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_HTML)) {
	                htmlString  = $htmlContents.val();

	                htmlString = this.router.getHtmlFilterString(htmlString, false, 'htmlToText');
	            }

	            if(htmlString === '<br>') {
	                htmlString = ''
	            }

	            var regexp = new RegExp("<(/p|/div|/h\\d|br)\\w?/?>", 'ig');

	            htmlString = htmlString.replace(regexp, '\n');

	            $htmlDivWrap[0].innerHTML = htmlString;

	            $textContents.val($htmlDivWrap.text());

	            this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).addClass(Define.CLASS.DISABLED);

	            footerModeShow('text');

	            $textContents[0].scrollTop = 0;
	            $textContents[0].scrollLeft = 0;

	            this.router.setClearAllHistories();
	            this.router.changedUndoRedoButtonEnable();

	        } else {
	            footerMenuActive.addClass(Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);
	        }
	    }

	    //Preview Mode 선택
	    else if ($selectedFooterMenu.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW)) {
	        this.keyboardEvent.isCellLock = false;

	        var $pBody = $(previewDocument.body);
	        $(previewDocument.doctype).remove();

	        if (eDocument.doctype) {
	            var newDocType = previewDocument.implementation.createDocumentType(eDocument.doctype.nodeName, eDocument.doctype.publicId, eDocument.doctype.systemId);
	            previewDocument.insertBefore(newDocType, previewDocument.documentElement);
	        }

	        $pBody.removeAttributes();

	        var attributes = $eBody.prop("attributes");
	        $.each(attributes, function () {
	            if (this.name != Define.ATTR.CONTENT_EDIT_ABLE) {
	                $pBody.attr(this.name, this.value);
	            }
	        });

	        var $pHead = $(previewDocument.documentElement).children('head');
	        $pHead[0].innerHTML = Util.getHeaderNode(this.api.editorDocument)[0].innerHTML;

	        if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_EDITOR)) {

	            var $editorElement = $(eDocument.documentElement);

	            Util.setInputChecked($editorElement);

	            previewDocument.documentElement.innerHTML = eDocument.documentElement.innerHTML;

	            $pBody = $(previewDocument.body);

	            Util.videoImageToObjectNode($pBody);

	            $pBody.removeAttr(Define.ATTR.CONTENT_EDIT_ABLE);

	        } else if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_HTML)) {
	            if ($htmlContents.val() == "") {
	                $eBody[0].innerHTML = $pBody[0].innerHTML = Define.DEFAULT_PARAGRAPH_HTML;
	            } else {
	                var htmlContents = $htmlContents.val();
	                htmlContents = this.router.getHtmlFilterString(htmlContents);

	                $pBody[0].innerHTML = htmlContents || Define.DEFAULT_PARAGRAPH_HTML;

	                setTimeout(function(){
	                    $eBody[0].innerHTML = htmlContents || Define.DEFAULT_PARAGRAPH_HTML;

	                    if (_this.api.options.useNoneBorderVisualize && _this.api.options.isNoneBorderVisualize) {
	                        Util.setNoneBorderVisualize($eBody.find(Define.CELL_TYPE.join(',')));
	                    } else {
	                        Util.removeAllNoneBorderVisualize($eBody.find(Define.CELL_TYPE.join(',')));
	                    }

	                    Util.objectNodeToVideoImage($eBody, _this.router.options.playImageURL);
	                }, 10);
	            }

	        } else if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_TEXT)) {
	            var plainText = $textContents.val();
	            plainText = Util.textToHTML(plainText);

	            $eBody[0].innerHTML = $pBody[0].innerHTML = plainText || Define.DEFAULT_PARAGRAPH_HTML;
	        }

	        if (this.api.options.useNoneBorderVisualize && this.api.options.isNoneBorderVisualize) {
	            Util.setNoneBorderVisualize($eBody.find(Define.CELL_TYPE.join(',')));
	        } else {
	            Util.removeAllNoneBorderVisualize($eBody.find(Define.CELL_TYPE.join(',')));
	        }

	        Util.removeAllNoneBorderVisualize($pBody.find(Define.CELL_TYPE.join(',')));

	        this.$dom.selection.setContentEditable(false);
	        footerModeShow('preview');

	        this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).addClass(Define.CLASS.DISABLED);
	    }

	    this.router.displayProcessingMessage("hide");

	    $selectedFooterMenu.addClass(Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);
	};

	Event.prototype.resetEditorControl = function(isOnlyRemoveResize) {

	    if (this.mouseEvent.removeResizable) {
	        this.mouseEvent.removeResizable();
	    }

	    if (!isOnlyRemoveResize) {
	        this.contextMenu.hideContextMenu();
	        this.mouseEvent.removeSelectedCellFlag();
	        this.mouseEvent.allClearMouseAction();
	        this.$dom.selection.removeSelectedCell();
	    }
	};

	Event.prototype.getKeyboardEvent = function(e) {
	    return this.keyboardEvent;
	};

	Event.prototype.getMouseEvent = function(e) {
	    return this.mouseEvent;
	};

	Event.prototype.stop = function(e) {
	    if(e.preventDefault) {e.preventDefault();}
	    if(e.stopPropagation) {e.stopPropagation();}

	    e.returnValue = false;
	    e.cancelBubble = true;
	    e.stopped = true;
	};

	module.exports = Event;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	var AbstractEvent = __webpack_require__(42);

	function Clipboard(editorElement, editorContentView, $domObject, router, menuController, rootEvent) {

	    this.editorElement = $(editorElement);
	    this.editorContentView = $(editorContentView);
	    this.$dom = $domObject;
	    this.router = router;
	    this.menuController = menuController;
	    this.rootEvent = rootEvent;

	    this.isStopPaste = false;
	}

	Clipboard.prototype = new AbstractEvent();

	Clipboard.prototype.fireEvent = function(e){
	    var _this = this;

	    try{
	        switch(e.type){
	            case "copy" :
	                this.$dom.selection.removeSelectedCell();
	                this.menuController.event.mouseEvent.selectedCellNodes = null;
	                this.router.doStatusHighlight();
	                // this.doCopy(e);

	                break;

	            case "cut" :
	                if (this.rootEvent.keyboardEvent.isCellLock) {
	                    this.stop(e);
	                    return;
	                }

	                this.$dom.selection.removeSelectedCell();
	                this.menuController.event.mouseEvent.selectedCellNodes = null;
	                this.router.doStatusHighlight();

	                setTimeout(function(){
	                    _this.router.externalSetUndoHistory();
	                    _this.router.changedUndoRedoButtonEnable();
	                    _this.rootEvent.keyboardEvent.inputKeyCount = 0;
	                }, 10);


	                // this.doCut(e);

	                break;

	            case "paste" :
	                if (this.rootEvent.keyboardEvent.isCellLock) {
	                    this.stop(e);
	                    return;
	                }

	                this.doPaste(e);

	                break;
	        }
	    }catch(err){
	        // e.preventDefault();
	        // e.stopPropagation();
	        // console.log('Clipboard event error', err);
	    }
	};

	Clipboard.prototype.iePaste = function(e) {
	    var _this = this;
	    var selection = this.$dom.selection;

	    //Image Paste
	    var isImagePaste = false;

	    if (window.clipboardData && window.clipboardData.files && window.clipboardData.files.length) {
	        isImagePaste = true;
	    }

	    var isBase64Image = false;
	    var isImgPaste = false



	    if (isImagePaste) {
	        var files = window.clipboardData.files;

	        if (files.length > 0) {

	            for (var i = 0, length = files.length ; i < length ; i++) {
	                var file = files[i];

	                if(!file || (file.type.indexOf('image/') == -1)){//event.msConvertURL(file, "specified", URL.createObjectURL(file));
	                    continue;
	                }
	                else if(file.size === 0) {
	                    isImgPaste = true;
	                }

	                if(!isImgPaste) {
	                    var fileName = file.name;

	                    if (file.name != '') {
	                        var filenameSplit = fileName.split('.');
	                        var ext = filenameSplit[filenameSplit.length - 1];

	                        if (ext == 'tmp') {
	                            isBase64Image = true;
	                            break;
	                        }
	                    }
	                }

	            }

	            if (!isBase64Image && !isImgPaste) {
	                for (var i = 0, length = files.length ; i < length ; i++) {
	                    var file = files[i];

	                    if(!file || (file.type.indexOf('image/') == -1) || file.size == 0){
	                        continue;
	                    }

	                    this.doFilePaste(file);
	                }

	                this.stop(e);
	                return;
	            }
	        }
	    }


	    if (!this.isStopPaste) {
	        this.isStopPaste = true;

	        var eDocument = this.router.editorObject.editorDocument;
	        var nbsp = eDocument.createTextNode(Define.UNICODE_ZERO_WIDTH_SPACE);

	        var range = selection.getRange();

	        var firstStartContainer = null;

	        if ($.browser.msie && $.browser.version < 11) {
	            var $prevNode = null;
	            firstStartContainer = range.startContainer;

	            if (firstStartContainer.nodeType != Node.TEXT_NODE) {
	                if (Define.LIST_NODES.indexOf(firstStartContainer.nodeName) > -1 || firstStartContainer.nodeName == 'LI') {
	                    $prevNode = $(firstStartContainer).parentsUntil(this.editorContentView);

	                    if (!$prevNode.length) {
	                        $prevNode = this.editorContentView;
	                    } else {
	                        $prevNode = $prevNode.last();
	                    }

	                } else {
	                    $prevNode = $(firstStartContainer).prev();

	                    if (!$prevNode.length){
	                        $prevNode = $prevNode.parent();

	                        if (!$prevNode.length) {
	                            $prevNode = this.editorContentView;
	                        }
	                    }
	                }

	                firstStartContainer = $prevNode[0];
	            } else {
	                $prevNode = $(firstStartContainer).closest(Define.BLOCK_NODES.join(','));

	                if ($prevNode[0] != this.editorContentView[0]) {
	                    $prevNode = $prevNode.prev();

	                    if (!$prevNode.length){
	                        $prevNode = $prevNode.parent();

	                        if (!$prevNode.length) {
	                            $prevNode = this.editorContentView;
	                        }
	                    }
	                }

	                firstStartContainer = $prevNode[0];
	            }

	        } else {
	            if (!range.collapsed) {
	                eDocument.execCommand( "delete", false, "" );
	            }

	            var newRange = selection.createRange();

	            firstStartContainer = nbsp;
	            range.insertNode(nbsp);
	            newRange.setStartAfter(nbsp);
	            selection.setRange(newRange);
	        }

	        var isTable = false;

	        setTimeout(function(){
	            var newRange = selection.createRange();

	            var getBase64Image = function(){
	                var $imageNodes = selection.getSelectedNode('IMG', false, newRange);
	                var base64Images = [];

	                $imageNodes.each(function(){
	                    var src = this.src;

	                    var isBase64 = Util.isBase64(src);

	                    if (isBase64) {
	                        base64Images.push(this);
	                    }
	                });

	                return base64Images;
	            };

	            var getWordFONTNodes = function(){
	                var $wordFontNodes = selection.getSelectedNode('FONT', false, newRange);

	                $wordFontNodes = $wordFontNodes.filter(function(){
	                    if (this.nodeType == Node.ELEMENT_NODE
	                        && this.nodeName == 'FONT'
	                        && this.getAttribute('size') == '3'
	                        && this.getAttribute('face')
	                        && this.childNodes.length == 1
	                        && this.childNodes[0].nodeName != 'IMG'
	                        && (!this.childNodes[0].textContent || this.childNodes[0].textContent == "\u000A\u000A" || this.childNodes[0].textContent == "\u000A\u0020\u0020")) {

	                        return this;
	                    }
	                });

	                return $wordFontNodes;
	            };

	            try {
	                var range = selection.getRange();

	                var lastStartContainer = range.startContainer;

	                if ($.browser.msie && $.browser.version < 11) {
	                    newRange.setStartBefore(firstStartContainer);
	                    newRange.setEndAfter(lastStartContainer);
	                } else {
	                    newRange.setStartAfter(firstStartContainer);
	                    newRange.setEndAfter(lastStartContainer);
	                }

	                var $tableNodes = selection.getSelectedNode('TABLE', false, newRange);

	                if ($tableNodes.length) {
	                    isTable = true;

	                    setTimeout(function(){
	                        try {
	                            Util.tableColGroupSetting($tableNodes);

	                            var $cells = $tableNodes.find(Define.CELL_TYPE.join(','));

	                            _this.setCellDoubleBorderWidth($cells);

	                            if (_this.router.options.useNoneBorderVisualize && _this.router.options.isNoneBorderVisualize) {
	                                Util.setNoneBorderVisualize($cells);
	                            } else {
	                                Util.removeAllNoneBorderVisualize($cells);
	                            }

	                        } catch (e){
	                        } finally {
	                            _this.isStopPaste = false;

	                            _this.removeFontFamily(newRange);

	                            var wordFontNodes = getWordFONTNodes();

	                            var $parentNodes = wordFontNodes.parent();
	                            $parentNodes = $parentNodes.filter(function(){
	                                return this.childNodes.length == 1;
	                            });

	                            $parentNodes.remove();
	                            wordFontNodes.remove();

	                            if (!($.browser.msie && $.browser.version < 11)) {
	                                if (nbsp.textContent == Define.UNICODE_ZERO_WIDTH_SPACE) {
	                                    $(nbsp).remove();
	                                } else {
	                                    nbsp.textContent = nbsp.textContent.replace(/\u200B/ig, '');
	                                }
	                            }

	                            var base64Images = getBase64Image();

	                            if (base64Images.length) {
	                                _this.doBase64Upload(base64Images, function(){
	                                    _this.router.externalSetUndoHistory();
	                                    _this.router.changedUndoRedoButtonEnable();
	                                    _this.rootEvent.keyboardEvent.inputKeyCount = 0;
	                                });
	                            } else {
	                                _this.router.externalSetUndoHistory();
	                                _this.router.changedUndoRedoButtonEnable();
	                                _this.rootEvent.keyboardEvent.inputKeyCount = 0;
	                            }
	                        }
	                    }, 10);
	                }
	            } catch(e) {
	                console.log(e);
	            } finally {
	                if (!isTable ) {
	                    _this.isStopPaste = false;

	                    _this.removeFontFamily(newRange);
	                    _this.removeRemoveStyleForP(newRange);
	                    _this.removeRemoveStyleForSpan(newRange);

	                    var wordFontNodes = getWordFONTNodes();

	                    var $parentNodes = wordFontNodes.parent();
	                    $parentNodes = $parentNodes.filter(function(){
	                        return this.childNodes.length == 1;
	                    });

	                    $parentNodes.remove();
	                    wordFontNodes.remove();

	                    if (!($.browser.msie && $.browser.version < 11)) {
	                        if (nbsp.textContent == Define.UNICODE_ZERO_WIDTH_SPACE) {
	                            $(nbsp).remove();
	                        } else {
	                            nbsp.textContent = nbsp.textContent.replace(/\u200B/ig, '');
	                        }
	                    }

	                    var base64Images = getBase64Image();

	                    if (base64Images.length) {
	                        _this.doBase64Upload(base64Images, function(){
	                            _this.router.externalSetUndoHistory();
	                            _this.router.changedUndoRedoButtonEnable();
	                            _this.rootEvent.keyboardEvent.inputKeyCount = 0;
	                        });
	                    } else {
	                        _this.router.externalSetUndoHistory();
	                        _this.router.changedUndoRedoButtonEnable();
	                        _this.rootEvent.keyboardEvent.inputKeyCount = 0;
	                    }
	                }
	                else {
	                    _this.removecolWidthValue(newRange);
	                }
	            }
	        }, 10);
	    } else {
	        this.stop(e);
	    }
	};

	Clipboard.prototype.pasteController = function(e) {
	    var _this = this;

	    var selection = this.$dom.selection;

	    var pasteType = e.originalEvent.clipboardData.types;

	    var isFileType = /Files/.test(pasteType);
	    var isHtmlType = /text\/html/.test(pasteType);
	    var isPlainType = /text\/plain/.test(pasteType);

	    var clipboardData = e.originalEvent.clipboardData;
	    var clipboardItems = clipboardData.items;

	    var pasteHtml = clipboardData.getData("text/HTML");
	    pasteHtml = _this.router.getHtmlFilterString(pasteHtml, {isHtml:true});
	    var plainText = clipboardData.getData("text/plain");
	    plainText = _this.router.getHtmlFilterString(plainText, {isHtml:false});

	    var fileItems = [];

	    if (clipboardItems.length > 0){
	        for (var itemIdx = 0 ; itemIdx < clipboardItems.length ; itemIdx++) {

	            var fileItem = clipboardItems[itemIdx].getAsFile();

	            if(fileItem && fileItem.type === "image/png"){
	                fileItems.push(fileItem);
	            }
	        }
	    }

	    var setFileItems = function() {
	        selection.restoreRange();

	        if ($.browser.webkit) {
	            if(fileItems.length > 0){
	                for (var itemIdx = 0 ; itemIdx < fileItems.length ; itemIdx++) {
	                    var fileItem = fileItems[itemIdx];
	                    if(fileItem && fileItem.type === "image/png"){
	                        _this.doFilePaste(fileItem);
	                    }
	                }
	            }
	        }

	        _this.stop(e);
	        return;
	    };

	    var runningHTMLPaste = function() {
	        selection.restoreRange();

	        if (isHtmlType) {
	            var filterHTML = _this.router.getHtmlFilterString(pasteHtml, true);


	            filterHTML = _this.setAttributesUTF8(filterHTML);

	            _this.doHTMLPaste(filterHTML);

	            _this.router.setRedoHistory();
	            _this.router.changedUndoRedoButtonEnable();
	            _this.rootEvent.keyboardEvent.inputKeyCount = 0;

	        } else if (isPlainType) {
	            var $htmlDivWrap = $('<div/>');

	            plainText = Util.textToHTML(plainText);

	            $htmlDivWrap[0].innerHTML = plainText;

	            _this.doHTMLPaste($htmlDivWrap[0].innerHTML);

	            _this.router.setRedoHistory();
	            _this.router.changedUndoRedoButtonEnable();
	            _this.rootEvent.keyboardEvent.inputKeyCount = 0;
	        }

	        _this.stop(e);
	    };

	    var pasteAfterProc = function(tempTextNode, parentNode, type){
	        (function(_tempTextNode, _parentNode, _type) {
	            setTimeout(function(){
	                var range = selection.getRange();
	                var newRange = null;
	                var startPositionNode = _tempTextNode || _parentNode;

	                if (startPositionNode) {
	                    newRange = selection.createRange();
	                    newRange.setStartBefore(startPositionNode);
	                    newRange.setEnd(range.endContainer, range.endOffset);
	                }

	                _this.removeFontFamily(newRange);

	                if (_type == "noneBorderVisualize" || _type == "removeNoneBorderVisualize") {
	                    var $cellNodes = null;

	                    if (newRange) {
	                        var $tableNodes = selection.getSelectedNode('TABLE', false, newRange);

	                        if ($tableNodes.length) {
	                            $cellNodes = $tableNodes.find(Define.CELL_TYPE.join(','));
	                        }
	                    } else {
	                        $cellNodes = $(eDocument.body).find(Define.CELL_TYPE.join(','));
	                    }

	                    if ($cellNodes && $cellNodes.length) {
	                        _this.setCellDoubleBorderWidth($cellNodes);

	                        if (_type == "noneBorderVisualize") {
	                            Util.setNoneBorderVisualize($cellNodes);

	                        } else if (_type == "removeNoneBorderVisualize") {
	                            Util.removeAllNoneBorderVisualize($cellNodes);
	                        }
	                    }
	                }

	                _this.router.externalSetUndoHistory();
	                _this.router.changedUndoRedoButtonEnable();
	                _this.rootEvent.keyboardEvent.inputKeyCount = 0;

	            }, 200);
	        })(tempTextNode, parentNode, type);
	    };

	    var isObjectPaste = isFileType && isHtmlType;

	    if (isObjectPaste) {
	        if (!this.router.options.usePasteConfirmForChrome) {
	            runningHTMLPaste();
	            return;
	        }

	        $.cxDialog({
	            title : window.kukuResource.pasteMessage.pasteTypeConfirm,
	            info : '<strong>' + window.kukuResource.pasteMessage.imagePasteConfirm + '</strong>',
	            okText : 'HTML',
	            no : null,
	            noText : 'Image',
	            ok : function() {
	                // _this.$dom.selection.setRange(_this.windowRange);

	                runningHTMLPaste();
	            },
	            no : function() {
	                // _this.$dom.selection.setRange(_this.windowRange);

	                setFileItems();
	            }
	        });

	        this.stop(e);

	    } else {
	        if (isFileType) {
	            setFileItems();
	            this.stop(e);
	        } else {
	            if (this.isParagraphInnerTable()) {
	                runningHTMLPaste();
	            } else {
	                var eDocument = this.router.editorObject.editorDocument;

	                var selection = this.$dom.selection;

	                var range = selection.getRange();

	                if (!range.collapsed) {
	                    eDocument.execCommand( "delete", false, "" );
	                }


	                if (pasteHtml) {
	                    runningHTMLPaste();

	                    range = selection.getRange();

	                    var tempTextNode = eDocument.createTextNode(Define.UNICODE_ZERO_WIDTH_SPACE);
	                    tempTextNode.id = Define.ID.TEMP_TEXT_NODE;
	                    //가온아이 표에서 붙여넣기한 텍스트에서 버그가 발생되어 임시제거 2020.01.17
	                    //range.insertNode(tempTextNode);

	                    var newRange = selection.createRange();
	                    newRange.setStartAfter(tempTextNode);
	                    newRange.setEndAfter(tempTextNode);

	                    selection.setRange(newRange);
	                    selection.setSaveRange(newRange);

	                    var $wrapperTemp = $('<div/>');

	                    $wrapperTemp.html(pasteHtml);

	                    var isNoneBorder = Util.checkNoneBorder($wrapperTemp.find(Define.CELL_TYPE.join(',')));

	                    if (isNoneBorder) {
	                        if (this.router.options.useNoneBorderVisualize && this.router.options.isNoneBorderVisualize) {
	                            pasteAfterProc(tempTextNode, tempTextNode.parentNode, "noneBorderVisualize");

	                        } else {
	                            pasteAfterProc(tempTextNode, tempTextNode.parentNode, "removeNoneBorderVisualize");

	                        }
	                    } else {
	                        pasteAfterProc(tempTextNode, tempTextNode.parentNode);
	                    }
	                }
	            }
	        }
	    }
	};

	Clipboard.prototype.removeFontFamily = function(newRange) {
	    var selection = this.$dom.selection;
	    var changeFontName = $.browser.msie ? 'inherit' : '';

	    if (this.router.options.usePasteRemoveFontFamily) {
	        if (newRange) {
	            try {
	                var $allNodes = selection.getSelectedAllNode(false, newRange);


	                var $childNodes = $allNodes.find('*');

	                $allNodes.each(function(){
	                    this.style.fontFamily = changeFontName;
	                });

	                $childNodes.each(function(){
	                    this.style.fontFamily = changeFontName;
	                });

	            } catch(e) {
	                console.log(e);
	            }
	        }
	    }
	}

	Clipboard.prototype.removeRemoveStyleForP = function(newRange) {
	    var selection = this.$dom.selection;

	    if (newRange) {
	        try {
	            var $allNodes = selection.getSelectedAllNode(false, newRange);
	            var $childNodes = $allNodes.parent().find('p');
	            $childNodes.each(function(){
	                $(this).removeAttr("class");
	                if($(this).html().indexOf("<!--StartFragment-->") > -1 || $(this).html().indexOf("<!--[if !supportEmptyParas]-->") > -1) {
	                    $(this).detach();
	                }
	                else {
	                    var targetStyle = $(this).attr("style");
	                    if(typeof targetStyle === 'string') {
	                        targetStyle = targetStyle.replace(/mso\-[0-9a-zA-Zㄱ-ㅎㅏ-ㅣ가-힣 :%\-]*\;/g, "");
	                        targetStyle = targetStyle.replace(/\-ms\-[0-9a-zA-Zㄱ-ㅎㅏ-ㅣ가-힣 :%\-]*\;/g, "");
	                        if(targetStyle && targetStyle != "") {
	                            $(this).attr("style", targetStyle)
	                        }
	                    }
	                }

	            });

	        } catch(e) {
	            console.log(e);
	        }
	    }
	}


	Clipboard.prototype.removeRemoveStyleForSpan = function(newRange) {
	    var selection = this.$dom.selection;

	    if (newRange) {
	        try {
	            var $allNodes = selection.getSelectedAllNode(false, newRange);
	            var $childNodes = $allNodes.find('span');

	            $childNodes.each(function(){
	                this.style.removeProperty('line-height');
	                if($(this).html().trim() == "" || $(this).html().trim() == " ") {
	                    $(this).detach();
	                }
	                else {
	                    var targetStyle = $(this).attr("style");
	                    $(this).removeAttr("lang");
	                    $(this).removeAttr("class");
	                    if(typeof targetStyle === 'string') {
	                        targetStyle = targetStyle.replace(/mso\-[0-9a-zA-Zㄱ-ㅎㅏ-ㅣ가-힣 :%\-]*\;/g, "");
	                        targetStyle = targetStyle.replace(/\-ms\-[0-9a-zA-Zㄱ-ㅎㅏ-ㅣ가-힣 :%\-]*\;/g, "");
	                        if(targetStyle && targetStyle != "") {
	                            console.log(targetStyle)
	                            $(this).attr("style", targetStyle)
	                        }
	                    }
	                }


	            });

	        } catch(e) {
	            console.log(e);
	        }
	    }
	}

	Clipboard.prototype.removecolWidthValue = function(newRange) {
	    var selection = this.$dom.selection;

	    if (newRange) {
	        try {
	            var $allNodes = selection.getSelectedAllNode(false, newRange);
	            $allNodes.find('col').removeAttr('width').css("width", '');
	        } catch(e) {
	            console.log(e);
	        }
	    }
	}


	Clipboard.prototype.doBase64Upload = function(base64ImgNodes, callback) {
	    var _this = this;

	    var $base64ImgNodes = $(base64ImgNodes);

	    var count = 0;
	    var imageLength = $base64ImgNodes.length;

	    var sendBase64Image = function(image){
	        var formData = new FormData();
	        formData.append(Define.NAME.UPLOAD_IMAGE_BASE64_TYPE, image.src);

	        var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	        var callbackFn = function(data){
	            if (data && !data.isError) {
	                image.src = data.url;
	            } else {
	                image.src = _this.router.options.errorImageURL;
	            }

	            count++;

	            if (count == imageLength) {
	                callback();
	            }
	        };

	        Util.doUploadData(url, formData, callbackFn, callbackFn);
	    };

	    for (var imageIdx = 0; imageIdx < imageLength; imageIdx ++ ){
	        var base64Image =  $base64ImgNodes[imageIdx];
	        sendBase64Image(base64Image);
	    }
	};

	Clipboard.prototype.doFilePaste = function(file) {
	    var _this = this;

	    var selection = this.$dom.selection;

	    var idx = Math.floor(Math.random() * 1000000) + 1;
	    var image = '<span><img src="' + this.router.options.loadingImageURL + '" ' + Define.ATTR.UPLOADING_IMAGE + '="' + idx + '"></span>';

	    selection.execCommand('insertHTML', false, image);

	    var formData = new FormData();
	    formData.append(Define.NAME.UPLOAD_IMAGE_TYPE, file);

	    var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        var $img = _this.editorContentView.find('img[' + Define.ATTR.UPLOADING_IMAGE + '="' + idx + '"]');

	        $img[0].src = _this.router.options.errorImageURL;

	        if (data && !data.isError) {
	            $img[0].src = data.url;
	        }

	        $img.removeAttr(Define.ATTR.UPLOADING_IMAGE);

	        _this.router.setRedoHistory();
	        _this.router.changedUndoRedoButtonEnable();
	        _this.rootEvent.keyboardEvent.inputKeyCount = 0;
	    };

	    Util.doUploadData(url, formData, callbackFn, callbackFn);
	};

	Clipboard.prototype.doPaste = function(e) {
	    if ($.browser.msie) {
	        this.iePaste(e);

	    } else if ($.browser.chrome){
	        if (this.router.options.usePasteFilterForChrome) {
	            this.pasteController(e);
	        } else {
	            var selection = this.$dom.selection;

	            var pasteType = e.originalEvent.clipboardData.types;
	            var isFileType = /Files/.test(pasteType);
	            var isHtmlType = /text\/html/.test(pasteType);

	            if (isFileType && !isHtmlType) {
	                var fileItems = [];
	                var clipboardData = e.originalEvent.clipboardData;
	                var clipboardItems = clipboardData.items;

	                if (clipboardItems.length > 0){
	                    for (var itemIdx = 0 ; itemIdx < clipboardItems.length ; itemIdx++) {

	                        var fileItem = clipboardItems[itemIdx].getAsFile();

	                        if(fileItem && fileItem.type === "image/png"){
	                            fileItems.push(fileItem);
	                        }
	                    }
	                }

	                selection.restoreRange();

	                if ($.browser.webkit) {
	                    if(fileItems.length > 0){
	                        for (var itemIdx = 0 ; itemIdx < fileItems.length ; itemIdx++) {
	                            var fileItem = fileItems[itemIdx];
	                            if(fileItem && fileItem.type === "image/png"){
	                                this.doFilePaste(fileItem);
	                            }
	                        }
	                    }
	                }

	                this.stop(e);
	                return;
	            }
	        }
	    }
	};

	Clipboard.prototype.doHTMLPaste = function(pasteHtml) {

	    var $scrollSpanNode = null;

	    var selection = this.$dom.selection;

	    var range = selection.getRange();

	    var startContainer = range.startContainer;
	    var $startContainer = $(startContainer);

	    var $parentTable = $startContainer.closest('table');

	    if ($parentTable.length) {
	        var $parentP = $parentTable.closest('p');

	        if ($parentP.length) {
	            var eDocument = this.router.editorObject.editorDocument;

	            if (!range.collapsed) {
	                eDocument.execCommand( "delete", false, "" );
	            }

	            var frag = eDocument.createDocumentFragment(), elem;

	            var tmpWrapper = eDocument.createElement("div");

	            tmpWrapper.innerHTML = pasteHtml;

	            if (this.router.options.usePasteRemoveFontFamily) {
	                $(tmpWrapper).find('*').css('font-family', '');
	            }

	            var $cells = $(tmpWrapper).find(Define.CELL_TYPE.join(','));

	            this.setCellDoubleBorderWidth($cells);

	            var firstNode = elem = tmpWrapper.firstChild;
	            var lastNode = null;

	            while (elem) {
	                lastNode = frag.appendChild(elem);
	                elem = tmpWrapper.firstChild;
	            }

	            range.insertNode(frag);

	            if (Util.isSameParentChildNodeNAme(firstNode)){
	                Util.splitOn(firstNode.parentNode.parentNode, firstNode);
	                if (firstNode.previousSibling) {
	                    $(firstNode).prepend(firstNode.previousSibling.childNodes);
	                    $(firstNode.previousSibling).remove();
	                }
	            }

	            if (Util.isSameParentChildNodeNAme(lastNode)){
	                Util.splitOn(lastNode.parentNode.parentNode, lastNode);
	                if (lastNode.nextSibling) {
	                    var lastChild = lastNode.lastChild;

	                    $(lastNode).append(lastNode.nextSibling.childNodes);
	                    $(lastNode.nextSibling).remove();

	                    lastNode = lastChild;
	                }
	            }

	            if (lastNode) {
	                range = range.cloneRange();
	                range.setStartAfter(lastNode);
	                range.setEndAfter(lastNode);
	                selection.setRange(range);
	                selection.setSaveRange();
	            }

	            $scrollSpanNode = selection.createElement('span');
	            range.insertNode($scrollSpanNode[0]);
	            this.router.scrollIntoView($scrollSpanNode[0]);
	            $scrollSpanNode.remove();

	            return;
	        }
	    }



	    var $wrapperTemp = $('<div/>');
	    $wrapperTemp.html(pasteHtml);

	    if (this.router.options.usePasteRemoveFontFamily) {
	        $wrapperTemp.find('*').css('font-family', '');
	    }

	    var $cells = $wrapperTemp.find(Define.CELL_TYPE.join(','));

	    this.setCellDoubleBorderWidth($cells);

	    if (this.router.options.useNoneBorderVisualize && this.router.options.isNoneBorderVisualize) {
	        Util.setNoneBorderVisualize($cells);
	    } else {
	        Util.removeAllNoneBorderVisualize($cells);
	    }

	    if ($cells.length) {
	        $cells.each(function(){
	            if (!this.childNodes.length) {
	                this.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;
	            }
	        })
	    }

	    pasteHtml = $wrapperTemp.html();

	    //console.log(selection)
	    selection.execCommand('insertHTML', false, pasteHtml);
	    range = selection.getRange();

	    $scrollSpanNode = selection.createElement('span');
	    // 아래 주석 처리 이유 : 복사붙여넣기를 띄어쓰기 없이 (연속)할때 마지막 글자가 없어짐
	    // range.insertNode($scrollSpanNode[0]);
	    this.router.scrollIntoView($scrollSpanNode[0]);
	    $scrollSpanNode.remove();
	};

	Clipboard.prototype.isParagraphInnerTable = function(){
	    var isParagraphInnerTable = false;

	    var selection = this.$dom.selection;

	    var range = selection.getRange();

	    var startContainer = range.startContainer;
	    var $startContainer = $(startContainer);

	    var $parentTable = $startContainer.closest('table');

	    if ($parentTable.length) {
	        var $parentP = $parentTable.closest('p');

	        if ($parentP.length) {
	            isParagraphInnerTable = true;
	        }
	    }

	    return isParagraphInnerTable;
	};

	Clipboard.prototype.setAttributesUTF8 = function(filterHTML) {

	    if (this.router.options.useAttributesEncoding) {
	        var $wrapperDiv = $('<div/>').html(filterHTML);
	        var $all = $wrapperDiv.find('*');

	        $all.each(function () {
	            var attributes = this.attributes;

	            if (attributes.length) {
	                for (var i = 0, length = attributes.length; i < length; i++) {
	                    var attr = attributes[i];
	                    var name = attr.name;
	                    var value = attr.value;

	                    try {
	                        value = decodeURIComponent(escape(value));

	                        if (value != attr.value) {
	                            attr.value = value;
	                        }
	                    } catch (e) {
	                    }
	                }
	            }
	        });

	        filterHTML = $wrapperDiv.html();
	    }

	    return filterHTML;
	};

	Clipboard.prototype.setCellDoubleBorderWidth = function($cells) {
	    if ($cells && $cells.length) {
	        $cells.each(function(){
	            var rightStyle = this.style.borderRightStyle;
	            var leftStyle = this.style.borderLeftStyle;
	            var topStyle = this.style.borderTopStyle;
	            var bottomStyle = this.style.borderBottomStyle;

	            if (rightStyle != 'double') {
	                var rightWidth = parseFloat(this.style.borderRightWidth);

	                if (rightWidth > 0 && rightWidth < 1) {
	                    this.style.borderRightWidth = '1px';
	                }
	            } else {
	                this.style.borderRightWidth = '3px';
	            }

	            if (leftStyle != 'double') {
	                var leftWidth = parseFloat(this.style.borderLeftWidth);

	                if (leftWidth > 0 && leftWidth < 1) {
	                    this.style.borderLeftWidth = '1px';
	                }
	            } else {
	                this.style.borderLeftWidth = '3px';
	            }


	            if (topStyle != 'double') {
	                var topWidth = parseFloat(this.style.borderTopWidth);

	                if (topWidth > 0 && topWidth < 1) {
	                    this.style.borderTopWidth = '1px';
	                }
	            } else{
	                this.style.borderTopWidth = '3px';
	            }

	            if (bottomStyle != 'double') {
	                var bottomWidth = parseFloat(this.style.borderBottomWidth);

	                if (bottomWidth > 0 && bottomWidth < 1) {
	                    this.style.borderBottomWidth = '1px';
	                }
	            } else {
	                this.style.borderBottomWidth = '3px';

	            }

	            if (!this.childNodes.length) {
	                this.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;

	            } else if (this.childNodes.length == 1 && this.textContent == Define.UNICODE_IDEOGRAPHIC_SPACE){
	                this.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;

	            } else if (this.childNodes.length == 1 && this.childNodes[0].nodeName == 'FONT' && this.childNodes[0].getAttribute('size') == '3' && this.childNodes[0].textContent == Define.UNICODE_IDEOGRAPHIC_SPACE){
	                this.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;
	            }
	        });
	    }
	};



	module.exports = Clipboard;




/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	function AbstractEvent() { }

	AbstractEvent.prototype.stop = function(e) {
	    if(e.preventDefault) {e.preventDefault();}
	    if(e.stopPropagation) {e.stopPropagation();}

	    e.returnValue = false;
	    e.cancelBubble = true;
	    e.stopped = true;
	};

	module.exports = AbstractEvent;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	var AbstractEvent = __webpack_require__(42);

	function Keyboard(editorElement, editorContentView, $domObject, router, menuController, rootEvent){

	    this.$dom = $domObject;

	    this.editorElement = $(editorElement);
	    this.editorContentView = $(editorContentView);

	    this.router = router;
	    this.menuController = menuController;

	    this.rootEvent = rootEvent;

	    this.MAX_INPUT_KEY_COUNT = 100;
	    this.inputKeyCount = this.MAX_INPUT_KEY_COUNT;
	    this.isInputKeyHistory = false;

	    this.keyDownTime = new Date().getTime();

	    this.osPlatform = $.browser.platform;

	    this.isShiftArrowSelection = false;

	    this.isCellLock = false;
	}

	Keyboard.prototype = new AbstractEvent();


	Keyboard.prototype.fireEvent = function(e){
	    var _this = this;

	    try{
	        var target = e.target;
	        if (['INPUT'].indexOf(target.nodeName) > -1) {
	            if (target.type == 'text') {
	                return true;
	            }
	        }

	        switch(e.type){
	            case "keypress" :
	                break;

	            case "keydown" :

	                this.keyDown(e);

	                break;

	            case "keyup" :
	                this.keyUp(e);

	                if (!this.$dom.selection.isCollapsed()) {
	                    var range = this.$dom.selection.getRange();
	                    this.$dom.selection.setSaveRange(range);
	                } else {
	                    this.$dom.selection.saveRange = null;
	                }

	                break;

	            case "compositionstart" :
	                if (this.inputKeyCount <= 0) {
	                    this.router.externalSetUndoHistory();
	                    this.router.changedUndoRedoButtonEnable();
	                    this.setClearInputKeyInfo();
	                }

	                break;

	            case "compositionend" :

	                break;

	        }
	    }catch(err){
	        e.preventDefault();
	        e.stopPropagation();
	        // console.log('keyboard event error', err);
	    }
	};




	/* //////////////// Below KeyDown Method //////////////// */

	Keyboard.prototype.keyDown = function(e) {
	    var target = e.target;
	    //var korean = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;

	    if ($.browser.msie) {
	        if(e.keyCode == 229) {
	            $(".menus .menu a[u-id='symbol']").addClass("disabled");
	        }
	        else {
	            $(".menus .menu a[u-id='symbol']").removeClass("disabled");
	        }
	    }


	    if (target.nodeType != Node.TEXT_NODE && target.nodeName == 'HTML') {
	        this.stop(e);

	        this.$dom.selection.setContentEditable(true);
	        this.$dom.selection.editorFocus();
	        this.$dom.selection.restoreRange();

	        return;
	    }

	    if (this.rootEvent.mouseEvent.removeResizable) {
	        this.rootEvent.mouseEvent.removeResizable();
	    }

	    this.rootEvent.mouseEvent.clearStatusTimer();

	    var isStopEvent = false;

	    var isStopDelete = this.keyDownDeleteAllSelectedCellNodes(e);

	    this.keyDownArrowKeyForIE(e);

	    this.keyDownShiftAndArrowKeys(e);

	    // 의도한 if 구문. '==' 으로 변경 말것
	    if (isStopEvent = this.keyDownHotKey(e)) {}

	    else if (isStopEvent = this.keyDownArrowKeyForChrome(e)) {}

	    else if (isStopEvent = this.keyDownTabKeys(e)) {}

	    else if (isStopEvent = this.keyDownInputKeys(e, isStopDelete)) {}

	    if (isStopEvent) {
	        this.stop(e);
	        return isStopEvent;
	    }

	    return;
	};

	//Table 전체 선택인 경우 Input Key 입력시 전체 삭제
	Keyboard.prototype.keyDownDeleteAllSelectedCellNodes = function (e) {
	    var keyCode = e.keyCode;

	    var isStopDelete = false;

	    var isInputKey = this.isInputKeys(e);

	    var selectedCellNodes = this.rootEvent.mouseEvent.selectedCellNodes;

	    var isTableAllSelectionDelete = !this.$dom.selection.isCollapsed() && selectedCellNodes;

	    if (isTableAllSelectionDelete && isInputKey) {
	        this.router.externalSetUndoHistory();

	        if ($.browser.msie) {
	            selectedCellNodes.closest('table').remove();
	        } else {
	            this.$dom.selection.execCommand('delete');
	        }

	        this.router.changedUndoRedoButtonEnable();
	        this.setClearInputKeyInfo();

	        this.rootEvent.mouseEvent.selectedCellNodes = selectedCellNodes = null;

	        isStopDelete = true;

	    } else {
	        if (isInputKey) {
	            if (selectedCellNodes && [8, 46].indexOf(keyCode) == -1) {
	                selectedCellNodes.removeAttr(Define.ATTR.KK_SELECTED_TD);
	                this.rootEvent.mouseEvent.selectedCellNodes = selectedCellNodes = null;
	            }
	        }
	    }

	    return isStopDelete;
	};

	//단축키 입력
	Keyboard.prototype.keyDownHotKey = function (e) {
	    var isCtrl = e.ctrlKey;
	    var isAlt = e.altKey;
	    var isShift = e.shiftKey;
	    var isMetaKey = e.metaKey;

	    var keyCode = e.keyCode + "";

	    var selection = this.$dom.selection;

	    var isNotRestoreRange = true;

	    var isStopEvent = false;

	    if (keyCode == "27") {
	        isCtrl = true;
	    }

	    //Ctrl Key or MacOS의 COMMAND Key Down Check
	    if (!(isCtrl || (this.osPlatform == 'mac' && isMetaKey))) {
	        return isStopEvent;
	    }

	    if (!isAlt && !isShift) {
	        switch (keyCode) {
	            // key : ESC [Cancel]
	            case "27":
	                this.rootEvent.hideGuard();

	                if (this.rootEvent.mouseEvent.removeResizable) {
	                    this.rootEvent.mouseEvent.removeResizable();
	                }

	                this.rootEvent.mouseEvent.removeSelectedCellFlag(true);
	                this.rootEvent.mouseEvent.mouseDownAllToolBarClear();
	                this.rootEvent.mouseEvent.allClearMouseAction();

	                var $selectedCell = selection.getSelectedTd();
	                if ($selectedCell) {
	                    $selectedCell.removeAttr(Define.ATTR.KK_SELECTED_TD);
	                }

	                this.menuController.closeAllDialog(true);

	                var range = selection.getRange();

	                var startContainer = range.startContainer;
	                var startOffset = range.startOffset;

	                selection.applyNewRange(startContainer, startOffset, startContainer, startOffset);

	                break;

	            // key : b [Bold]
	            case "66":
	                this.router.doOperation({type:"update", name:"bold"}, isNotRestoreRange);
	                isStopEvent = true;
	                break;

	            // key : C [Copy]
	            case "67":
	                // this.router.doOperation({type:"update", name:"bold"}, isNotRestoreRange);
	                // isStopEvent = true;
	                break;

	            // key : D [strikeThrough]
	            case "68":
	                this.router.doOperation({type:"update", name:"strikeThrough"}, isNotRestoreRange);
	                isStopEvent = true;
	                break;

	            // key : e [Align Center]
	            case "69":
	                this.router.doOperation({type:"update", name:"align_center"}, isNotRestoreRange);
	                isStopEvent = true;
	                break;

	            // key : g [Uppercase]
	            case "71":
	                this.menuController.menuSwitch({id:'uppercase'});
	                isStopEvent = true;
	                break;

	            // key : h [Lowercase]
	            case "72":
	                this.menuController.menuSwitch({id:'lowercase'});
	                isStopEvent = true;
	                break;

	            // key : i [Italic]
	            case "73":
	                this.router.doOperation({type:"update", name:"italic"}, isNotRestoreRange);
	                isStopEvent = true;
	                break;

	            // key : j [Align Jsutify]
	            case "74":
	                this.router.doOperation({type:"update", name:"align_justify"}, isNotRestoreRange);
	                isStopEvent = true;
	                break;

	            // key : l [Align Left]
	            case "76":
	                this.router.doOperation({type:"update", name:"align_left"}, isNotRestoreRange);
	                isStopEvent = true;
	                break;

	            // key : n [New]
	            case "78":
	                this.menuController.menuSwitch({id:'new'});
	                isStopEvent = true;
	                break;

	            // key : p [Print]
	            case "80":
	                this.menuController.menuSwitch({id:'print'});
	                isStopEvent = true;
	                break;

	            // key : r [Align Right]
	            case "82":
	                this.router.doOperation({type:"update", name:"align_right"}, isNotRestoreRange);
	                isStopEvent = true;
	                break;

	            // key : s [Save]
	            case "83":
	                this.menuController.menuSwitch({id:'save'});
	                isStopEvent = true;
	                break;

	            // key : u [Underline]
	            case "85":
	                this.router.doOperation({type:"update", name:"underline"}, isNotRestoreRange);
	                isStopEvent = true;
	                break;

	            // key : v [Paste]
	            case "86":
	                if (this.inputKeyCount > 0) {
	                    this.router.externalSetUndoHistory();
	                }

	                break;

	            // key : x [Cut]
	            case "88":
	                if (!selection.isCollapsed()) {
	                    if (this.inputKeyCount > 0) {
	                        this.router.externalSetUndoHistory();
	                    }

	                    this.inputKeyCount = 0;
	                }

	                break;

	            // key : y [Redo]
	            case "89":
	                this.router.doOperation({type:"update", name:"redo"}, isNotRestoreRange);
	                if ($.browser.msie) {
	                    this.$dom.selection.setContentEditable(false);
	                    this.$dom.selection.setContentEditable(true);
	                }
	                isStopEvent = true;
	                this.setClearInputKeyInfo();

	                break;

	            // key : z [Undo]
	            case "90":
	                this.checkedKeydownInputKey();
	                this.router.doOperation({type:"update", name:"undo"}, isNotRestoreRange);
	                if ($.browser.msie) {
	                    this.$dom.selection.setContentEditable(false);
	                    this.$dom.selection.setContentEditable(true);
	                }

	                this.setClearInputKeyInfo();

	                isStopEvent = true;
	                break;
	        }
	    }

	    return isStopEvent;
	};

	Keyboard.prototype.keyDownArrowKeyForIE = function (e) {
	    if ($.browser.msie && [38, 40].indexOf(e.keyCode) > -1) {
	        this.editorContentView.addClass(Define.CLASS.IE_ARROW_KEY_DOWN);
	    }
	};


	//Chrome의 경우 Table에서의 Arrow KeyDown시 동작방식 지정
	Keyboard.prototype.keyDownArrowKeyForChrome = function (e) {
	    var isCtrl = e.ctrlKey;
	    var isAlt = e.altKey;
	    var isShift = e.shiftKey;
	    var isMetaKey = e.metaKey;
	    var keyCode = e.keyCode;

	    var isStopEvent = false;

	    var selection = this.$dom.selection;

	    if (!$.browser.chrome || isCtrl || isAlt || isShift || !selection.isCollapsed() || (this.osPlatform == 'mac' && isMetaKey)) {
	        return isStopEvent;
	    }

	    //Arrow [←, ↑, →, ↓]
	    if ([37, 38, 39, 40].indexOf(keyCode) > -1) {
	        var range = selection.getRange();

	        var startContainer = range.startContainer;
	        var startOffset = range.startOffset;
	        var endContainer = range.endContainer;
	        var endOffset = range.endOffset;
	        var $startContainer = $(startContainer);

	        var $cellNode = $startContainer.closest(Define.CELL_TYPE.join(','));

	        if ($cellNode.length) {
	            var newRange = selection.createRange();

	            // Up Arrow [↑]
	            if (keyCode == 38) {
	                var upStartContainer = startContainer;
	                var upStartOffset = startOffset;

	                while(1) {
	                    newRange.setStartBefore(startContainer);
	                    upStartContainer = newRange.startContainer;
	                    upStartOffset = newRange.startOffset;

	                    if (upStartOffset != 0 || (upStartContainer.nodeType == Node.ELEMENT_NODE && (Define.CELL_TYPE.indexOf(upStartContainer.nodeName) > -1))) {
	                        break;
	                    }

	                    startContainer = upStartContainer;
	                    startOffset = upStartOffset;
	                }

	                if ($cellNode[0].firstChild == startContainer) {
	                    var cellPos = $cellNode.cellPos(true);
	                    var $table = $cellNode.closest('TABLE');
	                    var tableMatrix = Util.getTableMatrix($table[0]);

	                    if (tableMatrix[cellPos.top - 1]) {
	                        var $prevCell = tableMatrix[cellPos.top - 1][cellPos.left];

	                        if ($prevCell && $prevCell.length) {
	                            var lastChild = $prevCell[0].lastChild;
	                            var prevEndContainer = lastChild;
	                            var prevEndOffset = lastChild.nodeType == Node.TEXT_NODE ? lastChild.textContent.length : lastChild.childNodes.length;

	                            while(prevEndContainer.lastChild) {
	                                prevEndContainer = prevEndContainer.lastChild;
	                            }

	                            if (prevEndContainer.nodeType == Node.TEXT_NODE) {
	                                prevEndOffset = prevEndContainer.textContent.length;
	                            } else {
	                                prevEndOffset = prevEndContainer.childNodes.length;
	                            }

	                            selection.applyNewRange(prevEndContainer, prevEndOffset, prevEndContainer, prevEndOffset);

	                            isStopEvent = true;
	                        }
	                    }
	                }
	            }
	            // Down Arrow [↓]
	            else if (keyCode == 40) {
	                var downEndContainer = endContainer;
	                var downEndOffset = endOffset;

	                while(1) {
	                    newRange.setEndAfter(endContainer);
	                    downEndContainer = newRange.endContainer;
	                    downEndOffset = newRange.endOffset;

	                    if (downEndOffset == 0 || (downEndContainer.nodeType == Node.ELEMENT_NODE && (Define.CELL_TYPE.indexOf(downEndContainer.nodeName) > -1))) {
	                        break;
	                    }

	                    endContainer = downEndContainer;
	                    endOffset = downEndOffset;
	                }

	                if ($cellNode[0].lastChild == endContainer) {
	                    var cellPos = $cellNode.cellPos(true);
	                    var $table = $cellNode.closest('TABLE');
	                    var tableMatrix = Util.getTableMatrix($table[0]);

	                    if (tableMatrix[cellPos.top + 1]) {
	                        var $nextCell = tableMatrix[cellPos.top + 1][cellPos.left];

	                        if ($nextCell && $nextCell.length) {
	                            var firstChild = $nextCell[0].firstChild;
	                            var nextStartContainer = firstChild;

	                            while(nextStartContainer.firstChild) {
	                                nextStartContainer = nextStartContainer.firstChild;
	                            }

	                            selection.applyNewRange(nextStartContainer, 0, nextStartContainer, 0);

	                            isStopEvent = true;
	                        }
	                    }
	                }
	            }
	        }
	    }

	    return isStopEvent;
	};

	//Tab Key Down시 동작 방식 지정
	Keyboard.prototype.keyDownTabKeys = function (e) {
	    var isCtrl = e.ctrlKey;
	    var isAlt = e.altKey;
	    var isShift = e.shiftKey;
	    var isMetaKey = e.metaKey;
	    var keyCode = e.keyCode;

	    var isStopEvent = false;
	    var isNotRestoreRange = true;

	    var selection = this.$dom.selection;

	    if (isCtrl || isAlt || (this.osPlatform == 'mac' && isMetaKey)) {
	        return isStopEvent;
	    }

	    // key 'Tab'
	    if (keyCode == 9) {
	        var $listNodes = selection.getSelectedListItem();

	        if (isShift) {
	            if ($listNodes && $listNodes.length) {
	                this.router.doOperation({type:"create", name:"list", value: { isUnTab:true }}, isNotRestoreRange);
	            } else {
	                var range = selection.getRange();
	                var startContainer = range.startContainer;
	                var $parentCellNode = $(startContainer).closest(Define.CELL_TYPE.join(','));

	                if ($parentCellNode.length) {

	                    var $prevCell = $parentCellNode.prev();

	                    if (!$prevCell.length) {
	                        var $currentTr = $parentCellNode.parent();
	                        var $prevTrNode = $currentTr.prev();
	                        if ($prevTrNode.length) {
	                            $prevCell = $($prevTrNode[0].cells[$prevTrNode[0].cells.length - 1]);
	                        }

	                        if (!$prevCell.length) {
	                            var $parentWrapCell = $parentCellNode.parent().closest(Define.CELL_TYPE.join(','));

	                            if ($parentWrapCell.length) {
	                                $prevCell = $parentWrapCell.prev();

	                                if (!$prevCell.length) {
	                                    $currentTr = $parentWrapCell.parent();
	                                    $prevTrNode = $currentTr.prev();

	                                    if ($prevTrNode.length) {
	                                        $prevCell = $($prevTrNode[0].cells[0]);
	                                    }
	                                }
	                            }
	                        }
	                    }

	                    if ($prevCell && $prevCell.length) {
	                        var firstChild = $prevCell[0].firstChild;
	                        var nextStartContainer = firstChild;

	                        while(nextStartContainer.firstChild) {
	                            nextStartContainer = nextStartContainer.firstChild;
	                        }

	                        if ($.browser.msie) {
	                            if (nextStartContainer.nodeType == Node.ELEMENT_NODE && $.inArray(nextStartContainer.nodeName, Define.SINGLE_NODES) != -1) {
	                                var childIndex = $(nextStartContainer.parentNode.childNodes).index(nextStartContainer);

	                                selection.applyNewRange(nextStartContainer.parentNode, childIndex, nextStartContainer.parentNode, childIndex);

	                            } else {
	                                selection.applyNewRange(nextStartContainer, 0, nextStartContainer, 0);
	                            }
	                        } else {
	                            selection.applyNewRange(nextStartContainer, 0, nextStartContainer, 0);
	                        }
	                    }
	                }
	            }
	        } else {
	            if ($listNodes && $listNodes.length) {
	                this.router.doOperation({type:"create", name:"list", value: { isTab:true }}, isNotRestoreRange);

	            } else {
	                var range = selection.getRange();
	                var startContainer = range.startContainer;
	                var $parentCellNode = $(startContainer).closest(Define.CELL_TYPE.join(','));

	                if ($parentCellNode.length) {
	                    var $nextCell = $parentCellNode.next();

	                    if (!$nextCell.length) {
	                        var $currentTr = $parentCellNode.parent();
	                        var $nextTrNode = $currentTr.next();
	                        if ($nextTrNode.length) {
	                            $nextCell = $($nextTrNode[0].cells[0]);
	                        }

	                        if (!$nextCell.length) {
	                            var $parentWrapCell = $parentCellNode.parent().closest(Define.CELL_TYPE.join(','));

	                            if ($parentWrapCell.length) {
	                                $nextCell = $parentWrapCell.next();

	                                if (!$nextCell.length) {
	                                    $currentTr = $parentWrapCell.parent();
	                                    $nextTrNode = $currentTr.next();

	                                    if ($nextTrNode.length) {
	                                        $nextCell = $($nextTrNode[0].cells[0]);
	                                    }
	                                }
	                            }
	                        }
	                    }

	                    if ($nextCell && $nextCell.length) {
	                        var firstChild = $nextCell[0].firstChild;
	                        var nextStartContainer = firstChild;

	                        while(nextStartContainer.firstChild) {
	                            nextStartContainer = nextStartContainer.firstChild;
	                        }

	                        if ($.browser.msie) {
	                            if (nextStartContainer.nodeType == Node.ELEMENT_NODE && $.inArray(nextStartContainer.nodeName, Define.SINGLE_NODES) != -1) {
	                                var childIndex = $(nextStartContainer.parentNode.childNodes).index(nextStartContainer);

	                                selection.applyNewRange(nextStartContainer.parentNode, childIndex, nextStartContainer.parentNode, childIndex);

	                            } else {
	                                selection.applyNewRange(nextStartContainer, 0, nextStartContainer, 0);
	                            }
	                        } else {
	                            selection.applyNewRange(nextStartContainer, 0, nextStartContainer, 0);
	                        }
	                    }

	                } else {
	                    if (this.isCellLock) {
	                        isStopEvent = true;
	                        return isStopEvent;
	                    }

	                    //기본적인 Tab 기능
	                    this.router.doOperation({type:"create", name:"tab"}, isNotRestoreRange);
	                }
	            }
	        }

	        isStopEvent = true;
	    }

	    return isStopEvent;
	};

	//Shift + 방향키 입력 하여 Selection
	Keyboard.prototype.keyDownShiftAndArrowKeys = function (e) {
	    var isCtrl = e.ctrlKey;
	    var isAlt = e.altKey;
	    var isShift = e.shiftKey;
	    var isMetaKey = e.metaKey;
	    var keyCode = e.keyCode;

	    var isStopEvent = false;

	    var selection = this.$dom.selection;

	    if (isAlt || !selection.isCollapsed()) {
	        return isStopEvent;
	    }

	    //Shift + Arrow [PageUp, PageDown, End, HOME, ←, ↑, →, ↓] for Selection
	    if (isShift && [33, 34, 35, 36, 37, 38, 39, 40].indexOf(keyCode) > -1) {
	        this.isShiftArrowSelection = true;
	    }

	    return isStopEvent;
	};

	//InputKey Down Check 로직
	Keyboard.prototype.keyDownInputKeys = function (e, isStopDelete) {
	    var isCtrl = e.ctrlKey;
	    var isAlt = e.altKey;
	    var isShift = e.shiftKey;
	    var isMetaKey = e.metaKey;
	    var keyCode = e.keyCode;
	    var isInputKeyDown = this.isInputKeys(e);

	    var isStopEvent = false;

	    if (isCtrl || isAlt || isMetaKey) {
	        return isStopEvent;
	    }

	    if (isInputKeyDown) {

	        if (this.isCellLock) {
	            this.$dom.selection.setContentEditable(false);

	            var eDocument = this.router.editorObject.editorDocument;
	            var $inputNode = $(eDocument.createElement('INPUT'));
	            $inputNode.css({'opacity' : 0, 'position' : 'absolute', 'top': '50%', 'left' : '50%', 'z-index': '10000', 'width' : '100px'});
	            eDocument.body.appendChild($inputNode[0]);
	            $inputNode.focus();
	            $inputNode.remove();

	            isStopEvent = true;
	            return isStopEvent;
	        }

	        if (isStopDelete && [8, 46].indexOf(keyCode) > -1) {
	            isStopEvent = true;
	        }

	        var historyOffset = this.router.getHistoryOffset();

	        // Backspace Key Down
	        if (keyCode == 8 && !isStopDelete) {
	            if (historyOffset == 0) {
	                this.inputKeyCount = 0;
	            }

	            this.inputKeyCount--;

	            var selectedNodes = this.rootEvent.mouseEvent.selectedCellNodes;

	            if (selectedNodes && selectedNodes.length) {
	                selectedNodes.html(Define.DEFAULT_PARAGRAPH_HTML);
	            } else {
	                this.backspaceKeyToTableRemove(e);
	            }


	        }

	        // Delete Key Down
	        else if (keyCode == 46 && !isStopDelete) {
	            if (historyOffset == 0) {
	                this.inputKeyCount = 0;
	            }

	            this.inputKeyCount--;

	            var selectedNodes = this.rootEvent.mouseEvent.selectedCellNodes;

	            if (selectedNodes && selectedNodes.length) {
	                selectedNodes.html(Define.DEFAULT_PARAGRAPH_HTML);
	            } else {
	                this.deleteKeyToTableRemove(e);
	            }
	        }

	        // Other Input Key
	        else {
	            if (historyOffset == 0) {
	                this.inputKeyCount = 0;
	            }

	            this.inputKeyCount--;
	        }
	    }

	    return isStopEvent;
	};












	/* //////////////// Below KeyUp Method ////////////////*/

	Keyboard.prototype.keyUp = function(e){
	    var _this = this;

	    var isCtrl = e.ctrlKey;
	    var isAlt = e.altKey;
	    var isShift = e.shiftKey;
	    var isMetaKey = e.metaKey;
	    var keyCode = e.keyCode;

	    // console.log("Keyup~!");

	    // console.log(isCtrl, isAlt, isShift, isMetaKey, keyCode, this.isInputKeys(e));

	    // console.log("Keyup", this.inputKeyCount);

	    this.keyUpArrowKeyForIE(e);

	    this.keyUpShiftKeys(e);

	    this.keyUpCellLockCheck(e);

	    this.keyUpInputKeys(e);

	    this.keyUpStatusHighlight(e);
	};

	Keyboard.prototype.keyUpArrowKeyForIE = function (e) {
	    // if ($.browser.msie && [38, 40].indexOf(e.keyCode) > -1) {
	        this.editorContentView.removeClass(Define.CLASS.IE_ARROW_KEY_DOWN);
	    // }
	};

	//Shift + 방향키 입력 이후 Selection 검증 로직
	Keyboard.prototype.keyUpShiftKeys = function (e) {
	    var isCtrl = e.ctrlKey;
	    var isAlt = e.altKey;
	    var isShift = e.shiftKey;
	    var isMetaKey = e.metaKey;
	    var keyCode = e.keyCode;

	    var isStopEvent = false;

	    var selection = this.$dom.selection;

	    if (isShift || isAlt || selection.isCollapsed()) {
	        return isStopEvent;
	    }

	    if (this.isShiftArrowSelection && keyCode == 16) {
	        var range = selection.getRange();

	        var startContainer = range.startContainer;
	        var startOffset = range.startOffset;
	        var endContainer = range.endContainer;
	        var endOffset = range.endOffset;

	        var $startContainer = $(startContainer);
	        var $endContainer = $(endContainer);

	        var $startCellNode = $startContainer.closest(Define.CELL_TYPE.join(','));
	        var $endCellNode = $endContainer.closest(Define.CELL_TYPE.join(','));

	        if ($startCellNode.length || $endCellNode.length) {
	            if ($startCellNode.length && $endCellNode.length) {
	                if ($startCellNode[0] != $endCellNode[0]) {
	                    this.rootEvent.mouseEvent.doSelectedCell($startCellNode, $endCellNode, true);
	                    this.rootEvent.mouseEvent.removeSelectedCellFlag();
	                    this.rootEvent.mouseEvent.resetCellResizable();
	                }
	            } else {
	                this.rootEvent.mouseEvent.checkNotTableSelection();
	            }
	        }

	        this.isShiftArrowSelection = false;
	    }
	};

	//Shift + 방향키 입력 이후 Selection 검증 로직
	Keyboard.prototype.keyUpCellLockCheck = function (e) {
	    if (this.rootEvent.api.options.cell_lock_name) {
	        var cellLockName = this.rootEvent.api.options.cell_lock_name;

	        var isCtrl = e.ctrlKey;
	        var isAlt = e.altKey;
	        var isShift = e.shiftKey;
	        var isMetaKey = e.metaKey;
	        var keyCode = e.keyCode;

	        var isStopEvent = false;

	        var selection = this.$dom.selection;

	        if (isCtrl || isAlt || isMetaKey) {
	            return isStopEvent;
	        }

	        //Tab, PageUp, PageDown, End, HOME, ←, ↑, →, ↓ for Selection & Cursor
	        if ([9, 33, 34, 35, 36, 37, 38, 39, 40].indexOf(keyCode) > -1) {
	            var range = selection.getRange();
	            var startContainer = range.startContainer;

	            var $target = $(startContainer).closest('[' + cellLockName + ']');

	            if ($target.length) {
	                this.isCellLock = true;
	            } else {
	                this.isCellLock = false;
	            }

	            // console.log($target, this.isCellLock);
	        }
	    }
	};

	//KeyUp InputKeys
	Keyboard.prototype.keyUpInputKeys = function (e) {

	    var isCtrl = e.ctrlKey;
	    var isAlt = e.altKey;
	    var isShift = e.shiftKey;
	    var isMetaKey = e.metaKey;
	    var keyCode = e.keyCode;
	    var isInputKeyDown = this.isInputKeys(e);

	    var isStopEvent = false;

	    if (isCtrl || isAlt || isMetaKey) {
	        return isStopEvent;
	    }

	    if (isInputKeyDown) {
	        if (this.isCellLock) {
	            isStopEvent = true;
	            this.stop(e);

	            return isStopEvent;
	        }

	        // Backspace Key Down
	        if (keyCode == 8) {
	            if (this.inputKeyCount <= 0) {
	                this.router.externalSetUndoHistory();
	                this.router.changedUndoRedoButtonEnable();
	                this.setClearInputKeyInfo();
	            }
	            if($(this.rootEvent.editorContentView).html() == '') {
	                $(this.rootEvent.editorContentView).html(Define.DEFAULT_PARAGRAPH_HTML);
	            }
	        }

	        // Delete Key Down
	        else if (keyCode == 46) {
	            if (this.inputKeyCount <= 0) {
	                this.router.externalSetUndoHistory();
	                this.router.changedUndoRedoButtonEnable();
	                this.setClearInputKeyInfo();
	            }
	        }

	        // Other Input Key
	        else {
	            if ($.browser.msie && keyCode == 13) {
	                var selection = this.$dom.selection;

	                var range = selection.getRange();

	                if (range.startContainer && range.startContainer.nodeType == Node.ELEMENT_NODE) {

	                    var startContainer = range.startContainer;

	                    if (Define.CONTENT_NODES.indexOf(startContainer.nodeName) > -1) {
	                        if (startContainer.childNodes.length == 0) {
	                            var eDocument = this.router.editorObject.editorDocument;
	                            var textNode = eDocument.createTextNode(Define.UNICODE_ZERO_WIDTH_SPACE);
	                            startContainer.appendChild(textNode);
	                            selection.applyNewRange(textNode, 1, textNode, 1);
	                        }
	                    }
	                }
	            }

	            if (keyCode != 229) {
	                if (this.inputKeyCount <= 0) {
	                    this.router.externalSetUndoHistory();
	                    this.router.changedUndoRedoButtonEnable();
	                    this.setClearInputKeyInfo();
	                }
	            }
	        }
	    }

	    return isStopEvent;
	};

	//Keyboard Direction을 통한 Cursor이동시에 만 StatusHighlight 적용
	Keyboard.prototype.keyUpStatusHighlight = function (e) {
	    var isCtrl = e.ctrlKey;
	    var isAlt = e.altKey;
	    var isShift = e.shiftKey;
	    var isMetaKey = e.metaKey;
	    var keyCode = e.keyCode;

	    var isStopEvent = false;

	    var selection = this.$dom.selection;

	    if (isCtrl || isAlt || !selection.isCollapsed() || isMetaKey) {
	        return isStopEvent;
	    }

	    //Arrow [PageUp, PageDown, End, HOME, ←, ↑, →, ↓] for Selection
	    if ([33, 34, 35, 36, 37, 38, 39, 40].indexOf(keyCode) > -1) {
	        this.rootEvent.keyboardEvent.isStopPaste = false;
	        this.router.doStatusHighlight();
	        this.checkedKeydownInputKey();
	    }
	};


	//InputKey 입력 여부 검증 로직
	Keyboard.prototype.isInputKeys = function (e) {
	    var isCtrl = e.ctrlKey;
	    var isAlt = e.altKey;
	    var isShift = e.shiftKey;
	    var isMetaKey = e.metaKey;
	    var keyCode = e.keyCode;

	    return !isCtrl && !isAlt && !isMetaKey &&
	        (
	            $.inArray(keyCode, [9, 13, 32]) != -1
	            || keyCode == 8
	            || keyCode == 46
	            || (keyCode >= 48 && keyCode <= 90)
	            || (keyCode >= 186 && keyCode <= 222)
	            || (keyCode >= 96 && keyCode <= 111)
	            || keyCode == 229
	        );
	};

	//Backspace 로 컨텐츠 삭제시 앞부분에 Table 존재하면 제거
	Keyboard.prototype.backspaceKeyToTableRemove = function(e) {
	    var selection = this.$dom.selection;

	    if (selection.isCollapsed()){
	        var newRange = this.$dom.selection.createRange();

	        var range = this.$dom.selection.getRange();

	        var oirinalStartContainer = range.startContainer;

	        var startContainer = range.startContainer;
	        var startOffset = range.startOffset;

	        if (startOffset == 0) {
	            newRange.setStart(startContainer, startOffset);
	            newRange.setEnd(startContainer, startOffset);

	            while(startOffset == 0 && startContainer !== this.editorContentView[0]) {
	                newRange.setStartBefore(startContainer);

	                startOffset = newRange.startOffset;
	                startContainer = newRange.startContainer;
	            }

	            startOffset--;

	            if (startOffset > -1) {
	                var beforeNode = startContainer.childNodes[startOffset];

	                while(beforeNode) {
	                    if (beforeNode.nodeType != Node.ELEMENT_NODE || beforeNode.nodeName == 'TABLE') {
	                        break;
	                    }

	                    beforeNode = beforeNode.lastChild;
	                }

	                if (beforeNode && beforeNode.nodeType == Node.ELEMENT_NODE && beforeNode.nodeName == 'TABLE') {
	                    var $startCellNode = $(oirinalStartContainer).closest(Define.CELL_TYPE.join(','));
	                    var $beforeNode = $(beforeNode);
	                    var $beforeTableParentsCellNode = $beforeNode.closest(Define.CELL_TYPE.join(','));

	                    if ($startCellNode.length || $beforeTableParentsCellNode.length) {
	                        if ($startCellNode[0] != $beforeTableParentsCellNode[0]) {
	                            return;
	                        }
	                    }
	                    beforeNode.scrollIntoView();
	                    $(beforeNode).remove();
	                    this.stop(e);
	                }
	            }
	        }
	    }
	};

	//Delete로 컨텐츠 삭제시 뒷부분에 Table 존재하면 제거
	Keyboard.prototype.deleteKeyToTableRemove = function(e) {
	    var selection = this.$dom.selection;

	    var range = selection.getRange();
	    var startContainer = range.startContainer;
	    var $parentCellNode = $(startContainer).parent();

	    if($parentCellNode.html().indexOf("<p><br></p>") == 0) {
	        $parentCellNode.find("p")[0].remove();
	        return false;
	    }


	    if (selection.isCollapsed()){
	        var newRange = this.$dom.selection.createRange();

	        var range = this.$dom.selection.getRange();

	        var originalEndContainer = range.endContainer;

	        var endContainer = range.endContainer;
	        var endOffset = range.endOffset;

	        var isAfterNodeCheck = false;

	        if (endContainer.nodeType == Node.TEXT_NODE) {
	            isAfterNodeCheck = endOffset == endContainer.textContent.length;
	        } else {
	            if (endContainer.childNodes.length == endOffset) {
	                isAfterNodeCheck = true;
	            } else {
	                if (endContainer.childNodes.length == 1) {
	                    var firstChildNode = endContainer.childNodes[0];
	                    if (firstChildNode.nodeType == Node.ELEMENT_NODE && firstChildNode.nodeName == 'BR') {
	                        isAfterNodeCheck = true;
	                    }
	                }
	            }
	        }

	        if (isAfterNodeCheck) {
	            newRange.setStart(endContainer, endOffset);
	            newRange.setEnd(endContainer, endOffset);

	            endOffset = 0;

	            while(isAfterNodeCheck && endContainer !== this.editorContentView[0]) {
	                isAfterNodeCheck = false;

	                newRange.setEndAfter(endContainer);

	                endOffset = newRange.endOffset;
	                endContainer = newRange.endContainer;

	                if (endContainer.nodeType == Node.TEXT_NODE) {
	                    isAfterNodeCheck = endOffset == endContainer.textContent.length;
	                } else {
	                    if (endContainer.childNodes.length == endOffset) {
	                        isAfterNodeCheck = true;
	                    } else {
	                        if (endContainer.childNodes.length == 1) {
	                            var firstChildNode = endContainer.childNodes[0];
	                            if (firstChildNode.nodeType == Node.ELEMENT_NODE && firstChildNode.nodeName == 'BR') {
	                                isAfterNodeCheck = true;
	                            }
	                        }
	                    }
	                }
	            }

	            if (endOffset > 0) {
	                var afterNode = endContainer.childNodes[endOffset];

	                while(afterNode) {
	                    if (afterNode.nodeType != Node.ELEMENT_NODE || afterNode.nodeName == 'TABLE') {
	                        break;
	                    }

	                    afterNode = afterNode.firstChild;
	                }

	                if (afterNode && afterNode.nodeType == Node.ELEMENT_NODE && afterNode.nodeName == 'TABLE') {
	                    var $endCellNode = $(originalEndContainer).closest(Define.CELL_TYPE.join(','));
	                    var $afterNode = $(afterNode);
	                    var $afterTableParentsCellNode = $afterNode.closest(Define.CELL_TYPE.join(','));

	                    if ($endCellNode.length || $afterTableParentsCellNode.length) {
	                        if ($endCellNode[0] != $afterTableParentsCellNode[0]) {
	                            return;
	                        }
	                    }

	                    $(afterNode).remove();
	                    this.stop(e);
	                }
	            }
	        }
	    }
	};

	//최초의 Undo/Redo History가 적용되는지에 대한 여부 판별
	Keyboard.prototype.checkedKeydownInputKey = function() {
	    if (this.inputKeyCount < this.MAX_INPUT_KEY_COUNT) {
	        this.router.externalSetUndoHistory();
	        this.router.changedUndoRedoButtonEnable();

	        this.setClearInputKeyInfo();
	    }
	};

	//InputKey가 눌렸을 경우에 대한 History 적용 여부 판별
	Keyboard.prototype.setClearInputKeyInfo = function() {
	    this.inputKeyCount = this.MAX_INPUT_KEY_COUNT;
	    this.isInputKeyHistory = false;
	};

	//InputKey가 한번이라도 눌렸을때
	Keyboard.prototype.isMaxKeyCount = function() {
	    return this.inputKeyCount == this.MAX_INPUT_KEY_COUNT;
	};


	module.exports = Keyboard;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	var AbstractEvent = __webpack_require__(42);

	function Mouse(editorElement, editorContentView, $domObject, router, menuController, rootEvent) {

	    this.$dom = $domObject;

	    this.editorElement = $(editorElement);

	    this.editorContentView = editorContentView;

	    this.editorIframe = router.editorObject.editorIframe;
	    this.eDocument = router.editorObject.editorDocument;

	    this.editorView = this.editorElement.find('.' + Define.CLASS.EDITOR_VIEW);

	    this.router = router;
	    this.menuController = menuController;
	    this.rootEvent = rootEvent;

	    //Table내의 Cell Section을 위한 Flag 변수
	    this.isCellSelect = false;

	    this.startSelectTdNode = null;
	    this.selectedCellNodes = null;

	    //Chrome 처럼 Editor영역에서 Selection이 벗어나는 경우 Leave Event를 통한 상위 Document의 Event를 진행하는 Flag
	    this.isForwardLeaveEvent = false;

	    //Table Before / After에 Paragraph를 삽입하는 동작의 Box TempNode
	    this.insertParagraphNode = null;

	    //Cell Resize를 위한 Flag's
	    this.cellResizeBarInfo = null;
	    this.cellResizeBarNode = null;

	    //Table 전체 선택을 위한 Flag
	    this.tableAllSelectionBarNode = null;

	    //Mouse가 Down인 상태임을 나타내는 Flag
	    this.isMouseDown = false;



	    this.isMsControlSelection = false;

	    this.statusHighlightTimer = null;

	    this.initCellResizeBar();
	}

	Mouse.prototype = new AbstractEvent();

	Mouse.prototype.initCellResizeBar = function(){
	    var _this = this;

	    this.cellResizeBarX = $('<div class="' + Define.CLASS.KK_CELL_RESIZE_BAR_Y + '"/>');
	    this.cellResizeBarY = $('<div class="' + Define.CLASS.KK_CELL_RESIZE_BAR_X + '"/>');

	    this.cellResizeBarX.on('mousewheel DOMMouseScroll', function(e){
	        _this.resetCellResizable(e);
	    }).on('mouseup touchend', function(){
	        _this.resetCellResizable();
	    });

	    this.cellResizeBarY.on('mousewheel DOMMouseScroll', function(e){
	        _this.resetCellResizable(e);
	    }).on('mouseup touchend', function(){
	        _this.resetCellResizable();
	    });

	    $(document.body).append(this.cellResizeBarX);
	    $(document.body).append(this.cellResizeBarY);
	};

	//Drag & Drop 과 같은 Window Event Control
	Mouse.prototype.fireWindowEvent = function(e) {
	    switch(e.type){
	        case "mousedown":
	            this.windowMouseDownEvent(e);
	            break;

	        case "mousemove" :
	            this.windowMouseMoveEvent(e);
	            break;

	        case "mouseup" :
	            this.windowMouseUpEvent(e);
	            break;

	        default:

	            break;
	    }
	};

	Mouse.prototype.windowMouseMoveEvent = function(e) {
	    this.cellResizeMoveController(e);
	};

	Mouse.prototype.windowMouseDownEvent = function(e) {
	    if (this.cellResizeBarNode && e.target == this.cellResizeBarNode[0]) {
	        this.stop(e);
	    }
	};

	Mouse.prototype.windowMouseUpEvent = function(e) {
	    this.resetCellResizable();
	    this.isMouseDown = false;
	};

	Mouse.prototype.cellResizeMoveController = function(e) {
	    if (this.cellResizeBarInfo) {
	        var eventClientY = e.clientY;
	        var eventClientX = e.clientX;

	        var type = this.cellResizeBarInfo.type;

	        // 높이 리사이즈
	        if (type === "row") {
	            var $targetTable = this.cellResizeBarInfo.tableNode;
	            var changeSizeCellNodes = this.cellResizeBarInfo.changeSizeCellNodes;
	            var clientY = this.cellResizeBarInfo.clientY;
	            $targetTable.find('tr').height('auto')

	            var resizeValue = eventClientY - clientY;

	            if (changeSizeCellNodes.length) {
	                for (var i = 0, length = changeSizeCellNodes.length; i < length; i++ ) {
	                    var resizeCellInfo = changeSizeCellNodes[i];

	                    var newHeight = resizeCellInfo.height + resizeValue;
	                    resizeCellInfo.cell.css('height', newHeight + "px").attr('height', newHeight);
	                }

	                var tableHeight = this.cellResizeBarInfo.tableHeight + resizeValue;
	                $targetTable.css('height', tableHeight + "px");
	            }

	            return;
	        }
	        //너비 리사이즈
	        else if (type === "col") {
	            var $targetTable = this.cellResizeBarInfo.tableNode;

	            var changeSizeCellNodes = this.cellResizeBarInfo.changeSizeCellNodes;
	            var nextCellNodes = this.cellResizeBarInfo.nextCellNodes;

	            var clientX = this.cellResizeBarInfo.clientX;

	            var resizeValue = eventClientX - clientX;

	            if (changeSizeCellNodes.length) {
	                for (var i = 0, length = changeSizeCellNodes.length; i < length; i++ ) {
	                    var resizeCellInfo = changeSizeCellNodes[i];

	                    var newWidth = resizeCellInfo.width + resizeValue;

	                    resizeCellInfo.cell.css('width', newWidth + "px").attr('width', newWidth);
	                }
	            }

	            if (nextCellNodes.length) {
	                for (var i = 0, length = nextCellNodes.length; i < length; i++ ) {
	                    var resizeCellInfo = nextCellNodes[i];

	                    var newWidth = resizeCellInfo.width + (resizeValue * -1);

	                    resizeCellInfo.cell.css('width', newWidth + "px").attr('width', newWidth);
	                }
	            } else {
	                var tableWidth = this.cellResizeBarInfo.tableWidth + resizeValue;
	                $targetTable.css('width', tableWidth + "px");
	            }
	        }

	        this.stop(e);
	    }
	};








	//Editor 영역내에서 사용되는 Event Control

	Mouse.prototype.fireEvent = function(e) {
	    var _this = this;

	    switch (e.type) {
	        case "touchstart" :
	        case "mousedown" :
	        case "click" :
	        case "dblclick" :
	            var target = e.target;
	            if (['INPUT'].indexOf(target.nodeName) > -1) {
	                if (e.type != 'click' && e.type != 'dblclick' && (target.type == 'radio' || target.type == 'checkbox')) {

	                    if($.browser.msie) {
	                        if (!$(target).closest(Define.CELL_TYPE.join(',')).length) {
	                            target.click();
	                        }
	                    }
	                }

	                return true;
	            }

	            break;

	        case "mouseup" :
	        case "touchend" :
	            var target = e.target;
	            if (['INPUT'].indexOf(target.nodeName) > -1) {
	                if (target.type == 'text') {
	                    return true;
	                }
	            }
	            break;
	    }

	    switch(e.type){
	        case "touchstart":
	        case "mousedown":

	            this.rootEvent.keyboardEvent.checkedKeydownInputKey();

	            this.mouseDownAllToolBarClear();
	            this.$dom.selection.setContentEditable(true);

	            if (e.button == 2) {
	                if ($.browser.chrome) {
	                    var $targetNode = $(e.target);
	                    var $cellNodes = $targetNode.is(Define.CELL_TYPE.join(','));

	                    if (!$cellNodes.length) {
	                        $cellNodes = $targetNode.closest(Define.CELL_TYPE.join(','));
	                    }

	                    if ($cellNodes.length) {
	                        this.rootEvent.showGuard();
	                        this.rootEvent.contextMenu.showContextMenu(e);
	                    }
	                }

	                return;
	            }


	            this.mouseDown(e);
	            break;

	        case "touchmove" :
	        case "mousemove" :
	            this.mouseMove(e);
	            break;

	        case "mouseleave" :
	            this.mouseLeave(e);
	            break;

	        case "mouseenter" :
	            this.mouseEnter(e);
	            break;

	        case "touchend" :
	        case "mouseup" :
	            if($.browser.msie) {
	                var target = e.target;

	                if (target.nodeName && target.nodeName == 'INPUT') {
	                    if ((target.type == 'radio' || target.type == 'checkbox') && $(target).closest(Define.CELL_TYPE.join(',')).length) {
	                        target.click();
	                        this.stop(e);
	                        return false;
	                    }
	                }
	            }

	            this.mouseUp(e);

	            var range = _this.$dom.selection.setSaveRange();
	            _this.router.doStatusHighlight(range.startContainer);

	            if ($.browser.msie) {
	                (function(startContainer){
	                    _this.clearStatusTimer();

	                    _this.statusHighlightTimer = setTimeout(function(){
	                        var range = _this.$dom.selection.setSaveRange();

	                        if (startContainer != range.startContainer) {
	                            _this.router.doStatusHighlight(range.startContainer);
	                        }

	                        _this.clearStatusTimer();
	                    }, 500);
	                })(range.startContainer);
	            }

	            break;

	        case "click" :
	            this.mouseClick(e);
	            break;

	        case "dblclick" :
	            this.mouseDblClick(e);
	            break;




	        case "dragstart" :
	            this.mouseDragStart(e);
	            break;

	        case "drag" :
	            this.mouseDrag(e);
	            break;

	        case "dragend" :
	            this.mouseDragEnd(e);
	            break;

	        case "dragover" :
	            this.mouseDragOver(e);

	            break;
	        case "dragleave" :
	            this.mouseDragLeave(e);
	            break;

	        case "drop" :
	            this.mouseDrop(e);
	            break;



	        // case "wheel" :
	        case "mousewheel" :
	        case "DOMMouseScroll" :
	            var event = e.originalEvent;
	            var delta = 0;

	            if (event.wheelDelta) {
	                delta = event.wheelDelta;
	            } else if (event.detail){
	                delta = event.detail * -40;
	            }

	            if (delta > 0) {
	                delta = 120;
	            } else {
	                delta = -120;
	            }

	            this.editorContentView[0].scrollTop -= delta;
	            break;

	        case "scroll" :
	            this.mouseScroll();
	            break;

	        default:
	            break;
	    }
	};

	Mouse.prototype.mouseDown = function(e) {
	    this.rootEvent.keyboardEvent.isStopPaste = false;
	    this.isMouseDown = true;

	    var target = e.target;

	    this.removeSelectedCellFlag(true);

	    this.$dom.selection.removeSelectedCell();

	    // Cell Select Check
	    var cellNode = Util.getCurrentCell(target);

	    if (cellNode) {
	        this.startSelectTdNode = cellNode;
	        this.isCellSelect = true;
	    }

	    this.removeResizeHandleController();

	    if (!$.browser.mozilla) {
	        this.doDetecteHR(target);

	        this.doDetecteLayer(target);

	        this.doDetectedImage(target);

	        // this.doDetectedInput(target);
	        //
	        // this.doDetectedSelect(target);
	    }

	    if (this.isMsControlSelection) {
	        if (target != this.isMsControlSelection.node) {
	            this.isMsControlSelection = null;
	        }
	    }

	    // console.log(target);
	};

	Mouse.prototype.mouseMove = function(e) {
	    var target = e.target;

	    if (this.isCellSelect) {
	        this.selectCell(target);
	    } else {
	        this.setCellResizeHandler(e);
	    }

	    if (this.isMsControlSelection) {
	        // console.log(target);
	    }
	};

	Mouse.prototype.mouseUpAndShiftKey = function(e) {
	    var isCtrl = e.ctrlKey;
	    var isAlt = e.altKey;
	    var isShift = e.shiftKey;
	    var isMetaKey = e.metaKey;
	    var button = e.button;

	    var isStopEvent = false;

	    var selection = this.$dom.selection;

	    if (isCtrl || isAlt || isMetaKey || selection.isCollapsed()) {
	        return isStopEvent;
	    }

	    if (isShift && button == 0) {
	        var range = selection.getRange();

	        var startContainer = range.startContainer;
	        var endContainer = range.endContainer;

	        var $startContainer = $(startContainer);
	        var $endContainer = $(endContainer);

	        var $startCellNode = $startContainer.closest(Define.CELL_TYPE.join(','));
	        var $endCellNode = $endContainer.closest(Define.CELL_TYPE.join(','));

	        if ($startCellNode.length || $endCellNode.length) {
	            if ($startCellNode.length && $endCellNode.length) {
	                if ($startCellNode[0] != $endCellNode[0]) {
	                    this.doSelectedCell($startCellNode, $endCellNode, true);
	                    this.removeSelectedCellFlag();
	                    this.resetCellResizable();
	                }
	            } else {
	                this.checkNotTableSelection();
	            }

	            isStopEvent = true;
	        }
	    }

	    return isStopEvent;
	};

	Mouse.prototype.mouseUp = function(e) {

	    var isStopEvent = this.mouseUpAndShiftKey(e);

	    this.isMouseDown = false;

	    var target = e.target;

	    if (!isStopEvent) {
	        var isCollapsed = this.$dom.selection.isCollapsed();

	        if (!isCollapsed) {
	            this.selectCellAdjust(target);
	        }
	    }

	    this.removeSelectedCellFlag();
	    this.resetCellResizable();

	    if (this.isMsControlSelection) {
	        if (target == this.isMsControlSelection.node) {
	            var width = target.clientWidth;
	            var height = target.clientHeight;

	            if (width != this.isMsControlSelection.width || height != this.isMsControlSelection.height ) {
	                //TODO : Undo Data
	            }
	        } else {
	            this.isMsControlSelection = null;
	        }
	    }

	    this.rootEvent.keyboardEvent.keyUpCellLockCheck({ keyCode : 40});

	};

	Mouse.prototype.mouseDragStart = function(e) {
	    this.$dom.selection.removeSelectedCell();
	};

	Mouse.prototype.mouseDrag = function(e) {
	    if (e.target == this.editorContentView[0]) {
	        this.stop(e);
	        return false;
	    }

	    this.removeSelectedCellFlag();
	};

	Mouse.prototype.mouseDragEnd = function(e) {
	    this.setRePositionTable(e);

	    this.stop(e);
	};

	Mouse.prototype.mouseDrop = function(e) {
	    if (this.isDragStopCheck(e)) {

	        this.removeResizeHandleController();

	        this.setTableMoveEnd(e);

	        var range = this.$dom.selection.getRange();
	        this.$dom.selection.setRange(range);
	        this.$dom.selection.setSaveRange(range);

	    } else {
	        this.throwsImageFiles(e);
	        this.stop(e);
	        return false;
	    }
	};

	Mouse.prototype.mouseDragOver = function(e) {
	    if (!this.isDragStopCheck(e)) {
	        e.preventDefault();
	        e.originalEvent.dataTransfer.dropEffect = 'copy';
	    }
	};

	Mouse.prototype.mouseDragLeave = function(e) {
	    e.preventDefault();
	};

	Mouse.prototype.mouseClick = function(e){
	    if(e.target.nodeType == Node.ELEMENT_NODE) {
	        var targetName = e.target.nodeName.toLowerCase();
	        switch (targetName) {
	            case 'th':
	            case 'td':
	                var td = e.target;

	                if (td.childNodes.length == 0 || Util.isCheckParagraphEmpty(td)) {
	                    if (!td.childNodes.length) {
	                        td.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;
	                    } else {
	                        var childParagraph = $(td).find(Define.PARAGRAPH_NODES.join(','));

	                        if (childParagraph.length) {
	                            childParagraph.each(function(idx, node){
	                                if (!node.childNodes.length || !node.textContent.length) {
	                                    node.innerHTML = Define.DEFAULT_TEXT_HTML_BR;
	                                }
	                            });
	                        } else {
	                            td.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;
	                        }
	                    }

	                    this.$dom.selection.applyNewRange(td, 0, td, 0);
	                }

	                break;
	        }
	    }
	};

	Mouse.prototype.mouseDblClick = function(e){

	    if (e.target.nodeType != Node.TEXT_NODE) {
	        switch (e.target.nodeName) {
	            case 'HR' :
	                var $hrNode = $(e.target);

	                this.$dom.selection.setModifyTargetNode($hrNode);

	                this.menuController.menuSwitch({
	                    id : "horizontal_modify",
	                    value : {
	                        width : $hrNode[0].clientWidth,
	                        height : $hrNode[0].clientHeight,
	                        backgroundColor : $hrNode.css('backgroundColor'),
	                        align : $hrNode.attr('align')
	                    }
	                });
	                break;

	            case 'DIV' :
	                if (e.target.getAttribute(Define.ATTR.TYPE) == Define.ATTR_VALUE.KK_LAYER) {
	                    var $layerNode = $(e.target);

	                    this.$dom.selection.applyNewRange($layerNode[0], 0, $layerNode[0], 0);

	                    this.stop(e);
	                }
	                break;

	            case 'IMG' :
	                var $imageNode = $(e.target);
	                var menuObject = {};

	                //Video Object
	                if ($imageNode.attr(Define.ATTR.DATA_VIDEO_TYPE)) {
	                    menuObject.id = "videoModifyDialog";

	                    var $videoNode = $imageNode;
	                    var type = $videoNode.attr(Define.ATTR.DATA_VIDEO_TYPE);
	                    var embedHTML = decodeURIComponent($videoNode.attr(Define.ATTR.DATA_VIDEO_SOURCE));

	                    if (!embedHTML) {
	                        return;
	                    }

	                    var $embed = $(embedHTML);

	                    if (type === 'file') {

	                        if ($embed.find('embed').length) {
	                            $embed = $embed.find('embed');
	                        }

	                        var urlValue = $embed.attr('src');
	                        var _lastDot = urlValue.lastIndexOf('.');
	                        var _fileExt = urlValue.substring(_lastDot + 1, urlValue.length).toLowerCase();

	                        if (_fileExt == 'mp4' || _fileExt == 'ogg' || _fileExt == 'webm') {

	                            menuObject.value = {
	                                type : 'modify',
	                                videoType : type,
	                                videoUrl : urlValue,
	                                videoExt : _fileExt,

	                                width : parseInt($imageNode.css(Define.ATTR.WIDTH)) || null,
	                                height : parseInt($imageNode.css(Define.ATTR.HEIGHT)) || null,

	                                isAutostart : ($embed.attr(Define.ATTR.VIDEO_AUTO_PLAY) !== undefined) ,
	                                isLoop : ($embed.attr(Define.ATTR.VIDEO_LOOP) !== undefined) ,
	                                isShowtracker : false ,
	                                isShowstatusbar : false ,
	                                isShowcontrols : $embed.attr(Define.ATTR.VIDEO_CONTROL) !== undefined ,
	                                isShowaudiocontrols : $embed.attr(Define.ATTR.VIDEO_AUDIO) !== undefined ,
	                                isShowdisplay : false ,
	                                isShowpositioncontrols : false,

	                                isPlay : false,
	                                isMenu : false,
	                                isAllowfullscreen : false
	                            };

	                        } else {
	                            menuObject.value = {
	                                type : 'modify',
	                                videoType : type,
	                                videoUrl : urlValue,
	                                videoExt : _fileExt,

	                                width : parseInt($imageNode.css(Define.ATTR.WIDTH)) || null,
	                                height : parseInt($imageNode.css(Define.ATTR.HEIGHT)) || null,

	                                isAutostart : ($embed.attr(Define.ATTR.AUTO_START) !== "0") ,
	                                isLoop : ($embed[0].getAttribute(Define.ATTR.LOOP) === "1") ,
	                                isShowtracker : $embed.attr(Define.ATTR.SHOW_TRACKER) !== "0" ,
	                                isShowstatusbar : $embed.attr(Define.ATTR.SHOW_STATUSBAR) !== "0" ,
	                                isShowcontrols : $embed.attr(Define.ATTR.SHOW_CONTROLS) !== "0" ,
	                                isShowaudiocontrols : $embed.attr(Define.ATTR.SHOW_AUDIO_CONTROLS) !== "0" ,
	                                isShowdisplay : $embed.attr(Define.ATTR.SHOW_DISPLAY) !== "0" ,
	                                isShowpositioncontrols : $embed.attr(Define.ATTR.SHOW_POSITION_CONTROLS) !== "0",

	                                isPlay : $embed.attr(Define.ATTR.PLAY) !== "false",
	                                isMenu : $embed.attr(Define.ATTR.MENU) !== "false",
	                                isAllowfullscreen : $embed.attr(Define.ATTR.ALLOW_FULLSCREEN) !== "false"
	                            };
	                        }
	                    } else {
	                        menuObject.value = {
	                            type : 'modify',
	                            videoType : type,
	                            videoSource : $embed[0].outerHTML
	                        };
	                    }

	                    this.$dom.selection.setModifyTargetNode($videoNode);

	                } else {
	                    //IMAGE Object

	                    menuObject.id = "imageModifyDialog";
	                    menuObject.value = {
	                        type : 'modify',
	                        imageSrc : $imageNode[0].src,
	                        imageTitle : $imageNode.attr('title') || null,
	                        imageAlt : $imageNode.attr('alt') || null,
	                        width : $imageNode[0].width,
	                        height : $imageNode[0].height,
	                        margin : {
	                            left : parseInt($imageNode.css('marginLeft')) || null,
	                            right : parseInt($imageNode.css('marginRight')) || null,
	                            top : parseInt($imageNode.css('marginTop')) || null,
	                            bottom : parseInt($imageNode.css('marginBottom')) || null
	                        },
	                        align : $imageNode.css('verticalAlign') || null,
	                        borderType : $imageNode[0].style.borderStyle || null,
	                        borderWidth : parseInt($imageNode[0].style.borderWidth) || null,
	                        borderColor : Util.getRgbToHex($imageNode[0].style.borderColor) || null,
	                        id : $imageNode.attr('id') || null,
	                        className : $imageNode.attr(Define.ATTR.CLASS) || null,
	                        hyperlink : {}
	                    };

	                    var $parent = $imageNode.closest('body a');

	                    if ($parent.length) {
	                        var href = $parent.attr(Define.ATTR.HREF);

	                        if (href) {
	                            var className = $parent.attr(Define.ATTR.CLASS);

	                            if (href.indexOf('#') === 0) {
	                                href = href.slice(1, href.length);

	                                menuObject.value.hyperlink.type = 'bookmark';
	                                menuObject.value.hyperlink.url = href;
	                            } else {
	                                menuObject.value.hyperlink.type = 'url';
	                                menuObject.value.hyperlink.url = href;

	                                menuObject.value.hyperlink.title = $parent.attr('title') || null;
	                                menuObject.value.hyperlink.target = $parent.attr('target') || null;
	                                menuObject.value.hyperlink.id = $parent.attr('id') || null;
	                                menuObject.value.hyperlink.className = className || null;
	                            }
	                        }
	                    }

	                    this.$dom.selection.setModifyTargetNode($imageNode);
	                }

	                this.menuController.menuSwitch(menuObject);

	                break;
	        }
	    }
	};

	Mouse.prototype.mouseLeave = function(e){
	    this.isForwardLeaveEvent = true;
	};

	Mouse.prototype.mouseEnter = function(e){
	    this.isForwardLeaveEvent = false;
	};

	Mouse.prototype.mouseScroll = function(e){
	    this.removeInsertParagraphNodeForTable();

	    this.rePositionAllSelection();
	};







	// Wysiwyg Editor

	//Cell만 선택된 경우에 한하여 Selected Class를 또는 Range 보정
	Mouse.prototype.doDetectedCell = function(cellNode, isApplyRange) {
	    if (this.startSelectTdNode == cellNode) {
	        return;
	    } else {
	        this.doSelectedCell(this.startSelectTdNode, cellNode, isApplyRange)
	    }
	};

	Mouse.prototype.doSelectedCell = function(startCell, endCell, isApplyRange) {
	    var $startSelectCell = $(startCell);
	    var $endSelectCell = $(endCell);

	    var $startCellTable = $startSelectCell.closest('table');
	    var $endCellTable = $endSelectCell.closest('table');

	    //선택된 테이블이 다른 테이블이지만 Child Table일 경우
	    if ($startCellTable[0] != $endCellTable[0]) {
	        var $parentTable = $startCellTable;

	        var $childTable = $startCellTable.find($endCellTable);

	        if (!$childTable.length) {
	            $parentTable = $endCellTable;
	            $childTable = $endCellTable.find($startCellTable);
	        }

	        if ($childTable.length) {
	            var parentTableRows = $parentTable[0].rows;
	            var parentTableCellNodes = $(parentTableRows).children(Define.CELL_TYPE.join(','));
	            var $parentCell = $childTable.closest(parentTableCellNodes);

	            if ($parentCell.length) {
	                if ($parentTable[0] == $startCellTable[0]) {
	                    $endCellTable = $parentTable;
	                    $endSelectCell = $parentCell;
	                } else {
	                    $startCellTable = $parentTable;
	                    $startSelectCell = $parentCell;
	                }
	            }
	        } else {
	            var startParents = $startCellTable.parents();
	            var endParents = $endCellTable.parents();

	            var sameParents = startParents.filter(endParents);

	            var $parentSameTable = sameParents.filter('table');

	            if ($parentSameTable.length) {
	                var parentTableRows = $parentSameTable[0].rows;
	                var parentTableCellNodes = $(parentTableRows).children(Define.CELL_TYPE.join(','));

	                $startSelectCell = $startCellTable.closest(parentTableCellNodes);
	                $endSelectCell = $endCellTable.closest(parentTableCellNodes);

	                $startCellTable = $endCellTable = $parentSameTable.first();
	            }
	        }
	    }

	    //선택된 Table의 TD들이 같은 Table안에 존재할 경우
	    if ($startCellTable[0] == $endCellTable[0]) {
	        var startCellPos = $startSelectCell.cellPos();
	        var endCellPos = $endSelectCell.cellPos();

	        var startTop, endTop, startLeft, endLeft;

	        startCellPos.top < endCellPos.top ? (startTop = startCellPos.top, endTop = endCellPos.top) : (startTop = endCellPos.top, endTop = startCellPos.top);
	        startCellPos.left < endCellPos.left ? (startLeft = startCellPos.left, endLeft = endCellPos.left) : (startLeft = endCellPos.left, endLeft = startCellPos.left);

	        var cells = Util.getSelectPositionCells($startCellTable[0], startTop, endTop, startLeft, endLeft);
	        var $cells = $(cells);

	        $cells = $cells.closest($cells);
	        $cells.attr(Define.ATTR.KK_SELECTED_TD, Define.ATTR_VALUE.KK_SELECTION_VALUE);
	        this.selectedCellNodes = $cells;

	        if (isApplyRange) {
	            var node = Util.getFirstChildNode($cells[0]);

	            if (node == $cells[0]) {
	                node.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;
	                node = Util.getFirstChildNode($cells[0]);
	            }

	            var newRange =  this.$dom.selection.createRange();
	            newRange.selectNode(node);
	            newRange.collapse(true);

	            this.$dom.selection.setRange(newRange);
	            this.$dom.selection.setSaveRange(newRange);
	        }

	        return $cells;

	    } else {
	        //테이블과 테이블이 떨어져 있을때

	        if (isApplyRange) {
	            var startParents = $startCellTable.parents();
	            var endParents = $endCellTable.parents();
	            var sameParents = startParents.filter(endParents);
	            var $sameParent = sameParents.first();

	            var parentChildNodes = $sameParent[0].childNodes;

	            var startRootParentNodes = $startCellTable.closest(parentChildNodes);
	            var endRootParentNodes = $endCellTable.closest(parentChildNodes);

	            var startOffset = Util.getParentOffset($sameParent[0], startRootParentNodes[0]);
	            var endOffset = Util.getParentOffset($sameParent[0], endRootParentNodes[0]);

	            if (startOffset > endOffset) {
	                var temp = $endCellTable;
	                $endCellTable = $startCellTable;
	                $startCellTable = temp;
	            }

	            startParents = $startCellTable.parents('TABLE');
	            endParents = $endCellTable.parents('TABLE');

	            if (startParents.length) {
	                $startCellTable = startParents.last();
	            }

	            if (endParents.length) {
	                $endCellTable = endParents.last();
	            }

	            var newRange =  this.$dom.selection.createRange();
	            newRange.setStartBefore($startCellTable[0]);
	            newRange.setEndAfter($endCellTable[0]);

	            this.$dom.selection.setRange(newRange);
	            this.$dom.selection.setSaveRange(newRange);
	        }
	    }
	};

	//같은 Table내에 존재하는 Cell 선택시를 Check
	Mouse.prototype.selectCell = function(target) {
	    var _this = this;

	    if (this.isCellSelect) {
	        if (_this.selectedCellNodes) {
	            _this.selectedCellNodes.removeAttr(Define.ATTR.KK_SELECTED_TD);
	            _this.selectedCellNodes = null;
	        }

	        var cellNode = Util.getCurrentCell(target);

	        if (cellNode) {
	            var $cells = this.doDetectedCell(cellNode);
	        }
	    }
	};

	//Mouse Up시 선택된 Cell에 대한 Range 보정 여부 Check
	Mouse.prototype.selectCellAdjust = function(target) {
	    var cellNode = Util.getCurrentCell(target);

	    if (this.isCellSelect) {
	        if (this.selectedCellNodes) {
	            this.selectedCellNodes.removeAttr(Define.ATTR.KK_SELECTED_TD);
	            this.selectedCellNodes = null;
	        }
	    }

	    if (cellNode) {
	        if (this.isCellSelect) {
	            var $cells = this.doDetectedCell(cellNode, true);

	        } else {
	            //외부에서 테이블 내부 선택시
	            this.checkNotTableSelection();
	        }
	    } else {

	        //테이블 내부에서 외부 선택시
	        if (this.isCellSelect) {
	            this.checkNotTableSelection();
	        }
	    }
	};

	//Table to Table에 대한 Selection시 같은 Parent를 바라보는 Table이 아닐시에는 테이블과 테이블 전체를 Selection
	Mouse.prototype.checkNotTableSelection = function() {
	    var range = this.$dom.selection.getRange();

	    var startContainer = range.startContainer;
	    var endContainer = range.endContainer;

	    var startOffset = range.startOffset;
	    var endOffset = range.endOffset;

	    var $startContainer = $(startContainer);
	    var $endContainer = $(endContainer);

	    var $startTableNodes = $startContainer.parents('table');
	    var $endTableNodes = $endContainer.parents('table');

	    var eDocument = this.eDocument;

	    var $spanNode = this.$dom.selection.createElement('span');
	    var textNode = eDocument.createTextNode(Define.UNICODE_ZERO_WIDTH_SPACE);
	    $spanNode.append(textNode);

	    if ($startTableNodes.length) {
	        var tableNode = $startTableNodes.last()[0];
	        var newRange = this.$dom.selection.createRange();

	        newRange.setStartBefore(tableNode);
	        newRange.setEnd(endContainer, endOffset);

	        this.$dom.selection.setRange(newRange);
	        this.$dom.selection.setSaveRange();

	    } else if ($endTableNodes.length) {
	        var tableNode = $endTableNodes.last()[0];

	        var newRange = this.$dom.selection.createRange();

	        newRange.setStart(startContainer, startOffset);
	        newRange.setEndAfter(tableNode);

	        this.$dom.selection.setRange(newRange);
	        this.$dom.selection.setSaveRange();
	    }
	};

	//Cell Resize Handler 생성 Main Point
	Mouse.prototype.setCellResizeHandler = function(e){
	    if (!this.cellResizeBarInfo && !this.isMouseDown) {
	        var $cell = $(e.target);

	        var $table = null;

	        var getTable = function(){
	            var $parentTable = $cell.closest('TABLE');
	            $table = $parentTable;
	            return $parentTable;
	        };

	        if (e.target.nodeType === Node.ELEMENT_NODE && ($.inArray(e.target.nodeName, Define.CELL_TYPE) != -1 || getTable().length)) {
	            this.removeInsertParagraphNodeForTable();
	            this.resetCellResizable();

	            if (!this.removeResizable) {
	                if (!$table) {
	                    getTable();
	                }

	                this.setTableAllSelection($table);

	                var isReturn = this.tableForInsertParagraph(e, $table);

	                if (isReturn) {
	                    return;
	                }

	                if ($.inArray(e.target.nodeName, Define.CELL_TYPE) != -1) {
	                    this.generateCellResize(e, $table, $cell);
	                } else {
	                    $cell = $(e.target).closest(Define.CELL_TYPE.join(','));

	                    if ($cell.length) {
	                        this.generateCellResize(e, $table, $cell);
	                    }
	                }
	            }

	        } else {
	            this.removeInsertParagraphNodeForTable();
	            this.resetCellResizable();
	            this.clearTableAllSelectionBar();
	        }
	    }
	};

	//Move 된 Table의 위치를 다시 설정하는 로직
	Mouse.prototype.rePositionAllSelection = function() {
	    var _this = this;

	    if (this.tableAllSelectionBarNode) {
	        var $table = this.tableAllSelectionBarNode.chainingTable;

	        _this.setTableAllSelection($table);
	    }
	};

	//Table 전체 선택을 위한 Selection
	Mouse.prototype.setTableAllSelection = function($table) {
	    var _this = this;

	    var selectionBarSize = '18px';

	    var windowPosition = Util.getWindowContentPosition($table[0], this.router.editorObject);

	    var topPosition = windowPosition.top;
	    var leftPosition = windowPosition.left;

	    if (!this.tableAllSelectionBarNode) {
	        this.tableAllSelectionBarNode = $('<img class="' + Define.CLASS.KK_TABLE_ALL_SELECTION_BAR + '">');
	        this.tableAllSelectionBarNode[0].src = this.rootEvent.api.options.tableSelectImageURL;
	        this.tableAllSelectionBarNode.css({
	            width: selectionBarSize,
	            height: selectionBarSize
	        });

	        $(document.body).append(this.tableAllSelectionBarNode);

	        this.tableAllSelectionBarNode.on('mousedown touchstart', function(e){
	            _this.dragTable = _this.tableAllSelectionBarNode.chainingTable;

	        }).on('click', function(e){
	            _this.stop(e);
	            _this.$dom.selection.editorFocus();

	            var resizeTargetTable = _this.tableAllSelectionBarNode.chainingTable;

	            _this.allClearMouseAction();
	            _this.dragTable = null;

	            _this.setTableAllResizeHandler(resizeTargetTable);
	        }).on('mousewheel DOMMouseScroll', function(e){
	            _this.fireEvent(e);
	        });
	    }

	    this.tableAllSelectionBarNode.css({
	        top : topPosition - 5,
	        left : leftPosition - 5
	    }).attr('data-kuku-table', 'on');

	    this.tableAllSelectionBarNode.chainingTable = $table;
	};

	//Table Before/After 영역에 Paragraph 삽입 로직
	Mouse.prototype.tableForInsertParagraph = function(e, $table) {

	    var checkTableBeforeAfter = function($node) {
	        var isInsert = false;

	        if (!$node.length
	            || $.inArray($node[0].nodeName, Define.PARAGRAPH_NODES) === -1
	            || (!$node.text().length && !$node.find('br').length)
	            || (!(!$node.text().length && !$node.find('br').length) && ($node[0].textContent == "\u000A\u000A" || $node[0].textContent == "\u000A\u0020\u0020"))
	            || $node.attr(Define.ATTR.TYPE) == Define.ATTR_VALUE.KK_LAYER) {
	            isInsert = true;
	        }

	        return isInsert;
	    };

	    var _this = this;

	    var buffer = 5;

	    var isInsertParagraph = false;

	    var clientY = e.clientY ;

	    var startY = clientY + buffer;
	    var endY = clientY - buffer;

	    var tableOffset = Util.getContentPosition($table, this.editorContentView);

	    var insertParagraph = null;

	    var $tablePrevNode = $table.prev();
	    var $tableNextNode = $table.next();

	    var editoriFrame = this.editorIframe;
	    var iframeOffset = editoriFrame.offset();

	    var topPosition = iframeOffset.top + tableOffset.top;
	    var leftPosition = iframeOffset.left + tableOffset.left;


	    if (startY >= tableOffset.top && endY <= tableOffset.top) {
	        if (checkTableBeforeAfter($tablePrevNode)) {
	            insertParagraph = "before";
	        }

	    } else if (startY >= (tableOffset.top + $table[0].offsetHeight) && endY <= (tableOffset.top + $table[0].offsetHeight)) {
	        if (checkTableBeforeAfter($tableNextNode)) {
	            insertParagraph = "after";
	        }
	    }

	    this.removeInsertParagraphNodeForTable();

	    if (insertParagraph) {
	        var addParagraphStyle = "";

	        if (this.rootEvent.api.options.customMagicLineStyle) {
	            addParagraphStyle = ' style="' + this.rootEvent.api.options.customMagicLineStyle + '"';
	        }

	        this.insertParagraphNode = $('<div class="' + Define.CLASS.KK_ADD_PARAGRAPH + '"' + addParagraphStyle + '>' + window.kukuResource.paragraphInsert + '</div>').css({
	            width : $table.width(),
	            top : topPosition + (insertParagraph === "before" ? 0 : $table[0].offsetHeight) - 7 ,
	            left : leftPosition
	        }).on('click', function(){
	            _this.router.externalSetUndoHistory();

	            var $pNode = _this.$dom.selection.createElement('p');
	            $pNode.html(Define.DEFAULT_TEXT_HTML_BR);
	            $table[insertParagraph]($pNode);

	            _this.router.externalSetUndoHistory();
	            _this.router.changedUndoRedoButtonEnable();

	            _this.removeInsertParagraphNodeForTable();
	            _this.clearTableAllSelectionBar();

	            _this.$dom.selection.editorFocus();
	            _this.$dom.selection.applyNewRange($pNode[0],0,$pNode[0],0);

	        }).on('mousewheel DOMMouseScroll', function(e){
	            _this.fireEvent(e);
	        });

	        $(document.body).append(this.insertParagraphNode);

	        isInsertParagraph = true;
	    }

	    return isInsertParagraph;
	};

	//Insert Paragraph 박스 삭제 로직
	Mouse.prototype.removeInsertParagraphNodeForTable = function() {
	    if (this.insertParagraphNode) {
	        this.insertParagraphNode.remove();
	        this.insertParagraphNode = null;
	    }
	};

	//Cell Resizable Bar 추가 로직
	Mouse.prototype.generateCellResize = function(e, $table, $cell) {
	    var _this = this;

	    var clientY = e.clientY ;
	    var clientX = e.clientX ;

	    var buffer = 5;

	    var startY = clientY + buffer;
	    var endY = clientY - buffer;

	    var startX = clientX + buffer;
	    var endX = clientX - buffer;

	    var cellHeight = $cell[0].offsetHeight;
	    var cellWidth = $cell[0].offsetWidth;

	    var cellOffset = Util.getContentPosition($cell, this.editorContentView);

	    var cellTop = cellOffset.top;
	    var cellLeft = cellOffset.left;

	    var editoriFrame = this.editorIframe;
	    var iframeOffset = editoriFrame.offset();
	    var editorOffset = this.editorContentView.offset();

	    var cellBottomPosition = cellTop + cellHeight;
	    var cellRightPosition = cellLeft + cellWidth;

	    //높이 리사이즈
	    if (startY >= (cellBottomPosition) && endY <= (cellBottomPosition)){

	        this.stop(e);

	        var topPosition = clientY + iframeOffset.top - editorOffset.top;
	        this.cellResizeBarNode = this.cellResizeBarX;

	        this.cellResizeBarNode.css({
	            width : window.innerWidth,
	            height : 10,
	            top : topPosition,
	            left : 0
	        }).on("mousedown touchstart", function(){
	            _this.rootEvent.showGuard("row-resize");

	            var cellSizeList = Util.getTableCellSize($table, true, false);

	            var tableHeight = $table.height();
	            $table.css('height', tableHeight);

	            var scanCellPos = $cell.cellPos(true);
	            var currentRowIndex = scanCellPos.top + $cell[0].rowSpan - 1;
	            var changeSizeCellNodes = [];

	            for (var rowIdx = 0, rowLength = cellSizeList.length; rowIdx < rowLength; rowIdx++) {
	                var cellSizeInfoList = cellSizeList[rowIdx];

	                for (var cellIdx = 0, length = cellSizeInfoList.length; cellIdx < length; cellIdx++) {
	                    var cellSizeInfo = cellSizeInfoList[cellIdx];
	                    var $cellNode = cellSizeInfo.cell;

	                    var cellPosition = $cellNode.cellPos();

	                    var cellRowIndex = cellPosition.top;

	                    if ((cellRowIndex == currentRowIndex && $cellNode[0].rowSpan == 1)
	                        || (cellRowIndex < currentRowIndex && cellRowIndex + ($cellNode[0].rowSpan - 1) == currentRowIndex)) {
	                        changeSizeCellNodes.push(cellSizeInfo);
	                    }
	                }
	            }

	            _this.cellResizeBarInfo = {
	                tableNode : $table,
	                tableHeight : tableHeight,
	                changeSizeCellNodes : changeSizeCellNodes,
	                clientY : topPosition,
	                type : 'row'
	            };

	            _this.router.externalSetUndoHistory();

	            _this.stop(e);
	        });

	        this.cellResizeBarNode.css('opacity', '1');
	    }

	    //너비 리사이즈
	    else if (startX >= (cellRightPosition) && endX <= (cellRightPosition)){
	        this.stop(e);

	        var leftPosition = clientX + iframeOffset.left - editorOffset.left;

	        this.cellResizeBarNode = this.cellResizeBarY;

	        this.cellResizeBarNode.css({
	            width : 10,
	            height : window.innerHeight,
	            top : 0 ,
	            left : leftPosition
	        }).on("mousedown touchstart", function(e){
	            _this.rootEvent.showGuard("col-resize");

	            var cellSizeList = Util.getTableCellSize($table, false, true);

	            var tableWidth = $table.width();

	            var scanCellPos = $cell.cellPos(true);
	            var currentColIndex = scanCellPos.left + $cell[0].colSpan - 1;
	            var nextColIndex = currentColIndex + 1;

	            var currentCellNodes = [];
	            var nextCellNodes = [];

	            for (var rowIdx = 0, rowLength = cellSizeList.length; rowIdx < rowLength; rowIdx++) {
	                var cellSizeInfoList = cellSizeList[rowIdx];

	                for (var cellIdx = 0, length = cellSizeInfoList.length; cellIdx < length; cellIdx++) {
	                    var cellSizeInfo = cellSizeInfoList[cellIdx];
	                    var $cellNode = cellSizeInfo.cell;

	                    var cellPosition = $cellNode.cellPos();
	                    var cellColIndex = cellPosition.left;

	                    if ((cellColIndex == currentColIndex && $cellNode[0].colSpan == 1)
	                        || (cellColIndex < currentColIndex && (cellColIndex + $cellNode[0].colSpan - 1) == currentColIndex)) {
	                        currentCellNodes.push(cellSizeInfo);
	                    }

	                    if (cellColIndex == nextColIndex) {
	                        nextCellNodes.push(cellSizeInfo);
	                    }
	                }
	            }

	            _this.cellResizeBarInfo = {
	                tableNode : $table,
	                tableWidth : tableWidth,
	                changeSizeCellNodes : currentCellNodes,
	                nextCellNodes : nextCellNodes,
	                clientX : leftPosition,
	                type : 'col'
	            };

	            _this.router.externalSetUndoHistory();
	            _this.stop(e);
	        });

	        this.cellResizeBarNode.css('opacity', '1');
	    }
	};

	//Cell Resizable Bar 제거 로직
	Mouse.prototype.resetCellResizable = function() {
	    if (this.cellResizeBarInfo) {
	        this.router.setRedoHistory();
	        this.router.changedUndoRedoButtonEnable();
	        this.$dom.selection.editorFocus();
	    }

	    this.cellResizeBarInfo = null;

	    if (this.cellResizeBarNode) {
	        this.cellResizeBarNode.off('mousedown touchstart');
	        this.cellResizeBarNode.css({
	            top:'',
	            left:'',
	            width:'',
	            height:'',
	            opacity : 0
	        });
	        this.cellResizeBarNode = null;

	        this.rootEvent.hideGuard();
	    }
	};

	//Table Move End 설정 로직
	Mouse.prototype.setTableMoveEnd = function(e) {
	    var _this = this;

	    this.clearTableAllSelectionBar();

	    if (!$.browser.chrome) {
	        setTimeout(function(){
	            _this.setRePositionTable(e);
	        }, 0);
	    }
	};

	//Table Move 위치로 재 포지셔닝 로직
	Mouse.prototype.setRePositionTable = function(e) {
	    if (this.dragTable) {
	        var $table = this.dragTable;

	        var dragNodes = this.editorContentView.find('[data-kuku-table]');
	        var $image = dragNodes.filter('img');

	        var $span = this.$dom.selection.createElement('span');
	        $span.html(Define.NBSP);
	        $image.after($span);

	        if (!$table.find($image).length) {
	            $image.before($table);

	            var contentParents = $table.closest(Define.HEADING_NODES.join(',') + ',p');

	            if (contentParents.length) {
	                Util.splitOn(contentParents.last()[0].parentNode, $table[0]);
	            }
	        }

	        $image.remove();

	        this.dragTable = null;

	        this.router.externalSetUndoHistory();
	        this.router.changedUndoRedoButtonEnable();

	        this.setTableAllResizeHandler($table);
	    }
	};

	//Table All Selection
	Mouse.prototype.setTableAllResizeHandler = function(target){
	    this.doDetectedTable(target);
	};

	//Table Allselection 후 Side Bar 설정 로직
	Mouse.prototype.doDetectedTable = function($table) {

	    var _this = this;

	    this.$dom.selection.removeSelectedCell();

	    //선택된 Table이 List내에 포함되어 있는지 확인;
	    var $parentListNodes = $table.closest(Define.LIST_NODES.join(','));

	    if ($parentListNodes.length) {
	        var $numberdList = this.rootEvent.toolbarElement.find('a[u-id="numbered_list"]');
	        var $bulletList = this.rootEvent.toolbarElement.find('a[u-id="bullet_list"]');

	        $numberdList.removeClass('on');
	        $bulletList.removeClass('on');

	        if ($parentListNodes.is('OL')){
	            $numberdList.addClass('on');
	        }else{
	            $bulletList.addClass('on');
	        }
	    }

	    //Table Moveable 생성 및 컨트롤
	    var movableLines = {};
	    var tableResizeTooltip = null;

	    var tableMoveHandlerMouseDown = function(e){
	        for(var key in movableLines) {
	            movableLines[key].css('opacity', 0);
	        }

	        var $target = $(e.target);

	        var copyImageSize = '20px';

	        $target[0].src = _this.rootEvent.api.options.tableMoveImageURL;
	        $target.css({
	            top : e.clientY - 7,
	            left : e.clientX - 7,
	            width : copyImageSize,
	            height : copyImageSize
	        });

	        $target.attr('data-kuku-table', 'on');

	        _this.dragTable = $table;
	    };

	    var adjustHandler = function(table, width, height){
	        var $table = $(table);

	        $table.css("height", height);
	        $table.css("width", width);
	        $table.attr("width", width);
	        $table.attr("height", height);

	        var changeHeight = $table.height();

	        if (changeHeight > height) {
	            var differenceHeight = changeHeight - height;

	            var perHeight = parseInt(differenceHeight / $table[0].rows.length);

	            if (perHeight < 1) {
	                perHeight = 1;
	            }

	            var rows = $table[0].rows;

	            var rowSizeList = [];

	            for (var rowIdx = 0, rowLength = rows.length; rowIdx < rowLength; rowIdx++) {
	                var trNode = rows[rowIdx];
	                var cells = trNode.cells;

	                var cellSizeList = [];

	                for (var cellIdx = 0, length = cells.length; cellIdx < length; cellIdx++) {
	                    var changeWidthTargetCell = $(cells[cellIdx]);

	                    cellSizeList.push(changeWidthTargetCell.height() - perHeight);
	                }

	                rowSizeList.push(cellSizeList);
	            }

	            for (var rowIdx = 0, rowLength = rows.length; rowIdx < rowLength; rowIdx++) {
	                var trNode = rows[rowIdx];
	                var cells = trNode.cells;

	                var cellSizeList = rowSizeList[rowIdx];

	                for (var cellIdx = 0, length = cells.length; cellIdx < length; cellIdx++) {
	                    var changeWidthTargetCell = $(cells[cellIdx]);
	                    changeWidthTargetCell[0].style.height = (cellSizeList[cellIdx] + 1) + 'px';
	                }
	            }
	        }
	    };

	    var handlerPosition = function(topPosition, leftPosition, width, height) {
	        var movableLineBuffer = 7;
	        var movehandlerSize = '7px';

	        movableLines['top'].css({
	            top : topPosition - (movableLineBuffer - 1),
	            left : leftPosition - (movableLineBuffer + 1),
	            width : width + (movableLineBuffer * 2),
	            height : movehandlerSize
	        });

	        movableLines['left'].css({
	            top : topPosition + 1,
	            left : leftPosition - (movableLineBuffer + 1),
	            width : movehandlerSize,
	            height : height
	        });

	        movableLines['right'].css({
	            top : topPosition + 1,
	            left : leftPosition + width - 1,
	            width : movehandlerSize,
	            height : height
	        });

	        movableLines['bottom'].css({
	            top : topPosition + (height - 1),
	            left : leftPosition - (movableLineBuffer + 1),
	            width : width + (movableLineBuffer * 2),
	            height : movehandlerSize
	        });

	        tableResizeTooltip.css({
	            top : topPosition + height + 10,
	            left : leftPosition + width + 10
	        }).html(width + " x " + height);
	    };

	    var createHandler = function() {
	        var tableMoveLineTpl = '<img class="' + Define.CLASS.KK_TABLE_MOVE_LINE + ' movable-{d} ">';

	        var tableHandlerNames = ['top', 'left', 'right', 'bottom'];

	        for(var i = 0, length = tableHandlerNames.length ; i < length ; i++) {
	            movableLines[tableHandlerNames[i]] = $(tableMoveLineTpl.replace('{d}', tableHandlerNames[i]));
	            movableLines[tableHandlerNames[i]][0].src = _this.rootEvent.api.options.tableMoveHandlerImageURL;
	            movableLines[tableHandlerNames[i]].on('mousedown touchstart', tableMoveHandlerMouseDown).on('mousewheel DOMMouseScroll', function(e){
	                _this.fireEvent(e);
	            });

	            _this.editorElement.append(movableLines[tableHandlerNames[i]]);
	        }

	        tableResizeTooltip = $('<div class="' + Define.CLASS.TABLE_RESIZE_TOOLTIP + '"></div>');
	        _this.editorElement.append(tableResizeTooltip);
	    };

	    var removeHandler = function() {
	        var $moveLines = _this.editorElement.find('.' + Define.CLASS.KK_TABLE_MOVE_LINE);
	        $moveLines.remove();

	        if (tableResizeTooltip) {
	            tableResizeTooltip.remove();
	        }
	    };

	    var reselection = function(table) {
	        _this.$dom.selection.removeSelectedCell();

	        var $table = $(table);
	        var rows = $table[0].rows;
	        var $cells = $(rows).children(Define.CELL_TYPE.join(','));
	        var eDocument = _this.eDocument;

	        if ($.browser.msie) {
	            var newRange = _this.$dom.selection.createRange();

	            var firstCell = $table[0].rows[0].cells[0];

	            if (!firstCell.textContent.length) {
	                var nbsp = eDocument.createTextNode(Define.UNICODE_NBSP);

	                var firstChild = firstCell.firstChild;
	                if (firstChild && firstChild.nodeType == Node.ELEMENT_NODE && Define.PARAGRAPH_NODES.indexOf(firstChild.nodeName) > -1) {
	                    $(firstChild).prepend(nbsp);
	                } else {
	                    $(firstCell).prepend(nbsp);
	                }
	            }

	            if ($.browser.version < 11) {
	                var node = Util.getFirstChildNode($cells[0]);

	                newRange.setStart(node, 0);
	                newRange.setEnd($cells.last()[0], $cells.last()[0].childNodes.length);
	            } else {
	                var lastNode = Util.getLastChildNode($cells.last()[0]);

	                newRange.setStartBefore($table[0]);

	                if ($.inArray(lastNode.nodeName, Define.SINGLE_NODES) != -1) {
	                    if (!lastNode.previousSibling && $.inArray(lastNode.parentNode.nodeName, Define.CONTENT_NODES) == -1) {
	                        var $spanNode = _this.$dom.selection.createElement('SPAN');
	                        $spanNode.html(Define.UNICODE_ZERO_WIDTH_SPACE);
	                        $(lastNode).after($spanNode);
	                        $spanNode.append(lastNode);

	                        newRange.setEndAfter($table[0]);

	                    } else {
	                        newRange.setEndAfter($table[0]);
	                        // newRange.setEndAfter(lastNode);
	                    }
	                } else {
	                    if (lastNode.nodeType == Node.TEXT_NODE) {
	                        newRange.setEnd(lastNode, lastNode.textContent.length);
	                    } else {
	                        newRange.setEnd(lastNode, lastNode.childNodes.length);
	                    }
	                }
	                //newRange.selectNode($table[0]);
	                //newRange.setEndAfter($cells.last()[0].childNodes.length ? $cells.last()[0].childNodes[$cells.last()[0].childNodes.length - 1] : $cells.last()[0]);
	            }

	            _this.$dom.selection.setRange(newRange);
	            _this.$dom.selection.setSaveRange(newRange);

	        } else {
	            //Table 전체 선택의 경우에는 실제 Selection 적용

	            var $firstCell = $cells.first();
	            var $lastCell = $cells.last();

	            if (!$firstCell[0].childNodes.length) {
	                $firstCell.html(Define.DEFAULT_PARAGRAPH_HTML);
	            }

	            if (!$lastCell[0].childNodes.length) {
	                $lastCell.html(Define.DEFAULT_PARAGRAPH_HTML);
	            }

	            _this.$dom.selection.applyNewRange($table[0], 0, $table[0], $table[0].childNodes.length);
	            // var newRange = eDocument.createRange();
	            //
	            // newRange.setStartBefore($table[0]);
	            // newRange.setEndAfter($table[0]);
	            //
	            // _this.$dom.selection.setRange(newRange);
	            // _this.$dom.selection.setSaveRange(newRange);
	        }

	        //Table내에 존재하는 Cell들을 전체 Selected

	        _this.selectedCellNodes = $cells.attr(Define.ATTR.KK_SELECTED_TD, Define.ATTR_VALUE.KK_SELECTION_VALUE);

	        // _this.selectedCellNodes = $cells;
	    };

	    var statusHighlight = function() {
	        _this.router.setStatusTableSelection($table);
	    };

	    reselection($table);

	    var options = {
	        createHandler : createHandler,
	        removeHandler : removeHandler,
	        adjustHandler : adjustHandler,
	        handlerPosition : handlerPosition,
	        reselection : reselection,
	        statusHighlight : statusHighlight
	    };


	    this.createResizeHandler($table, options);
	};

	//Image Resize를 위한 설정 로직
	Mouse.prototype.doDetectedImage = function(target) {
	    var _this = this;

	    if (target.nodeType == Node.ELEMENT_NODE && target.nodeName == 'IMG') {
	        var newRange = this.$dom.selection.createRange();
	        newRange.selectNode(target);
	        this.$dom.selection.setRange(newRange);
	        this.$dom.selection.setSaveRange(newRange);

	        if ($.browser.msie) {
	            setTimeout(function(){
	                var newRange = _this.$dom.selection.createRange();
	                newRange.selectNode(target);
	                _this.$dom.selection.setRange(newRange);
	                _this.$dom.selection.setSaveRange(newRange);
	            }, 100);
	        }

	        this.createResizeHandler(target);
	    }
	};


	//Select Resize를 위한 설정 로직
	Mouse.prototype.doDetectedSelect = function(target) {
	    if (target.nodeType == Node.ELEMENT_NODE && target.nodeName == 'SELECT') {
	        var newRange = this.$dom.selection.createRange();
	        newRange.selectNode(target);
	        this.$dom.selection.setRange(newRange);
	        this.$dom.selection.setSaveRange(newRange);

	        target.setAttribute('draggable', true);

	        var removeHandler = function(){
	            target.removeAttribute('draggable');
	        };

	        var options = {
	            removeHandler : removeHandler
	        };

	        this.createResizeHandler(target, options);
	    }
	};

	//Input Resize를 위한 설정 로직
	Mouse.prototype.doDetectedInput = function(target) {
	    if (target.nodeType == Node.ELEMENT_NODE && target.nodeName == 'INPUT') {
	        var newRange = this.$dom.selection.createRange();
	        newRange.selectNode(target);
	        this.$dom.selection.setRange(newRange);
	        this.$dom.selection.setSaveRange(newRange);

	        target.setAttribute('draggable', true);

	        var removeHandler = function(){
	            target.removeAttribute('draggable');
	        };

	        var options = {
	            removeHandler : removeHandler
	        };

	        this.createResizeHandler(target, options);
	    }
	};

	//HR Resize를 위한 설정 로직 for Chrome
	Mouse.prototype.doDetecteHR = function(target) {
	    if (target.nodeType == Node.ELEMENT_NODE && target.nodeName == 'HR') {
	        if ($.browser.chrome) {
	            var newRange = this.$dom.selection.createRange();
	            newRange.selectNode(target);
	            this.$dom.selection.setRange(newRange);
	            this.$dom.selection.setSaveRange(newRange);

	            target.setAttribute('draggable', true);

	            var removeHandler = function(){
	                target.removeAttribute('draggable');
	            };

	            var options = {
	                removeHandler : removeHandler
	            };

	            this.createResizeHandler(target, options);
	        }
	    }
	};

	//Layer영역을 Resize를 위한 로직
	Mouse.prototype.doDetecteLayer = function(target) {
	    if (target.nodeType == Node.ELEMENT_NODE && target.nodeName == 'DIV' && target.getAttribute(Define.ATTR.TYPE) == Define.ATTR_VALUE.KK_LAYER) {
	        if ($.browser.chrome) {
	            var newRange = this.$dom.selection.createRange();
	            newRange.selectNode(target);
	            this.$dom.selection.setRange(newRange);
	            this.$dom.selection.setSaveRange(newRange);

	            target.setAttribute('draggable', true);

	            var removeHandler = function(){
	                target.removeAttribute('draggable');
	            };

	            var options = {
	                removeHandler : removeHandler
	            };

	            this.createResizeHandler(target, options);
	        }
	    }
	};

	//Resize Handler 생성 및 동작을 위한 로직
	Mouse.prototype.createResizeHandler = function(target, options) {


	    this.removeResizeHandleController();

	    var _this = this;

	    var editoriFrame = this.editorIframe;

	    var iframeOffset = window.isYooncomsEditor ? editoriFrame.position() : editoriFrame.offset();
	    var eidtorOffset = this.editorContentView.offset();

	    var scrolTop = this.editorContentView[0].scrollTop;
	    var scrollLeft = this.editorContentView[0].scrollLeft;


	    var $eDocument = $(this.eDocument);

	    var $parentDocument = $(document);
	    var $parentBody = $(document.body);

	    var $target = $(target);

	    var targetWidth = $target.width();
	    var targetHeight = $target.height();
	    var borderWidth = parseInt($target.css('border-left-width')) + parseInt($target.css('border-right-width'));
	    var borderHeight = parseInt($target.css('border-top-width')) + parseInt($target.css('border-bottom-width'));

	    var bufferSize = (target.nodeName == 'TABLE' && $.browser.msie) ? 1 : 0;

	    var controls = {};

	    var superTop = 0;
	    var superLeft = 0;

	    if ($.browser.msie) {
	        try {
	            if (window.parent && document != window.parent.document) {
	                var superIframeOffset = $(window.frameElement).offset();

	                superTop = superIframeOffset.top;
	                superLeft = superIframeOffset.left;
	            }
	        } catch(exception) {
	        }
	    }

	    var superIframeMoveEvent = function(e){
	        if (!_current) {
	            return true;
	        }

	        e.preventDefault();
	        e.stopPropagation();

	        if (_current.direction) {
	            var clientX = e.clientX;
	            var clientY = e.clientY;

	            if (e.type == "touchmove") {
	                clientX = (e.originalEvent.touches[0] ||  e.originalEvent.changedTouches[0]).pageX;
	                clientY = (e.originalEvent.touches[0] ||  e.originalEvent.changedTouches[0]).pageY;
	            }

	            if (!_current.firstPosition.x) {
	                _current.firstPosition.x = clientX;
	            }

	            if (!_current.firstPosition.y) {
	                _current.firstPosition.y = clientY;
	            }

	            _current.x = clientX - superLeft;
	            _current.y = clientY - superTop;

	            resizeHandles[_current.direction](_current);
	        }

	        return false;
	    };

	    var parentMouseMoveEvent = function (e) {
	        if (!_current) {
	            return true;
	        }

	        e.preventDefault();
	        e.stopPropagation();

	        if (_current.direction) {

	            var clientX = e.clientX;
	            var clientY = e.clientY;

	            if (e.type == "touchmove") {
	                clientX = (e.originalEvent.touches[0] ||  e.originalEvent.changedTouches[0]).pageX;
	                clientY = (e.originalEvent.touches[0] ||  e.originalEvent.changedTouches[0]).pageY;
	            }

	            if (!_current.firstPosition.x) {
	                _current.firstPosition.x = clientX;
	            }

	            if (!_current.firstPosition.y) {
	                _current.firstPosition.y = clientY;
	            }

	            _current.x = clientX;
	            _current.y = clientY;

	            resizeHandles[_current.direction](_current);
	        }

	        return false;
	    };

	    var mouseMoveEvent = function (e) {
	        if (!_current) {
	            return true;
	        }

	        e.preventDefault();
	        e.stopPropagation();

	        if (_current.direction) {
	            var clientX = e.clientX;
	            var clientY = e.clientY;

	            if (e.type == "touchmove") {
	                clientX = (e.originalEvent.touches[0] ||  e.originalEvent.changedTouches[0]).pageX;
	                clientY = (e.originalEvent.touches[0] ||  e.originalEvent.changedTouches[0]).pageY;
	            }

	            if (!_current.firstPosition.x) {
	                _current.firstPosition.x = clientX;
	            }

	            if (!_current.firstPosition.y) {
	                _current.firstPosition.y = clientY;
	            }

	            _current.x = clientX + iframeOffset.left;
	            _current.y = clientY + iframeOffset.top;

	            resizeHandles[_current.direction](_current);
	        }

	        return false;
	    };

	    var mouseUpEvent = function (e) {
	        targetHeight = $target.height();
	        targetWidth = $target.width();

	        if (!_current) {
	            return true;
	        }
	        _this.isMouseDown = true;
	        _this.rootEvent.hideGuard();
	        _this.stop(e);

	        if (options && options.reselection) {
	            options.reselection($target);
	        } else {
	            var newRange = _this.$dom.selection.createRange();
	            newRange.selectNode($target[0]);
	            _this.$dom.selection.setRange(newRange);
	            _this.$dom.selection.setSaveRange(newRange);
	        }

	        _this.router.externalSetUndoHistory();
	        _this.router.changedUndoRedoButtonEnable();
	        _this.$dom.selection.editorFocus();

	        if (_current.direction) {
	            _current.direction = null;
	        }
	        _current = null;

	        $eDocument.off('mousemove touchmove', mouseMoveEvent);

	        if ($parentDocument) {
	            if ($.browser.msie) {
	                try {
	                    if (window.parent && document != window.parent.document) {
	                        var $superParentDocument = $(window.parent.document);

	                        $superParentDocument.off('mousemove touchmove', superIframeMoveEvent);
	                    }
	                } catch(exception) {
	                }
	            }

	            $parentDocument.off('mousemove touchmove', parentMouseMoveEvent);
	        }
	    };

	    var resizeMouseDown = function(e) {
	        _this.isMouseDown = true;
	        _this.rootEvent.showGuard();

	        _this.allClearMouseAction();

	        _this.router.externalSetUndoHistory();

	        if (e.type == "touchstart") {
	            e.preventDefault();
	        }

	        _current = {};
	        _current.target = e.target;
	        _current.direction = e.data.direction;
	        _current.firstPosition = {};
	        _current.firstSize = {
	            height : targetHeight,
	            width : targetWidth
	        };

	        $eDocument.off('mousemove touchmove', mouseMoveEvent).on('mousemove touchmove', mouseMoveEvent);

	        if ($parentDocument) {
	            if ($.browser.msie) {
	                try {
	                    if (window.parent && document != window.parent.document) {
	                        var $superParentDocument = $(window.parent.document);

	                        $superParentDocument.off('mousemove touchmove', superIframeMoveEvent).on('mousemove touchmove', superIframeMoveEvent);
	                        $superParentDocument.off('mouseup touchend', mouseUpEvent).on('mouseup touchend', mouseUpEvent);
	                    }
	                } catch(exception) {
	                }
	            }

	            $parentDocument.off('mousemove touchmove', parentMouseMoveEvent).on('mousemove touchmove', parentMouseMoveEvent);
	            $parentDocument.off('mouseup touchend', mouseUpEvent).on('mouseup touchend', mouseUpEvent);
	        }
	    };

	    var resizeHandles = {
	        n: function (obj) {
	            var height = obj.firstSize.height + (obj.firstPosition.y - obj.y);

	            if (height < 5) {
	                return;
	            }

	            $target.css("height", height + 'px');
	            $target.attr("height", height);

	            if (options && options.adjustHandler) {
	                var targetWidth = 0;

	                if ($.browser.msie) {
	                    targetWidth = parseInt($target[0].style.width);

	                    if (!targetWidth || isNaN(targetWidth) || (targetWidth < $target[0].offsetWidth) || (targetWidth < $target.width())) {
	                        targetWidth = $target[0].offsetWidth || $target.width();
	                    }
	                } else {
	                    targetWidth = $target.width();
	                }

	                options.adjustHandler($target, targetWidth, height);
	            }

	            resizeHandlePosition(null, 0, height);
	        },
	        e: function (obj) {
	            var width = obj.firstSize.width + obj.x - obj.firstPosition.x;

	            if (width < 5) {
	                return;
	            }

	            $target.css("width", width + 'px');
	            $target.attr("width", width);

	            resizeHandlePosition(null, width, 0);
	        },
	        s: function (obj) {
	            var height = obj.firstSize.height + obj.y - obj.firstPosition.y;

	            if (height < 5) {
	                return;
	            }

	            $target.css("height", height + 'px');
	            $target.attr("height", height);

	            if (options && options.adjustHandler) {
	                var targetWidth = 0;

	                if ($.browser.msie) {
	                    targetWidth = parseInt($target[0].style.width);

	                    if (!targetWidth || isNaN(targetWidth) || (targetWidth < $target[0].offsetWidth) || (targetWidth < $target.width())) {
	                        targetWidth = $target[0].offsetWidth || $target.width();
	                    }
	                } else {
	                    targetWidth = $target.width();
	                }

	                options.adjustHandler($target, targetWidth, height);
	            }

	            resizeHandlePosition(null, 0, height);
	        },
	        w: function (obj) {
	            var width = obj.firstSize.width + obj.firstPosition.x - obj.x;

	            if (width < 5) {
	                return;
	            }

	            $target.css("width", width + 'px');
	            $target.attr("width", width);

	            resizeHandlePosition(null, width, 0);
	        },
	        se: function (obj) {
	            // var height = obj.firstSize.height + obj.y - obj.firstPosition.y;
	            // if (height < 5) {
	            //     height = 5;
	            // }
	            //
	            // $target.css("height", height + 'px');
	            // $target.attr("height", height);
	            //
	            // var width = obj.firstSize.width + obj.x - obj.firstPosition.x;
	            // if (width < 5) {
	            //     width = 5;
	            // }
	            //
	            // $target.css("width", width + 'px');
	            // $target.attr("width", width);

	            var ratio = obj.firstSize.height / obj.firstSize.width;
	            var width, height;

	            if(obj.x > obj.y) {
	                width = obj.firstSize.width + obj.x - obj.firstPosition.x;
	                height = width * ratio;
	            }
	            else {
	                height = obj.firstSize.height + obj.y - obj.firstPosition.y;
	                width = height / ratio;
	            }

	            if (width < 5) {
	                width = 5;
	            }

	            if (height < 5) {
	                height = 5;
	            }

	            $target.css("width", width + 'px');
	            $target.attr("width", width);

	            $target.css("height", height + 'px');
	            $target.attr("height", height);

	            if (options && options.adjustHandler) {
	                options.adjustHandler($target, width, height);
	            }

	            resizeHandlePosition(null, width, height);
	        },
	        sw: function (obj) {
	            // var height = obj.firstSize.height + obj.y - obj.firstPosition.y;
	            // if (height < 5) {
	            //     height = 5;
	            // }
	            //
	            // $target.css("height", height + 'px');
	            // $target.attr("height", height);
	            //
	            // var width = obj.firstSize.width + obj.firstPosition.x - obj.x;
	            // if (width < 5) {
	            //     width = 5;
	            // }
	            //
	            // $target.css("width", width + 'px');
	            // $target.attr("width", width);

	            var ratio = obj.firstSize.height / obj.firstSize.width;
	            var width, height;

	            if(obj.x > obj.y) {
	                width = obj.firstSize.width - obj.x + obj.firstPosition.x;
	                height = width * ratio;
	            }
	            else {
	                height = obj.firstSize.height + obj.y - obj.firstPosition.y;
	                width = height / ratio;
	            }

	            if (width < 5) {
	                width = 5;
	            }

	            if (height < 5) {
	                height = 5;
	            }

	            $target.css("width", width + 'px');
	            $target.attr("width", width);

	            $target.css("height", height + 'px');
	            $target.attr("height", height);

	            resizeHandlePosition(null, width, height);
	        },
	        ne: function (obj) {
	            // var height = obj.firstSize.height + (obj.firstPosition.y - obj.y);
	            // if (height < 5) {
	            //     height = 5;
	            // }
	            //
	            // $target.css("height", height + 'px');
	            // $target.attr("height", height);
	            //
	            // var width = obj.firstSize.width + obj.x - obj.firstPosition.x;
	            // if (width < 5) {
	            //     width = 5;
	            // }
	            //
	            // $target.css("width", width + 'px');
	            // $target.attr("width", width);

	            var ratio = obj.firstSize.height / obj.firstSize.width;
	            var width, height;

	            if(obj.x > obj.y) {
	                width = obj.firstSize.width + obj.x - obj.firstPosition.x;
	                height = width * ratio;
	            }
	            else {
	                height = obj.firstSize.height + (obj.firstPosition.y - obj.y);
	                width = height / ratio;
	            }

	            if (width < 5) {
	                width = 5;
	            }

	            if (height < 5) {
	                height = 5;
	            }

	            $target.css("width", width + 'px');
	            $target.attr("width", width);

	            $target.css("height", height + 'px');
	            $target.attr("height", height);

	            if (options && options.adjustHandler) {
	                options.adjustHandler($target, width, height);
	            }

	            resizeHandlePosition(null, width, height);
	        },
	        nw: function (obj) {
	            // var height = obj.firstSize.height + (obj.firstPosition.y - obj.y);
	            // if (height < 5) {
	            //     height = 5;
	            // }
	            //
	            // $target.css("height", height + 'px');
	            // $target.attr("height", height);
	            //
	            // var width = obj.firstSize.width + obj.firstPosition.x - obj.x;
	            // if (width < 5) {
	            //     width = 5;
	            // }
	            //
	            // $target.css("width", width + 'px');
	            // $target.attr("width", width);

	            var ratio = obj.firstSize.height / obj.firstSize.width;
	            var width, height;

	            if(obj.x > obj.y) {
	                width = obj.firstSize.width - obj.x + obj.firstPosition.x;
	                height = width * ratio;
	            }
	            else {
	                height = obj.firstSize.height - (obj.firstPosition.y + obj.y);
	                width = height / ratio;
	            }

	            if (width < 5) {
	                width = 5;
	            }

	            if (height < 5) {
	                height = 5;
	            }

	            $target.css("width", width + 'px');
	            $target.attr("width", width);

	            $target.css("height", height + 'px');
	            $target.attr("height", height);

	            if (options && options.adjustHandler) {
	                options.adjustHandler($target, width, height);
	            }

	            resizeHandlePosition(null, width, height);
	        }
	    };

	    var handleTpl = '<div class="' + Define.CLASS.RESIZE_HANDLER_OBJECT + ' ' + Define.CLASS.RESIZE_HANDLER + ' resizable-{d}"></div>';
	    var resizeHandleNames = ["n", "e", "s", "w", "se", "sw", "ne", "nw"];

	    for(var i = 0, length = resizeHandleNames.length ; i < length ; i++) {
	        controls[resizeHandleNames[i]] = $(handleTpl.replace('{d}', resizeHandleNames[i]));

	        if ($.browser.mobile) {

	            var handlerName = resizeHandleNames[i];

	            controls[resizeHandleNames[i]].css({
	                width : '40px',
	                height: '40px',
	                marginLeft : (handlerName == 'n' || handlerName == 's') ? '-20px' : (handlerName.indexOf('w') > -1 ? '-40px' : '0px'),
	                marginTop : (handlerName == 'w' || handlerName == 'e') ? '-20px' : (handlerName.indexOf('n') > -1 ? '-40px' : '0px'),
	                zIndex : '10000'
	            });
	        }

	        controls[resizeHandleNames[i]].on('mousedown touchstart', { direction: resizeHandleNames[i] }, resizeMouseDown).on('mousewheel DOMMouseScroll', function(e){
	            _this.fireEvent(e);
	        });

	        this.editorElement.append(controls[resizeHandleNames[i]]);
	    }

	    if (options && options.createHandler) {
	        options.createHandler();
	    }

	    var resizeHandlePosition = function(e, width, height) {

	        if (!controls) {
	            return;
	        }

	        if (e || (options && options.handlerPosition)) {
	            if ($.browser.msie) {
	                try {
	                    if (window.parent && document != window.parent.document) {
	                        var superIframeOffset = $(window.frameElement).offset();

	                        superTop = superIframeOffset.top;
	                        superLeft = superIframeOffset.left;
	                    }
	                } catch(exception) {
	                }
	            }

	            iframeOffset = window.isYooncomsEditor ? editoriFrame.position() : editoriFrame.offset();

	            if (e && e.type != 'resize' && e.type != 'scroll' && $.browser.msie) {
	                width = parseInt($target[0].style.width);
	                height = parseInt($target[0].style.height);

	                if (!width || isNaN(width) || (width < $target[0].offsetWidth) || (width < $target.width())) {
	                    width = $target[0].offsetWidth || $target.width();
	                    $target[0].style.width = width + 'px';
	                    $target[0].setAttribute('width', width);
	                }

	                if (!height || isNaN(height) || (height < $target[0].offsetHeight) || (height < $target.height())) {
	                    height = $target[0].offsetHeight || $target.height();
	                    $target[0].style.height = height + 'px';
	                    $target[0].setAttribute('height', height);
	                }
	            } else {
	                width = $target.width();
	                height = $target.height();
	            }

	            scrolTop = _this.editorContentView[0].scrollTop;
	            scrollLeft = _this.editorContentView[0].scrollLeft;
	        }

	        var targetOffset = $target.offset();

	        var editorOffset = _this.editorElement.offset();

	        var topPosition = targetOffset.top + iframeOffset.top - scrolTop - (editorOffset.top);
	        var leftPosition = targetOffset.left + eidtorOffset.top - scrollLeft;

	        if (width) {
	            width += borderWidth;

	            controls["n"] .css({ 'left' : leftPosition + (width / 2) });
	            controls["e"] .css({ 'left' : leftPosition + width });
	            controls["s"] .css({ 'left' : leftPosition + (width / 2) });
	            controls["w"] .css({ 'left' : leftPosition });
	            controls["nw"].css({ 'left' : leftPosition });
	            controls["ne"].css({ 'left' : leftPosition + width });
	            controls["se"].css({ 'left' : leftPosition + width });
	            controls["sw"].css({ 'left' : leftPosition });
	        }

	        if (height) {
	            height += borderHeight;

	            controls["n"] .css({ 'top' : topPosition});
	            controls["e"] .css({ 'top' : topPosition + (height / 2)});
	            controls["s"] .css({ 'top' : topPosition + height});
	            controls["w"] .css({ 'top' : topPosition + (height / 2)});
	            controls["nw"].css({ 'top' : topPosition});
	            controls["ne"].css({ 'top' : topPosition});
	            controls["se"].css({ 'top' : topPosition + height});
	            controls["sw"].css({ 'top' : topPosition + height});
	        }

	        if (options && options.handlerPosition) {
	            options.handlerPosition(topPosition, leftPosition, width, height);
	        }
	    };

	    //
	    $eDocument.on('scroll', resizeHandlePosition);
	    $(window).on('resize', resizeHandlePosition);

	    resizeHandlePosition(null, targetWidth, targetHeight);

	    this.removeResizable = function(){
	        _this.editorElement.find("." + Define.CLASS.RESIZE_HANDLER_OBJECT).remove();

	        $eDocument.off('mousemove touchmove', mouseMoveEvent);
	        $eDocument.off('mouseup touchend', mouseUpEvent);
	        $eDocument.off('scroll', resizeHandlePosition);
	        $(window).on('resize', resizeHandlePosition);

	        if ($parentDocument) {
	            if ($.browser.msie) {
	                try {
	                    if (window.parent && document != window.parent.document) {
	                        var $superParentDocument = $(window.parent.document);

	                        $superParentDocument.off('mousemove touchmove', superIframeMoveEvent);
	                        $superParentDocument.off('mouseup touchend', mouseUpEvent);
	                    }
	                } catch(exception) {
	                }
	            }

	            $parentDocument.off('mousemove touchmove', parentMouseMoveEvent);
	            $parentDocument.off('mouseup touchend', mouseUpEvent);
	        }

	        if (options && options.removeHandler) {
	            options.removeHandler();
	        } else {
	            var newRange = _this.$dom.selection.createRange();
	            newRange.selectNode($target[0]);
	            _this.$dom.selection.setRange(newRange);
	            _this.$dom.selection.setSaveRange(newRange);
	        }

	        _this.removeResizable = null;
	    };

	    if (options && options.statusHighlight) {
	        options.statusHighlight();
	    } else {
	        this.router.doStatusHighlight();
	    }
	};

	//Resize Handler 제거 로직
	Mouse.prototype.removeResizeHandleController = function() {
	    if (this.removeResizable) {
	        this.removeResizable();
	    }
	};

	//Table AllSelection Bar 제거 로직
	Mouse.prototype.clearTableAllSelectionBar = function() {
	    if (this.tableAllSelectionBarNode) {
	        this.tableAllSelectionBarNode.remove();
	        this.tableAllSelectionBarNode = null;
	    }
	};

	//Cell Selection을 위한 Flag값 초기화 로직
	Mouse.prototype.removeSelectedCellFlag = function(isSelectedRemove) {
	    this.isCellSelect = false;
	    this.startSelectTdNode = null;

	    if (isSelectedRemove) {
	        this.selectedCellNodes = null;
	    }
	};

	Mouse.prototype.mouseDownAllToolBarClear = function() {
	    this.$dom.selection.setContentEditable(true);
	    this.rootEvent.contextMenu.hideContextMenu();
	    this.menuController.closeAllToolbarBox();
	};

	//Mouse를 통한 Object 조작관련 모든 Flag값 초기화 및 제거
	Mouse.prototype.allClearMouseAction = function() {
	    this.clearTableAllSelectionBar();
	    this.resetCellResizable();
	    this.removeInsertParagraphNodeForTable();
	};

	//FileDrag 또는 이미지 드래그 드랍인지 판단
	Mouse.prototype.isDragStopCheck = function(e) {
	    if (!(e && e.originalEvent && e.originalEvent.dataTransfer && e.originalEvent.dataTransfer.types && e.originalEvent.dataTransfer.types.length)) {
	        return true;
	    }

	    return e.originalEvent.dataTransfer.types[0] === "Text" || e.originalEvent.dataTransfer.types[0].toLowerCase().indexOf("text") >= 0;
	};

	Mouse.prototype.throwsImageFiles = function(e){
	    var _this = this;

	    var images = "";
	    var loadingObj = [];
	    var files = e.originalEvent.dataTransfer.files;
	    var imageCount = 0;
	    var editorSize = _this.router.editorObject.GetEditorSize();

	    this.stop(e);

	    var getServerUploadFunction = function(file) {
	        return {
	            getSource : function(obj) {
	                var uploadImgWidth;
	                var uploadImgHeight;
	                var _URL = window.URL || window.webkitURL;

	                if(file.type.indexOf("image") > -1) {
	                    var reg = Define.IMAGE_TYPE_FILES_REG;
	                    if(file.name.match(reg)) {
	                        var img = new Image();

	                        img.src = _URL.createObjectURL(file);
	                        img.onload = function() {
	                            uploadImgWidth = this.width;
	                            uploadImgHeight = this.height;
	                        }

	                    } else {
	                        return false;
	                    }
	                }

	                var $img = _this.editorContentView.find('img[' + Define.ATTR.UPLOADING_IMAGE + '="' + obj.idx + '"]');

	                var formData = new FormData();
	                formData.append(Define.NAME.UPLOAD_IMAGE_TYPE, file);

	                var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	                var callbackFn = function(data){
	                    $img[0].src = _this.router.options.errorImageURL;

	                    if (data && !data.isError) {
	                        $img[0].src = data.url;
	                    }

	                    if(uploadImgWidth > editorSize.width) {
	                        uploadImgHeight = parseInt(editorSize.width * uploadImgHeight / uploadImgWidth);
	                        uploadImgWidth = editorSize.width;
	                    }
	                    $($img[0]).css('width', uploadImgWidth);
	                    $($img[0]).css('height', uploadImgHeight);
	                    $img.removeAttr(Define.ATTR.UPLOADING_IMAGE);

	                    imageCount--;

	                    if (imageCount == 0) {
	                        _this.router.externalSetUndoHistory();
	                        _this.router.changedUndoRedoButtonEnable();
	                    }
	                };

	                Util.doUploadData(url, formData, callbackFn, callbackFn);
	            }
	        };
	    };

	    var getImageLoad = function(file) {
	        var idx = Math.floor(Math.random() * 1000000) + 1;

	        var serverUploadObj = getServerUploadFunction(file);

	        images += '<span><img src="' + _this.router.options.loadingImageURL + '" ' + Define.ATTR.UPLOADING_IMAGE + '="' + idx + '"></span>';
	        console.log(images)

	        imageCount++;
	        return {
	            serverUploadObj : serverUploadObj,
	            idx : idx
	        };
	    };

	    for (var idx = 0, file; file = files[idx]; idx++) {
	        if (!file.type.match('image.*')) {
	            continue;
	        }

	        var obj = getImageLoad(file);
	        loadingObj.push(obj);
	    }

	    if (images) {
	        if (this.rootEvent.mouseEvent.removeResizable) {
	            this.rootEvent.mouseEvent.removeResizable();
	        }
	        this.mouseDownAllToolBarClear();
	        this.allClearMouseAction();
	        this.$dom.selection.setContentEditable(true);
	        this.$dom.selection.editorFocus();
	        this.$dom.selection.restoreRange();

	        this.router.externalSetUndoHistory();
	        this.router.changedUndoRedoButtonEnable();

	        this.$dom.selection.execCommand('insertHTML', false, images);

	        this.$dom.selection.setSaveRange();

	        for(var i = 0, obj ; obj = loadingObj[i]; i++) {
	            obj.serverUploadObj.getSource(obj);
	        }
	    }
	};

	Mouse.prototype.clearStatusTimer = function(){
	    if (this.statusHighlightTimer) {
	        clearTimeout(this.statusHighlightTimer);
	        this.statusHighlightTimer = null;
	    }
	}


	module.exports = Mouse;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function ContextMenu(editorElement, editorContentView, $domObject, router, menuController) {
	    this.editorElement = null;
	    this.editorContentView = null;
	    this.router = null;
	    this.$dom = null;
	    this.menuController = null;

	    this.editoriFrame = null;
	    this.$document = null;

	    this.contextMenuInstance = null;

	    this.contextMenuTemplate = '<ul class="' + Define.CLASS.EDITOR_CONTEXT_MENU + ' ' + Define.CLASS.EDITOR_CONTEXT_MENU_LIST + ' ' + Define.CLASS.EDITOR_CONTEXT_MENU_ROOT + '"></ul>';

	    this.init(editorElement, editorContentView, $domObject, router, menuController);
	}

	ContextMenu.prototype.init = function(editorElement, editorContentView, $domObject, router, menuController){
	    this.editorElement = $(editorElement);
	    this.editorContentView = $(editorContentView);

	    this.router = router;
	    this.$dom = $domObject;
	    this.menuController = menuController;

	    this.editoriFrame = router.editorObject.editorIframe;
	    this.$document = $(document.body);

	    this.createContextMenu();
	    this.initContextEvent();
	};

	ContextMenu.prototype.createContextMenu = function() {
	    this.contextMenuInstance = $(this.contextMenuTemplate);

	    this.hideContextMenu();

	    this.$document.append(this.contextMenuInstance);
	};

	ContextMenu.prototype.initContextEvent = function() {
	    var _this = this;

	    this.contextMenuInstance.on('click', function(e){
	        var $target = $(e.target);

	        if (!$target.is('.' + Define.CLASS.EDITOR_CONTEXT_MENU_ITEM)) {
	            $target = $target.closest('.' + Define.CLASS.EDITOR_CONTEXT_MENU_ITEM);
	        }

	        if (!$target.is('.' + Define.CLASS.EDITOR_CONTEXT_MENU_SUBMENU + ',' + '.' + Define.CLASS.EDITOR_CONTEXT_MENU_SEPARATOR)) {
	            var key = $target.attr(Define.ATTR.KK_CONTEXT_MENU_NAME);

	            _this.$dom.selection.setContentEditable(true);
	            _this.$dom.selection.editorFocus();
	            _this.executeMenu(key);
	            _this.hideContextMenu();
	        }

	        return false;
	    });

	    this.contextMenuInstance.on('mousedown', function(e){
	        _this.$dom.selection.setSaveRange();
	        _this.stop(e);
	        return false;
	    });

	    this.contextMenuInstance.on('mousemove', function(e){
	        var $target = $(e.target);

	        if (!$target.is('.' + Define.CLASS.EDITOR_CONTEXT_MENU_SUBMENU)) {
	            $target = $target.closest('.' + Define.CLASS.EDITOR_CONTEXT_MENU_SUBMENU);
	        }

	        if ($target.length) {
	            var $subMenu = $target.children('.' + Define.CLASS.EDITOR_CONTEXT_MENU_LIST);

	            if ($subMenu.length) {
	                var documentWidth = _this.$document.width();
	                var contextMenuWidth = _this.contextMenuInstance.width();
	                var left = _this.contextMenuInstance.offset().left;

	                var subMenuWidth = $subMenu.width();

	                var subMenuLeft = contextMenuWidth - 4;

	                if (documentWidth < left + contextMenuWidth + subMenuWidth) {
	                    subMenuLeft = -subMenuWidth - 6;

	                    // if ((subMenuLeft * -1) > subMenuWidth) {
	                    //     subMenuLeft = subMenuLeft + ((subMenuLeft * -1) - subMenuWidth);
	                    // }
	                }

	                $subMenu.css({
	                    left : subMenuLeft + 'px',
	                    width : subMenuWidth + 'px'
	                });
	            }
	        }

	        return false;
	    });
	};

	ContextMenu.prototype.executeMenu = function(key) {
	    var menuObject = { id:key };

	    if (key == 'table_merge') {
	        menuObject.id = 'table_merge';
	    }else if (key == 'table_style') {
	        menuObject.id = 'tableModifyDialog';

	        var $parentTable = this.$target;

	        if (!$parentTable.is('table')) {
	            $parentTable = $parentTable.closest('table');
	        }

	        if ($parentTable && $parentTable.length) {

	            var width = 0;
	            var height = 0;


	            if ($.browser.msie) {
	                width = parseInt($parentTable[0].style.width);
	                height = parseInt($parentTable[0].style.height);

	                if (!width || isNaN(width) || (width < $parentTable[0].offsetWidth) || (width < $parentTable.width())) {
	                    width = $parentTable[0].offsetWidth || $parentTable.width();
	                    $parentTable[0].style.width = width + 'px';
	                    $parentTable[0].setAttribute('width', width);
	                }

	                if (!height || isNaN(height) || (height < $parentTable[0].offsetHeight) || (height < $parentTable.height())) {
	                    height = $parentTable[0].offsetHeight || $parentTable.height();
	                    $parentTable[0].style.height = height + 'px';
	                    $parentTable[0].setAttribute('height', height);
	                }
	            } else {
	                width = $parentTable.width();
	                height = $parentTable.height();
	            }

	            var $originalTable = $parentTable;

	            $parentTable = $parentTable.clone();

	            var rowColInfo = Util.getRowColCount($parentTable);

	            var headerType = Util.getHeaderType($parentTable);


	            menuObject.value = {
	                type : 'modify',
	                row : rowColInfo.row,
	                col : rowColInfo.col,
	                width : width,
	                height : height,
	                marginLeft : parseInt($originalTable.css('marginLeft')) || null,
	                align : $parentTable.attr('align') || null,
	                id : $parentTable.attr('id') || null,
	                className : $parentTable.attr(Define.ATTR.CLASS) || null,
	                borderSeparate : $parentTable.css('border-collapse') === 'separate',
	                cellSpacing : $parentTable.attr('cellspacing') || null,
	                cellPadding : $parentTable.attr('cellpadding') || null,
	                caption : $parentTable[0].caption ? $parentTable[0].caption.textContent : null,
	                summary : $parentTable[0].summary || null,

	                image : $parentTable.css('background-image').slice(4, -1).replace(/"/gi,'') || null,
	                attachment : $parentTable[0].style.backgroundAttachment || null,
	                repeat : $parentTable[0].style.backgroundRepeat || null,
	                positionX : parseInt($parentTable.css('background-position-x')) || null,
	                positionY : parseInt($parentTable.css('background-position-y')) || null,
	                backgroundColor : Util.getRgbToHex($parentTable[0].style.backgroundColor) || null,

	                scope : !!$parentTable[0].rows[0].cells[0].getAttribute('scope'),
	                headerType : headerType === 'none' ? false : headerType
	            }
	        }

	    } else if (key === 'cell_style') {
	        menuObject.id = 'cellModifyDialog';
	        menuObject.value = {};

	        var $tdNodes = this.$dom.selection.getSelectedTd();

	        if (!$tdNodes.length) {
	            $tdNodes = this.$dom.selection.getSelectedNode(Define.CELL_TYPE.join(','));
	        }

	        if ($tdNodes.length) {
	            if ($tdNodes.length == 1) {
	                menuObject.value = {
	                    align : $tdNodes[0].style.textAlign || null,
	                    verticalAlign : $tdNodes[0].style.verticalAlign || null,
	                    whiteSpace : $tdNodes[0].style.whiteSpace || null,

	                    headerType : $tdNodes[0].nodeName.toLowerCase(),
	                    scopeType : $tdNodes[0].getAttribute('scope') || null,

	                    border : {
	                        // defaultBorder : { width : 0, type : 'solid', color : '#000000' },
	                        // top : { width : 0, type : 'solid', color : '#000000' },
	                        // bottom : { width : 0, type : 'solid', color : '#000000' },
	                        // left : { width : 0, type : 'solid', color : '#000000' },
	                        // right : { width : 0, type : 'solid', color : '#000000' }
	                    },

	                    image : $tdNodes.css('background-image').slice(4, -1).replace(/"/gi,'') || null,
	                    attachment : $tdNodes[0].style.backgroundAttachment || null,
	                    repeat : $tdNodes[0].style.backgroundRepeat || null,
	                    positionX : parseInt($tdNodes.css('background-position-x')) || null,
	                    positionY : parseInt($tdNodes.css('background-position-y')) || null,
	                    backgroundColor : Util.getRgbToHex($tdNodes[0].style.backgroundColor)
	                };
	            }
	        }
	    } else if (key === 'layer_modify') {
	        menuObject.id = 'layerModifyDialog';

	        var $target = this.$target;
	        var $layerNode = null;

	        if ($target.attr(Define.ATTR.TYPE) === Define.ATTR_VALUE.KK_LAYER) {
	            $layerNode = $target;
	        } else if ($target.find('[' + Define.ATTR.TYPE + '="' + Define.ATTR_VALUE.KK_LAYER + '"]').length) {
	            $layerNode = $target.find('[' + Define.ATTR.TYPE + '="' + Define.ATTR_VALUE.KK_LAYER + '"]');
	        } else if ($target.closest('[' + Define.ATTR.TYPE + '="' + Define.ATTR_VALUE.KK_LAYER + '"]').length) {
	            $layerNode = $target.closest('[' + Define.ATTR.TYPE + '="' + Define.ATTR_VALUE.KK_LAYER + '"]');
	        }

	        if ($layerNode && $layerNode.length) {
	            menuObject.value = {
	                type : 'modify',
	                width : $layerNode.width(),
	                height : $layerNode.height(),
	                positionX : parseInt($layerNode.css('left')),
	                positionY : parseInt($layerNode.css('top')),
	                id : $layerNode.attr(Define.ATTR.ID),
	                className : $layerNode.attr(Define.ATTR.CLASS)
	            };

	            this.$dom.selection.setModifyTargetNode($layerNode);

	        } else {
	            return;
	        }

	    } else if (key === 'image_modify') {
	        menuObject.id = 'imageModifyDialog';

	        var $imageNode = this.$target;

	        if (!$imageNode.is('img')) {
	            var $childImage = $imageNode.find('img');
	            if ($childImage.length) {
	                $imageNode = $childImage;
	            }

	            if ($imageNode.length) {
	                $imageNode = $imageNode.closest('img');
	            }
	        }

	        if ($imageNode.is('img')) {
	            menuObject.value = {
	                type : 'modify',
	                imageSrc : $imageNode[0].src,
	                imageTitle : $imageNode.attr('title') || null,
	                imageAlt : $imageNode.attr('alt') || null,
	                width : $imageNode[0].width,
	                height : $imageNode[0].height,
	                margin : {
	                    left : parseInt($imageNode.css('marginLeft')) || null,
	                    right : parseInt($imageNode.css('marginRight')) || null,
	                    top : parseInt($imageNode.css('marginTop')) || null,
	                    bottom : parseInt($imageNode.css('marginBottom')) || null
	                },
	                align : $imageNode.css('verticalAlign') || null,
	                borderType : $imageNode[0].style.borderStyle || null,
	                borderWidth : parseInt($imageNode[0].style.borderWidth) || null,
	                borderColor : Util.getRgbToHex($imageNode[0].style.borderColor) || null,
	                id : $imageNode.attr('id') || null,
	                className : $imageNode.attr(Define.ATTR.CLASS) || null,
	                hyperlink : {}
	            };

	            var $parent = $imageNode.closest('[' + Define.ATTR.HREF + ']');

	            if ($parent.length) {
	                var href = $parent.attr(Define.ATTR.HREF);

	                if (href) {

	                    var className = $parent.attr(Define.ATTR.CLASS);

	                    if (href.indexOf('#') === 0) {
	                        href = href.slice(1, href.length);

	                        menuObject.value.hyperlink.type = 'bookmark';
	                        menuObject.value.hyperlink.url = href;
	                    } else {
	                        menuObject.value.hyperlink.type = 'url';
	                        menuObject.value.hyperlink.url = href;

	                        menuObject.value.hyperlink.title = $parent.attr('title') || null;
	                        menuObject.value.hyperlink.target = $parent.attr('target') || null;
	                        menuObject.value.hyperlink.id = $parent.attr('id') || null;
	                        menuObject.value.hyperlink.className = className || null;
	                    }
	                }
	            }

	            this.$dom.selection.setModifyTargetNode($imageNode);
	        } else  {
	            return;
	        }

	    } else if (key === 'video_modify') {
	        menuObject.id = 'videoModifyDialog';

	        var $targetNode = this.$target;
	        var $videoNode = null;

	        if ($targetNode.is('[' + Define.ATTR.DATA_VIDEO_TYPE + ']')){
	            $videoNode = $targetNode;
	        } else {
	            return;
	        }

	        var type = $videoNode.attr(Define.ATTR.DATA_VIDEO_TYPE);
	        var embedHTML = decodeURIComponent($videoNode.attr(Define.ATTR.DATA_VIDEO_SOURCE));

	        if (!embedHTML) {
	            return;
	        }

	        var $embed = $(embedHTML);

	        if (type === 'file') {
	            if ($embed.find('embed').length) {
	                $embed = $embed.find('embed');
	            }

	            var urlValue = $embed.attr('src');
	            var _lastDot = urlValue.lastIndexOf('.');
	            var _fileExt = urlValue.substring(_lastDot + 1, urlValue.length).toLowerCase();

	            if (_fileExt == 'mp4' || _fileExt == 'ogg' || _fileExt == 'webm') {

	                menuObject.value = {
	                    type : 'modify',
	                    videoType : type,
	                    videoUrl : urlValue,
	                    videoExt : _fileExt,

	                    width : parseInt($targetNode.css(Define.ATTR.WIDTH)) || null,
	                    height : parseInt($targetNode.css(Define.ATTR.HEIGHT)) || null,

	                    isAutostart : ($embed.attr(Define.ATTR.VIDEO_AUTO_PLAY) !== undefined) ,
	                    isLoop : ($embed.attr(Define.ATTR.VIDEO_LOOP) !== undefined) ,
	                    isShowtracker : false ,
	                    isShowstatusbar : false ,
	                    isShowcontrols : $embed.attr(Define.ATTR.VIDEO_CONTROL) !== undefined ,
	                    isShowaudiocontrols : $embed.attr(Define.ATTR.VIDEO_AUDIO) !== undefined ,
	                    isShowdisplay : false ,
	                    isShowpositioncontrols : false,

	                    isPlay : false,
	                    isMenu : false,
	                    isAllowfullscreen : false
	                };

	            } else {
	                menuObject.value = {
	                    type : 'modify',
	                    videoType : type,
	                    videoUrl : urlValue,
	                    videoExt : _fileExt,

	                    width : parseInt($targetNode.css(Define.ATTR.WIDTH)) || null,
	                    height : parseInt($targetNode.css(Define.ATTR.HEIGHT)) || null,

	                    isAutostart : ($embed.attr(Define.ATTR.AUTO_START) !== "0") ,
	                    isLoop : ($embed[0].getAttribute(Define.ATTR.LOOP) === "1") ,
	                    isShowtracker : $embed.attr(Define.ATTR.SHOW_TRACKER) !== "0" ,
	                    isShowstatusbar : $embed.attr(Define.ATTR.SHOW_STATUSBAR) !== "0" ,
	                    isShowcontrols : $embed.attr(Define.ATTR.SHOW_CONTROLS) !== "0" ,
	                    isShowaudiocontrols : $embed.attr(Define.ATTR.SHOW_AUDIO_CONTROLS) !== "0" ,
	                    isShowdisplay : $embed.attr(Define.ATTR.SHOW_DISPLAY) !== "0" ,
	                    isShowpositioncontrols : $embed.attr(Define.ATTR.SHOW_POSITION_CONTROLS) !== "0",

	                    isPlay : $embed.attr(Define.ATTR.PLAY) !== "false",
	                    isMenu : $embed.attr(Define.ATTR.MENU) !== "false",
	                    isAllowfullscreen : $embed.attr(Define.ATTR.ALLOW_FULLSCREEN) !== "false"
	                };
	            }

	        } else {
	            menuObject.value = {
	                type : 'modify',
	                videoType : type,
	                videoSource : $embed[0].outerHTML
	            };
	        }

	        this.$dom.selection.setModifyTargetNode($videoNode);
	    }

	    this.menuController.menuSwitch(menuObject);
	};






	ContextMenu.prototype.defaultContextMenuItems = function(type) {
	    return {
	        // "copy": {name: window.kukuResource.menuTitle.copy, icon: "copy"},
	        // "cut": {name: window.kukuResource.menuTitle.cut, icon: "cut"},
	        // "paste": {name: window.kukuResource.menuTitle.paste, icon: "paste"},
	        "text_paste": {name: window.kukuResource.menuTitle.text_paste, icon: "text_paste"},
	        "sep1": "---------",
	        "all_select": {name: window.kukuResource.menuTitle.all_select, icon: "all_select"},
	    };
	};

	ContextMenu.prototype.hyperlinkMenuItems = function(e) {
	    var items = {
	        "sep2": "---------",
	        "link": {name: window.kukuResource.menuTitle.link, icon: "link"}
	    };

	    var $target = this.$target;

	    if ($target.closest('[href]').length) {
	        items.unlink = {name: window.kukuResource.menuTitle.unlink, icon: "unlink"}
	    }

	    return items
	};

	ContextMenu.prototype.imageMenuItems = function(e) {

	    var items = {};

	    var $target = this.$target;

	    var useImageMenu = this.menuController.api.options.hiddenMenu.indexOf('image') == -1;
	    var useVideoMenu = this.menuController.api.options.hiddenMenu.indexOf('video') == -1;

	    if (useImageMenu || useVideoMenu) {
	        if (useImageMenu) {
	            items["sep3"] = "---------";
	            items["image"] = {name: window.kukuResource.menuTitle.image, icon: "image"};
	        }

	        if (!$target.is('IMG')) {
	            $target = $target.closest('IMG');
	        }

	        if ($target.length) {
	            if (useImageMenu) {
	                if (!$target.attr(Define.ATTR.DATA_VIDEO_SOURCE)) {
	                    items["image_modify"] = {name: window.kukuResource.menuTitle.image_modify, icon: "image_modify"};
	                }
	            }

	            if (useVideoMenu) {
	                if ($target.attr(Define.ATTR.DATA_VIDEO_SOURCE)) {
	                    items["video_modify"] = {name: window.kukuResource.menuTitle.video_modify, icon: "video_modify"};
	                }
	            }
	        }
	    }

	    return items;
	};

	ContextMenu.prototype.paragraphContextMenuItems = function(type) {
	    return {
	        "sep4": "---------",
	        "align_left": {name: window.kukuResource.menuTitle.align_left, icon: "align_left"},
	        "align_center": {name: window.kukuResource.menuTitle.align_center, icon: "align_center"},
	        "align_right": {name: window.kukuResource.menuTitle.align_right, icon: "align_right"},
	        "align_justify": {name: window.kukuResource.menuTitle.align_justify, icon: "align_justify"},
	        "sep5": "---------",
	        "paragraph_margin": {name: window.kukuResource.menuTitle.paragraph_margin, icon: "paragraph_margin"},
	        "sep6": "---------",
	        "paragraph_remove_format": {name: window.kukuResource.menuTitle.paragraph_remove_format, icon: "paragraph_remove_format"},
	    };
	};

	ContextMenu.prototype.tableContextMenuItems = function($table, $tdNodes) {

	    var items = {
	        "sep7": "---------",

	        "addRow": {
	            "name": window.kukuResource.contextMenuTitle.addRow,
	            "items": {
	                "table_insert_top": {name: window.kukuResource.menuTitle.table_insert_top, icon: "table_insert_top"},
	                "table_insert_bottom": {name: window.kukuResource.menuTitle.table_insert_bottom, icon: "table_insert_bottom"}
	            }
	        },
	        "addCol": {
	            "name": window.kukuResource.contextMenuTitle.addCol,
	            "items": {
	                "table_insert_left": {name: window.kukuResource.menuTitle.table_insert_left, icon: "table_insert_left"},
	                "table_insert_right": {name: window.kukuResource.menuTitle.table_insert_right, icon: "table_insert_right"}
	            }
	        },

	        // "sep8": "---------",

	        "vertical_align": {
	            "name": window.kukuResource.contextMenuTitle.vertical_align,
	            "items": {
	                "vertical_align_top": {name: window.kukuResource.contextMenuTitle.vertical_align_top, icon: "vertical_align_top"},
	                "vertical_align_middle": {name: window.kukuResource.contextMenuTitle.vertical_align_middle, icon: "vertical_align_middle"},
	                "vertical_align_bottom": {name: window.kukuResource.contextMenuTitle.vertical_align_bottom, icon: "vertical_align_bottom"},
	                "vertical_align_baseline": {name: window.kukuResource.contextMenuTitle.vertical_align_baseline, icon: "vertical_align_baseline"}
	            }
	        },

	        "cell_calculate": {
	            "name": window.kukuResource.contextMenuTitle.calculate,
	            "items": {
	                "calculate_horizontal_sum": {name: window.kukuResource.contextMenuTitle.calculate_horizontal_sum, icon: "calculate_horizontal_sum"},
	                "calculate_vertical_sum": {name: window.kukuResource.contextMenuTitle.calculate_vertical_sum, icon: "calculate_vertical_sum"},
	                "calculate_horizontal_avg": {name: window.kukuResource.contextMenuTitle.calculate_horizontal_avg, icon: "calculate_horizontal_avg"},
	                "calculate_vertical_avg": {name: window.kukuResource.contextMenuTitle.calculate_vertical_avg, icon: "calculate_vertical_avg"}
	            }
	        },

	        "cell_size": {
	            "name": window.kukuResource.contextMenuTitle.cell_size,
	            "items": {
	                "cell_horizontal_size": {name: window.kukuResource.contextMenuTitle.cell_horizontal_size, icon: ""},
	                "cell_vertical_size": {name: window.kukuResource.contextMenuTitle.cell_vertical_size, icon: ""},
	                "cell_both_size": {name: window.kukuResource.contextMenuTitle.cell_both_size, icon: ""}
	            }
	        },

	        "sep9": "---------",

	        "table_remove_row": {name: window.kukuResource.menuTitle.table_remove_row, icon: "table_remove_row"},
	        "table_remove_col": {name: window.kukuResource.menuTitle.table_remove_col, icon: "table_remove_col"},
	        "table_remove_table": {name: window.kukuResource.menuTitle.table_remove_table, icon: "table_remove_table"},

	        "sep10": "---------",

	        "table_merge": {name: window.kukuResource.menuTitle.table_merge, icon: "table_merge"},
	        "table_split_col": {name: window.kukuResource.menuTitle.table_split_col, icon: "table_split_col"},
	        "table_split_row": {name: window.kukuResource.menuTitle.table_split_row, icon: "table_split_row"},

	        "sep11": "---------",

	        "table_style": {name: window.kukuResource.contextMenuTitle.table_style, icon: "table_style"},
	        "cell_style": {name: window.kukuResource.contextMenuTitle.cell_style, icon: "cell_style"},

	        "sep12": "---------",

	        "table_to_text": {name: window.kukuResource.contextMenuTitle.table_to_text, icon: "table_to_text"},

	    };

	    var $selectedTd = $tdNodes;

	    if ($selectedTd.length > 1){
	        delete items['addRow'];
	        delete items['addCol'];
	        delete items['sep9'];

	        delete items['cell_calculate'];

	        delete items['table_remove_row'];
	        delete items['table_remove_col'];

	        delete items['sep10'];
	        delete items['table_split_col'];
	        delete items['table_split_row'];
	        delete items['sep11'];
	    }else{
	        delete items['table_merge'];
	        delete items['cell_size'];
	    }

	    return items;
	};

	ContextMenu.prototype.layerMenuItems = function(e) {
	    var items = {};

	    var $target = this.$target;

	    if (($target.attr(Define.ATTR.TYPE) === Define.ATTR_VALUE.KK_LAYER) || $target.closest('[' + Define.ATTR.TYPE + '="' + Define.ATTR_VALUE.KK_LAYER + '"]').length) {
	        items = {
	            "sep13": "---------",
	            "layer_modify": {name: window.kukuResource.menuTitle.layer_modify, icon: "layer"}
	        };
	    }

	    return items;
	};

	ContextMenu.prototype.getContextMenuType = function(e) {
	    var $target = this.$target;

	    var $table = $target.closest('table');

	    var contextMenuItems = this.defaultContextMenuItems();

	    if (this.menuController.api.options.hiddenMenu.indexOf('link') == -1) {
	        var hyperlinkMenuItems = this.hyperlinkMenuItems(e);
	        contextMenuItems = $.extend(true, {}, contextMenuItems, hyperlinkMenuItems);
	    }

	    var imageMenuItems = this.imageMenuItems(e);
	    contextMenuItems = $.extend(true, {}, contextMenuItems, imageMenuItems);

	    var paragraphMenuItems = this.paragraphContextMenuItems();
	    contextMenuItems = $.extend(true, {}, contextMenuItems, paragraphMenuItems);

	    if (this.menuController.api.options.hiddenMenu.indexOf('layer') == -1) {
	        var layerMenuItems = this.layerMenuItems(e);
	        contextMenuItems = $.extend(true, {}, contextMenuItems, layerMenuItems);
	    }

	    var $tdNodes = this.$dom.selection.getSelectedTd();

	    if ($table.length || $tdNodes.length > 0) {

	        if ($tdNodes.length == 0){
	            $tdNodes = $target.closest(Define.CELL_TYPE.join(','));
	        }

	        var tableMenuItems = this.tableContextMenuItems($table, $tdNodes);

	        delete contextMenuItems['copy'];
	        delete contextMenuItems['cut'];
	        delete contextMenuItems['paste'];
	        delete contextMenuItems['text_paste'];
	        delete contextMenuItems['sep1'];
	        delete contextMenuItems['all_select'];
	        delete contextMenuItems['sep2'];
	        delete contextMenuItems['link'];
	        delete contextMenuItems['sep3'];

	        // delete contextMenuItems['image'];
	        // delete contextMenuItems['sep4'];

	        contextMenuItems = $.extend(true, {}, contextMenuItems, tableMenuItems);

	        if (this.menuController.api.options.useOnlyTableContentMenu) {
	            delete contextMenuItems['image'];
	            delete contextMenuItems['image_modify'];
	            delete contextMenuItems['video_modify'];
	            delete contextMenuItems['sep4'];
	            delete contextMenuItems['align_left'];
	            delete contextMenuItems['align_center'];
	            delete contextMenuItems['align_right'];
	            delete contextMenuItems['align_justify'];
	            delete contextMenuItems['sep5'];
	            delete contextMenuItems['paragraph_margin'];
	            delete contextMenuItems['sep6'];
	            delete contextMenuItems['paragraph_remove_format'];
	            delete contextMenuItems['sep7'];
	            delete contextMenuItems['sep13'];
	            delete contextMenuItems['layer_modify'];
	        }
	    }

	    return contextMenuItems;
	};

	ContextMenu.prototype.showContextMenu = function(e) {
	    this.$target = $(e.target);

	    this.setContextMenuItems(e);
	    this.setRootContextMenuPosition(e.clientX, e.clientY);

	    if ($.browser.msie && $.browser.version < 11) {
	        var $items = this.contextMenuInstance.find('.' + Define.CLASS.EDITOR_CONTEXT_MENU_ITEM);

	        $items.on('mouseenter', function(){
	            $(this).addClass(Define.CLASS.HOVER);
	        }).on('mouseleave', function(){
	            $(this).removeClass(Define.CLASS.HOVER);
	        });
	    }

	    this.contextMenuInstance.show();
	};

	ContextMenu.prototype.setContextMenuItems = function(e) {
	    var contextItems = this.getContextMenuType(e);

	    var contentItemHTML = '';

	    for (var key in contextItems) {
	        contentItemHTML += this.createContextMenuItems(key, contextItems[key]);
	    }

	    this.contextMenuInstance.html(contentItemHTML);
	};

	ContextMenu.prototype.createContextMenuItems = function(key, item) {
	    var className = Define.CLASS.EDITOR_CONTEXT_MENU_ITEM;

	    if (key.indexOf('sep') > -1){
	        className += ' ' + Define.CLASS.EDITOR_CONTEXT_MENU_SEPARATOR;
	        className += ' ' + Define.CLASS.EDITOR_CONTEXT_MENU_NOT_SELECTABLE;
	    }

	    if (item.icon) {
	        className += ' ' + Define.CLASS.EDITOR_CONTEXT_MENU_ICON;
	        className += ' ' + Define.CLASS.EDITOR_CONTEXT_MENU_ICON + '-' + item.icon;
	    }

	    if (item.items) {
	        className += ' ' + Define.CLASS.EDITOR_CONTEXT_MENU_SUBMENU;
	    }

	    var itemName = item.name;

	    var itemHTML = '<li class="' + className + '" ' + Define.ATTR.KK_CONTEXT_MENU_NAME + '="' + key + '">';

	    if (itemName) {
	        itemHTML += '<span>' + itemName + '</span>';
	    }

	    if (item.items) {
	        var subItem = item.items;

	        var subItemWrapping = '<ul class="' + Define.CLASS.EDITOR_CONTEXT_MENU_LIST + '">';

	        for (var subItemKey in subItem) {
	            var subItemHTML = this.createContextMenuItems(subItemKey, subItem[subItemKey]);
	            subItemWrapping += subItemHTML;
	        }

	        subItemWrapping += '</ul>';
	        itemHTML += subItemWrapping;
	    }

	    itemHTML += '</li>';

	    return itemHTML;
	};

	ContextMenu.prototype.setRootContextMenuPosition = function(clientX, clientY) {
	    var iframeOffset = this.editoriFrame.offset();
	    var editorOffset = this.editorContentView.offset();

	    var documentWidth = this.$document.width();
	    var documentHeight = this.$document.height();

	    var contextWidth = this.contextMenuInstance.width();
	    var contextHeight = this.contextMenuInstance.height();

	    var left = clientX + iframeOffset.left - editorOffset.left;
	    var top = clientY + iframeOffset.top - editorOffset.top;

	    if (left + contextWidth > documentWidth) {
	        left = left - contextWidth;
	    }

	    if (top + contextHeight > documentHeight) {
	        top = top - contextHeight;
	    }

	    if (left < 0) {
	        left = 0;
	    }

	    if (top < 0) {
	        top = 0;
	    }

	    this.contextMenuInstance.css({
	        top : top + 'px',
	        left : left + 'px'
	    });
	};

	ContextMenu.prototype.hideContextMenu = function() {
	    this.$target = null;
	    this.contextMenuInstance.html('');
	    this.contextMenuInstance.hide();
	};

	ContextMenu.prototype.getContextMenuInstance = function() {
	    return this.contextMenuInstance;
	};

	ContextMenu.prototype.stop = function(e) {
	    if(e.preventDefault) {e.preventDefault();}
	    if(e.stopPropagation) {e.stopPropagation();}

	    e.returnValue = false;
	    e.cancelBubble = true;
	    e.stopped = true;
	};

	module.exports = ContextMenu;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function HeperlinkDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.options = router.options;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;

	    this.dialogContentHTML = this.getDialogContents();

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_hyperlink">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">'+window.kukuResource.hyperlinkDialog.title+'</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">'
	                + this.dialogContentHTML + '' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(HeperlinkDialog.prototype, new AbstractDialog());

	HeperlinkDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.initHyperlinkControlButton();

	    this.$linkType.on('change', function(){
	        var linkType = _this.$linkType.val();

	        if (linkType === 'url') {
	            _this.$urlWrap.show();
	            _this.$bookmarkWrap.hide();

	        } else if (linkType === 'bookmark'){
	            _this.$urlWrap.hide();
	            _this.$bookmarkWrap.show();
	        }
	    });

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("mousedown", function(e){

	                _this.stop(e);

	                var linkType = _this.$linkType.val();

	                if (linkType == 'url') {
	                    var textInputValue = _this.$urlTextInput.val();
	                    var urlInputValue = _this.$urlInput.val();
	                    var titleInputValue = _this.$urlTitleInput.val();
	                    var targetSelectValue = _this.$urlTargetSelect.val() || '';
	                    var idInputValue = _this.$urlIdInput.val();
	                    var classInputValue = _this.$urlClassInput.val();

	                    if (!_this.isValidURL(urlInputValue)){
	                        _this.$dom.selection.restoreRange();
	                        _this.$dom.selection.editorBlur();
	                        alert(window.kukuResource.hyperlinkDialog.msg_invalid_url);
	                    }else{
	                        _this.closeDialog();

	                        _this.router.doOperation({
	                            type:"create",
	                            name:"hyperlink",
	                            value: {
	                                type : 'url',
	                                text : textInputValue || urlInputValue,
	                                url : urlInputValue,
	                                title : titleInputValue,
	                                target : targetSelectValue,
	                                id : idInputValue,
	                                className : classInputValue
	                            }
	                        });
	                    }
	                } else {
	                    var bookmarkTextInputValue = _this.$bookmarkTextInput.val();
	                    var bookmarkListSelectValue = _this.$bookmarkListSelect.val() || '';

	                    if (!bookmarkListSelectValue.length) {
	                        _this.$dom.selection.restoreRange();
	                        _this.$dom.selection.editorBlur();
	                        alert(window.kukuResource.hyperlinkDialog.bookmark_invalid);
	                    } else {
	                        _this.closeDialog();

	                        _this.router.doOperation({
	                            type:"create",
	                            name:"hyperlink",
	                            value: {
	                                type : 'bookmark',
	                                text : bookmarkTextInputValue || '#' + bookmarkListSelectValue,
	                                url : '#' + bookmarkListSelectValue
	                            }
	                        });
	                    }
	                }
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	HeperlinkDialog.prototype.getDialogContents = function(){

	    return '' +
	        '<div class="kk_contents_row kk_hyperlink_type">' +
	            '<label>' + window.kukuResource.hyperlinkDialog.linkType + '</label>' +
	            '<select class="kk_hyperlink_type_select">' +
	                '<option value="url">' + window.kukuResource.hyperlinkDialog.urlType + '</option>' +
	                '<option value="bookmark">' + window.kukuResource.hyperlinkDialog.bookmarkType + '</option>' +
	            '</select>' +
	        '</div>' +

	        '<div class="kk_contents_row kk_hyperlink_url_wrap">' +
	            '<table>' +
	                '<tbody>' +
	                    '<tr>' +
	                        '<td>' + '<label>' + window.kukuResource.hyperlinkDialog.urlLabel + '</label>' + '</td>' +
	                        '<td>' + '<input class="kk_hyperlink_url_input" type="text" value=""/></td>' +
	                    '</tr>' +
	                    '<tr>' +
	                        '<td>' + '<label>' + window.kukuResource.hyperlinkDialog.urlText + '</label>' + '</td>' +
	                        '<td>' + '<input class="kk_hyperlink_url_text_input" type="text" value=""/></td>' +
	                    '</tr>' +
	                    '<tr>' +
	                        '<td>' + '<label>' + window.kukuResource.hyperlinkDialog.urlTitle + '</label>' + '</td>' +
	                        '<td>' + '<input class="kk_hyperlink_url_title_input" type="text" value=""/></td>' +
	                    '</tr>' +
	                    '<tr>' +
	                        '<td>' + '<label>' + window.kukuResource.hyperlinkDialog.urlTarget + '</label>' + '</td>' +
	                        '<td>' +
	                            '<select class="kk_hyperlink_url_target_select">' +
	                                '<option value="none">' + window.kukuResource.hyperlinkDialog.target_none + '</option>' +
	                                '<option value="_blank">' + window.kukuResource.hyperlinkDialog.target_blank + '</option>' +
	                                '<option value="_parent">' + window.kukuResource.hyperlinkDialog.target_parent + '</option>' +
	                                '<option value="_self">' + window.kukuResource.hyperlinkDialog.target_self + '</option>' +
	                                '<option value="_top">' + window.kukuResource.hyperlinkDialog.target_top + '</option>' +
	                            '</select>' +
	                        '</td>' +
	                    '</tr>' +
	                '</tbody>' +
	            '</table>' +
	            '<table>' +
	                '<tbody>' +
	                    '<tr>' +
	                        '<td>' + '<label>' + window.kukuResource.hyperlinkDialog.urlId + '</label>' + '</td>' +
	                        '<td>' + '<input class="kk_hyperlink_url_id_input" type="text" value=""/></td>' +
	                    '</tr>' +
	                    '<tr>' +
	                        '<td>' + '<label>' + window.kukuResource.hyperlinkDialog.urlClass + '</label>' + '</td>' +
	                        '<td>' + '<input class="kk_hyperlink_url_class_input" type="text" value=""/></td>' +
	                    '</tr>' +
	                '</tbody>' +
	            '</table>' +
	        '</div>' +

	        '<div class="kk_contents_row kk_hyperlink_bookmark_wrap">' +
	            '<table>' +
	                '<tbody>' +
	                    '<tr>' +
	                        '<td>' + '<label>' + window.kukuResource.hyperlinkDialog.bookmarkList + '</label>' + '</td>' +
	                        '<td>' +
	                            '<select class="kk_hyperlink_bookmark_select">' + '</select>' +
	                        '</td>' +
	                    '</tr>' +
	                    '<tr>' +
	                        '<td>' + '<label>' + window.kukuResource.hyperlinkDialog.bookmarkTitle + '</label>' + '</td>' +
	                        '<td>' + '<input class="kk_hyperlink_bookmark_text_input" type="text" value=""/></td>' +
	                    '</tr>' +
	                '</tbody>' +
	            '</table>' +
	        '</div>';
	};

	HeperlinkDialog.prototype.initHyperlinkControlButton = function(){
	    this.$linkType = this.$dNode.find('.kk_hyperlink_type_select');
	    this.$urlWrap = this.$dNode.find('.kk_hyperlink_url_wrap');
	    this.$bookmarkWrap = this.$dNode.find('.kk_hyperlink_bookmark_wrap');

	    this.$urlInput = this.$urlWrap.find('.kk_hyperlink_url_input');
	    this.$urlTextInput = this.$urlWrap.find('.kk_hyperlink_url_text_input');
	    this.$urlTitleInput = this.$urlWrap.find('.kk_hyperlink_url_title_input');
	    this.$urlTargetSelect = this.$urlWrap.find('.kk_hyperlink_url_target_select');
	    this.$urlIdInput = this.$urlWrap.find('.kk_hyperlink_url_id_input');
	    this.$urlClassInput = this.$urlWrap.find('.kk_hyperlink_url_class_input');

	    this.$bookmarkTextInput = this.$bookmarkWrap.find('.kk_hyperlink_bookmark_text_input');
	    this.$bookmarkListSelect = this.$bookmarkWrap.find('.kk_hyperlink_bookmark_select');
	};

	HeperlinkDialog.prototype.setHyperlinkClearInput = function(){
	    var $editorContentView = this.router.editorObject.editorContentView;

	    this.$linkType[0].selectedIndex = 0;
	    this.$urlWrap.show();
	    this.$bookmarkWrap.hide();

	    this.$urlInput.val('http://');
	    this.$urlTextInput.val('');
	    this.$urlTitleInput.val('');
	    this.$urlTargetSelect[0].selectedIndex = 0;
	    this.$urlIdInput.val('');
	    this.$urlClassInput.val('');

	    this.$bookmarkTextInput.val('');

	    this.$urlTextInput.attr(Define.ATTR.READONLY, Define.ATTR.READONLY);
	    this.$bookmarkTextInput.attr(Define.ATTR.READONLY, Define.ATTR.READONLY);

	    var bookmarkViews = $editorContentView.find('.kk_bookmark_view');

	    var optionHTML = '';

	    for (var i = 0, length = bookmarkViews.length ; i < length ; i++) {
	        var bookmark = bookmarkViews[i];

	        optionHTML += '<option val="' + bookmark.id + '">' + bookmark.id + '</option>';
	    }

	    this.$bookmarkListSelect.html(optionHTML);
	    this.$bookmarkListSelect[0].selectedIndex = 0;
	};

	HeperlinkDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();
	    var $dialog = this.$dialogNode.find(".kk_dialog_hyperlink");
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setHyperlinkClearInput();

	    this.setSelectionRange();

	    this.setSelectedLink();

	    this.setDialogPosition($dialog);
	};

	HeperlinkDialog.prototype.setSelectedLink = function (){

	    var range = this.$dom.selection.getRange();

	    var selectedHtml = Util.getSelectedHtml(range);

	    var $selectedHtml = $("<div/>").html(selectedHtml);

	    var selectedAnchorLength = $selectedHtml.find('a').length;

	    if (selectedAnchorLength > 1) {
	        return;
	    }

	    var $hyperlinkNode = $(range.startContainer).closest('a');

	    if (!$hyperlinkNode.length) {
	        this.$urlTextInput.val($selectedHtml.text());
	        this.$bookmarkTextInput.val($selectedHtml.text());

	        if (this.$dom.selection.isCollapsed()) {
	            this.$urlTextInput.removeAttr(Define.ATTR.READONLY);
	            this.$bookmarkTextInput.removeAttr(Define.ATTR.READONLY);
	        }

	        return;
	    }

	    this.$urlTextInput.val($hyperlinkNode.text());
	    this.$bookmarkTextInput.val($hyperlinkNode.text());

	    var href = $hyperlinkNode.attr(Define.ATTR.HREF);

	    if (href.indexOf('#') === 0) {
	        //TODO : Bookmark Link
	        this.$linkType.val('bookmark');
	        this.$urlWrap.hide();
	        this.$bookmarkWrap.show();

	        href = href.slice(1, href.length);
	        this.$bookmarkListSelect.val(href);

	    } else {
	        this.$urlInput.val(href);

	        var title = $hyperlinkNode.attr(Define.ATTR.TITLE) || '';
	        var target = $hyperlinkNode.attr(Define.ATTR.TARGET) || 'none';
	        var id = $hyperlinkNode.attr(Define.ATTR.ID) || '';
	        var className = $hyperlinkNode.attr(Define.ATTR.CLASS) || '';

	        this.$urlTitleInput.val(title);
	        this.$urlTargetSelect.val(target);
	        this.$urlIdInput.val(id);
	        this.$urlClassInput.val(className);
	    }
	};

	HeperlinkDialog.prototype.isValidURL = function (value){

	    var regx = (this.router.options.isValidReg && this.router.options.isValidReg.url) ? this.router.options.isValidReg.url : /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
	    var result = regx.test(value);
	    return result;
	};

	module.exports = HeperlinkDialog;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	function AbstractDialog(){
	    this.editorContentView = null;
	}

	AbstractDialog.prototype.stopEvent = function(e) {
	    if(e.preventDefault) {e.preventDefault();}
	    if(e.stopPropagation) {e.stopPropagation();}

	    e.returnValue = false;
	    e.cancelBubble = true;
	    e.stopped = true;
	};

	AbstractDialog.prototype.setMoveEvent = function() {
	    var _this = this;
	    var $window = $(window);

	    var editorElement = this.router.editorObject.editorElement;

	    var useDialogMoveConfineEditor = this.router.options.useDialogMoveConfineEditor;

	    var buffer = 20;

	    var editorWidth = editorElement.width();
	    var editorHeight = editorElement.height();

	    var editorOffsetTop = editorElement.offset().top;
	    var editorOffsetLeft = editorElement.offset().left;

	    var selected_width = _this.$dNode.width() + buffer;
	    var selected_height = _this.$dNode.height() + buffer;

	    var window_width = document.documentElement ? document.documentElement.scrollWidth : window.width();
	    var window_height = document.documentElement ? document.documentElement.scrollHeight : $window.height();

	    var selected = null,
	        x_pos = 0, y_pos = 0,
	        x_elem = 0, y_elem = 0;

	    var mouseup = function (e){
	        selected = null;

	        $(document).off('mouseup', mouseup).off('mousemove', mousemove);

	        return false;
	    };

	    var mousemove = function(e){
	        if (selected !== null) {

	            x_pos = document.all ? window.event.clientX : e.pageX;
	            y_pos = document.all ? window.event.clientY : e.pageY;

	            var left = (x_pos - x_elem);
	            var top = (y_pos - y_elem);

	            if (useDialogMoveConfineEditor) {
	                if (selected_width + left > editorWidth) {
	                    left = editorWidth - selected_width;
	                }

	                if (selected_height + top > editorHeight) {
	                    top = editorHeight - selected_height;
	                }

	                if (left < buffer) {
	                    left = buffer;
	                }

	                if (top < buffer) {
	                    top = buffer;
	                }
	            } else {
	                if (editorOffsetLeft + selected_width + left > window_width) {
	                    left = window_width - editorOffsetLeft - selected_width;
	                }

	                if (editorOffsetTop + selected_height + top > window_height) {
	                    top = window_height - editorOffsetTop - selected_height;
	                }

	                if (left + editorOffsetLeft < buffer) {
	                    left = -(editorOffsetLeft - buffer);
	                }

	                if (top + editorOffsetTop < buffer) {
	                    top = -(editorOffsetTop - buffer);
	                }
	            }

	            selected.style.left = left + 'px';
	            selected.style.top = top + 'px';
	        }

	        _this.stopEvent(e);

	        return false;
	    };

	    this.$dNode.on('mousedown', function(e){
	        editorWidth = editorElement.width();
	        editorHeight = editorElement.height();

	        editorOffsetTop = editorElement.offset().top;
	        editorOffsetLeft = editorElement.offset().left;

	        selected_width = _this.$dNode.width() + buffer;
	        selected_height = _this.$dNode.height() + buffer;

	        window_width = document.documentElement ? document.documentElement.scrollWidth : window.width();
	        window_height = document.documentElement ? document.documentElement.scrollHeight : $window.height();

	        var $target = $(e.target);

	        if ($target.hasClass('kk_dialog_header') || $target.closest('.kk_dialog_header').length) {
	            selected = _this.$dNode[0];

	            x_pos = document.all ? window.event.clientX : e.pageX;
	            y_pos = document.all ? window.event.clientY : e.pageY;

	            x_elem = x_pos - selected.offsetLeft;
	            y_elem = y_pos - selected.offsetTop;

	            $(document).on('mouseup', mouseup).on('mousemove', mousemove);
	        }
	    });
	};

	AbstractDialog.prototype.setDialogPosition = function($dialog) {
	    $dialog.css('visibility', 'hidden');
	    $dialog.show();
	    this.$dialogNode.show();

	    this.setAccordion($dialog);

	    $dialog.css("top", Math.max(0, ((this.editorElement.height() - $dialog.height()) / 2)) + "px");
	    $dialog.css("left", Math.max(0, ((this.editorElement.width() - $dialog.width()) / 2)) + "px");

	    $dialog.css('visibility', '');
	};

	AbstractDialog.prototype.setAccordion = function($dialog) {
	    var $accordionFields = $dialog.find('.kk_accordion_field');

	    if ($accordionFields.length) {
	        for (var idx = 0, length = $accordionFields.length; idx < length; idx++) {
	            var $accordionField = $accordionFields.eq(idx);
	            var $accordionWrap = $accordionField.parent();
	            var $accordionBar = $accordionWrap.find('.kk_accordion_bar');

	            if (!$accordionWrap.hasClass('kk_accordion_wrap')) {
	                $accordionWrap = $('<div class="kk_accordion_wrap"/>');

	                $accordionField.before($accordionWrap);
	                $accordionWrap.append($accordionField);

	                $accordionBar = $('<div class="kk_accordion_bar"/>');
	                $accordionWrap.append($accordionBar);

	                (function($bar, $field){
	                    $bar.on('click', function(){
	                        $field.slideToggle( "slow", function() {
	                            if ($field.css('display') == 'none') {
	                                $bar.html(window.kukuResource.abstractDialog.open);
	                            } else {
	                                $bar.html(window.kukuResource.abstractDialog.close);
	                            }
	                        });
	                    });
	                })($accordionBar, $accordionField);
	            }

	            if ($accordionField.hasClass('kk_accordion_default_open')) {
	                $accordionBar.html(window.kukuResource.abstractDialog.close);
	                $accordionField.show();
	            } else {
	                $accordionBar.html(window.kukuResource.abstractDialog.open);
	                $accordionField.hide();
	            }
	        }
	    }
	};

	AbstractDialog.prototype.closeDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();
	    this.$dialogNode.hide();
	    this.$dom.selection.editorFocus();
	    this.$dom.selection.setContentEditable(true);
	    this.$dom.selection.restoreRange();
	};

	AbstractDialog.prototype.setSelectionRange = function(){
	    this.$dom.selection.setSaveRange();
	    // this.windowRange = this.$dom.selection.getRange();

	    if (!this.editorContentView) {
	        this.editorContentView = this.router.editorObject.editorContentView;
	    }

	    this.$dom.selection.editorBlur();
	};

	AbstractDialog.prototype.setCloseButton = function(){
	    this.closeNode = this.$dNode.find('.kk_dialog_close');

	    var _this = this;
	    this.closeNode.on('mousedown', function(e){
	        _this.closeDialog();
	        _this.stop(e);
	    });
	};

	AbstractDialog.prototype.stop = function(e) {
	    if(e.preventDefault) {e.preventDefault();}
	    if(e.stopPropagation) {e.stopPropagation();}

	    e.returnValue = false;
	    e.cancelBubble = true;
	    e.stopped = true;
	};


	module.exports = AbstractDialog;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);
	var WidgetItems = __webpack_require__(12);

	var bufferSize = 10;

	function SymbolsDialog(editorElement, $domObject, router) {
	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.router = router;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_symbols">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">'+ window.kukuResource.symbolsDialog.title + '</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_contents_row symbols_contents_wrap">' +
	                    '<div class="symbols_contents"></div>' +
	                    '<div class="symbols_footer">' +
	                        '<label>' + window.kukuResource.symbolsDialog.selectSymbol + ' : </label>' +
	                        '<input type="text" class="selected_symbol" value="" />' +
	                        '<div class="selected_symbol_text_width" ></div>' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(SymbolsDialog.prototype, new AbstractDialog());

	SymbolsDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.symbol = this.$dNode.find('.selected_symbol');
	    this.symbolText = this.$dNode.find('.selected_symbol_text_width');

	    if($.browser.msie) {
	        this.symbolText.css('font-size', '13px');
	    }

	    var maxCnt = 0;
	    $.each(WidgetItems.symbols, function(){
	        var length = this.length;
	        if (maxCnt < length) {
	            maxCnt = length;
	        }
	    });

	    var ulNode = $("<ul></ul>")[0];
	    for(var symbol in WidgetItems.symbols){
	        var items = $('<li class="symbol_items"></li>')[0];
	        var $itemButton = $('<a class="symbol_title"><span>'+window.kukuResource.symbolsDialog[symbol]+'</span></a>');
	        var $itemListNode = $('<div class="symbol_item_list"></div>');
	        var cnt = 0;
	        var itemContents = $('<div class="symbol_item_contents"></div>')[0];
	        for (var c = 0; c < maxCnt; c++) {
	            var _item = WidgetItems.symbols[symbol][cnt];
	            if (!_item) {
	                _item = "&nbsp;";
	            }
	            itemContents.appendChild($('<div class="item"><span>' + _item + '</span></div>')[0]);
	            cnt++;
	        }

	        $itemListNode.append(itemContents);
	        items.appendChild($itemButton[0]);
	        items.appendChild($itemListNode[0]);

	        ulNode.appendChild(items);
	    }

	    this.$dNode.find(".symbols_contents").append(ulNode);
	    this.$dNode.find(".symbols_contents").find(".symbol_title").bind("mousedown", function(){
	        _this._hideSymbolTab();
	        _this._showSymbolTab($(this).parents(".symbol_items")[0]);
	    });

	    this.$dNode.find(".symbols_contents").find(".symbol_item_contents").find(".item").bind("mousedown", function(e){
	        var character = $(this).find("span")[0].innerHTML;

	        if (!(character == " " || character == "&nbsp;")) {
	            var $selectedInput = _this.symbol;

	            _this.symbolText.text($selectedInput[0].value + character);

	            if (_this.symbolText.width() > $selectedInput.width() - bufferSize) {
	                return;
	            }

	            // if ($selectedInput[0].value.length >= this.MAX_LENGTH) {
	            //     return;
	            // }

	            $selectedInput[0].value = $selectedInput[0].value + character;
	        }
	    });

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){
	                var value = $(_this.$dNode).find(".selected_symbol").val();

	                if (value && value.length > 0){
	                    var opSources = [];

	                    var pasteOpSource = {
	                        type:"create",
	                        name:"symbol",
	                        value: value
	                    };

	                    opSources.push(pasteOpSource);

	                    _this.router.doOperation(opSources);
	                }

	                _this.closeDialog();
	                //적용
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    if ($.browser.msie && $.browser.version < 11) {
	        var $items = this.$dNode.find('.item');

	        $items.on('mouseenter', function(){
	            $(this).addClass('hover');
	        }).on('mouseleave', function(){
	            $(this).removeClass('hover');
	        });
	    }

	    this.setMoveEvent();
	    this.setCloseButton();

	    _this._showSymbolTab(this.$dNode.find(".symbol_items")[0]);
	    return this;
	};

	SymbolsDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_symbols");
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.symbol.val("");
	    this.symbolText.text("");

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	SymbolsDialog.prototype._showSymbolTab = function(node){
	    $(node).find(".symbol_title").addClass("active");
	    $(node).find(".symbol_item_list").show().css("display", "block");
	};

	SymbolsDialog.prototype._hideSymbolTab = function(){
	    this.$dialogNode.find(".symbol_title").removeClass("active");
	    this.$dialogNode.find(".symbol_item_list").hide();
	};

	module.exports = SymbolsDialog;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);
	var HyperlinkDialog = __webpack_require__(46);
	var _AbstractUploadDialog = __webpack_require__(50);

	var Define = __webpack_require__(3);

	function ImageDialog(editorElement, $domObject, router) {
	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;

	    this.defaultImageSet = null;

	    this.defaultErrorImageSrc = "";

	    this.dialogContentHTML = this.getDialogContents();

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_image">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">' + window.kukuResource.imageDialog.insert_title + '</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_tab_menus">' +
	                    '<div class="kk_tab_menu_item kk_tab_menu_img kk_tab_menu_on">' + window.kukuResource.imageDialog.tab_common + '</div>' +
	                    '<div class="kk_tab_menu_item kk_tab_menu_hyperlink">' + window.kukuResource.imageDialog.tab_hyperlink + '</div>' +
	                '</div>' +
	                '<div class="kk_tab_contents kk_tab_contents_img kk_tab_contents_on">' +
	                    '<div class="kk_contents_row kk_dialog_img_path">' +
	                        '<table>' +
	                            '<colgroup>' +
	                                '<col style="width:20%;">' +
	                                '<col style="width:80%;">' +
	                            '</colgroup>' +
	                            '<tbody>' +
	                                '<tr>' +
	                                    '<td>' + window.kukuResource.imageDialog.image_url_path + '</td>' +
	                                    '<td>' +
	                                        '<input type="text" class="kk_file_open_path_input">' +
	                                        '<label class="kk_file_open_input_label kk_dialog_button">' + window.kukuResource.imageDialog.file_input_label  + '</label>' +

	                                        (typeof window.FormData === 'undefined' ? '<form class="uploadForm" method="post" enctype="multipart/form-data" action="">' : '') +
	                                        '<input name="' + Define.NAME.UPLOAD_IMAGE_TYPE + '" type="file" accept="'  + '.' + Define.IMAGE_TYPE_FILES.join(',.') + '" class="kk_file_open_input">' +
	                                        (typeof window.FormData === 'undefined' ? '</form>' : '') +

	                                    '</td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_title + '</td>' +
	                                    '<td>' + '<input type="text" value="" class="kk_dialog_image_title_input" /></td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_alt + '</td>' +
	                                    '<td>' + '<input type="text" value="" class="kk_dialog_image_alt_input" /></td>' +
	                                '</tr>' +
	                            '</tbody>' +
	                        '</table>' +
	                    '</div>' +
	                    '<div class="kk_contents_row kk_dialog_img_style">' +
	                        '<table>' +
	                            '<colgroup>' +
	                                '<col style="width:20%;">' +
	                                '<col style="width:30%;">' +
	                                '<col style="width:20%;">' +
	                                '<col style="width:30%;">' +
	                            '</colgroup>' +
	                            '<tbody>' +
	                                '<tr>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_width + '(px)</td>' +
	                                    '<td>' + '<input type="text" value="" class="kk_dialog_image_width_input" /></td>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_height + '(px)</td>' +
	                                    '<td>' + '<input type="text" value="" class="kk_dialog_image_height_input" /></td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_margin_left + '(px)</td>' +
	                                    '<td>' + '<input type="text" value="" class="kk_dialog_image_marginL_input" /></td>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_margin_right + '(px)</td>' +
	                                    '<td>' + '<input type="text" value="" class="kk_dialog_image_marginR_input" /></td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_margin_top + '(px)</td>' +
	                                    '<td>' + '<input type="text" value="" class="kk_dialog_image_marginT_input" /></td>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_margin_bottom + '(px)</td>' +
	                                    '<td>' + '<input type="text" value="" class="kk_dialog_image_marginB_input" /></td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_align + '</td>' +
	                                    '<td>' +
	                                        '<select class="kk_dialog_align_select">' +
	                                            '<option value="baseline">' + window.kukuResource.imageDialog.align_baseline + '</option>' +
	                                            '<option value="left">' + window.kukuResource.imageDialog.align_left + '</option>' +
	                                            '<option value="top">' + window.kukuResource.imageDialog.align_top + '</option>' +
	                                            '<option value="middle">' + window.kukuResource.imageDialog.align_middle + '</option>' +
	                                            '<option value="bottom">' + window.kukuResource.imageDialog.align_bottom + '</option>' +
	                                            '<option value="texttop">' + window.kukuResource.imageDialog.align_texttop + '</option>' +
	                                            '<option value="absmiddle">' + window.kukuResource.imageDialog.align_absmiddle + '</option>' +
	                                            '<option value="absbottom">' + window.kukuResource.imageDialog.align_absbottom + '</option>' +
	                                        '</select>' +
	                                    '</td>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_border + '</td>' +
	                                    '<td>' +
	                                        '<select class="kk_dialog_border_select">' +
	                                            '<option value="none">' +   window.kukuResource.imageDialog.image_border_none + '</option>' +
	                                            '<option value="solid">' +  window.kukuResource.imageDialog.image_border_solid + '</option>' +
	                                            '<option value="dotted">' + window.kukuResource.imageDialog.image_border_dotted + '</option>' +
	                                            '<option value="dashed">' + window.kukuResource.imageDialog.image_border_dashed + '</option>' +
	                                            '<option value="double">' + window.kukuResource.imageDialog.image_border_double + '</option>' +
	                                            '<option value="groove">' + window.kukuResource.imageDialog.image_border_groove + '</option>' +
	                                            '<option value="ridge">' +  window.kukuResource.imageDialog.image_border_ridge + '</option>' +
	                                            '<option value="inset">' +  window.kukuResource.imageDialog.image_border_inset + '</option>' +
	                                            '<option value="outset">' + window.kukuResource.imageDialog.image_border_outset + '</option>' +
	                                        '</select>' +
	                                    '</td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_line_color + '</td>' +
	                                    '<td>' + '<div class="kk_dialog_color_picker kk_dialog_image_border_color_picker"/>' + '</td>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_line_width + '</td>' +
	                                    '<td>' + '<input type="text" value="" class="kk_dialog_image_border_width_input" /> px</td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_id + '</td>' +
	                                    '<td>' + '<input type="text" value="" class="kk_dialog_image_id_input" /></td>' +
	                                    '<td>'  + window.kukuResource.imageDialog.image_class + '</td>' +
	                                    '<td>' + '<input type="text" value="" class="kk_dialog_image_class_input" /></td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td colspan="2">'  + '<label class="label_long"><input class="kk_dialog_image_orgSize_checkbox" type="checkbox">' + window.kukuResource.imageDialog.image_original_size + '</label>' + '</td>' +
	                                    '<td colspan="2">'  + '<label class="label_long"><input class="kk_dialog_image_insert_checkbox" type="checkbox">' + window.kukuResource.imageDialog.image_next_insert + '</label>' + '</td>' +
	                                '</tr>' +
	                            '</tbody>' +
	                        '</table>' +
	                    '</div>' +
	                '</div>' +
	                '<div class="kk_tab_contents kk_tab_contents_hyperlink">' +
	                    this.dialogContentHTML +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(ImageDialog.prototype, new AbstractDialog());
	$.extend(ImageDialog.prototype, new _AbstractUploadDialog());

	ImageDialog.prototype.getDialogContents = HyperlinkDialog.prototype.getDialogContents;
	ImageDialog.prototype.initHyperlinkControlButton = HyperlinkDialog.prototype.initHyperlinkControlButton;
	ImageDialog.prototype.setHyperlinkClearInput = HyperlinkDialog.prototype.setHyperlinkClearInput;
	ImageDialog.prototype.isValidURL = HyperlinkDialog.prototype.isValidURL;

	ImageDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);


	    this.hyperlinkLabel = this.$dNode.find('.kk_hyperlink_type label');

	    // if (!$.browser.msie) {
	    //     this.hyperlinkLabel.css('margin-right', '46px');
	    // }

	    //TAB Element
	    this.titleNode = this.$dNode.find('.kk_dialog_title');

	    this.tabCommon = this.$dNode.find('.kk_tab_menu_img');
	    this.tabHyperlink = this.$dNode.find('.kk_tab_menu_hyperlink');

	    this.tabCommonContents = this.$dNode.find('.kk_tab_contents_img');
	    this.tabHyperlinkContents = this.$dNode.find('.kk_tab_contents_hyperlink');

	    this.$fileInput = this.$dNode.find('.kk_file_open_input');
	    this.imageFileInputLable = this.$dNode.find('.kk_file_open_input_label');
	    this.$pathInput = this.$dNode.find('.kk_file_open_path_input');

	    this.imageTitleInput = this.$dNode.find('.kk_dialog_image_title_input');
	    this.imageAltInput = this.$dNode.find('.kk_dialog_image_alt_input');

	    this.widthInput = this.$dNode.find('.kk_dialog_image_width_input');
	    this.heightInput = this.$dNode.find('.kk_dialog_image_height_input');

	    this.marginLeftInput = this.$dNode.find('.kk_dialog_image_marginL_input');
	    this.marginRightInput = this.$dNode.find('.kk_dialog_image_marginR_input');
	    this.marginTopInput = this.$dNode.find('.kk_dialog_image_marginT_input');
	    this.marginBottomInput = this.$dNode.find('.kk_dialog_image_marginB_input');

	    this.alignSelect = this.$dNode.find('.kk_dialog_align_select');
	    this.borderTypeSelect = this.$dNode.find('.kk_dialog_border_select');

	    this.borderWidthInput = this.$dNode.find('.kk_dialog_image_border_width_input');

	    this.imageIdInput = this.$dNode.find('.kk_dialog_image_id_input');
	    this.imageClassNameInput = this.$dNode.find('.kk_dialog_image_class_input');

	    this.defaultSizeCheck = this.$dNode.find('.kk_dialog_image_orgSize_checkbox');
	    this.nextInsertCheck = this.$dNode.find('.kk_dialog_image_insert_checkbox');


	    this.borderColorPicker = this.$dNode.find('.kk_dialog_image_border_color_picker');

	    this.borderColorPicker.kkColorPicker({
	        callback : function(e, data){
	            _this.borderColorPicker.css("background-color", data.color);
	            _this.borderColorPicker.find(".ui_colorpicker").hide();
	            _this.defaultImageSet.borderColor = data.color;
	        }
	    });


	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){
	                // console.log(_this.defaultImageSet);

	                var imageInsertProcess = function() {
	                    var type = _this.$linkType.val();

	                    if (_this.tabHyperlink.hasClass('kk_tab_menu_on')) {
	                        if (type === 'url') {
	                            if (!_this.defaultImageSet.hyperlink.url || !_this.isValidURL(_this.defaultImageSet.hyperlink.url)) {
	                                _this.$dom.selection.restoreRange();
	                                _this.$dom.selection.editorBlur();
	                                alert(window.kukuResource.imageDialog.msg_invalid_hyperlink);
	                                return;
	                            }

	                        } else if (type === 'bookmark') {
	                            if (!_this.defaultImageSet.hyperlink.url) {
	                                _this.$dom.selection.restoreRange();
	                                _this.$dom.selection.editorBlur();
	                                alert(window.kukuResource.imageDialog.msg_invalid_bookmark);
	                                return;
	                            }
	                        }

	                    } else {
	                        if (!_this.defaultImageSet.imageSrc) {
	                            _this.$dom.selection.restoreRange();
	                            _this.$dom.selection.editorBlur();
	                            alert(window.kukuResource.imageDialog.msg_empty_url);
	                            return;
	                        }

	                        if (type === 'url') {
	                            if (_this.defaultImageSet.hyperlink.url && !_this.isValidURL(_this.defaultImageSet.hyperlink.url)) {
	                                _this.$dom.selection.restoreRange();
	                                _this.$dom.selection.editorBlur();
	                                alert(window.kukuResource.imageDialog.msg_invalid_hyperlink);
	                                return;
	                            }
	                        }
	                    }


	                    var isModify = _this.defaultImageSet.isModify;

	                    var opSource = {
	                        type : isModify ? "update" : "create",
	                        name : "image",
	                        value : _this.defaultImageSet
	                    };

	                    _this.router.doOperation(opSource);

	                    if (isModify) {
	                        _this.$dom.selection.removeModifyTargetNode();
	                    }

	                    if (_this.nextInsertCheck[0].checked) {
	                        _this.resetFields();
	                    } else {
	                        _this.closeDialog();
	                    }
	                };

	                if (_this.defaultImageSet.imageSrc) {
	                    $("<img/>").on('load', function(){
	                        imageInsertProcess();
	                    }).on('error', function(){
	                        _this.$dom.selection.restoreRange();
	                        _this.$dom.selection.editorBlur();
	                        alert(window.kukuResource.imageDialog.msg_invalid_image);
	                    }).attr('src', _this.defaultImageSet.imageSrc);
	                } else {
	                    imageInsertProcess();
	                }
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                var isModify = _this.defaultImageSet.isModify;

	                if (isModify) {
	                    _this.$dom.selection.removeModifyTargetNode();
	                }

	                _this.closeDialog();
	            });
	        }
	    });


	    this.$dNode.find('.kk_tab_menu_item').on('click', function(e){
	        var $target = $(e.target);

	        if ($target.hasClass('kk_tab_menu_img')) {
	            _this.tabCommon.addClass('kk_tab_menu_on');
	            _this.tabHyperlink.removeClass('kk_tab_menu_on');

	            _this.tabCommonContents.addClass('kk_tab_contents_on');
	            _this.tabHyperlinkContents.removeClass('kk_tab_contents_on');

	        } else if ($target.hasClass('kk_tab_menu_hyperlink')) {
	            _this.tabCommon.removeClass('kk_tab_menu_on');
	            _this.tabHyperlink.addClass('kk_tab_menu_on');

	            _this.tabCommonContents.removeClass('kk_tab_contents_on');
	            _this.tabHyperlinkContents.addClass('kk_tab_contents_on');
	        }
	    });

	    this.initHyperlinkControlButton();

	    this.setInputEvent();
	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	ImageDialog.prototype.parseIntValue = function(properties, name, inputNode) {

	    var value = inputNode.val();

	    var intValue = parseInt(value);

	    if (isNaN(intValue)) {
	        properties[name] = null;
	        inputNode.val('');
	    } else {
	        properties[name] = intValue;
	        inputNode.val(intValue);
	    }
	};

	ImageDialog.prototype.setFileUploadEvent = function() {
	    var _this = this;
	    var uploadImgWidth;
	    var uploadImgHeight;
	    ///////////////////// FileUpload Start //////////////////////

	    var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        var editorSize = _this.router.editorObject.GetEditorSize();
	        if(data && !data.isError && data.statusText !== "error") {
	            _this.$pathInput.val(data.url);
	            _this.defaultImageSet.imageSrc = data.url;

	            if(!_this.widthInput.val() && !_this.heightInput.val()) {
	                _this.defaultImageSet.width = uploadImgWidth;
	                _this.defaultImageSet.height = uploadImgHeight;
	                if(uploadImgWidth > editorSize.width) {
	                    uploadImgHeight = parseInt(editorSize.width * uploadImgHeight / uploadImgWidth);
	                    uploadImgWidth = editorSize.width;
	                }
	                _this.defaultImageSet.width = uploadImgWidth;
	                _this.defaultImageSet.height = uploadImgHeight;
	                _this.widthInput.val(uploadImgWidth);
	                _this.heightInput.val(uploadImgHeight);
	            }


	        } else {
	            _this.$dom.selection.restoreRange();
	            _this.$dom.selection.editorBlur();
	            alert(data.msg || window.kukuResource.imageDialog.image_upload_error);
	        }

	        _this.$pathInput.attr('style', '');
	    };

	    var _URL = window.URL || window.webkitURL;
	    this.$fileInput.on('change', function(e){
	        var file = $(this)[0].files[0];
	        if(file.type.indexOf("image") > -1) {
	            var reg = Define.IMAGE_TYPE_FILES_REG;
	            if(file.name.match(reg)) {
	                var img = new Image();

	                img.src = _URL.createObjectURL(file);
	                img.onload = function() {
	                    uploadImgWidth = this.width;
	                    uploadImgHeight = this.height;
	                }
	            } else {
	                return false;
	            }
	        }

	        _this.doFileUpload(Define.NAME.UPLOAD_IMAGE_TYPE, url, callbackFn);
	    });

	    ///////////////////// FileUpload End //////////////////////
	};

	ImageDialog.prototype.setInputEvent = function() {
	    var _this = this;

	    this.setFileUploadEvent();

	    this.imageFileInputLable.on('mousedown', function(e){
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	        _this.stop(e);
	    });

	    this.$pathInput.on('input', function(e){
	        _this.defaultImageSet.imageSrc = _this.$pathInput.val();
	    });

	    this.imageTitleInput.on('input', function(e){
	        _this.defaultImageSet.imageTitle = _this.imageTitleInput.val();
	    });

	    this.imageAltInput.on('input', function(e){
	        _this.defaultImageSet.imageAlt = _this.imageAltInput.val();
	    });

	    this.widthInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet, 'width', _this.widthInput);
	    });

	    this.heightInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet, 'height', _this.heightInput);
	    });

	    this.marginLeftInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet.margin, 'left', _this.marginLeftInput);
	    });

	    this.marginRightInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet.margin, 'right', _this.marginRightInput);
	    });

	    this.marginTopInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet.margin, 'top', _this.marginTopInput);
	    });

	    this.marginBottomInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet.margin, 'bottom', _this.marginBottomInput);
	    });

	    this.alignSelect.on('change', function(){
	        _this.defaultImageSet.align = _this.alignSelect.val();
	    });

	    this.borderTypeSelect.on('change', function(){
	        _this.defaultImageSet.borderType = _this.borderTypeSelect.val();
	    });

	    this.borderWidthInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet, 'borderWidth', _this.borderWidthInput);
	    });

	    this.imageIdInput.on('input', function(e){
	        _this.defaultImageSet.id = _this.imageIdInput.val();
	    });

	    this.imageClassNameInput.on('input', function(e){
	        _this.defaultImageSet.className = _this.imageClassNameInput.val();
	    });

	    this.defaultSizeCheck.on('change', function(e){

	        _this.widthInput.val('');
	        _this.heightInput.val('');

	        if (_this.defaultSizeCheck[0].checked) {

	            _this.widthInput[0].disabled = true;
	            _this.heightInput[0].disabled = true;

	            _this.widthInput.attr('title', window.kukuResource.imageDialog.tooltip_status_image_default_size);
	            _this.heightInput.attr('title', window.kukuResource.imageDialog.tooltip_status_image_default_size);

	            _this.defaultImageSet.width = -1;
	            _this.defaultImageSet.height = -1;
	        } else {
	            _this.widthInput[0].disabled = false;
	            _this.heightInput[0].disabled = false;

	            _this.widthInput.removeAttr('title');
	            _this.heightInput.removeAttr('title');

	            _this.defaultImageSet.width = null;
	            _this.defaultImageSet.height = null;
	        }
	    });

	    this.setHyperlinkEvent();
	};

	ImageDialog.prototype.setHyperlinkEvent = function() {
	    var _this = this;

	    var setHyperlinkInput = function() {
	        var type = _this.$linkType.val();

	        if (type === 'url') {
	            _this.defaultImageSet.hyperlink.type = type;
	            _this.defaultImageSet.hyperlink.text = _this.$urlTextInput.val();
	            _this.defaultImageSet.hyperlink.url = _this.$urlInput.val();

	            _this.defaultImageSet.hyperlink.title = _this.$urlTitleInput.val();
	            _this.defaultImageSet.hyperlink.target = _this.$urlTargetSelect.val();
	            _this.defaultImageSet.hyperlink.id = _this.$urlIdInput.val();
	            _this.defaultImageSet.hyperlink.className = _this.$urlClassInput.val();

	            if (_this.defaultImageSet.hyperlink.url === '' || _this.defaultImageSet.hyperlink.url == 'http://' || _this.defaultImageSet.hyperlink.url == 'https://') {
	                _this.defaultImageSet.hyperlink.url = '';
	            }

	        } else if (type === 'bookmark') {
	            _this.defaultImageSet.hyperlink.type = type;
	            _this.defaultImageSet.hyperlink.text = _this.$bookmarkTextInput.val();
	            _this.defaultImageSet.hyperlink.url = _this.$bookmarkListSelect.val();

	            if (!_this.defaultImageSet.hyperlink.url) {
	                _this.defaultImageSet.hyperlink = {};
	            }
	        } else {
	            _this.defaultImageSet.hyperlink = {};
	        }
	    };

	    this.$bookmarkTextInput.on('input', setHyperlinkInput);
	    this.$bookmarkListSelect.on('change', setHyperlinkInput);

	    this.$urlTextInput.on('input', setHyperlinkInput);
	    this.$urlInput.on('input', setHyperlinkInput);
	    this.$urlTitleInput.on('input', setHyperlinkInput);
	    this.$urlTargetSelect.on('change', setHyperlinkInput);
	    this.$urlIdInput.on('input', setHyperlinkInput);
	    this.$urlClassInput.on('input', setHyperlinkInput);

	    this.$linkType.on('change', function(){
	        var linkType = _this.$linkType.val();

	        if (linkType === 'url') {
	            _this.$urlWrap.show();
	            _this.$bookmarkWrap.hide();

	            if (_this.defaultImageSet.hyperlink.type) {
	                setHyperlinkInput();
	            }
	        } else if (linkType === 'bookmark'){
	            _this.$urlWrap.hide();
	            _this.$bookmarkWrap.show();
	            setHyperlinkInput();
	        }
	    });
	};

	ImageDialog.prototype.setCommonClearInput = function() {
	    this.titleNode.html(window.kukuResource.imageDialog.insert_title);

	    this.tabCommon.addClass('kk_tab_menu_on');
	    this.tabHyperlink.removeClass('kk_tab_menu_on');
	    this.tabCommonContents.addClass('kk_tab_contents_on');
	    this.tabHyperlinkContents.removeClass('kk_tab_contents_on');

	    var initDialogValue = this.router.options.setInitDialogValue.image;
	    if(!initDialogValue) {
	        initDialogValue = {
	            width: null,
	            height: null,
	            className: null,
	            ml:null,
	            mr:null,
	            mt:null,
	            mb:null
	        }
	    }

	    if ($.browser.msie && $.browser.version < 11) {
	        var clone = this.$fileInput[0].cloneNode(true);
	        this.$fileInput[0].parentNode.replaceChild(clone, this.$fileInput[0]);
	        this.$fileInput = $(clone);
	        this.setFileUploadEvent();
	    } else {
	        this.$fileInput.val('');
	    }


	    this.$pathInput.val('');

	    this.imageTitleInput.val('');
	    this.imageAltInput.val('');

	    this.widthInput.val(initDialogValue.width);
	    this.heightInput.val(initDialogValue.height);

	    this.marginLeftInput.val(initDialogValue.ml);
	    this.marginRightInput.val(initDialogValue.mr);
	    this.marginTopInput.val(initDialogValue.mt);
	    this.marginBottomInput.val(initDialogValue.mb);

	    this.alignSelect[0].selectedIndex = 0;
	    this.borderTypeSelect[0].selectedIndex = 0;

	    this.borderColorPicker.css('backgroundColor', '');
	    this.borderWidthInput.val('');

	    this.imageIdInput.val('');
	    this.imageClassNameInput.val(initDialogValue.className);

	    this.defaultSizeCheck[0].checked = false;
	    this.nextInsertCheck[0].checked = false;
	    this.nextInsertCheck.parent().show();
	};

	ImageDialog.prototype.setDefaultPropertiesData = function(initData) {
	    var initDialogValue = this.router.options.setInitDialogValue.image;
	    if(!initDialogValue) {
	        initDialogValue = {
	            width: null,
	            height: null,
	            className: null,
	            ml:null,
	            mr:null,
	            mt:null,
	            mb:null
	        }
	    }

	    this.defaultImageSet = {
	        isModify : false,
	        imageSrc : null,
	        imageTitle : null,
	        imageAlt : null,
	        width : (initDialogValue && initDialogValue.width) || null,
	        height : (initDialogValue && initDialogValue.height) || null,
	        margin : {
	            left : (initDialogValue && initDialogValue.ml) || null,
	            right : (initDialogValue && initDialogValue.mr) || null,
	            top : (initDialogValue && initDialogValue.mt) || null,
	            bottom : (initDialogValue && initDialogValue.mb) || null
	        },
	        align : null,
	        borderType : null,
	        borderWidth : null,
	        borderColor : null,
	        id : null,
	        className : (initDialogValue && initDialogValue.className) || null,

	        //Option
	        hyperlink : {
	            // type : '', // url || bookmark
	            // text : '',
	            // url : '',
	            //
	            // title : '',
	            // target : '',
	            // id : '',
	            // className : ''
	        }
	    };

	    if (initData) {
	        this.titleNode.html(window.kukuResource.imageDialog.title_modify);

	        if (initData.type === 'modify') {
	            this.defaultImageSet.isModify = true;
	        }

	        if (initData.imageSrc) {
	            this.$pathInput.val(initData.imageSrc);
	            this.defaultImageSet.imageSrc = initData.imageSrc;
	        }

	        if (initData.imageTitle) {
	            this.imageTitleInput.val(initData.imageTitle);
	        }

	        if (initData.imageAlt) {
	            this.imageAltInput.val(initData.imageAlt);
	        }

	        if (initData.width) {
	            this.widthInput.val(initData.width);
	            this.defaultImageSet.width = initData.width;
	        }

	        if (initData.height) {
	            this.heightInput.val(initData.height);
	            this.defaultImageSet.height = initData.height;
	        }

	        if (initData.margin) {
	            if (initData.margin.left) {
	                this.marginLeftInput.val(initData.margin.left);
	            }

	            if (initData.margin.right) {
	                this.marginRightInput.val(initData.margin.right);
	            }

	            if (initData.margin.top) {
	                this.marginTopInput.val(initData.margin.top);
	            }

	            if (initData.margin.bottom) {
	                this.marginBottomInput.val(initData.margin.bottom);
	            }
	        }

	        if (initData.align) {
	            this.alignSelect.val(initData.align);
	        }

	        if (initData.borderType) {
	            this.borderTypeSelect.val(initData.borderType);
	        }

	        if (initData.borderWidth) {
	            this.borderWidthInput.val(initData.borderWidth);
	        }

	        if (initData.borderColor) {
	            this.borderColorPicker.css('backgroundColor', initData.borderColor);
	        }

	        if (initData.id) {
	            this.imageIdInput.val(initData.id);
	        }

	        if (initData.className) {
	            this.imageClassNameInput.val(initData.className);
	        }

	        if (initData.hyperlink) {
	            if (initData.hyperlink.type == 'bookmark') {
	                this.$linkType.val('bookmark');
	                this.$urlWrap.hide();
	                this.$bookmarkWrap.show();

	                if (initData.hyperlink.text) {
	                    this.$bookmarkTextInput.val(initData.hyperlink.text);
	                }

	                if (initData.hyperlink.url) {
	                    this.$bookmarkListSelect.val(initData.hyperlink.url);
	                    this.defaultImageSet.hyperlink.url = initData.hyperlink.url;
	                }
	            } else if (initData.hyperlink.type == 'url'){
	                this.$linkType.val('url');
	                this.$urlWrap.show();
	                this.$bookmarkWrap.hide();

	                if (initData.hyperlink.text) {
	                    this.$urlTextInput.val(initData.hyperlink.text);
	                }

	                if (initData.hyperlink.url) {
	                    this.$urlInput.val(initData.hyperlink.url);
	                    this.defaultImageSet.hyperlink.url = initData.hyperlink.url;
	                }

	                if (initData.hyperlink.title) {
	                    this.$urlTitleInput.val(initData.hyperlink.title);
	                }

	                if (initData.hyperlink.target) {
	                    this.$urlTargetSelect.val(initData.hyperlink.target);
	                }

	                if (initData.hyperlink.id) {
	                    this.$urlIdInput.val(initData.hyperlink.id);
	                }

	                if (initData.hyperlink.className) {
	                    this.$urlClassInput.val(initData.hyperlink.className);
	                }
	            }
	        }

	        this.nextInsertCheck.parent().hide();
	    }
	};

	ImageDialog.prototype.resetFields = function(initData) {
	    this.widthInput[0].disabled = false;
	    this.heightInput[0].disabled = false;

	    this.setCommonClearInput();
	    this.setHyperlinkClearInput();

	    this.$urlTextInput.closest('tr').hide();
	    this.$bookmarkTextInput.closest('tr').hide();

	    this.setDefaultPropertiesData(initData);
	};

	ImageDialog.prototype.openDialog = function(initData){
	    this.$dialogNode.find(".kk_dialog").hide();
	    var $dialog = this.$dialogNode.find(".kk_dialog_image");
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.resetFields(initData);

	    this.setDialogPosition($dialog);
	};

	module.exports = ImageDialog;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function _AbstractUploadDialog(){}

	_AbstractUploadDialog.prototype.ie_ajax_upload = function ($iframe, $form, $fileInput, url, callbackFn){

	    var _this = this;
	    _this.$loadingImage.show();

	    $form.attr("action", url);
	    $form.attr("method", "post");

	    $form.attr("encoding", "multipart/form-data");
	    $form.attr("enctype", "multipart/form-data");

	    $form.attr("target", Define.NAME.POST_IFRAME);
	    $form.attr("file", $fileInput.val());
	    $form.submit();

	    $iframe.on('load', function(){
	        setTimeout(function(){
	            if (callbackFn) {
	                try {
	                    var jsonData = JSON.parse($iframe[0].contentWindow.document.body.textContent);
	                    callbackFn(jsonData);

	                } catch (exception) {
	                    callbackFn({
	                        isError : true,
	                        msg : window.kukuResource.alertMessage.uploadUnknownErrorMessage
	                    });
	                }
	            } else {
	                $iframe.remove();
	            }

	            _this.$loadingImage.hide();
	            $form[0].reset();
	        }, 500);
	    });

	    return false;
	};

	_AbstractUploadDialog.prototype.setUpload = function(inputNode, uploadType, file, url, successFn, errorFn) {
	    var percentage = 0;

	    var progressStyleFn = this.getProgressStyleFunction(inputNode);

	    var xhrFn = function () {
	        var xhr = $.ajaxSettings.xhr();
	        xhr.onprogress = function (e) {
	            // For downloads
	            if (e.lengthComputable) {
	                // console.log(e.loaded / e.total);
	            }
	        };

	        xhr.upload.onprogress = function (e) {
	            // For uploads
	            if (e.lengthComputable) {
	                if (e.loaded / e.total === 1 && percentage === 0) {
	                    var interval = setInterval(function(){
	                        percentage += 10;

	                        progressStyleFn(percentage);

	                        if (percentage > 100) {
	                            clearInterval(interval);
	                        }
	                    }, 50);
	                } else {
	                    percentage = (e.loaded / e.total) * 100;
	                    progressStyleFn(percentage);
	                }
	            }
	        };

	        return xhr;
	    };

	    var formData = new FormData();

	    formData.append(uploadType, file);

	    Util.doUploadData(url, formData, successFn, errorFn, xhrFn);

	    this.$fileInput.val('');
	};

	_AbstractUploadDialog.prototype.doFileUpload = function(uploadType, url, callbackFn) {
	    var _this = this;

	    if (typeof window.FormData === 'undefined' ){

	        if (!this.$loadingImage) {
	            this.$loadingImage = $('<img class="upload_loading" />');
	            this.$dNode.append(this.$loadingImage);
	        }

	        this.$loadingImage.hide();

	        var IE_AJAX_UPLOAD = function(){
	            var $iframe = $('<iframe name="postiframe" class="postiframe" style="display: none"></iframe>');

	            if (!_this.$form) {
	                _this.$form = _this.$dNode.find(".uploadForm");
	            }

	            $("body").append($iframe);

	            setTimeout(function(){
	                try {
	                    _this.ie_ajax_upload($iframe, _this.$form, _this.$fileInput, url, function(data){
	                        $iframe.remove();
	                        callbackFn(data);
	                    });
	                } catch (exception) {
	                    $iframe.remove();
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(window.kukuResource.alertMessage.uploadUnknownErrorMessage);
	                }

	            }, 10);
	        };

	        IE_AJAX_UPLOAD();

	    } else {
	        if (!_this.$fileInput[0].files.length) {
	            return;
	        }

	        var file = _this.$fileInput[0].files[0];

	        var fileName = file.name;

	        var splits = fileName.split('.');
	        var ext = splits[splits.length - 1];

	        ext = ext.toLowerCase();

	        switch (uploadType) {
	            case Define.NAME.UPLOAD_IMAGE_TYPE:
	                if ($.inArray(ext, Define.IMAGE_TYPE_FILES) == -1) {
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(Define.IMAGE_TYPE_FILES.join(",") + window.kukuResource.alertMessage.fileTypeErrorMessage);
	                    return;
	                }

	                break;

	            case Define.NAME.UPLOAD_VIDEO_TYPE:
	                if ($.inArray(ext, Define.VIDEO_TYPE_FILES) == -1) {
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(Define.VIDEO_TYPE_FILES.join(",") + window.kukuResource.alertMessage.fileTypeErrorMessage);
	                    return;
	                }

	                break;

	            case Define.NAME.UPLOAD_FILE_TYPE:
	                if ($.inArray(ext, Define.FILE_TYPE_FILES) == -1) {
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(Define.FILE_TYPE_FILES.join(",") + window.kukuResource.alertMessage.fileTypeErrorMessage);
	                    return;
	                }

	                break;

	            default:
	                _this.$dom.selection.restoreRange();
	                _this.$dom.selection.editorBlur();
	                alert(window.kukuResource.alertMessage.invalidFileErrorMessage);
	                return;

	                break;
	        }


	        var size = file.size;
	        var byteLimitSize = _this.router.options.byteLimitSize ? _this.router.options.byteLimitSize : Define.BYTE_LIMIT_SIZE;
	        var limitSizeText = _this.router.options.limitSizeText ? _this.router.options.limitSizeText : Define.LIMIT_SIZE_TEXT;

	        if (size > byteLimitSize) {
	            _this.$dom.selection.restoreRange();
	            _this.$dom.selection.editorBlur();
	            alert(limitSizeText + window.kukuResource.alertMessage.fileLimitErrorMessage);
	            return;
	        }

	        _this.setUpload(_this.$pathInput, uploadType, file, url, callbackFn, callbackFn);
	    }
	};





	_AbstractUploadDialog.prototype.getProgressStyleFunction = function(inputNode) {
	    return function(percentage){
	        var black = percentage;
	        var white = 0;

	        var style = '';

	        if (black <= 100) {
	            style += '' +
	                'background: -webkit-linear-gradient(left, #dddddd ' + black + '%, #ffffff ' + white + '%);' +
	                'background: -moz-linear-gradient(left, #dddddd ' + black + '%, #ffffff ' + white + '%);' +
	                'background: -ms-linear-gradient(left, #dddddd ' + black + '%, #ffffff ' + white + '%);' +
	                'background: linear-gradient(left, #dddddd ' + black + '%, #ffffff ' + white + '%);';
	        }

	        inputNode.attr('style', style);
	    };
	};

	module.exports = _AbstractUploadDialog;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);

	function HorizontalDialog(editorElement, $domObject, router) {
	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.editorContentView = router.editorObject.editorContentView;
	    this.router = router;
	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.selInfo = null;

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_horizontal">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">' + window.kukuResource.horizontalDialog.insert_title + '</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_contents_row">' +
	                    '<table>' +
	                        '<colgroup>' +
	                            '<col style="width:20%;">' +
	                            '<col style="width:30%;">' +
	                            '<col style="width:20%;">' +
	                            '<col style="width:30%;">' +
	                        '</colgroup>' +
	                        '<tbody>' +
	                            '<tr>' +
	                                '<td class="kk_dialog_td_label">'  + window.kukuResource.horizontalDialog.horizontal_width + '(px)</td>' +
	                                '<td class="kk_dialog_td_input">' + '<input type="text" value="" class="kk_hr_width input_sm" /></td>' +
	                                '<td class="kk_dialog_td_label">'  + window.kukuResource.horizontalDialog.horizontal_height + '(px)</td>' +
	                                '<td class="kk_dialog_td_input">' + '<input type="text" value="" class="kk_hr_height input_sm" /></td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="kk_dialog_td_label">'  + window.kukuResource.horizontalDialog.horizontal_background_color + '</td>' +
	                                '<td class="kk_dialog_td_input">' + '<div class="kk_dialog_color_picker"/>' + '</td>' +
	                                '<td class="kk_dialog_td_label">'  + window.kukuResource.horizontalDialog.horizontal_align + '</td>' +
	                                '<td class="kk_dialog_td_input">' +
	                                    '<select class="kk_dialog_align_select">' +
	                                        '<option value="default">' + window.kukuResource.horizontalDialog.horizontal_align_default + '</option>' +
	                                        '<option value="left">' + window.kukuResource.horizontalDialog.horizontal_align_left + '</option>' +
	                                        '<option value="center">' + window.kukuResource.horizontalDialog.horizontal_align_center + '</option>' +
	                                        '<option value="right">' + window.kukuResource.horizontalDialog.horizontal_align_right + '</option>' +
	                                    '</select>' +
	                                '</td>' +
	                            '</tr>' +
	                        '</tbody>' +
	                    '</table>' +
	                '</div>' +
	                '<div class="kk_contents_row">' +
	                    '<table class="kk_hr_Template">' +
	                        '<colgroup>' +
	                            '<col style="width:33%;">' +
	                            '<col style="width:33%;">' +
	                            '<col style="width:33%;">' +
	                        '</colgroup>' +
	                        '<tbody>' +
	                            '<tr>' +
	                                '<td>' + '<hr style="height: 1px; color: #0027ff; background-color: #0027ff; border: none;"/>' + '</td>' +
	                                '<td>' + '<hr style="height: 0px; border-top: #ff009f 1px dashed; border-left: none; border-right: none; border-bottom: none;"/>' + '</td>' +
	                                '<td>' + '<hr style="height: 8px; color: #ffe4e4; background-color: #ffe4e4; border-top: #ff0000 2px dotted;border-bottom: #ff0000 2px dotted; border-right: none; border-left: none;"/>' + '</td>' +
	                            '</tr>' +

	                            '<tr>' +
	                                '<td>' + '<hr style="height: 8px;color: #d8d8d8; background-color: #d8d8d8;border-top: 1px dotted #003fff;border-bottom: 1px dotted #003fff;border-left: none;border-right: none;"/>' + '</td>' +
	                                '<td>' + '<hr style="height: 2px;color: #9e84b9; background-color: #9e84b9;border-top: #5c00ff 1px solid;border-bottom: none;border-left: none;border-right: none;"/>' + '</td>' +
	                                '<td>' + '<hr style="height: 7px;color: #d8f3dd; background-color: #d8f3dd;border-top: #353d3e 3px double;border-bottom: #353d3e 1px solid;border-left: none;border-right: none;"/>' + '</td>' +
	                            '</tr>' +

	                            '<tr>' +
	                                '<td>' + '<hr style="height: 5px;color: #2ae8e8; background-color: #2ae8e8;border-top: #9983d4 2px dashed;border-bottom: #9983d4 1px dashed;border-left: none;border-right: none;"/>' + '</td>' +
	                                '<td>' + '<hr style="height: 8px;color: #fdd8d8; background-color: #fdd8d8;border-top: #d477cb 2px solid;border-bottom: #d477cb 3px double;border-left: none;border-right: none;"/>' + '</td>' +
	                                '<td>' + '<hr style="height: 5px;color: #d8ffb5; background-color: #d8ffb5;border-top: #b03370 1px dashed;border-bottom: #6eb033 1px dashed;border-left: none;border-right: none;"/>' + '</td>' +
	                            '</tr>' +

	                            '<tr>' +
	                                '<td>' + '<hr style="height: 8px;color: #ffe6e6; background-color: #ffe6e6;border-top: #65bbe8 1px solid;border-bottom: #65bbe8 2px solid;border-left: none;border-right: none;"/>' + '</td>' +
	                                '<td>' + '<hr style="height: 8px;color: #d9d1ff; background-color: #d9d1ff;border-top: #cf5858 1px dashed;border-bottom: #cf5858 1px dashed;border-left: none;border-right: none;"/>' + '</td>' +
	                                '<td>' + '<hr style="height: 8px;color: #ddffc0;background-color: #ddffc0;border-top: #896ace 2px solid;border-bottom: #896ace 1px solid;border-left: none;border-right: none;"/>' + '</td>' +
	                            '</tr>' +

	                        '</tbody>' +
	                    '</table>' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(HorizontalDialog.prototype, new AbstractDialog());

	HorizontalDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$dialogTitle = this.$dNode.find('.kk_dialog_title');

	    this.$templateField = this.$dNode.find('table.kk_hr_Template');

	    this.$widthInput = this.$dNode.find('.kk_hr_width');
	    this.$heightInput = this.$dNode.find('.kk_hr_height');
	    this.$colorPicker = this.$dNode.find('.kk_dialog_color_picker');
	    this.$alignSelect = this.$dNode.find('.kk_dialog_align_select');

	    this.$templateNode = this.$templateField.find('td');

	    this.isModify = false;

	    this.setEvent();
	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	HorizontalDialog.prototype.parseIntValue = function(properties, name, inputNode) {

	    var value = inputNode.val();

	    var intValue = parseInt(value);

	    if (isNaN(intValue)) {
	        properties[name] = null;
	        inputNode.val('');
	    } else {
	        properties[name] = intValue;
	        inputNode.val(intValue);
	    }
	};

	HorizontalDialog.prototype.setEvent = function() {
	    var _this = this;

	    this.$colorPicker.kkColorPicker({
	        callback : function(e, data){
	            _this.$colorPicker.css("background-color", data.color);
	            _this.$colorPicker.find(".ui_colorpicker").hide();
	        }
	    });

	    this.$templateNode.on('click', function(e){
	        var $target = $(this);

	        if ($target.hasClass('selected_item')) {
	            $target.removeClass('selected_item');

	            _this.$colorPicker.css('background-color', '#000');
	            _this.$heightInput.val('');

	            return;
	        }

	        _this.$templateNode.removeClass('selected_item');

	        $target.addClass('selected_item');

	        var $hrNode = $target.find('hr');

	        var backgroundColor = $hrNode.css('background-color');
	        var height = $hrNode.height();

	        _this.$colorPicker.css('background-color', backgroundColor);
	        _this.$heightInput.val(height);
	    });


	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){

	                var $hrNode = null;

	                var color = _this.$colorPicker.css('background-color');
	                var width = _this.$widthInput.val() || '';
	                var height = _this.$heightInput.val() || '';
	                var align = _this.$alignSelect.val();

	                var $templateSelectNode = _this.$templateField.find('.selected_item');

	                if ($templateSelectNode.length) {
	                    $hrNode = $templateSelectNode.find('hr').clone();
	                } else {
	                    if (_this.isModify) {
	                        $hrNode = _this.$dom.selection.getModifyTargetNode();

	                        if (!$hrNode || !$hrNode.length) {
	                            $hrNode = $('<hr>');

	                            $hrNode.css({
	                                color : color,
	                                border : 'currentColor'
	                            });
	                        }

	                    } else {
	                        $hrNode = $('<hr>');

	                        $hrNode.css({
	                            color : color,
	                            border : 'currentColor'
	                        });

	                        if (!height) {
	                            height = 1;
	                        }
	                    }
	                }

	                $hrNode.css({
	                    backgroundColor : color,
	                    width : width,
	                    height : height
	                });

	                var styleString = $hrNode.attr('style');

	                var opSources = [];

	                var opSource = {
	                    type : _this.isModify ? "update" : "create",
	                    name : "horizontal",
	                    value : {
	                        style : styleString,
	                        align : (align == 'default' ? '' : align)
	                    }
	                };

	                opSources.push(opSource);

	                _this.router.doOperation(opSources);

	                if (_this.isModify) {
	                    _this.$dom.selection.removeModifyTargetNode();
	                }

	                _this.closeDialog();
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){

	                if (_this.isModify) {
	                    _this.$dom.selection.removeModifyTargetNode();
	                }

	                _this.closeDialog();
	            });
	        }
	    });
	};

	HorizontalDialog.prototype.resetFields = function(initData) {
	    this.$widthInput.val('');
	    this.$heightInput.val('');
	    this.$colorPicker.css('backgroundColor', '');
	    this.$alignSelect[0].selectedIndex = 0;

	    this.$templateNode.removeClass('selected_item');
	    this.$templateField.show();

	    this.isModify = false;

	    this.$dialogTitle.html(window.kukuResource.horizontalDialog.insert_title);

	    if (initData) {
	        this.$dialogTitle.html(window.kukuResource.horizontalDialog.modify_title);

	        this.isModify = true;

	        this.$templateField.hide();

	        if (initData.backgroundColor) {
	            this.$colorPicker.css('backgroundColor', initData.backgroundColor);
	        }

	        if (initData.width) {
	            this.$widthInput.val(initData.width);
	        }

	        if (initData.height) {
	            this.$heightInput.val(initData.height);
	        }

	        if (initData.align) {
	            this.$alignSelect.val(initData.align);
	        }
	    }
	};

	HorizontalDialog.prototype.openDialog = function(initData){

	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_horizontal");
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.resetFields(initData);

	    this.setDialogPosition($dialog);
	};

	module.exports = HorizontalDialog;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);
	var _AbstractUploadDialog = __webpack_require__(50);

	var Define = __webpack_require__(3);

	function BackgroundImageDialog(editorElement, $domObject, router) {
	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.$editorContentView = router.editorObject.editorContentView;
	    this.$previewContents = this.editorElement.find(".kk_previewContents");
	    this.previewDocument = null;
	    this.$preview = null;

	    if (this.$previewContents.length) {
	        if (this.$previewContents[0].contentWindow && this.$previewContents[0].contentWindow.document) {
	            this.previewDocument = this.$previewContents[0].contentWindow.document;
	        }

	        if (this.previewDocument) {
	            this.$preview = $(this.previewDocument.body);
	        }
	    }

	    this.router = router;
	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.selInfo = null;

	    this.defaultImageSet = null;

	    this.defaultErrorImageSrc = "";

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_bgImg">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">' + window.kukuResource.backgroundImageDialog.title + '</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_contents_row">' +
	                    '<div>' +
	                        '<table>' +
	                            '<colgroup>' +
	                                '<col style="width:20%;">' +
	                                '<col style="width:30%;">' +
	                                '<col style="width:20%;">' +
	                                '<col style="width:30%;">' +
	                            '</colgroup>' +
	                            '<tbody>' +
	                                '<tr>' +
	                                    '<td class="kk_dialog_td_label">' + window.kukuResource.backgroundImageDialog.background_image + '</td>' +
	                                    '<td class="kk_dialog_td_input" colspan="3">' +
	                                        '<input type="text" class="kk_file_open_path_input">' + '<label class="kk_dialog_button kk_file_open_input_label">' + window.kukuResource.backgroundImageDialog.file_input_label  + '</label>' +

	                                        (typeof window.FormData === 'undefined' ? '<form class="uploadForm" method="post" enctype="multipart/form-data" action="">' : '') +
	                                        '<input name="image_type" type="file" accept="' + '.' + Define.IMAGE_TYPE_FILES.join(',.') + '" class="kk_file_open_input">' +
	                                        (typeof window.FormData === 'undefined' ? '</form>' : '') +

	                                    '</td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td class="kk_dialog_td_label">'  + window.kukuResource.backgroundImageDialog.background_attachment + '</td>' +
	                                    '<td class="kk_dialog_td_input">' +
	                                        '<select class="kk_dialog_attachment_select">' +
	                                            '<option value="default">' + window.kukuResource.backgroundImageDialog.attachment_default + '</option>' +
	                                            '<option value="scroll">' + window.kukuResource.backgroundImageDialog.attachment_scroll + '</option>' +
	                                            '<option value="fixed">' + window.kukuResource.backgroundImageDialog.attachment_fixed + '</option>' +
	                                        '</select>' +
	                                    '</td>' +
	                                    '<td class="kk_dialog_td_label">'  + window.kukuResource.backgroundImageDialog.background_position_x + '</td>' +
	                                    '<td class="kk_dialog_td_input">' + '<input type="text" value="" class="input_sm kk_pos_x" /> px</td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td class="kk_dialog_td_label">'  + window.kukuResource.backgroundImageDialog.background_repeat_label + '</td>' +
	                                    '<td class="kk_dialog_td_input">' +
	                                        '<select class="kk_dialog_repeat_select">' +
	                                            '<option value="default">' + window.kukuResource.backgroundImageDialog.background_repeat_default + '</option>' +
	                                            '<option value="no-repeat">' + window.kukuResource.backgroundImageDialog.background_no_repeat + '</option>' +
	                                            '<option value="repeat">' + window.kukuResource.backgroundImageDialog.background_repeat + '</option>' +
	                                            '<option value="repeat-x">' + window.kukuResource.backgroundImageDialog.background_repeat_x + '</option>' +
	                                            '<option value="repeat-y">' + window.kukuResource.backgroundImageDialog.background_repeat_y + '</option>' +
	                                        '</select>' +
	                                    '</td>' +
	                                    '<td class="kk_dialog_td_label">'  + window.kukuResource.backgroundImageDialog.background_position_y + '</td>' +
	                                    '<td class="kk_dialog_td_input">' + '<input type="text" value="" class="input_sm kk_pos_y" /> px</td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td class="kk_dialog_td_label">' + window.kukuResource.backgroundImageDialog.background_color + '</td>' +
	                                    '<td class="kk_dialog_td_input">' + '<div class="kk_dialog_color_picker"/>' + '</td>' +
	                                    '<td class="kk_dialog_td_label">' + window.kukuResource.backgroundImageDialog.background_clear + '</td>' +
	                                    '<td class="kk_dialog_td_input">' + '<label><input type="checkbox" value="" class="kk_dialog_clear_checkbox" /></label>' + '</td>' +
	                                '</tr>' +
	                            '</tbody>' +
	                        '</table>' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(BackgroundImageDialog.prototype, new AbstractDialog());
	$.extend(BackgroundImageDialog.prototype, new _AbstractUploadDialog());

	BackgroundImageDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){
	                var imageInsertProcess = function() {
	                    if (_this.backgroundClearCheckBox[0].checked) {
	                        _this.$editorContentView.css({
	                            'background-image' : '',
	                            'background-repeat' : '',
	                            'background-position-x' : '',
	                            'background-position-y' : '',
	                            'background-attachment' : '',
	                            'background-color' : ''
	                        });

	                        if (_this.$preview) {
	                            _this.$preview.css({
	                                'background-image' : '',
	                                'background-repeat' : '',
	                                'background-position-x' : '',
	                                'background-position-y' : '',
	                                'background-attachment' : '',
	                                'background-color' : ''
	                            });
	                        }
	                    } else {
	                        if (_this.defaultBackgroundSet.image) {
	                            _this.$editorContentView.css('background-image', 'url(' + _this.defaultBackgroundSet.image + ')');

	                            if (_this.$preview) {
	                                _this.$preview.css('background-image', 'url(' + _this.defaultBackgroundSet.image + ')');
	                            }

	                            var backgroundImageURL = _this.$editorContentView.css('background-image');

	                            if (backgroundImageURL && backgroundImageURL.length) {
	                                _this.$editorContentView.css('background-image', '');


	                                var contentsStyle = _this.$editorContentView.attr('style');
	                                var previewStyle = _this.$preview ? _this.$preview.attr('style') : '';

	                                _this.$editorContentView.attr('style', contentsStyle + ';' + 'background-image:' + backgroundImageURL + ';');

	                                if (_this.$preview) {
	                                    _this.$preview.css('background-image', '');
	                                    _this.$preview.attr('style', previewStyle + ';' + 'background-image:' + backgroundImageURL + ';');
	                                }

	                                _this.defaultBackgroundSet.image = backgroundImageURL.slice(5, backgroundImageURL.length - 2);
	                            }
	                        }

	                        if (_this.defaultBackgroundSet.attachment) {
	                            _this.$editorContentView.css('background-attachment', _this.defaultBackgroundSet.attachment == 'default' ? '' : _this.defaultBackgroundSet.attachment);

	                            if (_this.$preview) {
	                                _this.$preview.css('background-attachment', _this.defaultBackgroundSet.attachment == 'default' ? '' : _this.defaultBackgroundSet.attachment);
	                            }
	                        }

	                        if (_this.defaultBackgroundSet.repeat) {
	                            _this.$editorContentView.css('background-repeat', _this.defaultBackgroundSet.repeat == 'default' ? '' : _this.defaultBackgroundSet.repeat);

	                            if (_this.$preview) {
	                                _this.$preview.css('background-repeat', _this.defaultBackgroundSet.repeat == 'default' ? '' : _this.defaultBackgroundSet.repeat);
	                            }
	                        }

	                        if (_this.defaultBackgroundSet.positionX !== null) {
	                            _this.$editorContentView.css('background-position-x', (_this.defaultBackgroundSet.positionX || 0) + 'px');

	                            if (_this.$preview) {
	                                _this.$preview.css('background-position-x', (_this.defaultBackgroundSet.positionX || 0) + 'px');
	                            }
	                        }

	                        if (_this.defaultBackgroundSet.positionY !== null) {
	                            _this.$editorContentView.css('background-position-y', (_this.defaultBackgroundSet.positionY || 0) + 'px');

	                            if (_this.$preview) {
	                                _this.$preview.css('background-position-y', (_this.defaultBackgroundSet.positionY || 0) + 'px');
	                            }
	                        }

	                        if (_this.defaultBackgroundSet.backgroundColor !== null) {
	                            _this.$editorContentView.css('background-color', _this.defaultBackgroundSet.backgroundColor);

	                            if (_this.$preview) {
	                                _this.$preview.css('background-color', _this.defaultBackgroundSet.backgroundColor);
	                            }
	                        }
	                    }

	                    _this.closeDialog();
	                };

	                if (_this.defaultBackgroundSet.image) {
	                    $("<img/>").on('load', function(){
	                        imageInsertProcess();
	                    }).on('error', function(){
	                        _this.$dom.selection.restoreRange();
	                        _this.$dom.selection.editorBlur();
	                        alert(window.kukuResource.imageDialog.msg_invalid_image);
	                    }).attr('src', _this.defaultBackgroundSet.image);
	                } else {
	                    imageInsertProcess();
	                }
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setInputEvent();
	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	BackgroundImageDialog.prototype.setInputEvent = function() {
	    var _this = this;


	    ///////////////////// FileUpload Start //////////////////////

	    var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        if(data && !data.isError && data.statusText !== "error") {
	            _this.$pathInput.val(data.url);
	            _this.defaultBackgroundSet.image = data.url;
	        } else {
	            _this.$dom.selection.restoreRange();
	            _this.$dom.selection.editorBlur();
	            alert(data.msg || window.kukuResource.imageDialog.image_upload_error);
	        }

	        _this.$pathInput.attr('style', '');
	    };

	    this.$fileInput = this.$dNode.find('.kk_file_open_input').on('change', function(e){
	        _this.doFileUpload(Define.NAME.UPLOAD_IMAGE_TYPE, url, callbackFn);
	    });

	    ///////////////////// FileUpload End //////////////////////



	    this.imageFileInputLable = this.$dNode.find('.kk_file_open_input_label').on('mousedown', function(e){
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	        _this.stop(e);
	    });

	    this.$pathInput = this.$dNode.find('.kk_file_open_path_input').on('input', function(e){
	        _this.defaultBackgroundSet.image = _this.$pathInput.val();
	    });

	    this.backgroundAttachment = this.$dNode.find('.kk_dialog_attachment_select').on('change', $.proxy(this.selectChange, this));
	    this.backgroundRepeat = this.$dNode.find('.kk_dialog_repeat_select').on('change', $.proxy(this.selectChange, this));

	    this.backgroundPositionX = this.$dNode.find('.kk_pos_x').on('input', $.proxy(this.inputChange, this));
	    this.backgroundPositionY = this.$dNode.find('.kk_pos_y').on('input', $.proxy(this.inputChange, this));

	    this.backgroundColorPicker = this.$dNode.find('.kk_dialog_color_picker');

	    this.$dNode.find(".kk_dialog_color_picker").kkColorPicker({
	        callback : function(e, data){
	            _this.backgroundColorPicker.css("background-color", data.color);
	            _this.backgroundColorPicker.find(".ui_colorpicker" ).hide();

	            _this.defaultBackgroundSet.backgroundColor = data.color;
	        }
	    });

	    this.backgroundClearCheckBox = this.$dNode.find('.kk_dialog_clear_checkbox').on('change', function(e){
	        var isClearCheck = _this.backgroundClearCheckBox[0].checked;

	        if (isClearCheck) {
	            _this.resetFields();
	        }
	    });
	};

	BackgroundImageDialog.prototype.selectChange = function(e){
	    var $element = $(e.target);

	    if ($element.hasClass('kk_dialog_attachment_select')) {
	        this.defaultBackgroundSet.attachment = $element.val();

	    } else if ($element.hasClass('kk_dialog_repeat_select')) {
	        this.defaultBackgroundSet.repeat = $element.val();

	    }
	};

	BackgroundImageDialog.prototype.inputChange = function(e){
	    var $element = $(e.target);
	    var value = parseInt($element.val());

	    if ($element.hasClass('kk_pos_x')) {
	        if (!isNaN(value)) {
	            this.defaultBackgroundSet.positionX = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultBackgroundSet.positionX || '');
	            }
	        }

	    } else if ($element.hasClass('kk_pos_y')) {
	        if (!isNaN(value)) {
	            this.defaultBackgroundSet.positionY = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultBackgroundSet.positionY || '');
	            }
	        }
	    }
	};

	BackgroundImageDialog.prototype.resetFields = function(){
	    this.$pathInput.val('');
	    this.$fileInput.val('');

	    this.backgroundAttachment[0].selectedIndex = 0;
	    this.backgroundRepeat[0].selectedIndex = 0;

	    this.backgroundPositionX.val('');
	    this.backgroundPositionY.val('');

	    this.backgroundColorPicker.css('backgroundColor', '');

	    this.defaultBackgroundSet = {
	        image : null,
	        attachment : null,
	        repeat : null,
	        positionX : null,
	        positionY : null,
	        backgroundColor :null
	    };
	};

	BackgroundImageDialog.prototype.initBackgroundInfomation = function(){
	    var backgroundImageURL = this.$editorContentView.css('background-image');
	    var backgroundImageRepeat = this.$editorContentView.css('background-repeat');
	    var backgroundImagePositionX = this.$editorContentView.css('background-position-x') || '';
	    var backgroundImagePositionY = this.$editorContentView.css('background-position-y') || '';
	    var backgroundImageAttachment = this.$editorContentView.css('background-attachment');
	    var backgroundImageColor = this.$editorContentView.css('background-color');

	    backgroundImageURL = backgroundImageURL.slice(4, -1).replace(/"/gi,'') || null;

	    backgroundImagePositionX = backgroundImagePositionX.replace(/px/gi,'').replace(/%/gi,'');
	    backgroundImagePositionY = backgroundImagePositionY.replace(/px/gi,'').replace(/%/gi,'');

	    if (backgroundImageURL) {
	        this.$pathInput.val(backgroundImageURL);
	    }

	    if (backgroundImageColor) {
	        this.backgroundColorPicker.css('backgroundColor', backgroundImageColor);
	    }

	    if (backgroundImageAttachment) {
	        this.backgroundAttachment.val(backgroundImageAttachment);
	    }

	    if (backgroundImageRepeat) {
	        this.backgroundRepeat.val(backgroundImageRepeat);
	    }

	    if (backgroundImagePositionX) {
	        this.backgroundPositionX.val(backgroundImagePositionX);
	    }

	    if (backgroundImagePositionY) {
	        this.backgroundPositionY.val(backgroundImagePositionY);
	    }
	};

	BackgroundImageDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();
	    var $dialog = this.$dialogNode.find(".kk_dialog_bgImg");
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();
	    this.resetFields();
	    this.initBackgroundInfomation();

	    this.setDialogPosition($dialog);
	};

	module.exports = BackgroundImageDialog;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);
	var _AbstractUploadDialog = __webpack_require__(50);

	var Define = __webpack_require__(3);

	function VideoDialog(editorElement, $domObject, router) {
	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.selInfo = null;

	    this.defaultVideoSet = null;

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_video">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">' + window.kukuResource.videoDialog.insert_title + '</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_contents_row kk_video_type_wrap">' +
	                    '<label>' + window.kukuResource.videoDialog.linkType + '</label>' +
	                    '<select class="kk_video_type_select">' +
	                        '<option value="file">' + window.kukuResource.videoDialog.fileType + '</option>' +
	                        '<option value="source">' + window.kukuResource.videoDialog.sourceType + '</option>' +
	                    '</select>' +
	                '</div>' +
	                '<div class="kk_contents_row kk_video_type_file_contents kk_video_contents_on">' +
	                    '<table>' +
	                        '<colgroup>' +
	                            '<col style="width:20%;">' +
	                            '<col style="width:30%;">' +
	                            '<col style="width:20%;">' +
	                            '<col style="width:30%;">' +
	                        '</colgroup>' +
	                        '<tbody>' +
	                            '<tr>' +
	                                '<td>' +  window.kukuResource.videoDialog.video_url_path + '</td>' +
	                                '<td colspan="3">' +
	                                    '<input type="text" class="kk_file_open_path_input">' +
	                                    '<label class="kk_file_open_input_label kk_dialog_button">' + window.kukuResource.videoDialog.file_input_label  + '</label>' +

	                                    (typeof window.FormData === 'undefined' ? '<form class="uploadForm" method="post" enctype="multipart/form-data" action="">' : '') +
	                                    '<input name="' + Define.NAME.UPLOAD_VIDEO_TYPE + '" type="file" accept="' + '.' + Define.VIDEO_TYPE_FILES.join(',.') + '" class="kk_file_open_input">' +
	                                    (typeof window.FormData === 'undefined' ? '</form>' : '') +

	                                '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' + window.kukuResource.videoDialog.video_width + '(px)</td>' +
	                                '<td>' + '<input type="text" value="" class="input_sm kk_video_type_file_width" /></td>' +
	                                '<td>' + window.kukuResource.videoDialog.video_height + '(px)</td>' +
	                                '<td>' + '<input type="text" value="" class="input_sm kk_video_type_file_height" /></td>' +
	                            '</tr>' +
	                        '</tbody>' +
	                    '</table>' +
	                    '<table class="kk_video_type_file_options_set">' +
	                        '<colgroup>' +
	                            '<col style="width:50%;">' +
	                            '<col style="width:50%;">' +
	                        '</colgroup>' +
	                        '<tbody>' +
	                            '<tr>' +
	                                '<td>' + '<label><input class="kk_video_type_auto_play_check" type="checkbox">' + window.kukuResource.videoDialog.video_auto_play + '</label>' + '</td>' +
	                                '<td>' + '<label><input class="kk_video_type_infinity_loop_check" type="checkbox">' + window.kukuResource.videoDialog.video_infinity_loop + '</label>' + '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' + '<label><input class="kk_video_type_show_display_check" type="checkbox">' + window.kukuResource.videoDialog.video_show_display + '</label>' + '</td>' +
	                                '<td>' + '<label><input class="kk_video_type_show_status_check" type="checkbox">' + window.kukuResource.videoDialog.video_show_status + '</label>' + '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' + '<label><input class="kk_video_type_show_controls_check" type="checkbox">' + window.kukuResource.videoDialog.video_show_controls + '</label>' + '</td>' +
	                                '<td>' + '<label><input class="kk_video_type_show_volume_check" type="checkbox">' + window.kukuResource.videoDialog.video_show_volume + '</label>' + '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' + '<label><input class="kk_video_type_show_tracker_check" type="checkbox">' + window.kukuResource.videoDialog.video_show_tracker + '</label>' + '</td>' +
	                                '<td>' + '<label><input class="kk_video_type_show_position_check" type="checkbox">' + window.kukuResource.videoDialog.video_show_position + '</label>' + '</td>' +
	                            '</tr>' +
	                        '</tbody>' +
	                    '</table>' +
	                '</div>' +
	                '<div class="kk_contents_row kk_video_type_source_contents">' +
	                    '<div class="kk_video_type_source_set">' +
	                        '<p>' + window.kukuResource.videoDialog.video_source_type_notice1 + '</p>' +
	                        '<p>' + window.kukuResource.videoDialog.video_source_type_notice2 + '</p>' +
	                        '<p>' + window.kukuResource.videoDialog.video_source_type_notice3 + '</p>' +
	                    '</div>' +
	                    '<textarea class="kk_video_type_source_textarea"></textarea>' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(VideoDialog.prototype, new AbstractDialog());
	$.extend(VideoDialog.prototype, new _AbstractUploadDialog());


	VideoDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    //TAB Element
	    this.titleNode = this.$dNode.find('.kk_dialog_title');
	    
	    this.videoTypeSelect = this.$dNode.find('.kk_video_type_select');

	    this.fileContents = this.$dNode.find('.kk_video_type_file_contents');
	    this.sourceContents = this.$dNode.find('.kk_video_type_source_contents');

	    this.$fileInput = this.$dNode.find('.kk_file_open_input');
	    this.videoFileInputLable = this.$dNode.find('.kk_file_open_input_label');
	    this.$pathInput = this.$dNode.find('.kk_file_open_path_input');

	    this.videoWidthInput = this.$dNode.find('.kk_video_type_file_width');
	    this.videoHeightInput = this.$dNode.find('.kk_video_type_file_height');

	    this.videoAutoPlayCheck = this.$dNode.find('.kk_video_type_auto_play_check');
	    this.videoShowDisplayCheck = this.$dNode.find('.kk_video_type_show_display_check');
	    this.videoInfinityLoopCheck = this.$dNode.find('.kk_video_type_infinity_loop_check');
	    this.videoShowStatusCheck = this.$dNode.find('.kk_video_type_show_status_check');

	    this.videoShowControlsCheck = this.$dNode.find('.kk_video_type_show_controls_check');
	    this.videoShowTrackerCheck = this.$dNode.find('.kk_video_type_show_tracker_check');
	    this.videoShowVolumeCheck = this.$dNode.find('.kk_video_type_show_volume_check');
	    this.videoShowPositionCheck = this.$dNode.find('.kk_video_type_show_position_check');

	    this.videoSourceTextarea = this.$dNode.find('.kk_video_type_source_textarea');

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("mousedown", function(e){

	                _this.stop(e);

	                _this.defaultVideoSet.videoType = _this.videoTypeSelect.val();

	                if (_this.defaultVideoSet.videoType === 'file' && !_this.defaultVideoSet.videoUrl) {
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(window.kukuResource.videoDialog.msg_invalid_file_url);
	                    return;
	                } else  if (_this.defaultVideoSet.videoType === 'source' && !_this.defaultVideoSet.videoSource){
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(window.kukuResource.videoDialog.msg_invalid_source);
	                    return
	                }

	                var isModify = _this.defaultVideoSet.isModify;

	                if (_this.defaultVideoSet.videoType === 'source') {
	                    var $source = $(_this.defaultVideoSet.videoSource);

	                    var width = $source.css('width') || 300;
	                    _this.defaultVideoSet.width = parseInt(width);

	                    var height = $source.css('height') || 300;
	                    _this.defaultVideoSet.height = parseInt(height);
	                } else {
	                    var isAutostart = _this.videoAutoPlayCheck[0].checked;
	                    var isLoop = _this.videoInfinityLoopCheck[0].checked;
	                    var isShowtracker = _this.videoShowTrackerCheck[0].checked;
	                    var isShowstatusbar = _this.videoShowStatusCheck[0].checked;
	                    var isShowcontrols = _this.videoShowControlsCheck[0].checked;
	                    var isShowaudiocontrols = _this.videoShowVolumeCheck[0].checked;
	                    var isShowdisplay = _this.videoShowDisplayCheck[0].checked;
	                    var isShowpositioncontrols = _this.videoShowPositionCheck[0].checked;

	                    var isPlay = false;
	                    var isMenu = false;
	                    var isAllowfullscreen = false;

	                    if (_this.defaultVideoSet.videoExt == "swf") {
	                        isPlay = true;
	                        isMenu = true;
	                        isAllowfullscreen = true;
	                    }

	                    _this.defaultVideoSet.isAutostart = isAutostart;
	                    _this.defaultVideoSet.isLoop = isLoop;
	                    _this.defaultVideoSet.isShowdisplay = isShowdisplay;
	                    _this.defaultVideoSet.isShowstatusbar = isShowstatusbar;

	                    _this.defaultVideoSet.isShowcontrols = isShowcontrols;
	                    _this.defaultVideoSet.isShowaudiocontrols = isShowaudiocontrols;
	                    _this.defaultVideoSet.isShowtracker = isShowtracker;
	                    _this.defaultVideoSet.isShowpositioncontrols = isShowpositioncontrols;
	                    _this.defaultVideoSet.isPlay = isPlay;
	                    _this.defaultVideoSet.isMenu = isMenu;
	                    _this.defaultVideoSet.isAllowfullscreen = isAllowfullscreen;

	                    if (!_this.defaultVideoSet.isShowcontrols) {
	                        _this.defaultVideoSet.isShowaudiocontrols = false;
	                        _this.defaultVideoSet.isShowtracker = false;
	                        _this.defaultVideoSet.isShowpositioncontrols = false;
	                    }
	                }

	                if (!_this.defaultVideoSet.width) {
	                    _this.defaultVideoSet.width = 300;
	                }

	                if (!_this.defaultVideoSet.height) {
	                    _this.defaultVideoSet.height = 300;
	                }

	                var opSource = {
	                    type : isModify ? "update" : "create",
	                    name : "video",
	                    value : _this.defaultVideoSet
	                };

	                _this.router.doOperation(opSource);

	                if (isModify) {
	                    _this.$dom.selection.removeModifyTargetNode();
	                }

	                _this.closeDialog();
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                var isModify = _this.defaultVideoSet.isModify;

	                if (isModify) {
	                    _this.$dom.selection.removeModifyTargetNode();
	                }

	                _this.closeDialog();
	            });
	        }
	    });

	    this.setInputEvent();
	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	VideoDialog.prototype.parseIntValue = function(properties, name, inputNode) {

	    var value = inputNode.val();

	    var intValue = parseInt(value);

	    if (isNaN(intValue)) {
	        properties[name] = null;
	        inputNode.val('');
	    } else {
	        properties[name] = intValue;
	        inputNode.val(intValue);
	    }
	};



	VideoDialog.prototype.setFileUploadEvent = function() {
	    var _this = this;

	    ///////////////////// FileUpload Start //////////////////////

	    var url = _this.router.options.videoUploadURL || _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        if(data && !data.isError && data.statusText !== "error") {
	            var urlValue = data.url;

	            _this.$pathInput.val(urlValue);
	            _this.defaultVideoSet.videoUrl = urlValue;

	            if (data.fileExt) {
	                _this.defaultVideoSet.videoExt = data.fileExt;
	            } else {
	                var _lastDot = urlValue.lastIndexOf('.');

	                if (_lastDot > -1) {
	                    var _fileExt = urlValue.substring(_lastDot + 1, urlValue.length).toLowerCase();
	                    _this.defaultVideoSet.videoExt = _fileExt;

	                } else {
	                    _this.defaultVideoSet.videoExt = "";
	                }
	            }
	        } else {
	            _this.$dom.selection.restoreRange();
	            _this.$dom.selection.editorBlur();
	            alert(data.msg || window.kukuResource.videoDialog.video_upload_error);
	        }

	        _this.$pathInput.attr('style', '');
	    };

	    this.$fileInput.on('change', function(e){
	        _this.doFileUpload(Define.NAME.UPLOAD_VIDEO_TYPE, url, callbackFn);

	    });

	    ///////////////////// FileUpload End //////////////////////
	};


	VideoDialog.prototype.setInputEvent = function() {
	    var _this = this;

	    this.setFileUploadEvent();

	    this.videoFileInputLable.on('mousedown', function(e){
	        _this.stop(e);
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	    });

	    this.$pathInput.on('input', function(e){
	        var urlValue = _this.$pathInput.val();
	        var _fileExt = '';

	        _this.defaultVideoSet.videoUrl = urlValue;

	        var _lastDot = urlValue.lastIndexOf('.');

	        if (_lastDot > -1) {
	            _fileExt = urlValue.substring(_lastDot + 1, urlValue.length).toLowerCase();
	            _this.defaultVideoSet.videoExt = _fileExt;
	        }

	        _this.defaultVideoSet.videoExt = _fileExt;
	    });

	    this.videoTypeSelect.on('change', function(){
	        if (_this.videoTypeSelect.val() === 'file') {
	            _this.fileContents.addClass('kk_video_contents_on');
	            _this.sourceContents.removeClass('kk_video_contents_on');

	        } else {
	            _this.fileContents.removeClass('kk_video_contents_on');
	            _this.sourceContents.addClass('kk_video_contents_on');
	        }
	    });

	    this.videoWidthInput.on('input', function(){
	        _this.parseIntValue(_this.defaultVideoSet, 'width', _this.videoWidthInput);
	    });

	    this.videoHeightInput.on('input', function(){
	        _this.parseIntValue(_this.defaultVideoSet, 'height', _this.videoHeightInput);
	    });

	    this.videoAutoPlayCheck.on('change', function(){
	        _this.defaultVideoSet.isAutostart = _this.videoAutoPlayCheck[0].checked;
	    });

	    this.videoInfinityLoopCheck.on('change', function(){
	        _this.defaultVideoSet.isLoop = _this.videoInfinityLoopCheck[0].checked;
	    });

	    this.videoShowDisplayCheck.on('change', function(){
	        _this.defaultVideoSet.isShowdisplay = _this.videoShowDisplayCheck[0].checked;
	    });

	    this.videoShowStatusCheck.on('change', function(){
	        _this.defaultVideoSet.isShowstatusbar = _this.videoShowStatusCheck[0].checked;
	    });

	    this.videoShowControlsCheck.on('change', function(){
	        if (!_this.videoShowControlsCheck[0].checked) {
	            _this.videoShowVolumeCheck[0].checked = _this.defaultVideoSet.isShowaudiocontrols = false;
	            _this.videoShowTrackerCheck[0].checked = _this.defaultVideoSet.isShowtracker = false;
	            _this.videoShowPositionCheck[0].checked = _this.defaultVideoSet.isShowpositioncontrols = false;
	        }

	        _this.defaultVideoSet.isShowcontrols = _this.videoShowControlsCheck[0].checked;
	    });

	    this.videoShowVolumeCheck.on('change', function(){
	        if(_this.videoShowVolumeCheck[0].checked && !_this.videoShowControlsCheck[0].checked) {
	            _this.$dom.selection.restoreRange();
	            _this.$dom.selection.editorBlur();
	            alert(window.kukuResource.videoDialog.msg_invalid_control_check);
	            _this.videoShowControlsCheck[0].checked = _this.defaultVideoSet.isShowcontrols = true;
	        }

	        _this.defaultVideoSet.isShowaudiocontrols = _this.videoShowVolumeCheck[0].checked;
	    });

	    this.videoShowTrackerCheck.on('change', function(){
	        if(_this.videoShowTrackerCheck[0].checked && !_this.videoShowControlsCheck[0].checked) {
	            _this.$dom.selection.restoreRange();
	            _this.$dom.selection.editorBlur();
	            alert(window.kukuResource.videoDialog.msg_invalid_control_check);
	            _this.videoShowControlsCheck[0].checked = _this.defaultVideoSet.isShowcontrols = true;
	        }

	        _this.defaultVideoSet.isShowtracker = _this.videoShowTrackerCheck[0].checked;
	    });

	    this.videoShowPositionCheck.on('change', function(){
	        if(_this.videoShowPositionCheck[0].checked && !_this.videoShowControlsCheck[0].checked) {
	            _this.$dom.selection.restoreRange();
	            _this.$dom.selection.editorBlur();
	            alert(window.kukuResource.videoDialog.msg_invalid_control_check);
	            _this.videoShowControlsCheck[0].checked = _this.defaultVideoSet.isShowcontrols = true;
	        }

	        _this.defaultVideoSet.isShowpositioncontrols = _this.videoShowPositionCheck[0].checked;
	    });

	    this.videoSourceTextarea.on('input', function(){
	        _this.defaultVideoSet.videoSource = _this.videoSourceTextarea.val();
	    });
	};

	VideoDialog.prototype.setCommonClearInput = function() {
	    var _this = this;

	    this.titleNode.html(window.kukuResource.videoDialog.insert_title);

	    this.videoTypeSelect[0].selectedIndex = 0;
	    
	    this.fileContents.addClass('kk_video_contents_on');
	    this.sourceContents.removeClass('kk_video_contents_on');


	    if ($.browser.msie && $.browser.version < 11) {
	        var clone = this.$fileInput[0].cloneNode(true);
	        this.$fileInput[0].parentNode.replaceChild(clone, this.$fileInput[0]);
	        this.$fileInput = $(clone);
	        this.setFileUploadEvent();
	    } else {
	        this.$fileInput.val('');
	    }


	    this.$pathInput.val('');

	    this.videoWidthInput.val('');
	    this.videoHeightInput.val('');
	    
	    this.videoAutoPlayCheck[0].checked = false;
	    this.videoInfinityLoopCheck[0].checked = false;
	    this.videoShowTrackerCheck[0].checked = false;
	    this.videoShowStatusCheck[0].checked = false;
	    this.videoShowControlsCheck[0].checked = false;
	    this.videoShowVolumeCheck[0].checked = false;
	    this.videoShowDisplayCheck[0].checked = false;
	    this.videoShowPositionCheck[0].checked = false;

	    this.videoSourceTextarea.val('');
	};

	VideoDialog.prototype.setDefaultPropertiesData = function(initData) {
	    this.defaultVideoSet = {
	        isModify : false,
	        videoType : 'file', //or source
	        videoExt : '',
	        videoUrl : '',
	        videoSource : '',
	        
	        width : null,
	        height : null,

	        isAutostart : false,
	        isLoop : false,
	        isShowtracker : false,
	        isShowstatusbar : false,
	        isShowcontrols : false,
	        isShowaudiocontrols : false,
	        isShowdisplay : false,
	        isShowpositioncontrols : false,

	        isPlay : false,
	        isMenu : false,
	        isAllowfullscreen : false
	    };

	    if (initData) {
	        this.titleNode.html(window.kukuResource.videoDialog.title_modify);

	        if (initData.type === 'modify') {
	            this.defaultVideoSet.isModify = true;
	        }

	        if (initData.videoType) {
	            this.videoTypeSelect.val(initData.videoType);

	            if (initData.videoType === 'file') {
	                this.fileContents.addClass('kk_video_contents_on');
	                this.sourceContents.removeClass('kk_video_contents_on');
	            } else {
	                this.fileContents.removeClass('kk_video_contents_on');
	                this.sourceContents.addClass('kk_video_contents_on');
	            }
	        }

	        if (initData.videoUrl) {
	            this.$pathInput.val(initData.videoUrl);
	            this.defaultVideoSet.videoUrl = initData.videoUrl;
	        }

	        if (initData.videoExt) {
	            this.defaultVideoSet.videoExt = initData.videoExt;
	        }

	        if (initData.videoSource) {
	            this.videoSourceTextarea.val(initData.videoSource);
	            this.defaultVideoSet.videoSource = initData.videoSource;
	        }

	        if (initData.width) {
	            this.videoWidthInput.val(initData.width);
	            this.defaultVideoSet.width = initData.width;
	        }

	        if (initData.height) {
	            this.videoHeightInput.val(initData.height);
	            this.defaultVideoSet.height = initData.height;
	        }

	        if (initData.isAutostart) {
	            this.videoAutoPlayCheck[0].checked = initData.isAutostart;
	        }

	        if (initData.isLoop) {
	            this.videoInfinityLoopCheck[0].checked = initData.isLoop;
	        }

	        if (initData.isShowtracker) {
	            this.videoShowTrackerCheck[0].checked = initData.isShowtracker;
	        }

	        if (initData.isShowstatusbar) {
	            this.videoShowStatusCheck[0].checked = initData.isShowstatusbar;
	        }

	        if (initData.isShowcontrols) {
	            this.videoShowControlsCheck[0].checked = initData.isShowcontrols;
	        }

	        if (initData.isShowaudiocontrols) {
	            this.videoShowVolumeCheck[0].checked = initData.isShowaudiocontrols;
	        }

	        if (initData.isShowdisplay) {
	            this.videoShowDisplayCheck[0].checked = initData.isShowdisplay;
	        }

	        if (initData.isShowpositioncontrols) {
	            this.videoShowPositionCheck[0].checked = initData.isShowpositioncontrols;
	        }

	        if (initData.isPlay) {
	            this.defaultVideoSet.isPlay = initData.isPlay;
	        }

	        if (initData.isMenu) {
	            this.defaultVideoSet.isMenu = initData.isMenu;
	        }

	        if (initData.isAllowfullscreen) {
	            this.defaultVideoSet.isAllowfullscreen = initData.isAllowfullscreen;
	        }
	    }
	};

	VideoDialog.prototype.resetFields = function(initData) {
	    this.setCommonClearInput();
	    this.setDefaultPropertiesData(initData);
	};

	VideoDialog.prototype.openDialog = function(initData){
	    this.$dialogNode.find(".kk_dialog").hide();
	    var $dialog = this.$dialogNode.find(".kk_dialog_video");
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.resetFields(initData);

	    this.setDialogPosition($dialog);
	};

	module.exports = VideoDialog;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);
	var _AbstractUploadDialog = __webpack_require__(50);

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function FileDialog(editorElement, $domObject, router) {
	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.selInfo = null;

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_file">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">' + window.kukuResource.fileDialog.insert_title + '</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_file_dialog_contents">' +
	                    '<table class="kk_file_contents_set">' +
	                        '<colgroup>' +
	                            '<col style="width:20%;">' +
	                            '<col style="width:30%;">' +
	                        '</colgroup>' +
	                        '<tbody>' +
	                            '<tr>' +
	                                '<td class="kk_file_label_wrap">' +  window.kukuResource.fileDialog.file_url_path + '</td>' +
	                                '<td class="kk_file_input_wrap">' +
	                                    '<input type="text" class="kk_file_open_path_input">' +
	                                    '<label class="kk_file_open_input_label kk_dialog_button">' + window.kukuResource.fileDialog.file_input_label  + '</label>' +

	                                    (typeof window.FormData === 'undefined' ? '<form class="uploadForm" method="post" enctype="multipart/form-data" action="">' : '') +
	                                    '<input name="' + Define.NAME.UPLOAD_FILE_TYPE + '" type="file" accept="' + '.' + Define.FILE_TYPE_FILES.join(',.') + '" class="kk_file_open_input">' +
	                                    (typeof window.FormData === 'undefined' ? '</form>' : '') +

	                                '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="kk_file_label_wrap">'  + window.kukuResource.fileDialog.file_text + '</td>' +
	                                '<td class="kk_file_input_wrap">' + '<input type="text" value="" class="kk_file_text_input" /></td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="kk_file_label_wrap">'  + window.kukuResource.fileDialog.file_title + '</td>' +
	                                '<td class="kk_file_input_wrap">' + '<input type="text" value="" class="kk_file_title_input" /></td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="kk_file_label_wrap">'  + window.kukuResource.fileDialog.file_id + '</td>' +
	                                '<td class="kk_file_input_wrap">' + '<input type="text" value="" class="kk_file_id_input" /></td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="kk_file_label_wrap">'  + window.kukuResource.fileDialog.file_class + '</td>' +
	                                '<td class="kk_file_input_wrap">' + '<input type="text" value="" class="kk_file_class_input" /></td>' +
	                            '</tr>' +
	                        '</tbody>' +
	                    '</table>' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(FileDialog.prototype, new AbstractDialog());
	$.extend(FileDialog.prototype, new _AbstractUploadDialog());


	FileDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    //TAB Element
	    this.titleNode = this.$dNode.find('.kk_dialog_title');
	    
	    this.$fileInput = this.$dNode.find('.kk_file_open_input');
	    this.fileInputLable = this.$dNode.find('.kk_file_open_input_label');
	    this.$pathInput = this.$dNode.find('.kk_file_open_path_input');

	    this.fileTextInput = this.$dNode.find('.kk_file_text_input');
	    this.fileTitleInput = this.$dNode.find('.kk_file_title_input');
	    this.fileIdInput = this.$dNode.find('.kk_file_id_input');
	    this.fileClassInput = this.$dNode.find('.kk_file_class_input');

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){

	                var urlInputValue = _this.$pathInput.val();
	                var textInputValue = _this.fileTextInput.val();
	                var titleInputValue = _this.fileTitleInput.val();
	                var targetSelectValue = "_blank";
	                var idInputValue = _this.fileIdInput.val();
	                var classInputValue = _this.fileClassInput.val();

	                if (!urlInputValue) {
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(window.kukuResource.fileDialog.empty_invalid_file_url);
	                    return;
	                }

	                _this.closeDialog();

	                _this.router.doOperation({
	                    type:"create",
	                    name:"hyperlink",
	                    value: {
	                        type : 'url',
	                        text : textInputValue || urlInputValue,
	                        url : urlInputValue,
	                        title : titleInputValue,
	                        target : targetSelectValue,
	                        id : idInputValue,
	                        className : classInputValue,
	                        fileType : true
	                    }
	                });
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setInputEvent();
	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};


	FileDialog.prototype.setFileUploadEvent = function() {
	    var _this = this;

	    ///////////////////// FileUpload Start //////////////////////

	    var url = _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        if(data && !data.isError && data.statusText !== "error") {
	            var urlValue = data.url;

	            _this.$pathInput.val(urlValue);
	        } else {
	            _this.$dom.selection.restoreRange();
	            _this.$dom.selection.editorBlur();
	            alert(data.msg || window.kukuResource.fileDialog.file_upload_error);
	        }

	        _this.$pathInput.attr('style', '');
	    };

	    this.$fileInput.on('change', function(e){
	        _this.doFileUpload(Define.NAME.UPLOAD_FILE_TYPE, url, callbackFn);
	    });

	    ///////////////////// FileUpload End //////////////////////
	};

	FileDialog.prototype.setInputEvent = function() {
	    var _this = this;

	    this.setFileUploadEvent();

	    this.fileInputLable.on('mousedown', function(e){
	        _this.stop(e);
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	    });
	};

	FileDialog.prototype.setCommonClearInput = function() {
	    this.titleNode.html(window.kukuResource.fileDialog.insert_title);

	    if ($.browser.msie && $.browser.version < 11) {
	        var clone = this.$fileInput[0].cloneNode(true);
	        this.$fileInput[0].parentNode.replaceChild(clone, this.$fileInput[0]);
	        this.$fileInput = $(clone);
	        this.setFileUploadEvent();
	    } else {
	        this.$fileInput.val('');
	    }

	    this.$pathInput.val('');

	    this.fileTextInput.val('');
	    this.fileTitleInput.val('');
	    this.fileIdInput.val('');
	    this.fileClassInput.val('');

	    this.fileTextInput.attr(Define.ATTR.READONLY, Define.ATTR.READONLY);
	};

	FileDialog.prototype.resetFields = function() {
	    this.setCommonClearInput();

	    var range = this.$dom.selection.getRange();

	    var selectedHtml = Util.getSelectedHtml(range);

	    var $selectedHtml = $("<div/>").html(selectedHtml);

	    var selectedAnchorLength = $selectedHtml.find('a').length;

	    if (selectedAnchorLength > 1) {
	        return;
	    }

	    var $hyperlinkNode = $(range.startContainer).closest('a');

	    if (!$hyperlinkNode.length) {
	        this.fileTextInput.val($selectedHtml.text());

	        if (this.$dom.selection.isCollapsed()) {
	            this.fileTextInput.removeAttr(Define.ATTR.READONLY);
	        }

	        return;
	    }

	    this.fileTextInput.val($hyperlinkNode.text());

	    if ($hyperlinkNode.attr(Define.ATTR.FILE_TYPE)) {
	        var href = $hyperlinkNode.attr(Define.ATTR.HREF);

	        this.$pathInput.val(href);

	        var title = $hyperlinkNode.attr(Define.ATTR.TITLE) || '';
	        var id = $hyperlinkNode.attr(Define.ATTR.ID) || '';
	        var className = $hyperlinkNode.attr(Define.ATTR.CLASS) || '';

	        this.fileTitleInput.val(title);
	        this.fileIdInput.val(id);
	        this.fileClassInput.val(className);
	    }
	};

	FileDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_file");
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.resetFields();

	    this.setDialogPosition($dialog);
	};

	module.exports = FileDialog;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function LayoutDialog(editorElement, $domObject, router, api) {
	    this.editorElement = $(editorElement);
	    this.editorContentView = router.editorObject.editorContentView;
	    this.router = router;
	    this.$dom = $domObject;
	    this.api = api;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_layout">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">'+ window.kukuResource.layoutDialog.title +'</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_contents_row kk_dialog_layout_item_list">' +
	                    this.getTemplateTableStyle() +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(LayoutDialog.prototype, new AbstractDialog());

	LayoutDialog.prototype.getLayoutHTML = function(type) {

	    var layoutHTML = '';

	    var tableStyle = 'word-break: break-all; word-wrap: break-word; border-collapse: collapse; border: 1px none rgb(0, 0, 0);';
	    var tdStyle = 'vertical-align: middle; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);';
	    var tableWidth = this.router.editorObject.editorContentView.width();

	    switch (type) {
	        case "0" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 100 + 'px;">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + window.kukuResource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 400 + 'px;">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 100 + 'px;">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;

	        case "1" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 100 + 'px;" colspan="2">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + window.kukuResource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 50 + 'px;" colspan="2">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;

	        case "2" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 100 + 'px;" >' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + window.kukuResource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 500 + 'px;" >' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;

	        case "3" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 100 + 'px;" colspan="3">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + window.kukuResource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 500 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 500 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 500 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;

	        case "4" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 100 + 'px;" colspan="3">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + window.kukuResource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 50 + 'px;" colspan="3">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;

	        case "5" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 300 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 300 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 300 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 300 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;
	        case "6" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 200 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 600 + 'px; width: ' + (tableWidth * 0.3) + 'px; " rowspan="2">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 400 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;
	        case "7" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 600 + 'px; width: ' + (tableWidth * 0.3) + 'px; " rowspan="2">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 200 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 400 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;
	        case "8" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;
	        case "9" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 600 + 'px; width: ' + (tableWidth * 0.3) + 'px; " rowspan="4">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + window.kukuResource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;
	        case "10" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + tableWidth + 'px; " colspan="2">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + window.kukuResource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + tableWidth + 'px; " colspan="2">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;
	        case "11" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + tableWidth + 'px; " colspan="2">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + window.kukuResource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + window.kukuResource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;

	    }


	    return layoutHTML;
	};

	LayoutDialog.prototype.getTemplateTableStyle = function() {
	    var tableStyle = '';

	    for(var i = 0, length = 12; i < length; i++) {
	        tableStyle += '<div class="kk_dialog_layout_item kk_dialog_layout_item_seq'+ i +'"></div>';
	    }

	    return tableStyle;
	};

	LayoutDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){
	                //TODO : Table Layout 적용 로직 예정

	                var type = _this.$layoutItems.filter('.selected_item').index();

	                var isNext = false;

	                if (Util.isCheckEmpty(_this.editorContentView)) {
	                    isNext = true;
	                } else {
	                    isNext = confirm(window.kukuResource.layoutDialog.layoutAcceptConfirm);
	                }

	                if (isNext) {
	                    var layoutHTML = _this.getLayoutHTML(type + '');

	                    _this.api.SetEditorContent(layoutHTML);

	                    _this.router.setClearAllHistories();
	                    _this.router.changedUndoRedoButtonEnable();

	                    _this.closeDialog();
	                }
	            });
	        } else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.$layoutItems = this.$dNode.find(".kk_dialog_layout_item").on('click',function(e){
	        var $target = $(e.target);

	        if (!$target.hasClass('kk_dialog_layout_item')){
	            $target = $target.closest('.kk_dialog_layout_item');
	        }

	        if ($target.length) {
	            _this.$layoutItems.removeClass('selected_item');
	            $target.addClass('selected_item');
	        }
	    });


	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	LayoutDialog.prototype.resetFields = function(){
	    this.$layoutItems.removeClass('selected_item');
	    this.$layoutItems.first().addClass('selected_item');
	};

	LayoutDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_layout");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.resetFields();

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	module.exports = LayoutDialog;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);

	function EmoticonDialog(editorElement, $domObject, router) {

	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.selInfo = null;

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_emoticon">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">' + window.kukuResource.emoticonDialog.insert_title + '</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_emoticon_wrapper">' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(EmoticonDialog.prototype, new AbstractDialog());

	EmoticonDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$emoticonWrapper = this.$dNode.find('.kk_emoticon_wrapper');

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        $(this).on("click", function(){
	            _this.closeDialog();
	        });
	    });

	    this.$emoticonWrapper.on('click', function(e){
	        if (e.target == _this.$emoticonWrapper[0]) {
	            return;
	        }

	        var $target = $(e.target);

	        if ($target.is('.kk_emoticon_item')){
	            $target = $target.find('img');
	        }

	        if ($target.is('img')) {
	            var $cloneTarget = $target.clone();
	            $cloneTarget.css({
	                width:'25px',
	                height:'25px'
	            });


	            _this.$dom.selection.setContentEditable(true);
	            _this.$dom.selection.editorFocus();
	            _this.$dom.selection.restoreRange();

	            _this.$dom.selection.execCommand("inserthtml", false, $cloneTarget[0].outerHTML);

	            _this.router.externalSetUndoHistory();
	            _this.router.changedUndoRedoButtonEnable();
	        }

	        _this.closeDialog();
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	EmoticonDialog.prototype.setEmoticonItem = function(){
	    this.$emoticonWrapper.html('');

	    var emoticonList = this.router.options.emoticonList;

	    var emoticonHTML = '';

	    for(var i = 0, length = emoticonList.length; i < length; i++) {
	        emoticonHTML += '<div class="kk_emoticon_item">' + '<img src="' + emoticonList[i] + '">'  + '</div>' ;
	    }
	    this.$emoticonWrapper.html(emoticonHTML);

	    if ($.browser.msie && $.browser.version < 11) {

	        var $emoticonItems = this.$emoticonWrapper.find('.kk_emoticon_item');

	        $emoticonItems.on('mouseenter', function(){
	            $(this).addClass(Define.CLASS.HOVER);
	        }).on('mouseleave', function(){
	            $(this).removeClass(Define.CLASS.HOVER);
	        });
	    }
	};

	EmoticonDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_emoticon");
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.setEmoticonItem();

	    this.setDialogPosition($dialog);
	};

	module.exports = EmoticonDialog;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);

	function TextPasteDialog(editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObject;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_text_paste">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">'+ window.kukuResource.textPasteDialog.title +'</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<textarea class="kk_text_paste_contents">' +
	                '</textarea>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(TextPasteDialog.prototype, new AbstractDialog());

	TextPasteDialog.prototype.initDialog = function(){
	    var _this = this;

	    this.$dNode = $(this.templateHTML);

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){
	                var $textArea = _this.$dNode.find('.kk_text_paste_contents');
	                var value = $textArea.val();

	                if (value == '') {
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(window.kukuResource.textPasteDialog.msg_no_text);
	                    return;
	                }

	                var plainTextToHTML = value.replace(/\n/gi, "<br>");

	                _this.$dom.selection.setContentEditable(true);
	                _this.$dom.selection.editorFocus();
	                _this.$dom.selection.restoreRange();

	                _this.$dom.selection.execCommand("inserthtml", false, plainTextToHTML);

	                _this.router.externalSetUndoHistory();
	                _this.router.changedUndoRedoButtonEnable();

	                _this.closeDialog();
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	TextPasteDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_text_paste");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    var $textArea = $dialog.find('.kk_text_paste_contents');
	    $textArea.val("");

	    this.setDialogPosition($dialog);
	};

	module.exports = TextPasteDialog;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);

	function ParagraphDialog(editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObject;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;

	    this.marginLeft = null;
	    this.marginRight = null;
	    this.marginTop = null;
	    this.marginBottom = null;
	    this.letterSpacing = null;
	    this.wordSpacing = null;

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_paragraph">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">'+ window.kukuResource.paragraphDialog.title +'</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<table>' +
	                    '<colgroup>' +
	                        '<col style="width:40%">' +
	                        '<col style="width:60%">' +
	                    '</colgroup>' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td>' + window.kukuResource.paragraphDialog.margin_left + '</td>' +
	                            '<td><input type="text" id="" class="smartspinner kk_paragraph_margin_left" style="ime-mode:disabled" /></td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td>' + window.kukuResource.paragraphDialog.margin_right + '</td>' +
	                            '<td><input type="text" id="" class="smartspinner kk_paragraph_margin_right" style="ime-mode:disabled" /></td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td>' + window.kukuResource.paragraphDialog.margin_top + '</td>' +
	                            '<td><input type="text" id="" class="smartspinner kk_paragraph_margin_top" style="ime-mode:disabled" /></td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td>' + window.kukuResource.paragraphDialog.margin_bottom + '</td>' +
	                            '<td><input type="text" id="" class="smartspinner kk_paragraph_margin_bottom" style="ime-mode:disabled" /></td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td>' + window.kukuResource.paragraphDialog.letter_spacing + '</td>' +
	                            '<td><input type="text" id="" class="smartspinner kk_paragraph_letter_spacing" style="ime-mode:disabled" /></td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td>' + window.kukuResource.paragraphDialog.word_spacing + '</td>' +
	                            '<td><input type="text" id="" class="smartspinner kk_paragraph_word_spacing" style="ime-mode:disabled" /></td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(ParagraphDialog.prototype, new AbstractDialog());

	ParagraphDialog.prototype.reset = function() {
	    this.marginLeft[0].reset('0');
	    this.marginRight[0].reset('0');
	    this.marginTop[0].reset('0');
	    this.marginBottom[0].reset('0');
	    this.letterSpacing[0].reset('0');
	    this.wordSpacing[0].reset('0');
	};

	ParagraphDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.marginLeft = this.$dNode.find('.kk_paragraph_margin_left').spinit({ height: 30, width: 150, min: 0, initValue: 0, max: 255 }); //mask: 'Red', callback: onred
	    this.marginRight = this.$dNode.find('.kk_paragraph_margin_right').spinit({ height: 30, width: 150, min: 0, initValue: 0, max: 255 });
	    this.marginTop = this.$dNode.find('.kk_paragraph_margin_top').spinit({ height: 30, width: 150, min: 0, initValue: 0, max: 255 });
	    this.marginBottom = this.$dNode.find('.kk_paragraph_margin_bottom').spinit({ height: 30, width: 150, min: 0, initValue: 0, max: 255 });
	    this.letterSpacing = this.$dNode.find('.kk_paragraph_letter_spacing').spinit({ height: 30, width: 150, min: 0, initValue: 0, max: 255 });
	    this.wordSpacing = this.$dNode.find('.kk_paragraph_word_spacing').spinit({ height: 30, width: 150, min: 0, initValue: 0, max: 255 });


	    var keydownEvent = function(event){
	        event = event || window.event;

	        var target = event.target;
	        var keyID = (event.which) ? event.which : event.keyCode;

	        if(keyID == 8 || keyID == 46 || (keyID >= 48 && keyID <= 57 ) || (keyID >= 96 && keyID <= 105) ) {
	            return;
	        } else {
	            _this.stopEvent(event);
	            target.value = target.value.replace(/[\ㄱ-ㅎㅏ-ㅣ가-힣]/g, '');
	            event.resultValue = false;
	            return false;
	        }
	    };

	    var keyupEvent = function(event){
	        event = event || window.event;

	        var target = event.target;
	        var value = parseInt(target.value);

	        target.reset(value);
	    };


	    this.$dNode.find('.smartspinner').on('keydown', keydownEvent).on('keyup', keyupEvent);

	    this.reset();

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){

	                var marginLeft = _this.marginLeft.val();
	                var marginRight = _this.marginRight.val();
	                var marginTop = _this.marginTop.val();
	                var marginBottom = _this.marginBottom.val();
	                var letterSpacing = _this.letterSpacing.val();
	                var wordSpacing = _this.wordSpacing.val();

	                var opSource = {
	                    type : "update",
	                    name : "paragraphMargin",
	                    value : [
	                        {name : 'marginLeft', value : marginLeft},
	                        {name : 'marginRight', value : marginRight},
	                        {name : 'marginTop', value : marginTop},
	                        {name : 'marginBottom', value : marginBottom},
	                        {name : 'letterSpacing', value : letterSpacing},
	                        {name : 'wordSpacing', value : wordSpacing}
	                    ]
	                };

	                _this.router.doOperation(opSource);

	                _this.closeDialog();
	                //적용
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	ParagraphDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_paragraph");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.reset();


	    var paragraphMarginDatas = this.getParagraphMarginData();


	    if (paragraphMarginDatas){
	        if (paragraphMarginDatas.marginLeft) {
	            this.marginLeft[0].reset(paragraphMarginDatas.marginLeft);
	        }

	        if (paragraphMarginDatas.marginRight) {
	            this.marginRight[0].reset(paragraphMarginDatas.marginRight);
	        }

	        if (paragraphMarginDatas.marginTop) {
	            this.marginTop[0].reset(paragraphMarginDatas.marginTop);
	        }

	        if (paragraphMarginDatas.marginBottom) {
	            this.marginBottom[0].reset(paragraphMarginDatas.marginBottom);
	        }

	        if (paragraphMarginDatas.letterSpacing) {
	            this.letterSpacing[0].reset(paragraphMarginDatas.letterSpacing);
	        }

	        if (paragraphMarginDatas.wordSpacing) {
	            this.wordSpacing[0].reset(paragraphMarginDatas.wordSpacing);
	        }
	    }

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	ParagraphDialog.prototype.getParagraphMarginData = function(){
	    var range = this.$dom.selection.getSaveRange();

	    var paragraphMarginDatas = null;
	    var startContainer = range.startContainer;
	    var $startContainer = $(startContainer);

	    var paragraphList = $startContainer.closest(Define.PARAGRAPH_NODES.join(','));

	    if (paragraphList.length == 1) {
	        var paragraph = paragraphList[0];
	        paragraphMarginDatas = {};

	        var $paragraph = $(paragraph);

	        var marginLeft = parseInt($paragraph.css('marginLeft'));
	        if (!isNaN(marginLeft)) { paragraphMarginDatas.marginLeft = marginLeft; }

	        var marginRight = parseInt($paragraph.css('marginRight'));
	        if (!isNaN(marginRight)) { paragraphMarginDatas.marginRight = marginRight; }

	        var marginTop = parseInt($paragraph.css('marginTop'));
	        if (!isNaN(marginTop)) { paragraphMarginDatas.marginTop = marginTop; }

	        var marginBottom = parseInt($paragraph.css('marginBottom'));
	        if (!isNaN(marginBottom)) { paragraphMarginDatas.marginBottom = marginBottom; }

	        var letterSpacing = parseInt($paragraph.css('letterSpacing'));
	        if (!isNaN(letterSpacing)) { paragraphMarginDatas.letterSpacing = letterSpacing; }

	        var wordSpacing = parseInt($paragraph.css('wordSpacing'));
	        if (!isNaN(wordSpacing)) { paragraphMarginDatas.wordSpacing = wordSpacing; }
	    }

	    return paragraphMarginDatas;
	};

	module.exports = ParagraphDialog;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function FileOpenDialog(editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.editorContentView = router.editorObject.editorContentView;

	    this.router = router;
	    this.$dom = $domObject;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_file_open">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">'+ window.kukuResource.openFileDialog.title +'</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_contents_row kk_file_open_path_wrapper">' +
	                    '<label class="kk_file_open_path_label">' +
	                        window.kukuResource.openFileDialog.file_path_label  +
	                    '</label>' +
	                    '<input type="text" disabled="true" class="kk_file_open_path_input">' +
	                    '<label class="kk_dialog_button kk_file_open_input_label">' +
	                        window.kukuResource.openFileDialog.file_input_label  +
	                    '</label>' +
	                    '<input type="file" accept="'  + '.' + Define.HTML_TYPE_FILES.join(',.') + '" class="kk_file_open_input">' +
	                '</div>' +
	                '<div class="kk_contents_row kk_file_open_encoding_wrapper">' +
	                    '<label class="kk_file_open_encoding_label">' +
	                        window.kukuResource.openFileDialog.file_encoding_label  +
	                    '</label>' +
	                    '<select class="kk_file_open_encoding_selection">' +
	                        (function(){
	                            var encodingTypes = window.kukuResource.settingDialog.encodingTypes;

	                            var options = '';

	                            for (var key in encodingTypes){
	                                if (key != 'user') {
	                                    options += '<option value="' + key + '">' + encodingTypes[key] + '</option>';
	                                }
	                            }

	                            return options;
	                        })() +
	                    '</select>' +
	                '</div>' +
	                '<div class="kk_contents_row kk_file_open_valid_wrapper">' +
	                    window.kukuResource.openFileDialog.file_valid_info  +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(FileOpenDialog.prototype, new AbstractDialog());

	FileOpenDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$fileInput = this.$dNode.find('.kk_file_open_input');
	    this.$pathInput = this.$dNode.find('.kk_file_open_path_input');
	    this.$okButton = this.$dNode.find('.ok_button');
	    this.$encodingSelection = this.$dNode.find('.kk_file_open_encoding_selection');

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){

	                if ($button.hasClass('disabled_button')) {
	                    return;
	                }

	                var input = _this.$fileInput[0];

	                if (input.files && input.files.length && input.files[0]) {

	                    var isPass = false;

	                    if (Util.isCheckEmpty(_this.editorContentView)) {
	                        isPass = true;
	                    } else {
	                        isPass = window.confirm(window.kukuResource.openFileDialog.applyConfirmMessage);
	                    }

	                    if (isPass) {
	                        var reader = new FileReader();

	                        reader.onload = function(){
	                            var htmlText = reader.result;

	                            _this.router.fullHtmlParser(htmlText);

	                            setTimeout(function(){
	                                _this.$dom.selection.setFirstCollapse();

	                                _this.router.setClearAllHistories();
	                                _this.router.changedUndoRedoButtonEnable();
	                                _this.router.doStatusHighlight();
	                            }, 10);

	                            _this.$fileInput.val('');
	                            reader.abort();
	                            _this.closeDialog();
	                        };

	                        var encoding = _this.$encodingSelection.val();

	                        if (encoding == 'user') {
	                            encoding = '';
	                        }

	                        reader.readAsText(input.files[0], encoding);
	                    }
	                } else {
	                    _this.closeDialog();
	                }
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.$fileInput.on('change', function(e){
	        _this.stopEvent(e);

	        if (!this.files || !this.files.length) {
	            return;
	        }

	        var file = this.files[0];

	        var fileName = this.files[0].name;

	        var splits = fileName.split('.');
	        var ext = splits[splits.length - 1];

	        if ($.inArray(ext, Define.HTML_TYPE_FILES) == -1) {
	            _this.$okButton.addClass('disabled_button');

	            alert(Define.HTML_TYPE_FILES.join(",") + window.kukuResource.alertMessage.fileTypeErrorMessage);

	            return;
	        }

	        var size = file.size;

	        if (size > Define.BYTE_LIMIT_SIZE) {
	            alert(Define.LIMIT_SIZE_TEXT + window.kukuResource.alertMessage.fileLimitErrorMessage);
	            return;
	        }

	        _this.$okButton.removeClass('disabled_button');

	        var filePath = _this.$fileInput.val();
	        _this.$pathInput.val(filePath);
	    });

	    this.$dNode.find('.kk_file_open_input_label').on('click', function(e){
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	FileOpenDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_file_open");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.$okButton.addClass('disabled_button');
	    this.$pathInput.val('');
	    this.$fileInput.val('');
	    this.$encodingSelection.val(0);

	    this.setDialogPosition($dialog);
	};

	module.exports = FileOpenDialog;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function AutoSaveLoadDialog(editorElement, $domObject, router, api) {
	    this.editorElement = $(editorElement);
	    this.editorContentView = router.editorObject.editorContentView;

	    this.router = router;
	    this.$dom = $domObject;
	    this.api = api;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_auto_save_load">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">'+ window.kukuResource.autoSaveLoadDialog.title +'</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_contents_row kk_dialog_auto_save_wrapper">' +
	                    '<div class="kk_dialog_auto_save_list">' +
	                        '<div class="kk_dialog_list_title">' + window.kukuResource.autoSaveLoadDialog.save_time +'</div>' +
	                        '<div class="kk_dialog_list_item_wrapper"></div>' +
	                    '</div>' +
	                    '<div class="kk_dialog_auto_save_preview">' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.autoSaveLoadDialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button delete_button"><span>' + window.kukuResource.autoSaveLoadDialog.deleteButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.autoSaveLoadDialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(AutoSaveLoadDialog.prototype, new AbstractDialog());

	AutoSaveLoadDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if ($button.hasClass('ok_button')){
	            $button.on("click", function(){
	                if (!$(this).hasClass('disabled_button')) {

	                    var isTrue = false;

	                    if (Util.isCheckEmpty(_this.editorContentView)) {
	                        isTrue = true;
	                    } else {
	                        isTrue = window.confirm(window.kukuResource.autoSaveLoadDialog.autoSaveLoadAcceptConfirm);
	                    }

	                    if (isTrue) {
	                        var $selected_save_item = _this.$dNode.find('.selected_item');

	                        var itemIndex = $selected_save_item.index();

	                        if ( _this.router.editorObject.isAutoSave && _this.router.editorObject.autoSaveList.length) {
	                            var autoSaveInfo = _this.router.editorObject.autoSaveList[itemIndex];

	                            _this.api.SetEditorContent(autoSaveInfo.html);
	                        }

	                        _this.closeDialog();
	                    }

	                }
	            });
	        } else if($button.hasClass('delete_button')){
	            $button.on("click", function(){
	                if (!$(this).hasClass('disabled_button')) {

	                    var $selected_save_item = _this.$dNode.find('.selected_item');

	                    var itemIndex = $selected_save_item.index();

	                    if ( _this.router.editorObject.isAutoSave &&  _this.router.editorObject.autoSaveList.length) {

	                        _this.router.editorObject.autoSaveList.splice(itemIndex, 1);
	                        $selected_save_item.remove();

	                        _this.$previewNode.html('');

	                        _this.$okButtonNode.addClass('disabled_button');
	                        _this.$deleteButtonNode.addClass('disabled_button');
	                    }
	                }
	            });
	        } else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setInitButtons();
	    
	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	AutoSaveLoadDialog.prototype.setInitButtons = function(){
	    var _this = this;

	    this.$itmeWrapper = this.$dNode.find('.kk_dialog_list_item_wrapper');
	    this.$previewNode = this.$dNode.find('.kk_dialog_auto_save_preview');

	    this.$okButtonNode = this.$dNode.find('.ok_button');
	    this.$deleteButtonNode = this.$dNode.find('.delete_button');

	    this.$itmeWrapper.on('click', function(e){
	        var $target = $(e.target);

	        if ($target.is('.kk_dialog_list_item')) {
	            if (!$target.hasClass('selected_item')) {
	                _this.$itmeWrapper.find('.selected_item').removeClass('selected_item');

	                $target.addClass('selected_item');

	                _this.$okButtonNode.removeClass('disabled_button');
	                _this.$deleteButtonNode.removeClass('disabled_button');

	                var itemIndex = $target.index();

	                if ( _this.router.editorObject.isAutoSave &&  _this.router.editorObject.autoSaveList.length) {
	                    var autoSaveInfo =  _this.router.editorObject.autoSaveList[itemIndex];
	                    _this.$previewNode.html(autoSaveInfo.html);
	                }
	            }
	        }
	    });
	};

	AutoSaveLoadDialog.prototype.resetSaveInfo = function(){
	    var _this = this;
	    this.$itmeWrapper.html('');
	    this.$previewNode.html('');

	    this.$okButtonNode.addClass('disabled_button');
	    this.$deleteButtonNode.addClass('disabled_button');

	    if ( _this.router.editorObject.isAutoSave &&  _this.router.editorObject.autoSaveList.length) {
	        var autoSaveItemHTML = '';

	        for(var i = 0, length =  _this.router.editorObject.autoSaveList.length; i < length; i++) {
	            autoSaveItemHTML += '<div class="kk_dialog_list_item">' +  _this.router.editorObject.autoSaveList[i].timestamp + '</div>';
	        }

	        this.$itmeWrapper.html(autoSaveItemHTML);
	    }
	};

	AutoSaveLoadDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_auto_save_load");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.resetSaveInfo();

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	module.exports = AutoSaveLoadDialog;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function TemplateDialog(editorElement, $domObject, router, api) {
	    this.editorElement = $(editorElement);
	    this.editorContentView = router.editorObject.editorContentView;

	    this.router = router;
	    this.$dom = $domObject;
	    this.api = api;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_template">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">'+ window.kukuResource.templateDialog.title +'</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_contents_row">' +
	                    '<div class="kk_dialog_template_category">' +
	                        '<div class="kk_dialog_list_title">' + window.kukuResource.templateDialog.category_title +'</div>' +
	                        '<div class="kk_dialog_list_item_wrapper kk_dialog_template_category_list">' +
	                            // '<div class="' + Define.CLASS.DIALOG_TEMPLATE_CATEGORY_NAME + ' ' + 'selected_item' + '">' +
	                            '<div class="kk_dialog_list_item kk_dialog_template_category_name">' +
	                                'SAMPLE CATEGORY' +
	                            '</div>' +
	                        '</div>' +
	                    '</div>' +
	                    '<div class="kk_dialog_template_list">' +
	                        '<div class="kk_dialog_list_title">' + window.kukuResource.templateDialog.item_title +'</div>' +
	                        '<div class="kk_dialog_list_item_wrapper kk_dialog_template_item_list">' +
	                            // '<div class="' + Define.CLASS.DIALOG_TEMPLATE_ITEM + ' ' + 'selected_item' + '">' +
	                            '<div class="kk_dialog_list_item kk_dialog_template_item">' +
	                                'SAMPLE ITEM' +
	                            '</div>' +
	                        '</div>' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(TemplateDialog.prototype, new AbstractDialog());

	TemplateDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$categoriList = this.$dNode.find('.kk_dialog_template_category_list');
	    this.$itemList = this.$dNode.find('.kk_dialog_template_item_list');

	    this.$categoriList.html('');
	    this.$itemList.html('');

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){

	                var categorySelected = _this.$categoriList.find('.selected_item');
	                var itemSelected = _this.$itemList.find('.selected_item');

	                if (!itemSelected.length) {
	                    alert(window.kukuResource.templateDialog.notSelectedTemplateMsg);

	                    return;
	                }

	                var categoryIndex = categorySelected.index();
	                var itemIndex = itemSelected.index();

	                var templateList = _this.router.options.templateList;

	                var category = templateList[categoryIndex];

	                if (!(category && category.items && category.items.length && category.items[itemIndex])) {
	                    alert(window.kukuResource.templateDialog.invalidCategory);

	                    return;
	                } else{
	                    var item = category.items[itemIndex];

	                    if (item.type == 'url') {
	                        $.get(item.value).done(function(data) {

	                            var isNext = false;

	                            if (Util.isCheckEmpty(_this.editorContentView)) {
	                                isNext = true;
	                            } else {
	                                isNext = confirm(window.kukuResource.templateDialog.htmlAcceptConfirm);
	                            }

	                            if (isNext) {
	                                _this.api.SetEditorContent(data);

	                                _this.router.setClearAllHistories();
	                                _this.router.changedUndoRedoButtonEnable();

	                                _this.closeDialog();
	                            }
	                        }).error(function(){
	                            alert(window.kukuResource.templateDialog.invalidURL);

	                            return;
	                        });

	                    } else if (item.type == 'html') {

	                        var html = item.value;

	                        var isNext = false;

	                        if (Util.isCheckEmpty(_this.editorContentView)) {
	                            isNext = true;
	                        } else {
	                            isNext = confirm(window.kukuResource.templateDialog.htmlAcceptConfirm);
	                        }

	                        if (isNext) {
	                            _this.api.SetEditorContent(html);

	                            _this.router.setClearAllHistories();
	                            _this.router.changedUndoRedoButtonEnable();

	                            _this.closeDialog();
	                        }
	                    } else {
	                        alert(window.kukuResource.templateDialog.invalidItemType);

	                        return;
	                    }
	                }
	            });
	        } else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.$categoriList.on('click', function(e){
	        try {
	            var $target = $(e.target);

	            if ($target.is('.kk_dialog_template_category_name')) {
	                if (!$target.hasClass('selected_item')) {
	                    _this.$categoriList.find('.selected_item').removeClass('selected_item');
	                    $target.addClass('selected_item');
	                    _this.$itemList.html('');

	                    var itemIndex = $target.index();

	                    var templateList = _this.router.options.templateList;

	                    var templateCategory = templateList[itemIndex];

	                    if (templateCategory) {
	                        var items = templateCategory.items;

	                        if (items && items.length) {
	                            var itemHTML = '';

	                            for (var i = 0, length = items.length; i < length; i++) {
	                                itemHTML += '<div class="kk_dialog_list_item kk_dialog_template_item">' + items[i].name + '</div>';
	                            }

	                            _this.$itemList.html(itemHTML);
	                        }
	                    }
	                }
	            }
	        } catch (e) {
	            _this.$categoriList.html('');
	            _this.$itemList.html('');
	        }
	    });

	    this.$itemList.on('click', function(e){
	        try {
	            var $target = $(e.target);

	            if ($target.is('.kk_dialog_template_item')) {
	                if (!$target.hasClass('selected_item')) {
	                    _this.$itemList.find('.selected_item').removeClass('selected_item');
	                    $target.addClass('selected_item');
	                }
	            }
	        } catch (e) { }
	    });


	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	TemplateDialog.prototype.resetTemplateItems = function(){
	    this.$categoriList.html('');
	    this.$itemList.html('');

	    var templateList = this.router.options.templateList;

	    if (templateList && templateList.length) {
	        var categoryHTML = '';

	        for (var i = 0, length = templateList.length; i < length; i++) {
	            categoryHTML += '<div class="kk_dialog_list_item kk_dialog_template_category_name">' + templateList[i].name + '</div>';
	        }

	        this.$categoriList.html(categoryHTML);
	    }

	};

	TemplateDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_template");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.resetTemplateItems();

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	module.exports = TemplateDialog;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);

	function DateFormatDialog(editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObject;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;

	    this.dateFormats = [
	        'hh:mm:ss a/p'
	        , 'HH:mm:ss'
	        , 'dd/MM/yy'
	        , 'dd/MM/yyyy'
	        , 'yyyy/MM/dd'
	        , 'yy/MM/dd'
	        , 'yy-MM-dd'
	        , 'yyyy-MM-dd'
	        , 'yyyy.MM.dd'
	        , 'MM. dd. yyyy'
	        , 'a/p hh' + window.kukuResource.dateFormatDialog.hour
	        , 'yyyy' + window.kukuResource.dateFormatDialog.year + ' MM' + window.kukuResource.dateFormatDialog.month + ' dd' + window.kukuResource.dateFormatDialog.day
	        , 'yyyy' + window.kukuResource.dateFormatDialog.year + ' MM' + window.kukuResource.dateFormatDialog.month + ' dd' + window.kukuResource.dateFormatDialog.day + ' E'
	        , 'yy' + window.kukuResource.dateFormatDialog.year + ' MM' + window.kukuResource.dateFormatDialog.month + ' dd' + window.kukuResource.dateFormatDialog.day
	        , 'yy' + window.kukuResource.dateFormatDialog.year + ' MM' + window.kukuResource.dateFormatDialog.month + ' dd' + window.kukuResource.dateFormatDialog.day + ' E'
	    ];

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_date_format">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">'+ window.kukuResource.dateFormatDialog.title +'</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_dateFormat_list">'+
	                    '<ul class="kk_dialog_list_item_wrapper">' +
	                    '</ul>' +
	                '</div>'+
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(DateFormatDialog.prototype, new AbstractDialog());

	DateFormatDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);
	    var $dateFormatList = this.$dNode.find(".kk_dialog_list_item_wrapper");

	    this.$okButton = this.$dNode.find('.ok_button');

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){
	                var $selectedItem = $dateFormatList.find('.selected_item');

	                if ($selectedItem.length) {
	                    var opSources = [];

	                    var pasteOpSource = {
	                        type : "create",
	                        name : "symbol",
	                        value : $selectedItem.html()
	                    };

	                    opSources.push(pasteOpSource);

	                    _this.router.doOperation(opSources);
	                } else {
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(window.kukuResource.dateFormatDialog.notSelectedFormatMsg);
	                    return;
	                }

	                _this.closeDialog();
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    $dateFormatList.on('click', function(e) {
	        var target = e.target;
	        $dateFormatList.find('.selected_item').removeClass('selected_item');
	        $(target).addClass('selected_item');
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	DateFormatDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_date_format");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.createDateList();

	    this.setDialogPosition($dialog);
	};

	DateFormatDialog.prototype.createDateList = function(){
	    var $formatList = this.$dialogNode.find(".kk_dialog_list_item_wrapper");

	    var formatListHtmlString = '';

	    var dateObject = new Date();

	    for (var i = 0, length = this.dateFormats.length; i < length; i++) {
	        var dateFormat = this.dateFormats[i];

	        formatListHtmlString += '<li class="kk_dialog_list_item">' + dateObject.format(dateFormat) + '</li>';
	    }

	    $formatList.html(formatListHtmlString);
	};

	module.exports = DateFormatDialog;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function BookmarkDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;

	    this.bookmarkInput = null;

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_bookmark">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">'+ window.kukuResource.bookmarkDialog.title +'</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_bookmark_edit_area">' +
	                    '<div class="kk_contents_row">' +
	                        '<label>' + window.kukuResource.bookmarkDialog.bookmark_edit_label + '</label>' +
	                        '<input type="text" class="kk_bookmark_edit_input" maxlength="30">' +
	                    '</div>' +
	                    '<div class="kk_contents_row kk_bookmark_btnWrap">' +
	                        '<div class="kk_dialog_button btn_style_bg kk_bookmark_button kk_bookmark_button_add">' + window.kukuResource.bookmarkDialog.bookmark_add + '</div>' +
	                        '<div class="kk_dialog_button kk_bookmark_button kk_bookmark_button_modify">' + window.kukuResource.bookmarkDialog.bookmark_modify + '</div>' +
	                        '<div class="kk_dialog_button kk_bookmark_button kk_bookmark_button_delete">' + window.kukuResource.bookmarkDialog.bookmark_delete + '</div>' +
	                    '</div>' +
	                '</div>' +
	                '<div class="kk_bookmark_list">' +
	                    '<div class="kk_dialog_list_title">' + window.kukuResource.bookmarkDialog.bookmark_list_label + '</div>' +
	                    '<div class="kk_dialog_list_item_wrapper">' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.bookmarkDialog.closeButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(BookmarkDialog.prototype, new AbstractDialog());

	BookmarkDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    var $editorContentView = this.router.editorObject.editorContentView;

	    this.bookmarkInput = this.$dNode.find('.kk_bookmark_edit_input');

	    var $addButton = this.$dNode.find('.kk_bookmark_button');
	    var $modifyButton = this.$dNode.find('.kk_bookmark_button_modify');
	    var $deleteButton = this.$dNode.find('.kk_bookmark_button_delete');

	    this.$dNode.find(".kk_dialog_footer .kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.$dNode.find(".kk_bookmark_button").on('mousedown', function(e){
	        var $target = $(e.target);
	        _this.stop(e);

	        if (!$target.hasClass('disabled_button')){
	            var inputValue = _this.bookmarkInput.val();

	            if ($target.hasClass('kk_bookmark_button_add')) {

	                if (!inputValue.length) {
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(window.kukuResource.bookmarkDialog.bookmark_non_text);
	                    return;
	                } else if (!inputValue.trim().length){
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(window.kukuResource.bookmarkDialog.bookmark_non_only_space);
	                    return;
	                } else {
	                    inputValue = inputValue.trim();
	                    _this.bookmarkInput.val(inputValue)
	                }

	                if (Util.hasSpecialText(inputValue)) {
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(window.kukuResource.bookmarkDialog.bookmark_not_use_special_character);
	                    return;
	                }

	                if ($editorContentView.find('#' + inputValue).length) {
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(window.kukuResource.bookmarkDialog.bookmark_already_bookmark);

	                    return;
	                }

	                var opSource = {
	                    type : "create",
	                    name : "bookmark",
	                    value : inputValue
	                };

	                _this.router.doOperation([opSource]);

	                _this.setBookmarkList();
	                // _this.closeDialog();
	            } else if ($target.hasClass('kk_bookmark_button_modify')) {
	                var $selectedBookmark = _this.$dNode.find('.selected_item');

	                if (Util.hasSpecialText(inputValue)) {
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(window.kukuResource.bookmarkDialog.bookmark_not_use_special_character);
	                    return;
	                }

	                if ($editorContentView.find('#' + inputValue).length) {
	                    _this.$dom.selection.restoreRange();
	                    _this.$dom.selection.editorBlur();
	                    alert(window.kukuResource.bookmarkDialog.bookmark_already_bookmark);

	                    return;
	                }

	                var opSource = {
	                    type : "update",
	                    name : "bookmark",
	                    value : {
	                        originalBookmark : $selectedBookmark.html(),
	                        changeBookmark : inputValue
	                    }
	                };

	                _this.router.doOperation([opSource]);

	                $selectedBookmark.html(inputValue);
	            } else if ($target.hasClass('kk_bookmark_button_delete')) {
	                var $selectedBookmark = _this.$dNode.find('.selected_item');

	                var bookmarkValue = $selectedBookmark.html();
	                var bool = confirm('[' + bookmarkValue + ']' + ' ' + window.kukuResource.bookmarkDialog.bookmark_delete_confirm_message);

	                if (bool){
	                    var opSource = {
	                        type : "delete",
	                        name : "bookmark",
	                        value : bookmarkValue
	                    };

	                    _this.router.doOperation([opSource]);

	                    $selectedBookmark.remove();
	                    _this.bookmarkInput.val('');

	                    $addButton.removeClass('disabled_button');
	                    $modifyButton.addClass('disabled_button');
	                    $deleteButton.addClass('disabled_button');
	                }
	            }
	        }
	    });

	    this.$dNode.find(".kk_dialog_list_item_wrapper").on('click', function(e){
	        var $target = $(e.target);

	        if ($target.hasClass('kk_dialog_list_item')){

	            if ($target.hasClass('selected_item')) {
	                $target.removeClass('selected_item');

	                $addButton.removeClass('disabled_button');
	                $modifyButton.addClass('disabled_button');
	                $deleteButton.addClass('disabled_button');

	                _this.bookmarkInput.val("");
	            } else {
	                var bookmarkItems = _this.$dNode.find('.kk_dialog_list_item');
	                bookmarkItems.removeClass('selected_item');
	                $target.addClass('selected_item');

	                $addButton.addClass('disabled_button');
	                $modifyButton.removeClass('disabled_button');
	                $deleteButton.removeClass('disabled_button');

	                var bookmarkID = $target.html();
	                _this.bookmarkInput.val(bookmarkID);
	            }
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	BookmarkDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    this.setSelectionRange();

	    var $dialog = this.$dialogNode.find(".kk_dialog_bookmark");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setBookmarkList($dialog);

	    this.setDialogPosition($dialog);
	};

	BookmarkDialog.prototype.setBookmarkList = function($dialog) {

	    var $editorContentView = this.router.editorObject.editorContentView;

	    if (!$dialog) {
	        $dialog = this.$dialogNode.find(".kk_dialog_bookmark");

	        if(!$dialog[0]){
	            $dialog = this.$dNode;
	            this.$dialogNode.append(this.$dNode[0]);
	        }
	    }

	    var $bookmarkList = $dialog.find('.kk_dialog_list_item_wrapper');

	    $bookmarkList.html('');

	    this.bookmarkInput.val("");
	    this.bookmarkInput.focus();

	    $dialog.find('.kk_bookmark_button').addClass('disabled_button');
	    $dialog.find('.kk_bookmark_button_add').removeClass('disabled_button');

	    var bookmarkNodes = $editorContentView.find('.kk_bookmark_view');

	    var bookmarkItemHTML = '';

	    for(var i = 0, length = bookmarkNodes.length; i < length; i++) {
	        var id = bookmarkNodes[i].id;
	        bookmarkItemHTML += '<div class="kk_dialog_list_item">' + id + '</div>';
	    }

	    $bookmarkList.html(bookmarkItemHTML);
	};

	module.exports = BookmarkDialog;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);
	var _AbstractUploadDialog = __webpack_require__(50);

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	var widthSize = 90;

	function TableDialog(editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObject;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_table kk_dialog_table_cell">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">' + window.kukuResource.tableDialog.title_insert + '</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_tab_menus">' +
	                    '<div class="kk_tab_menu_item kk_tab_menu_common kk_tab_menu_on">' + window.kukuResource.tableDialog.tab_common + '</div>' +
	                    '<div class="kk_tab_menu_item kk_tab_menu_background">' + window.kukuResource.tableDialog.tab_background + '</div>' +
	                    '<div class="kk_tab_menu_item kk_tab_menu_template">' + window.kukuResource.tableDialog.tab_template + '</div>' +
	                '</div>' +
	                '<div class="kk_tab_contents_wrap">' +
	                    '<div class="kk_tab_contents kk_tab_menu_contents_common kk_tab_contents_on">' +
	                        '<div class="kk_contents_row kk_dialog_table_common_property">' +
	                            '<table>' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.tableDialog.row_count + '</td>' +
	                                        '<td>' + '<input type="text" class="smartspinner spinner_custom kk_dialog_table_common_col_input" /></td>' +
	                                        '<td>'  + window.kukuResource.tableDialog.col_count + '</td>' +
	                                        '<td>' + '<input type="text" class="smartspinner spinner_custom kk_dialog_table_common_row_input" /></td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>'  + window.kukuResource.tableDialog.width_count + '</td>' +
	                                        '<td>' + '<input type="text" value="" class="input_sm kk_dialog_table_common_width_input" /> px</td>' +
	                                        '<td>'  + window.kukuResource.tableDialog.height_count + '</td>' +
	                                        '<td>' + '<input type="text" value="" class="input_sm kk_dialog_table_common_height_input" /> px</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>'  + window.kukuResource.tableDialog.margin_left_count + '</td>' +
	                                        '<td>' + '<input type="text" value="" class="input_sm kk_dialog_table_common_marginL_input" /> px</td>' +
	                                        '<td>'  + window.kukuResource.tableDialog.align_count + '</td>' +
	                                        '<td>' +
	                                            '<select class="kk_dialog_table_common_align_select">' +
	                                                '<option value="default">' + window.kukuResource.tableDialog.align_default + '</option>' +
	                                                '<option value="left">' + window.kukuResource.tableDialog.align_left + '</option>' +
	                                                '<option value="center">' + window.kukuResource.tableDialog.align_center + '</option>' +
	                                                '<option value="right">' + window.kukuResource.tableDialog.align_right + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.tableDialog.id_label + '</td>' +
	                                        '<td>' + '<input type="text" value="" class="kk_dialog_table_common_id_input" /></td>' +
	                                        '<td>'  + window.kukuResource.tableDialog.class_label + '</td>' +
	                                        '<td>' + '<input type="text" value="" class="kk_dialog_table_common_class_input" /></td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td colspan="4">' + '<label class="label_long"><input class="kk_dialog_table_common_separate_checkbox" type="checkbox">' + window.kukuResource.tableDialog.border_separate + '</label></td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                        '<div class="kk_contents_row kk_dialog_table_common_border kk_accordion_field">' +
	                            '<table>' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.tableDialog.border_type + '</td>' +
	                                        '<td colspan="3">' +
	                                            '<div>' +
	                                                '<div class="kk_dialog_table_border_type_item selected_item">' +
	                                                    '<div class="kk_dialog_table_border_solid "/>' +
	                                                '</div>' +
	                                                '<div class="kk_dialog_table_border_type_item">' +
	                                                    '<div class="kk_dialog_table_border_double "/>' +
	                                                '</div>' +
	                                                '<div class="kk_dialog_table_border_type_item">' +
	                                                    '<div class="kk_dialog_table_border_dashed "/>' +
	                                                '</div>' +
	                                                '<div class="kk_dialog_table_border_type_item">' +
	                                                    '<div class="kk_dialog_table_border_dotted"/>' +
	                                                '</div>' +
	                                                '<div class="kk_dialog_table_border_type_item">' +
	                                                    '<div class="kk_dialog_table_border_none"/>' +
	                                                    '<span' + ($.browser.chrome ? ' style="line-height:25px;"' : '') + '>' + window.kukuResource.tableDialog.border_none_type + '</span>' +
	                                                '</div>' +
	                                            '</div>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.tableDialog.border_color + '</td>' +
	                                        '<td>' + '<div class="kk_dialog_color_picker kk_dialog_table_border_color_picker "/>' + '</td>' +
	                                        '<td>' + window.kukuResource.tableDialog.border_width + '</td>' +
	                                        '<td>' + '<input type="text" class="smartspinner spinner_custom kk_dialog_table_border_width_input" />' + '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.tableDialog.border_cell_spacing_width + '</td>' +
	                                        '<td>' + '<input type="text" class="smartspinner spinner_custom kk_dialog_table_border_cellSpacing_input" />' + '</td>' +
	                                        '<td>' + window.kukuResource.tableDialog.border_cell_padding + '</td>' +
	                                        '<td>' + '<input type="text" class="smartspinner spinner_custom kk_dialog_table_border_cellPadding_input " />' + '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.tableDialog.border_option + '</td>' +
	                                        '<td colspan="3">' +
	                                            '<div class="kk_dialog_table_border_line_wrap">' +
	                                                '<div class="kk_dialog_table_border_group">' +
	                                                    '<div class="kk_dialog_table_border_group_item">' +
	                                                        '<table class="kk_dialog_table_border_group_outline">' +
	                                                            '<colgroup>' +
	                                                                '<col style="width:50%;">' +
	                                                                '<col style="width:50%;">' +
	                                                            '</colgroup>' +
	                                                            '<tbody>' +
	                                                                '<tr><td></td><td></td></tr>' +
	                                                                '<tr><td></td><td></td></tr>' +
	                                                            '</tbody>' +
	                                                        '</table>' +
	                                                        '<div class="border_group_title">' + window.kukuResource.tableDialog.border_outline + '</div>' +
	                                                    '</div>' +
	                                                    '<div class="kk_dialog_table_border_group_item">' +
	                                                        '<table class="kk_dialog_table_border_group_inner">' +
	                                                            '<colgroup>' +
	                                                                '<col style="width:50%;">' +
	                                                                '<col style="width:50%;">' +
	                                                            '</colgroup>' +
	                                                            '<tbody>' +
	                                                                '<tr><td style="border-right: 1px solid #989898;border-bottom: 1px solid #989898;"></td><td style="border-left: 1px solid #989898;border-bottom: 1px solid #989898;"></td></tr>' +
	                                                                '<tr><td style="border-top: 1px solid #989898;border-right: 1px solid #989898;"></td><td style="border-top: 1px solid #989898;border-left: 1px solid #989898;"></td></tr>' +
	                                                            '</tbody>' +
	                                                        '</table>' +
	                                                        '<div class="border_group_title">' + window.kukuResource.tableDialog.border_inner + '</div>' +
	                                                    '</div>' +
	                                                    '<div class="kk_dialog_table_border_group_item">' +
	                                                        '<table class="kk_dialog_table_border_group_lineAll">' +
	                                                            '<colgroup>' +
	                                                                '<col style="width:50%;">' +
	                                                                '<col style="width:50%;">' +
	                                                            '</colgroup>' +
	                                                            '<tbody>' +
	                                                                '<tr><td style="border-right: 1px solid #989898;border-bottom: 1px solid #989898;"></td><td style="border-left: 1px solid #989898;border-bottom: 1px solid #989898;"></td></tr>' +
	                                                                '<tr><td style="border-top: 1px solid #989898;border-right: 1px solid #989898;"></td><td style="border-top: 1px solid #989898;border-left: 1px solid #989898;"></td></tr>' +
	                                                            '</tbody>' +
	                                                        '</table>' +
	                                                        '<div class="border_group_title">' + window.kukuResource.tableDialog.border_all + '</div>' +
	                                                    '</div>' +
	                                                '</div>' +
	                                                '<div class="kk_dialog_table_border_controller">' +
	                                                    '<table class="kk_dialog_table_border_controller_wrap">' +
	                                                        '<colgroup>' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                        '</colgroup>' +
	                                                        '<tbody>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;"></td>' +
	                                                                '<td></td>' +
	                                                                '<td></td>' +
	                                                                '<td></td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;">' +
	                                                                    '<div class="kk_border_controller_buttons kk_border_controller_left_top">' + '―' + '</div>' +
	                                                                '</td>' +
	                                                                '<td colspan="4" rowspan="3">' +
	                                                                    '<table class="kk_dialog_table_border_controller_table">' +
	                                                                        '<colgroup>' +
	                                                                            '<col style="width:50%;">' +
	                                                                            '<col style="width:50%;">' +
	                                                                        '</colgroup>' +
	                                                                        '<tbody>' +
	                                                                            '<tr><td></td><td></td></tr>' +
	                                                                            '<tr><td></td><td></td></tr>' +
	                                                                        '</tbody>' +
	                                                                    '</table>' +
	                                                                '</td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;">' +
	                                                                    '<div class="kk_border_controller_buttons kk_border_controller_left_middle">' + '―' + '</div>' +
	                                                                '</td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;">' +
	                                                                    '<div class="kk_border_controller_buttons kk_border_controller_left_bottom">' + '―' + '</div>' +
	                                                                '</td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;"></td>' +
	                                                                '<td>' +
	                                                                    '<div class="kk_border_controller_buttons kk_border_controller_bottom_left">' + ' | ' + '</div>' +
	                                                                '</td>' +
	                                                                '<td>' +
	                                                                    '<div class="kk_border_controller_buttons kk_border_controller_bottom_center">' + ' | ' + '</div>' +
	                                                                '</td>' +
	                                                                '<td>' +
	                                                                    '<div class="kk_border_controller_buttons kk_border_controller_bottom_right">' + ' | ' + '</div>' +
	                                                                '</td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                        '</tbody>' +
	                                                    '</table>' +
	                                                '</div>' +
	                                            '</div>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                        '<div class="kk_contents_row kk_dialog_table_common_caption">' +
	                            '<table>' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.tableDialog.table_caption + '<div class="kk_web_accessibility_icon"/>' + '</td>' +
	                                        '<td>' + '<input type="text" value="" class="kk_dialog_table_caption_input" /></td>' +
	                                        '<td>'  + window.kukuResource.tableDialog.table_summary + '<div class="kk_web_accessibility_icon"/>' + '</td>' +
	                                        '<td>' + '<input type="text" value="" class="kk_dialog_table_summary_input" /></td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                    '</div>' +
	                    '<div class="kk_tab_contents kk_dialog_table_background">' +
	                        '<div class="kk_contents_row kk_dialog_table_background_property">' +
	                            '<table>' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.tableDialog.table_background_image + '</td>' +
	                                        '<td colspan="3">' +
	                                            '<input type="text" class="kk_file_open_path_input">' + '<label class="kk_file_open_input_label kk_dialog_button">' + window.kukuResource.tableDialog.file_input_label  + '</label>' +

	                                            (typeof window.FormData === 'undefined' ? '<form class="uploadForm" method="post" enctype="multipart/form-data" action="">' : '') +
	                                            '<input name="image_type" type="file" accept="' + '.' + Define.IMAGE_TYPE_FILES.join(',.') + '" class="kk_file_open_input">' +
	                                            (typeof window.FormData === 'undefined' ? '</form>' : '') +

	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>'  + window.kukuResource.tableDialog.table_background_attachment + '</td>' +
	                                        '<td>' +
	                                            '<select class="kk_dialog_table_background_attachment_select">' +
	                                                '<option value="default">' + window.kukuResource.tableDialog.attachment_default + '</option>' +
	                                                '<option value="scroll">' + window.kukuResource.tableDialog.attachment_scroll + '</option>' +
	                                                '<option value="fixed">' + window.kukuResource.tableDialog.attachment_fixed + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td>'  + window.kukuResource.tableDialog.table_background_position_x + '</td>' +
	                                        '<td>' + '<input type="text" value="" class="kk_dialog_table_background_position_x_input input_sm" /> px</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>'  + window.kukuResource.tableDialog.table_background_repeat_label + '</td>' +
	                                        '<td>' +
	                                            '<select class="kk_dialog_table_background_repeat_select">' +
	                                                '<option value="none">' + window.kukuResource.tableDialog.table_background_repeat_default + '</option>' +
	                                                '<option value="no-repeat">' + window.kukuResource.tableDialog.table_background_no_repeat + '</option>' +
	                                                '<option value="repeat">' + window.kukuResource.tableDialog.table_background_repeat + '</option>' +
	                                                '<option value="repeat-x">' + window.kukuResource.tableDialog.table_background_repeat_x + '</option>' +
	                                                '<option value="repeat-y">' + window.kukuResource.tableDialog.table_background_repeat_y + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td>'  + window.kukuResource.tableDialog.table_background_position_y + '</td>' +
	                                        '<td>' + '<input type="text" value="" class="kk_dialog_table_background_position_y_input input_sm" /> px</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.tableDialog.background_color + '</td>' +
	                                        '<td>' + '<div class="kk_dialog_color_picker kk_dialog_table_background_color_picker"/>' + '</td>' +
	                                        '<td>' + '</td>' +
	                                        '<td>' + '</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                        '<div class="kk_contents_row kk_dialog_table_background_header kk_accordion_field">' +
	                            '<div class="kk_dialog_table_background_scope">' +
	                                '<label><input class="kk_dialog_table_background_scope_checkbox" type="checkbox">' + window.kukuResource.tableDialog.scope_setting +'</label>' +
	                            '</div>' +
	                            '<div class="kk_table_header_list kk_background_header_list">' +
	                                '<div class="kk_header_item kk_background_header_item background_header_item_none selected_item">' +
	                                    '<table>' +
	                                        '<colgroup>' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                        '</colgroup>' +
	                                        '<tbody>' +
	                                            '<tr><td></td><td></td><td></td></tr>' +
	                                            '<tr><td></td><td></td><td></td></tr>' +
	                                            '<tr><td></td><td></td><td></td></tr>' +
	                                        '</tbody>' +
	                                    '</table>' +
	                                    '<div>' +
	                                        window.kukuResource.tableDialog.header_none +
	                                    '</div>' +
	                                '</div>' +
	                                '<div class="kk_header_item kk_background_header_item background_header_item_left">' +
	                                    '<table>' +
	                                        '<colgroup>' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                        '</colgroup>' +
	                                        '<tbody>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td></td><td></td></tr>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td></td><td></td></tr>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td></td><td></td></tr>' +
	                                        '</tbody>' +
	                                    '</table>' +
	                                    '<div>' +
	                                        window.kukuResource.tableDialog.header_left +
	                                    '</div>' +
	                                '</div>' +
	                                '<div class="kk_header_item kk_background_header_item background_header_item_top">' +
	                                    '<table>' +
	                                        '<colgroup>' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                        '</colgroup>' +
	                                        '<tbody>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td style="background-color: #e5e5fd;"></td><td style="background-color: #e5e5fd;"></td></tr>' +
	                                            '<tr><td></td><td></td><td></td></tr>' +
	                                            '<tr><td></td><td></td><td></td></tr>' +
	                                        '</tbody>' +
	                                    '</table>' +
	                                    '<div>' +
	                                        window.kukuResource.tableDialog.header_top +
	                                    '</div>' +
	                                '</div>' +
	                                '<div class="kk_header_item kk_background_header_item background_header_item_left_top">' +
	                                    '<table>' +
	                                        '<colgroup>' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                        '</colgroup>' +
	                                        '<tbody>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td style="background-color: #e5e5fd;"></td><td style="background-color: #e5e5fd;"></td></tr>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td></td><td></td></tr>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td></td><td></td></tr>' +
	                                        '</tbody>' +
	                                    '</table>' +
	                                    '<div>' +
	                                        window.kukuResource.tableDialog.header_left_top +
	                                    '</div>' +
	                                '</div>' +
	                            '</div>' +
	                        '</div>' +
	                    '</div>' +
	                    '<div class="kk_tab_contents kk_dialog_table_template">' +
	                        '<div class="kk_contents_row kk_table_template_property_field">' +
	                            '<table>' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.tableDialog.row_count + '</td>' +
	                                        '<td>' + '<input type="text" class="smartspinner spinner_custom kk_table_template_col_input" /></td>' +
	                                        '<td>'  + window.kukuResource.tableDialog.row_count + '</td>' +
	                                        '<td>' + '<input type="text" class="smartspinner spinner_custom kk_table_template_row_input" /></td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>'  + window.kukuResource.tableDialog.width_count + '</td>' +
	                                        '<td>' + '<input type="text" value="" class="kk_table_template_width_input input_sm" /> px</td>' +
	                                        '<td>'  + window.kukuResource.tableDialog.height_count + '</td>' +
	                                        '<td>' + '<input type="text" value="" class="kk_table_template_height_input input_sm" /> px</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                        '<div class="kk_contents_row kk_table_template_header_field kk_accordion_field">' +
	                            '<div class="kk_table_template_scope_wrap">' +
	                                '<label><input class="kk_table_template_scope_check" type="checkbox">' + window.kukuResource.tableDialog.scope_setting +'</label>' +
	                            '</div>' +
	                            '<div class="kk_table_header_list kk_template_header_list">' +
	                                this.getTemplateTableStyle() +
	                            '</div>' +
	                        '</div>' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(TableDialog.prototype, new AbstractDialog());
	$.extend(TableDialog.prototype, new _AbstractUploadDialog());

	TableDialog.prototype.getTemplateTableStyle = function() {
	    var tableStyle = '';

	    for(var i = 0, length = 12; i < length; i++) {
	        tableStyle += '' +
	            '<div class="kk_header_item kk_template_header_item  kk_template_header_item' + i  + '">' +
	                '<table>' +
	                    '<colgroup>' +
	                    '<col style="width:33%;">' +
	                    '<col style="width:33%;">' +
	                    '<col style="width:33%;">' +
	                '</colgroup>' +
	                '<tbody>' +
	                    '<tr><td></td><td></td><td></td></tr>' +
	                    '<tr><td></td><td></td><td></td></tr>' +
	                    '<tr><td></td><td></td><td></td></tr>' +
	                '</tbody>' +
	                '</table>' +
	            '</div>';
	    }

	    return tableStyle;
	};

	TableDialog.prototype.spinitChange = function(el, value) {
	    if (this.defaultTableSet) {
	        if (el.hasClass('kk_dialog_table_common_row_input')) {
	            this.defaultTableSet.row = value;

	        } else if (el.hasClass('kk_dialog_table_common_col_input')) {
	            this.defaultTableSet.col = value;

	        } else if (el.hasClass('kk_dialog_table_border_cellSpacing_input')) {
	            if (!isNaN(value)) {
	                this.defaultTableSet.cellSpacing = value;
	            } else {
	                el[0].reset(this.defaultTableSet.cellSpacing || 0);
	            }

	        } else if (el.hasClass('kk_dialog_table_border_cellPadding_input')) {
	            if (!isNaN(value)) {
	                this.defaultTableSet.cellPadding = value;
	            } else {
	                el[0].reset(this.defaultTableSet.cellPadding || 1);
	            }
	        }
	    }
	};

	TableDialog.prototype.inputChange = function(e){
	    var $element = $(e.target);
	    var value = parseInt($element.val());

	    if ($element.hasClass('kk_dialog_table_common_width_input')) {
	        if (!isNaN(value)) {
	            this.defaultTableSet.width = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultTableSet.width || '');
	            }
	        }

	    } else if ($element.hasClass('kk_dialog_table_common_height_input')) {
	        if (!isNaN(value)) {
	            this.defaultTableSet.height = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultTableSet.height || '');
	            }
	        }

	    } else if ($element.hasClass('kk_dialog_table_common_marginL_input')) {
	        if (!isNaN(value)) {
	            this.defaultTableSet.marginLeft = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultTableSet.marginLeft || '');
	            } else {
	                this.defaultTableSet.marginLeft = 0;
	                $element.val(this.defaultTableSet.marginLeft || '');
	            }
	        }

	    } else if ($element.hasClass('kk_dialog_table_common_id_input')) {
	        this.defaultTableSet.id = $element.val();

	    } else if ($element.hasClass('kk_dialog_table_common_class_input')) {
	        this.defaultTableSet.className = $element.val();

	    } else if ($element.hasClass('kk_dialog_table_caption_input')) {
	        this.defaultTableSet.caption = $element.val();

	    } else if ($element.hasClass('kk_dialog_table_summary_input')) {
	        this.defaultTableSet.summary = $element.val();

	    } else if ($element.hasClass('kk_dialog_table_background_position_x_input')) {
	        if (!isNaN(value)) {
	            this.defaultTableSet.positionX = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultTableSet.positionX || '');
	            } else {
	                this.defaultTableSet.positionX = 0;
	                $element.val(this.defaultTableSet.positionX || '');
	            }
	        }

	    } else if ($element.hasClass('kk_dialog_table_background_position_y_input')) {
	        if (!isNaN(value)) {
	            this.defaultTableSet.positionY = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultTableSet.positionY || '');
	            } else {
	                this.defaultTableSet.positionY = 0;
	                $element.val(this.defaultTableSet.positionY || '');
	            }
	        }

	    } else if ($element.hasClass('kk_table_template_width_input')) {
	        if (!isNaN(value)) {
	            $element.val(value);
	        } else {
	            $element.val('');
	        }

	    } else if ($element.hasClass('kk_table_template_height_input')) {
	        if (!isNaN(value)) {
	            $element.val(value);
	        } else {
	            $element.val('');
	        }
	    }
	};

	TableDialog.prototype.selectChange = function(e){
	    var $element = $(e.target);

	    if ($element.hasClass('kk_dialog_table_common_align_select')) {
	        this.defaultTableSet.align = $element.val();

	    } else if ($element.hasClass('kk_dialog_table_background_attachment_select')) {
	        this.defaultTableSet.attachment = $element.val();

	    } else if ($element.hasClass('kk_dialog_table_background_repeat_select')) {
	        this.defaultTableSet.repeat = $element.val();
	    }
	};

	TableDialog.prototype.checkChange = function(e){
	    var $element = $(e.target);

	    if ($element.hasClass('kk_dialog_table_common_separate_checkbox')) {
	        this.defaultTableSet.borderSeparate = $element[0].checked;

	    } else if ($element.hasClass('kk_dialog_table_background_scope_checkbox')) {
	        this.defaultTableSet.scope = $element[0].checked;

	    }
	};

	TableDialog.prototype.borderLineClick = function(e){
	    var $target = $(e.target);

	    var $selectedBorderTypeItem = this.borderTypeItems.filter('.selected_item');
	    var $borderType = $selectedBorderTypeItem.children().first();
	    var borderType = 'solid';
	    var borderWidth = this.borderWidth.val();
	    var borderColor = Util.getRgbToHex(this.borderColorPicker.css('backgroundColor')) || '#000000';

	    var $tds = this.borderLineTable.find('td');

	    if ($borderType.hasClass('kk_dialog_table_border_solid')) {
	        borderType = 'solid';

	    } else if ($borderType.hasClass('kk_dialog_table_border_double')) {
	        borderType = 'double';

	    } else if ($borderType.hasClass('kk_dialog_table_border_dashed')) {
	        borderType = 'dashed';

	    } else if ($borderType.hasClass('kk_dialog_table_border_dotted')) {
	        borderType = 'dotted';

	    } else if ($borderType.hasClass('kk_dialog_table_border_none')) {
	        borderType = 'none';
	    }

	    var borderString = borderWidth + 'px ' + borderType + ' ' + borderColor;

	    if ($target.hasClass('kk_border_controller_left_top')) {
	        $tds.eq(0).css('border-top', borderString);
	        $tds.eq(1).css('border-top', borderString);

	        this.defaultTableSet.border.top = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass('kk_border_controller_left_middle')) {
	        $tds.eq(0).css('border-bottom', borderString);
	        $tds.eq(1).css('border-bottom', borderString);
	        $tds.eq(2).css('border-top', borderString);
	        $tds.eq(3).css('border-top', borderString);

	        this.defaultTableSet.border.middle = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass('kk_border_controller_left_bottom')) {
	        $tds.eq(2).css('border-bottom', borderString);
	        $tds.eq(3).css('border-bottom', borderString);

	        this.defaultTableSet.border.bottom = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass('kk_border_controller_bottom_left')) {
	        $tds.eq(0).css('border-left', borderString);
	        $tds.eq(2).css('border-left', borderString);

	        this.defaultTableSet.border.left = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass('kk_border_controller_bottom_center')) {
	        $tds.eq(0).css('border-right', borderString);
	        $tds.eq(1).css('border-left', borderString);
	        $tds.eq(2).css('border-right', borderString);
	        $tds.eq(3).css('border-left', borderString);

	        this.defaultTableSet.border.center = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass('kk_border_controller_bottom_right')) {
	        $tds.eq(1).css('border-right', borderString);
	        $tds.eq(3).css('border-right', borderString);

	        this.defaultTableSet.border.right = { width : borderWidth, type : borderType, color : borderColor };
	    }
	};

	TableDialog.prototype.initDialog = function(){
	    console.log('initDialog')
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    //TAB Element
	    this.titleNode = this.$dNode.find('.kk_dialog_title');

	    this.tabCommon = this.$dNode.find('.kk_tab_menu_common');
	    this.tabBackground = this.$dNode.find('.kk_tab_menu_background');
	    this.tabTemplate = this.$dNode.find('.kk_tab_menu_template');

	    this.tabCommonContents = this.$dNode.find('.kk_tab_menu_contents_common');
	    this.tabBackgroundContents = this.$dNode.find('.kk_dialog_table_background');
	    this.tabTemplateContents = this.$dNode.find('.kk_dialog_table_template');


	    //Table Common Setting Elements
	    this.rowInput = this.$dNode.find('.kk_dialog_table_common_row_input').spinit({ height: 30, width: widthSize, min: 1, initValue: 5, max: 255, callback : $.proxy(this.spinitChange, this) }); //mask: 'Red', callback: onred
	    this.colInput = this.$dNode.find('.kk_dialog_table_common_col_input').spinit({ height: 30, width: widthSize, min: 1, initValue: 5, max: 255, callback : $.proxy(this.spinitChange, this) });
	    console.log(this.colInput)
	    this.widthInput = this.$dNode.find('.kk_dialog_table_common_width_input').on('input', $.proxy(this.inputChange, this));
	    this.heightInput = this.$dNode.find('.kk_dialog_table_common_height_input').on('input', $.proxy(this.inputChange, this));

	    this.marginLeftInput = this.$dNode.find('.kk_dialog_table_common_marginL_input').on('input', $.proxy(this.inputChange, this));
	    this.alignSelect = this.$dNode.find('.kk_dialog_table_common_align_select').on('change', $.proxy(this.selectChange, this));

	    this.idInput = this.$dNode.find('.kk_dialog_table_common_id_input').on('input', $.proxy(this.inputChange, this));
	    this.classInput = this.$dNode.find('.kk_dialog_table_common_class_input').on('input', $.proxy(this.inputChange, this));

	    this.borderSeparateCheck = this.$dNode.find('.kk_dialog_table_common_separate_checkbox').on('change', $.proxy(this.checkChange, this));

	    this.borderTypeItems = this.$dNode.find('.kk_dialog_table_border_type_item').on('click', function(e){
	        var $target = $(e.target);

	        if (!$target.hasClass('kk_dialog_table_border_type_item')){
	            $target = $target.closest('.kk_dialog_table_border_type_item');
	        }

	        if ($target.length) {
	            _this.borderTypeItems.removeClass('selected_item');
	            $target.addClass('selected_item');

	            if ($target.find('.kk_dialog_table_border_double').length) {
	                _this.borderWidth[0].reset(3);
	            }
	        }
	    });

	    this.borderLineTable = this.$dNode.find('.kk_dialog_table_border_controller_table');

	    this.borderLineControlButtons = this.$dNode.find('.kk_border_controller_buttons').on('click', $.proxy(this.borderLineClick, this));

	    this.borderLineControlLeftTop = this.borderLineControlButtons.filter('.kk_border_controller_left_top');
	    this.borderLineControlLeftMiddle = this.borderLineControlButtons.filter('.kk_border_controller_left_middle');
	    this.borderLineControlLeftBottom = this.borderLineControlButtons.filter('.kk_border_controller_left_bottom');
	    this.borderLineControlBottomLeft = this.borderLineControlButtons.filter('.kk_border_controller_bottom_left');
	    this.borderLineControlBottomCenter = this.borderLineControlButtons.filter('.kk_border_controller_bottom_center');
	    this.borderLineControlBottomRight = this.borderLineControlButtons.filter('.kk_border_controller_bottom_right');

	    this.borderColorPicker = this.$dNode.find('.kk_dialog_table_border_color_picker');

	    this.borderWidth = this.$dNode.find('.kk_dialog_table_border_width_input').spinit({ height: 30, width: widthSize, min: 0, initValue: 1, max: 10 });
	    this.cellSpacing = this.$dNode.find('.kk_dialog_table_border_cellSpacing_input').spinit({ height: 30, width: widthSize, min: 0, initValue: 0, max: 10, callback : $.proxy(this.spinitChange, this) });
	    this.cellPadding = this.$dNode.find('.kk_dialog_table_border_cellPadding_input').spinit({ height: 30, width: widthSize, min: 0, initValue: 1, max: 10, callback : $.proxy(this.spinitChange, this)  });

	    this.captionInput = this.$dNode.find('.kk_dialog_table_caption_input').on('input', $.proxy(this.inputChange, this));
	    this.summaryInput = this.$dNode.find('.kk_dialog_table_summary_input').on('input', $.proxy(this.inputChange, this));



	    ///////////////////// FileUpload Start //////////////////////

	    var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        if(data && !data.isError && data.statusText !== "error") {
	            _this.$pathInput.val(data.url);
	            _this.defaultTableSet.image = data.url;
	        } else {
	            _this.$dom.selection.restoreRange();
	            _this.$dom.selection.editorBlur();
	            alert(window.kukuResource.imageDialog.image_upload_error);
	        }

	        _this.$pathInput.attr('style', '');
	    };

	    //Table Background Setting Elements
	    this.$fileInput = this.$dNode.find('.kk_file_open_input').on('change', function(e){
	        _this.doFileUpload('image_type', url, callbackFn);
	    });

	    ///////////////////// FileUpload End //////////////////////




	    this.imageFileInputLable = this.$dNode.find('.kk_file_open_input_label').on('click', function(e){
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	    });

	    this.$pathInput = this.$dNode.find('.kk_file_open_path_input').on('input', function(e){
	        _this.defaultTableSet.image = _this.$pathInput.val();
	    });

	    this.$borderItems = this.$dNode.find('.kk_dialog_table_border_group_item').on('click', function(e){
	        var $borderTypeNode = $(this.childNodes[0]);

	        if ($borderTypeNode.hasClass('kk_dialog_table_border_group_outline')){
	            _this.borderLineClick({target : _this.borderLineControlLeftTop});
	            _this.borderLineClick({target : _this.borderLineControlLeftBottom});
	            _this.borderLineClick({target : _this.borderLineControlBottomLeft});
	            _this.borderLineClick({target : _this.borderLineControlBottomRight});

	        } else if ($borderTypeNode.hasClass('kk_dialog_table_border_group_inner')){
	            _this.borderLineClick({target : _this.borderLineControlLeftMiddle});
	            _this.borderLineClick({target : _this.borderLineControlBottomCenter});

	        } else if ($borderTypeNode.hasClass('kk_dialog_table_border_group_lineAll')){
	            _this.borderLineClick({target : _this.borderLineControlLeftTop});
	            _this.borderLineClick({target : _this.borderLineControlLeftMiddle});
	            _this.borderLineClick({target : _this.borderLineControlLeftBottom});
	            _this.borderLineClick({target : _this.borderLineControlBottomLeft});
	            _this.borderLineClick({target : _this.borderLineControlBottomCenter});
	            _this.borderLineClick({target : _this.borderLineControlBottomRight});
	        }
	    });

	    this.backgroundAttachment = this.$dNode.find('.kk_dialog_table_background_attachment_select').on('change', $.proxy(this.selectChange, this));
	    this.backgroundRepeat = this.$dNode.find('.kk_dialog_table_background_repeat_select').on('change', $.proxy(this.selectChange, this));

	    this.backgroundPositionX = this.$dNode.find('.kk_dialog_table_background_position_x_input').on('input', $.proxy(this.inputChange, this));
	    this.backgroundPositionY = this.$dNode.find('.kk_dialog_table_background_position_y_input').on('input', $.proxy(this.inputChange, this));

	    this.backgroundColorPicker = this.$dNode.find('.kk_dialog_table_background_color_picker');

	    this.backgroundScope = this.$dNode.find('.kk_dialog_table_background_scope_checkbox').on('change', $.proxy(this.checkChange, this));

	    this.backgroundHeaderItems = this.$dNode.find('.kk_background_header_item').on('click', function(e){
	        var $target = $(e.target);

	        if (!$target.hasClass('kk_background_header_item')){
	            $target = $target.closest('.kk_background_header_item');
	        }

	        if ($target.length) {
	            _this.backgroundHeaderItems.removeClass('selected_item');
	            $target.addClass('selected_item');

	            if ($target.hasClass('background_header_item_none')) {
	                _this.defaultTableSet.headerType = 'none';

	            } else if ($target.hasClass('background_header_item_left')) {
	                _this.defaultTableSet.headerType = 'left';

	            } else if ($target.hasClass('background_header_item_top')) {
	                _this.defaultTableSet.headerType = 'top';

	            } else if ($target.hasClass('background_header_item_left_top')) {
	                _this.defaultTableSet.headerType = 'left_top';

	            }
	        }
	    });



	    this.$dNode.find(".kk_dialog_table_border_color_picker").kkColorPicker({
	        callback : function(e, data){
	            _this.borderColorPicker.css("background-color", data.color);
	            _this.borderColorPicker.find(".ui_colorpicker").hide();
	        }
	    });

	    this.$dNode.find(".kk_dialog_table_background_color_picker").kkColorPicker({
	        callback : function(e, data){
	            _this.backgroundColorPicker.css("background-color", data.color);
	            _this.backgroundColorPicker.find(".ui_colorpicker").hide();

	            _this.defaultTableSet.backgroundColor = data.color;
	        }
	    });



	    //Template Setting
	    this.templateRowInput = this.$dNode.find('.kk_table_template_row_input').spinit({ height: 30, width: widthSize, min: 1, initValue: 5, max: 255, callback : null }); //mask: 'Red', callback: onred
	    this.templateColInput = this.$dNode.find('.kk_table_template_col_input').spinit({ height: 30, width: widthSize, min: 1, initValue: 5, max: 255, callback : null });
	    this.templateWidthInput = this.$dNode.find('.kk_table_template_width_input').on('input', $.proxy(this.inputChange, this));
	    this.templateHeightInput = this.$dNode.find('.kk_table_template_height_input').on('input', $.proxy(this.inputChange, this));

	    this.templateScope = this.$dNode.find('.kk_table_template_scope_check');

	    this.templateHeaderItems = this.$dNode.find('.kk_template_header_item').on('click', function(e){
	        var $target = $(e.target);

	        if (!$target.hasClass('kk_template_header_item')){
	            $target = $target.closest('.kk_template_header_item');
	        }

	        if ($target.length) {
	            _this.templateHeaderItems.removeClass('selected_item');
	            $target.addClass('selected_item');
	        }
	    });






	    var keydownEvent = function(event){
	        event = event || window.event;

	        var target = event.target;
	        var keyID = (event.which) ? event.which : event.keyCode;

	        if(keyID == 8 || keyID == 46 || (keyID >= 48 && keyID <= 57 ) || (keyID >= 96 && keyID <= 105) ) {
	            return;
	        } else {
	            _this.stopEvent(event);
	            target.value = target.value.replace(/[\ㄱ-ㅎㅏ-ㅣ가-힣]/g, '');
	            event.resultValue = false;
	            return false;
	        }
	    };

	    var keyupEvent = function(event){
	        event = event || window.event;

	        var target = event.target;
	        var value = parseInt(target.value);

	        target.reset(value);
	    };


	    this.$dNode.find('.smartspinner').on('keydown', keydownEvent).on('keyup', keyupEvent);

	    this.$dNode.find('.kk_tab_menu_item').on('click', function(e){
	        var $target = $(e.target);

	        if ($target.hasClass('kk_tab_menu_common')) {
	            _this.tabCommon.addClass('kk_tab_menu_on');
	            _this.tabBackground.removeClass('kk_tab_menu_on');
	            _this.tabTemplate.removeClass('kk_tab_menu_on');

	            _this.tabCommonContents.addClass('kk_tab_contents_on');
	            _this.tabBackgroundContents.removeClass('kk_tab_contents_on');
	            _this.tabTemplateContents.removeClass('kk_tab_contents_on');

	        } else if ($target.hasClass('kk_tab_menu_background')) {
	            _this.tabCommon.removeClass('kk_tab_menu_on');
	            _this.tabBackground.addClass('kk_tab_menu_on');
	            _this.tabTemplate.removeClass('kk_tab_menu_on');

	            _this.tabCommonContents.removeClass('kk_tab_contents_on');
	            _this.tabBackgroundContents.addClass('kk_tab_contents_on');
	            _this.tabTemplateContents.removeClass('kk_tab_contents_on');

	        } else if ($target.hasClass('kk_tab_menu_template')) {
	            _this.tabCommon.removeClass('kk_tab_menu_on');
	            _this.tabBackground.removeClass('kk_tab_menu_on');
	            _this.tabTemplate.addClass('kk_tab_menu_on');

	            _this.tabCommonContents.removeClass('kk_tab_contents_on');
	            _this.tabBackgroundContents.removeClass('kk_tab_contents_on');
	            _this.tabTemplateContents.addClass('kk_tab_contents_on');
	        }
	    });


	    this.setButtonEvent();

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	TableDialog.prototype.setButtonEvent = function() {

	    var _this = this;

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);

	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){
	                _this.defaultTableSet.image = _this.$pathInput.val();

	                if (_this.tabTemplate.hasClass('kk_tab_menu_on')) {
	                    _this.clearTableSet();

	                    _this.defaultTableSet.template = {
	                        type : _this.templateHeaderItems.filter('.selected_item').index()
	                    };

	                    _this.defaultTableSet.row = _this.templateRowInput.val() || 5;
	                    _this.defaultTableSet.col = _this.templateColInput.val() || 5;

	                    _this.defaultTableSet.width = _this.templateWidthInput.val() || null;
	                    _this.defaultTableSet.height = _this.templateHeightInput.val() || null;

	                    _this.defaultTableSet.scope = _this.templateScope[0].checked;

	                    if (_this.defaultTableSet.scope) {
	                        _this.defaultTableSet.headerType = "left_top";
	                    } else {
	                        _this.defaultTableSet.headerType = null;
	                    }
	                } else {
	                    _this.defaultTableSet.width = _this.widthInput.val() || null;
	                    _this.defaultTableSet.height = _this.heightInput.val() || null;
	                }

	                var isModify = _this.defaultTableSet.isModify;

	                var opSources = [];

	                var opSource = {
	                    type : isModify ? "update" : "create",
	                    name : "table",
	                    value : _this.defaultTableSet
	                };

	                opSources.push(opSource);

	                _this.router.doOperation(opSources);

	                _this.closeDialog();
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });
	};


	TableDialog.prototype.clearTableSet = function(){

	    var initDialogValue = this.router.options.setInitDialogValue.table;
	    if(!initDialogValue) {
	        initDialogValue = {
	            rowInput: 3,
	            colInput: 3,
	            width:300,
	            height:null
	        }
	    }



	    this.defaultTableSet = {
	        isModify : false,
	        row : initDialogValue.rowInput,
	        col : initDialogValue.colInput,
	        width : null,
	        height : null,
	        marginLeft : null,
	        align : null,
	        id : null,
	        className : null,
	        borderSeparate : null,
	        border : {
	            // defaultBorder : { width : 0, type : 'solid', color : '#000000' },
	            // top : { width : 0, type : 'solid', color : '#000000' },
	            // middle : { width : 0, type : 'solid', color : '#000000' },
	            // bottom : { width : 0, type : 'solid', color : '#000000' },
	            // left : { width : 0, type : 'solid', color : '#000000' },
	            // center : { width : 0, type : 'solid', color : '#000000' },
	            // right : { width : 0, type : 'solid', color : '#000000' }
	        },
	        cellSpacing : null,
	        cellPadding : null,
	        caption : null,
	        summary : null,


	        image : null,

	        attachment : null,
	        repeat : null,
	        positionX : null,
	        positionY : null,

	        backgroundColor :null,
	        scope : null,
	        headerType : null,

	        template : null
	    };
	};

	TableDialog.prototype.resetFields = function(initData){

	    var initDialogValue = this.router.options.setInitDialogValue.table;
	    if(!initDialogValue) {
	        initDialogValue = {
	            rowInput: 3,
	            colInput: 3,
	            width:300,
	            height:null
	        }
	    }

	    this.titleNode.html(window.kukuResource.tableDialog.title_insert);


	    //Default Tab Reset Setting
	    this.tabCommon.addClass('kk_tab_menu_on');
	    this.tabBackground.removeClass('kk_tab_menu_on');
	    this.tabTemplate.removeClass('kk_tab_menu_on').show();

	    this.tabCommonContents.addClass('kk_tab_contents_on');
	    this.tabBackgroundContents.removeClass('kk_tab_contents_on');
	    this.tabTemplateContents.removeClass('kk_tab_contents_on');


	    //Default Common Setting Items
	    this.rowInput[0].reset(initDialogValue.rowInput);
	    this.rowInput.css('width', widthSize + 'px');
	    this.colInput[0].reset(initDialogValue.colInput);
	    this.colInput.css('width', widthSize + 'px');

	    this.templateRowInput[0].reset(3);
	    this.templateRowInput.css('width', widthSize + 'px');
	    this.templateColInput[0].reset(3);
	    this.templateColInput.css('width', widthSize + 'px');

	    this.rowInput.addClass('smartspinner');
	    this.rowInput.addClass('spinner_custom');
	    this.colInput.addClass('smartspinner');
	    this.colInput.addClass('spinner_custom');


	    this.templateRowInput.addClass('smartspinner');
	    this.templateRowInput.addClass('spinner_custom');
	    this.templateColInput.addClass('smartspinner');
	    this.templateColInput.addClass('spinner_custom');


	    this.rowInput.removeAttr('readonly');
	    this.colInput.removeAttr('readonly');
	    this.templateRowInput.removeAttr('readonly');
	    this.templateColInput.removeAttr('readonly');

	    this.widthInput.val('');
	    this.heightInput.val('');
	    this.marginLeftInput.val('');
	    this.alignSelect[0].selectedIndex = 0;
	    this.idInput.val('');
	    this.classInput.val('');


	    this.templateWidthInput.val('');
	    this.templateHeightInput.val('');


	    this.borderSeparateCheck[0].checked = false;

	    this.borderTypeItems.removeClass('selected_item');
	    this.borderTypeItems.first().addClass('selected_item');

	    this.borderColorPicker.css('backgroundColor', '');
	    this.borderWidth[0].reset(1);
	    this.cellSpacing[0].reset(0);
	    this.cellPadding[0].reset(1);

	    this.borderLineTable.find('td').css('border', '');

	    this.captionInput.val('');
	    this.summaryInput.val('');


	    //Default Background Setting Items
	    this.$pathInput.val('');
	    this.$fileInput.val('');

	    this.backgroundAttachment[0].selectedIndex = 0;
	    this.backgroundRepeat[0].selectedIndex = 0;

	    this.backgroundPositionX.val('');
	    this.backgroundPositionY.val('');

	    this.backgroundColorPicker.css('backgroundColor', '');

	    this.backgroundScope[0].checked = false;

	    this.backgroundHeaderItems.removeClass('selected_item');
	    this.backgroundHeaderItems.first().addClass('selected_item');

	    this.templateHeaderItems.removeClass('selected_item');
	    this.templateHeaderItems.first().addClass('selected_item');

	    this.templateScope[0].checked = false;

	    this.clearTableSet();

	    if (initData && initData.type == 'insert') {
	        var width = 0;

	        var range = this.$dom.selection.getRange();
	        var node = range.startContainer;
	        var parentBlock = this.$dom.selection.getParentBlockNode(node);
	        var $parentBlock = $(parentBlock);

	        var editorContentView = this.router.editorObject.editorContentView;

	        if ($parentBlock.length && $parentBlock.is(Define.PARAGRAPH_NODES.join(',') + ',div')) {
	            width = $(parentBlock).width();
	        } else {
	            width = editorContentView.width();
	        }

	        if (this.router.options.defaultTableWidth) {
	            if (width > this.router.options.defaultTableWidth) {
	                width = this.router.options.defaultTableWidth;
	            }
	        }

	        this.widthInput.val(initDialogValue.width || width);
	        this.heightInput.val(initDialogValue.height || null);
	        this.templateWidthInput.val(width);
	        this.defaultTableSet.width  = width;
	    }

	    if (initData) {
	        if (initData.type == 'modify') {
	            this.titleNode.html(window.kukuResource.tableDialog.title_modify);
	            this.defaultTableSet.isModify = true;

	            this.tabTemplate.hide();
	        }

	        if (initData.row) {
	            this.rowInput.css('width', (widthSize + 22) + 'px');
	            var row = parseInt(initData.row);
	            this.rowInput[0].reset(row);


	            this.rowInput.attr('readonly', 'true');
	            this.rowInput.removeClass('smartspinner');
	        }

	        if (initData.col) {
	            this.colInput.css('width', (widthSize + 22) + 'px');
	            var col = parseInt(initData.col);
	            this.colInput[0].reset(col);

	            this.colInput.attr('readonly', 'true');
	            this.colInput.removeClass('smartspinner');
	        }

	        if (initData.width) {
	            var width = parseInt(initData.width) || "";
	            this.widthInput.val(width);
	        }

	        if (initData.height) {
	            var height = parseInt(initData.height) || "";
	            this.heightInput.val(height);
	        }

	        if (initData.marginLeft) {
	            var marginLeft = parseInt(initData.marginLeft) || "";
	            this.marginLeftInput.val(marginLeft);
	        }

	        if (initData.align) {
	            this.alignSelect.val(initData.align);
	        }

	        if (initData.id) {
	            this.idInput.val(initData.id);
	        }

	        if (initData.className) {
	            this.classInput.val(initData.className);
	        }

	        if (initData.image) {
	            this.$pathInput.val(initData.image);
	        }

	        if (initData.borderSeparate) {
	            this.borderSeparateCheck[0].checked = true;
	        }

	        if (initData.border) {
	            this.defaultTableSet.border = initData.border;
	        }

	        if (initData.cellSpacing) {
	            this.cellSpacing[0].reset(parseInt(initData.cellSpacing) || 0);
	        }

	        if (initData.cellPadding) {
	            this.cellPadding[0].reset(parseInt(initData.cellPadding) || 1);
	        }

	        if (initData.caption) {
	            this.captionInput.val(initData.caption);
	        }

	        if (initData.summary) {
	            this.summaryInput.val(initData.summary);
	        }

	        if (initData.backgroundColor) {
	            this.backgroundColorPicker.css('backgroundColor', initData.backgroundColor);
	        }

	        if (initData.attachment) {
	            this.backgroundAttachment.val(initData.attachment);
	        }

	        if (initData.repeat) {
	            this.backgroundRepeat.val(initData.repeat);
	        }

	        if (initData.positionX) {
	            this.backgroundPositionX.val(initData.positionX);
	        }

	        if (initData.positionY) {
	            this.backgroundPositionY.val(initData.positionY);
	        }

	        if (initData.scope) {
	            this.backgroundScope[0].checked = true;
	        }

	        if (initData.headerType) {

	            this.backgroundHeaderItems.removeClass('selected_item');
	            // this.backgroundHeaderItems.first().addClass('selected_item');

	            var headerClass = 'background_header_item_none';

	            if (initData.headerType ==='left') {
	                headerClass = 'background_header_item_left';

	            } else if (initData.headerType === 'top') {
	                headerClass = 'background_header_item_top';

	            } else if (initData.headerType === 'left_top') {
	                headerClass = 'background_header_item_left_top';

	            }

	            var $header = this.backgroundHeaderItems.find('.' + headerClass);
	            $header = $header.closest('.kk_background_header_item');
	            $header.addClass('selected_item');
	        }
	    }
	};

	TableDialog.prototype.openDialog = function(initData){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_table");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.resetFields(initData);

	    this.setDialogPosition($dialog);
	};

	module.exports = TableDialog;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);
	var _AbstractUploadDialog = __webpack_require__(50);

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function CellDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_cell kk_dialog_table_cell">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">' + window.kukuResource.cellDialog.title_modify + '</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_tab_menus">' +
	                    '<div class="kk_tab_menu_item kk_tab_menu_common kk_tab_menu_on">' + window.kukuResource.cellDialog.tab_common + '</div>' +
	                    '<div class="kk_tab_menu_item kk_tab_menu_background">' + window.kukuResource.cellDialog.tab_background + '</div>' +
	                '</div>' +
	                '<div class="kk_tab_contents_wrap">' +
	                    '<div class="kk_tab_contents kk_tab_contents_common kk_tab_contents_on">' +
	                        '<div class="kk_contents_row kk_dialog_cell_common_property">' +
	                            '<table>' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td>'  + window.kukuResource.cellDialog.vertical_align_count + '</td>' +
	                                        '<td>' +
	                                            '<select class="kk_cell_vertical_align_select">' +
	                                                '<option value="default">' + window.kukuResource.cellDialog.vertical_align_default + '</option>' +
	                                                '<option value="baseline">' + window.kukuResource.cellDialog.vertical_align_baseline + '</option>' +
	                                                '<option value="top">' + window.kukuResource.cellDialog.vertical_align_top + '</option>' +
	                                                '<option value="middle">' + window.kukuResource.cellDialog.vertical_align_middle + '</option>' +
	                                                '<option value="bottom">' + window.kukuResource.cellDialog.vertical_align_bottom + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td>'  + window.kukuResource.cellDialog.align_count + '</td>' +
	                                        '<td>' +
	                                            '<select class="kk_cell_align_select">' +
	                                                '<option value="default">' + window.kukuResource.cellDialog.align_default + '</option>' +
	                                                '<option value="left">' + window.kukuResource.cellDialog.align_left + '</option>' +
	                                                '<option value="center">' + window.kukuResource.cellDialog.align_center + '</option>' +
	                                                '<option value="right">' + window.kukuResource.cellDialog.align_right + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>'  + window.kukuResource.cellDialog.white_space_label + '</td>' +
	                                        '<td>' +
	                                            '<select class="kk_cell_white_space_select">' +
	                                                '<option value="default">' + window.kukuResource.cellDialog.white_space_default + '</option>' +
	                                                '<option value="normal">' + window.kukuResource.cellDialog.white_space_normal + '</option>' +
	                                                '<option value="nowrap">' + window.kukuResource.cellDialog.white_space_nowrap + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td></td>' +
	                                        '<td></td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +

	                        '<div class="kk_contents_row kk_dialog_cell_common_header">' +
	                            '<table>' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td>'  + window.kukuResource.cellDialog.header_label + '</td>' +
	                                        '<td>' +
	                                            '<select class="kk_cell_header_select">' +
	                                                '<option value="default">' + window.kukuResource.cellDialog.header_default + '</option>' +
	                                                '<option value="td">' + window.kukuResource.cellDialog.header_none + '</option>' +
	                                                '<option value="th">' + window.kukuResource.cellDialog.header_hr + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td>'  + window.kukuResource.cellDialog.scope_label + '</td>' +
	                                        '<td>' +
	                                            '<select class="kk_cell_header_scope_select">' +
	                                                '<option value="default">' + window.kukuResource.cellDialog.scope_default + '</option>' +
	                                                '<option value="none">' + window.kukuResource.cellDialog.scope_none + '</option>' +
	                                                '<option value="row">' + window.kukuResource.cellDialog.scope_row + '</option>' +
	                                                '<option value="col">' + window.kukuResource.cellDialog.scope_col + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +

	                        '<div class="kk_contents_row kk_dialog_table_common_border kk_accordion_field">' +
	                            '<table>' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.cellDialog.border_type + '</td>' +
	                                        '<td colspan="3">' +
	                                            '<div>' +
	                                                '<div class="kk_dialog_table_border_type_item selected_item">' +
	                                                    '<div class="kk_dialog_table_border_solid "/>' +
	                                                '</div>' +
	                                                '<div class="kk_dialog_table_border_type_item">' +
	                                                    '<div class="kk_dialog_table_border_double"/>' +
	                                                '</div>' +
	                                                '<div class="kk_dialog_table_border_type_item">' +
	                                                    '<div class="kk_dialog_table_border_dashed"/>' +
	                                                '</div>' +
	                                                '<div class="kk_dialog_table_border_type_item">' +
	                                                    '<div class="kk_dialog_table_border_dotted"/>' +
	                                                '</div>' +
	                                                '<div class="kk_dialog_table_border_type_item">' +
	                                                    '<div class="kk_dialog_table_border_none"/>' +
	                                                    '<span ' + ($.browser.chrome ? ' style="line-height:26px;"' : '') + '>' + window.kukuResource.cellDialog.border_none_type + '</span>' +
	                                                '</div>' +
	                                            '</div>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.cellDialog.border_color + '</td>' +
	                                        '<td>' + '<div class="kk_dialog_color_picker kk_dialog_cell_border_color_picker"/>' + '</td>' +
	                                        '<td>' + window.kukuResource.cellDialog.border_width + '</td>' +
	                                        '<td>' + '<input type="text" class="smartspinner spinner_custom kk_dialog_cell_border_width_input" />' + '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.cellDialog.border_option + '</td>' +
	                                        '<td colspan="3">' +
	                                            '<div class="kk_dialog_table_border_line_wrap">' +
	                                                '<div class="kk_dialog_table_border_group">' +
	                                                    '<div class="kk_dialog_table_border_group_item">' +
	                                                        '<table class="kk_dialog_table_border_group_outline">' +
	                                                            '<colgroup>' +
	                                                                '<col style="width:50%;">' +
	                                                                '<col style="width:50%;">' +
	                                                            '</colgroup>' +
	                                                            '<tbody>' +
	                                                                '<tr><td></td><td></td></tr>' +
	                                                                '<tr><td></td><td></td></tr>' +
	                                                            '</tbody>' +
	                                                        '</table>' +
	                                                        '<div class="border_group_title">' + window.kukuResource.cellDialog.border_outline + '</div>' +
	                                                    '</div>' +
	                                                    '<div class="kk_dialog_table_border_group_item">' +
	                                                        '<table class="kk_dialog_table_border_group_inner">' +
	                                                            '<colgroup>' +
	                                                                '<col style="width:50%;">' +
	                                                                '<col style="width:50%;">' +
	                                                            '</colgroup>' +
	                                                            '<tbody>' +
	                                                                '<tr><td style="border-right: 1px solid #989898;border-bottom: 1px solid #989898;"></td><td style="border-left: 1px solid #989898;border-bottom: 1px solid #989898;"></td></tr>' +
	                                                                '<tr><td style="border-top: 1px solid #989898;border-right: 1px solid #989898;"></td><td style="border-top: 1px solid #989898;border-left: 1px solid #989898;"></td></tr>' +
	                                                            '</tbody>' +
	                                                        '</table>' +
	                                                        '<div class="border_group_title">' + window.kukuResource.cellDialog.border_inner + '</div>' +
	                                                    '</div>' +
	                                                    '<div class="kk_dialog_table_border_group_item">' +
	                                                        '<table class="kk_dialog_table_border_group_lineAll">' +
	                                                            '<colgroup>' +
	                                                                '<col style="width:50%;">' +
	                                                                '<col style="width:50%;">' +
	                                                            '</colgroup>' +
	                                                            '<tbody>' +
	                                                                '<tr><td style="border-right: 1px solid #989898;border-bottom: 1px solid #989898;"></td><td style="border-left: 1px solid #989898;border-bottom: 1px solid #989898;"></td></tr>' +
	                                                                '<tr><td style="border-top: 1px solid #989898;border-right: 1px solid #989898;"></td><td style="border-top: 1px solid #989898;border-left: 1px solid #989898;"></td></tr>' +
	                                                            '</tbody>' +
	                                                        '</table>' +
	                                                        '<div class="border_group_title">' + window.kukuResource.cellDialog.border_all + '</div>' +
	                                                    '</div>' +
	                                                '</div>' +

	                                                '<div class="kk_dialog_table_border_controller">' +
	                                                    '<table class="kk_dialog_table_border_controller_wrap">' +
	                                                        '<colgroup>' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                        '</colgroup>' +
	                                                        '<tbody>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;"></td>' +
	                                                                '<td></td>' +
	                                                                '<td></td>' +
	                                                                '<td></td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;">' +
	                                                                    '<div class="kk_border_controller_buttons kk_border_controller_left_top">' + '―' + '</div>' +
	                                                                '</td>' +
	                                                                '<td colspan="4" rowspan="3">' +
	                                                                    '<table class="kk_dialog_table_border_controller_table">' +
	                                                                        '<colgroup>' +
	                                                                            '<col style="width:50%;">' +
	                                                                            '<col style="width:50%;">' +
	                                                                        '</colgroup>' +
	                                                                        '<tbody>' +
	                                                                            '<tr><td></td><td></td></tr>' +
	                                                                            '<tr><td></td><td></td></tr>' +
	                                                                        '</tbody>' +
	                                                                    '</table>' +
	                                                                '</td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;">' +
	                                                                    '<div class="kk_border_controller_buttons kk_border_controller_left_middle">' + '―' + '</div>' +
	                                                                '</td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;">' +
	                                                                    '<div class="kk_border_controller_buttons kk_border_controller_left_bottom">' + '―' + '</div>' +
	                                                                '</td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;"></td>' +
	                                                                '<td>' +
	                                                                    '<div class="kk_border_controller_buttons kk_border_controller_bottom_left">' + ' | ' + '</div>' +
	                                                                '</td>' +
	                                                                '<td>' +
	                                                                    '<div class="kk_border_controller_buttons kk_border_controller_bottom_center">' + ' | ' + '</div>' +
	                                                                '</td>' +
	                                                                '<td>' +
	                                                                    '<div class="kk_border_controller_buttons kk_border_controller_bottom_right">' + ' | ' + '</div>' +
	                                                                '</td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                        '</tbody>' +
	                                                    '</table>' +
	                                                '</div>' +
	                                            '</div>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                    '</div>' +

	                    '<div class="kk_tab_contents kk_tab_contents_background">' +
	                        '<div class="kk_contents_row kk_dialog_cell_background_property">' +
	                            '<table>' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.cellDialog.table_background_image + '</td>' +
	                                        '<td colspan="3">' +
	                                            '<input type="text" class="kk_file_open_path_input">' + '<label class="kk_file_open_input_label kk_dialog_button">' + window.kukuResource.cellDialog.file_input_label  + '</label>' +

	                                            (typeof window.FormData === 'undefined' ? '<form class="uploadForm" method="post" enctype="multipart/form-data" action="">' : '') +
	                                            '<input name="' + Define.NAME.UPLOAD_IMAGE_TYPE + '" type="file" accept="' + '.' + Define.IMAGE_TYPE_FILES.join(',.') + '" class="kk_file_open_input">' +
	                                            (typeof window.FormData === 'undefined' ? '</form>' : '') +

	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>'  + window.kukuResource.cellDialog.table_background_attachment + '</td>' +
	                                        '<td>' +
	                                            '<select class="kk_cell_bg_attachment_select">' +
	                                                '<option value="default">' + window.kukuResource.cellDialog.attachment_default + '</option>' +
	                                                '<option value="scroll">' + window.kukuResource.cellDialog.attachment_scroll + '</option>' +
	                                                '<option value="fixed">' + window.kukuResource.cellDialog.attachment_fixed + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td>'  + window.kukuResource.cellDialog.table_background_position_x + '(px)</td>' +
	                                        '<td>' + '<input type="text" value="" class="kk_dialog_cell_bg_position_x_input input_sm" /></td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>'  + window.kukuResource.cellDialog.table_background_repeat_label + '</td>' +
	                                        '<td>' +
	                                            '<select class="kk_cell_bg_repeat_select">' +
	                                                '<option value="default">' + window.kukuResource.cellDialog.table_background_repeat_default + '</option>' +
	                                                '<option value="no-repeat">' + window.kukuResource.cellDialog.table_background_no_repeat + '</option>' +
	                                                '<option value="repeat">' + window.kukuResource.cellDialog.table_background_repeat + '</option>' +
	                                                '<option value="repeat-x">' + window.kukuResource.cellDialog.table_background_repeat_x + '</option>' +
	                                                '<option value="repeat-y">' + window.kukuResource.cellDialog.table_background_repeat_y + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td>'  + window.kukuResource.cellDialog.table_background_position_y + '(px)</td>' +
	                                        '<td>' + '<input type="text" value="" class="kk_dialog_cell_bg_position_y_input input_sm" /></td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td>' + window.kukuResource.cellDialog.background_color + '</td>' +
	                                        '<td>' + '<div class="kk_dialog_color_picker kk_dialog_cell_bg_color_picker"/>' + '</td>' +
	                                        '<td>' + '</td>' +
	                                        '<td>' + '</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +

	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(CellDialog.prototype, new AbstractDialog());
	$.extend(CellDialog.prototype, new _AbstractUploadDialog());

	CellDialog.prototype.inputChange = function(e){
	    var $element = $(e.target);
	    var value = parseInt($element.val());

	    if ($element.hasClass('kk_dialog_cell_bg_position_x_input')) {
	        if (!isNaN(value)) {
	            this.defaultCellSet.positionX = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultCellSet.positionX || '');
	            }
	        }

	    } else if ($element.hasClass('kk_dialog_cell_bg_position_y_input')) {
	        if (!isNaN(value)) {
	            this.defaultCellSet.positionY = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultCellSet.positionY || '');
	            }
	        }

	    }
	};

	CellDialog.prototype.selectChange = function(e){
	    var $element = $(e.target);

	    if ($element.hasClass('kk_cell_vertical_align_select')) {
	        this.defaultCellSet.verticalAlign = $element.val() === 'default' ? null : $element.val();

	    } else if ($element.hasClass('kk_cell_align_select')) {
	        this.defaultCellSet.align = $element.val() === 'default' ? null : $element.val();

	    } else if ($element.hasClass('kk_cell_white_space_select')) {
	        this.defaultCellSet.whiteSpace = $element.val() === 'default' ? null : $element.val();

	    } else if ($element.hasClass('kk_cell_header_select')) {
	        this.defaultCellSet.headerType = $element.val() === 'default' ? null : $element.val();

	    } else if ($element.hasClass('kk_cell_header_scope_select')) {
	        this.defaultCellSet.scopeType = $element.val() === 'default' ? null : $element.val();

	    } else if ($element.hasClass('kk_cell_bg_attachment_select')) {
	        this.defaultCellSet.attachment = $element.val() === 'default' ? null : $element.val();

	    } else if ($element.hasClass('kk_cell_bg_repeat_select')) {
	        this.defaultCellSet.repeat = $element.val() === 'default' ? null : $element.val();

	    }
	};

	CellDialog.prototype.borderLineClick = function(e){
	    var $target = $(e.target);

	    var $selectedBorderTypeItem = this.borderTypeItems.filter('.selected_item');
	    var $borderType = $selectedBorderTypeItem.children().first();
	    var borderType = 'solid';
	    var borderWidth = this.borderWidth.val();
	    var borderColor = Util.getRgbToHex(this.borderColorPicker.css('backgroundColor')) || '#000000';

	    var $tds = this.borderLineTable.find('td');

	    if ($borderType.hasClass('kk_dialog_table_border_solid')) {
	        borderType = 'solid';

	    } else if ($borderType.hasClass('kk_dialog_table_border_double')) {
	        borderType = 'double';

	    } else if ($borderType.hasClass('kk_dialog_table_border_dashed')) {
	        borderType = 'dashed';

	    } else if ($borderType.hasClass('kk_dialog_table_border_dotted')) {
	        borderType = 'dotted';

	    } else if ($borderType.hasClass('kk_dialog_table_border_none')) {
	        borderType = 'none';
	    }

	    var borderString = borderWidth + 'px ' + borderType + ' ' + borderColor;

	    if ($target.hasClass('kk_border_controller_left_top')) {
	        $tds.eq(0).css('border-top', borderString);
	        $tds.eq(1).css('border-top', borderString);

	        this.defaultCellSet.border.top = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass('kk_border_controller_left_middle')) {
	        $tds.eq(0).css('border-bottom', borderString);
	        $tds.eq(1).css('border-bottom', borderString);
	        $tds.eq(2).css('border-top', borderString);
	        $tds.eq(3).css('border-top', borderString);

	        this.defaultCellSet.border.middle = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass('kk_border_controller_left_bottom')) {
	        $tds.eq(2).css('border-bottom', borderString);
	        $tds.eq(3).css('border-bottom', borderString);

	        this.defaultCellSet.border.bottom = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass('kk_border_controller_bottom_left')) {
	        $tds.eq(0).css('border-left', borderString);
	        $tds.eq(2).css('border-left', borderString);

	        this.defaultCellSet.border.left = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass('kk_border_controller_bottom_center')) {
	        $tds.eq(0).css('border-right', borderString);
	        $tds.eq(1).css('border-left', borderString);
	        $tds.eq(2).css('border-right', borderString);
	        $tds.eq(3).css('border-left', borderString);

	        this.defaultCellSet.border.center = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass('kk_border_controller_bottom_right')) {
	        $tds.eq(1).css('border-right', borderString);
	        $tds.eq(3).css('border-right', borderString);

	        this.defaultCellSet.border.right = { width : borderWidth, type : borderType, color : borderColor };
	    }
	};

	CellDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    var keydownEvent = function(event){
	        event = event || window.event;

	        var target = event.target;
	        var keyID = (event.which) ? event.which : event.keyCode;

	        if(keyID == 8 || keyID == 46 || (keyID >= 48 && keyID <= 57 ) || (keyID >= 96 && keyID <= 105) ) {
	            return;
	        } else {
	            _this.stopEvent(event);
	            target.value = target.value.replace(/[\ㄱ-ㅎㅏ-ㅣ가-힣]/g, '');
	            event.resultValue = false;
	            return false;
	        }
	    };

	    var keyupEvent = function(event){
	        event = event || window.event;

	        var target = event.target;
	        var value = parseInt(target.value);

	        target.reset(value);
	    };

	    //TAB Element
	    this.tabCommon = this.$dNode.find('.kk_tab_menu_common');
	    this.tabBackground = this.$dNode.find('.kk_tab_menu_background');

	    this.tabCommonContents = this.$dNode.find('.kk_tab_contents_common');
	    this.tabBackgroundContents = this.$dNode.find('.kk_tab_contents_background');

	    this.$dNode.find('.smartspinner').on('keydown', keydownEvent).on('keyup', keyupEvent);

	    //Cell Common Setting Elements
	    this.verticalAlignSelect = this.$dNode.find('.kk_cell_vertical_align_select').on('change', $.proxy(this.selectChange, this));
	    this.alignSelect = this.$dNode.find('.kk_cell_align_select').on('change', $.proxy(this.selectChange, this));
	    this.whiteSpaceSelect = this.$dNode.find('.kk_cell_white_space_select').on('change', $.proxy(this.selectChange, this));

	    this.headerTypeSelect = this.$dNode.find('.kk_cell_header_select').on('change', $.proxy(this.selectChange, this));
	    this.scopeTypeSelect = this.$dNode.find('.kk_cell_header_scope_select').on('change', $.proxy(this.selectChange, this));

	    //Cell Border Setting Elements
	    this.borderTypeItems = this.$dNode.find('.kk_dialog_table_border_type_item').on('click', function(e){
	        var $target = $(e.target);

	        if (!$target.hasClass('kk_dialog_table_border_type_item')){
	            $target = $target.closest('.kk_dialog_table_border_type_item');
	        }

	        if ($target.length) {
	            _this.borderTypeItems.removeClass('selected_item');
	            $target.addClass('selected_item');

	            if ($target.find('.kk_dialog_table_border_double').length) {
	                _this.borderWidth[0].reset(3);
	            }
	        }
	    });

	    this.borderColorPicker = this.$dNode.find('.kk_dialog_cell_border_color_picker');

	    this.borderWidth = this.$dNode.find('.kk_dialog_cell_border_width_input').spinit({ height: 30, width: 90, min: 0, initValue: 1, max: 10 });

	    this.borderLineTable = this.$dNode.find('.kk_dialog_table_border_controller_table');

	    this.borderLineControlButtons = this.$dNode.find('.kk_border_controller_buttons').on('click', $.proxy(this.borderLineClick, this));

	    this.borderLineControlLeftTop = this.borderLineControlButtons.filter('.kk_border_controller_left_top');
	    this.borderLineControlLeftMiddle = this.borderLineControlButtons.filter('.kk_border_controller_left_middle');
	    this.borderLineControlLeftBottom = this.borderLineControlButtons.filter('.kk_border_controller_left_bottom');
	    this.borderLineControlBottomLeft = this.borderLineControlButtons.filter('.kk_border_controller_bottom_left');
	    this.borderLineControlBottomCenter = this.borderLineControlButtons.filter('.kk_border_controller_bottom_center');
	    this.borderLineControlBottomRight = this.borderLineControlButtons.filter('.kk_border_controller_bottom_right');

	    this.borderLineInnerButton = this.$dNode.find('.kk_dialog_table_border_group_inner');
	    this.borderLineAllButton = this.$dNode.find('.kk_dialog_table_border_group_lineAll');

	    this.$borderItems = this.$dNode.find('.kk_dialog_table_border_group_item').on('click', function(e){
	        var $borderTypeNode = $(this.childNodes[0]);

	        if ($borderTypeNode.hasClass('kk_dialog_table_border_group_outline')){
	            _this.borderLineClick({target : _this.borderLineControlLeftTop});
	            _this.borderLineClick({target : _this.borderLineControlLeftBottom});
	            _this.borderLineClick({target : _this.borderLineControlBottomLeft});
	            _this.borderLineClick({target : _this.borderLineControlBottomRight});

	        } else if ($borderTypeNode.hasClass('kk_dialog_table_border_group_inner')){
	            _this.borderLineClick({target : _this.borderLineControlLeftMiddle});
	            _this.borderLineClick({target : _this.borderLineControlBottomCenter});

	        } else if ($borderTypeNode.hasClass('kk_dialog_table_border_group_lineAll')){
	            _this.borderLineClick({target : _this.borderLineControlLeftTop});
	            _this.borderLineClick({target : _this.borderLineControlLeftMiddle});
	            _this.borderLineClick({target : _this.borderLineControlLeftBottom});
	            _this.borderLineClick({target : _this.borderLineControlBottomLeft});
	            _this.borderLineClick({target : _this.borderLineControlBottomCenter});
	            _this.borderLineClick({target : _this.borderLineControlBottomRight});
	        }
	    });




	    ///////////////////// FileUpload Start //////////////////////

	    var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        if(data && !data.isError && data.statusText !== "error") {
	            _this.$pathInput.val(data.url);
	            _this.defaultCellSet.image = data.url;
	        } else {
	            _this.$dom.selection.restoreRange();
	            _this.$dom.selection.editorBlur();
	            alert(window.kukuResource.imageDialog.image_upload_error);
	        }

	        _this.$pathInput.attr('style', '');
	    };

	    //Table Background Setting Elements
	    this.$fileInput = this.$dNode.find('.kk_file_open_input').on('change', function(e){
	        _this.doFileUpload(Define.NAME.UPLOAD_IMAGE_TYPE, url, callbackFn);
	    });

	    ///////////////////// FileUpload End //////////////////////




	    this.imageFileInputLable = this.$dNode.find('.kk_file_open_input_label').on('click', function(e){
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	    });

	    this.$pathInput = this.$dNode.find('.kk_file_open_path_input').on('input', function(e){
	        _this.defaultCellSet.image = _this.$pathInput.val();
	    });


	    this.backgroundAttachment = this.$dNode.find('.kk_cell_bg_attachment_select').on('change', $.proxy(this.selectChange, this));
	    this.backgroundRepeat = this.$dNode.find('.kk_cell_bg_repeat_select').on('change', $.proxy(this.selectChange, this));

	    this.backgroundPositionX = this.$dNode.find('.kk_dialog_cell_bg_position_x_input').on('input', $.proxy(this.inputChange, this));
	    this.backgroundPositionY = this.$dNode.find('.kk_dialog_cell_bg_position_y_input').on('input', $.proxy(this.inputChange, this));

	    this.backgroundColorPicker = this.$dNode.find('.kk_dialog_cell_bg_color_picker');


	    this.$dNode.find(".kk_dialog_cell_border_color_picker").kkColorPicker({
	        callback : function(e, data){
	            _this.borderColorPicker.css("background-color", data.color);
	            _this.borderColorPicker.find(".ui_colorpicker").hide();
	        }
	    });

	    this.$dNode.find(".kk_dialog_cell_bg_color_picker").kkColorPicker({
	        callback : function(e, data){
	            _this.backgroundColorPicker.css("background-color", data.color);
	            _this.backgroundColorPicker.find(".ui_colorpicker").hide();

	            _this.defaultCellSet.backgroundColor = data.color;
	        }
	    });

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass("ok_button")){
	            $button.on("click", function(){
	                _this.defaultCellSet.image = _this.$pathInput.val();
	                _this.defaultCellSet.subType = 'cellModify';

	                var opSource = {
	                    type : "update",
	                    name : "table",
	                    value : _this.defaultCellSet
	                };

	                _this.router.doOperation([opSource]);

	                _this.closeDialog();
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.$dNode.find('.kk_tab_menu_item').on('click', function(e){
	        var $target = $(e.target);

	        if ($target.hasClass('kk_tab_menu_common')) {
	            _this.tabCommon.addClass('kk_tab_menu_on');
	            _this.tabBackground.removeClass('kk_tab_menu_on');

	            _this.tabCommonContents.addClass('kk_tab_contents_on');
	            _this.tabBackgroundContents.removeClass('kk_tab_contents_on');

	        } else {
	            _this.tabCommon.removeClass('kk_tab_menu_on');
	            _this.tabBackground.addClass('kk_tab_menu_on');

	            _this.tabCommonContents.removeClass('kk_tab_contents_on');
	            _this.tabBackgroundContents.addClass('kk_tab_contents_on');
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	CellDialog.prototype.resetFields = function(initData){

	    //Default Tab Reset Setting
	    this.tabCommon.addClass('kk_tab_menu_on');
	    this.tabBackground.removeClass('kk_tab_menu_on');
	    this.tabCommonContents.addClass('kk_tab_contents_on');
	    this.tabBackgroundContents.removeClass('kk_tab_contents_on');


	    //Default Common Setting Items
	    this.verticalAlignSelect[0].selectedIndex = 0;
	    this.alignSelect[0].selectedIndex = 0;
	    this.whiteSpaceSelect[0].selectedIndex = 0;


	    //Header Setting Items
	    this.headerTypeSelect[0].selectedIndex = 0;
	    this.scopeTypeSelect[0].selectedIndex = 0;
	    
	    
	    //Border Setting Items
	    this.borderTypeItems.removeClass('selected_item');
	    this.borderTypeItems.first().addClass('selected_item');

	    this.borderColorPicker.css('backgroundColor', '');
	    this.borderWidth[0].reset(1);

	    this.borderLineTable.find('td').css('border', '');


	    //Default Background Setting Items
	    this.$pathInput.val('');
	    this.$fileInput.val('');

	    this.backgroundAttachment[0].selectedIndex = 0;
	    this.backgroundRepeat[0].selectedIndex = 0;

	    this.backgroundPositionX.val('');
	    this.backgroundPositionY.val('');

	    this.backgroundColorPicker.css('backgroundColor', '');

	    
	    this.defaultCellSet = {
	        align : null,
	        verticalAlign : null,
	        whiteSpace : null,

	        headerType : null,
	        scopeType : null,

	        border : {
	            // defaultBorder : { width : 0, type : 'solid', color : '#000000' },
	            // top : { width : 0, type : 'solid', color : '#000000' },
	            // bottom : { width : 0, type : 'solid', color : '#000000' },
	            // left : { width : 0, type : 'solid', color : '#000000' },
	            // right : { width : 0, type : 'solid', color : '#000000' }
	        },

	        image : null,
	        attachment : null,
	        repeat : null,
	        positionX : null,
	        positionY : null,
	        backgroundColor :null,
	    };

	    var tableSelectedNodes = this.$dom.selection.getSelectedTd();

	    if (tableSelectedNodes.length > 1) {
	        this.borderLineControlLeftMiddle.show();
	        this.borderLineControlBottomCenter.show();
	        this.borderLineInnerButton.parent().show();
	        this.borderLineAllButton.parent().show();
	    } else {
	        //Default Single Cell Controller Setting
	        this.borderLineControlLeftMiddle.hide();
	        this.borderLineControlBottomCenter.hide();
	        this.borderLineInnerButton.parent().hide();
	        this.borderLineAllButton.parent().hide();

	        var $tds = this.borderLineTable.find('td');

	        $tds.eq(0).css('border-bottom', 'none');
	        $tds.eq(1).css('border-bottom', 'none');
	        $tds.eq(2).css('border-top', 'none');
	        $tds.eq(3).css('border-top', 'none');
	        $tds.eq(0).css('border-right', 'none');
	        $tds.eq(1).css('border-left', 'none');
	        $tds.eq(2).css('border-right', 'none');
	        $tds.eq(3).css('border-left', 'none');
	    }

	    if (initData) {
	        if (initData.verticalAlign) {
	            this.verticalAlignSelect.val(initData.verticalAlign);
	        }

	        if (initData.align) {
	            this.alignSelect.val(initData.align);
	        }

	        if (initData.whiteSpace) {
	            this.whiteSpaceSelect.val(initData.whiteSpace);
	        }

	        if (initData.headerType) {
	            this.headerTypeSelect.val(initData.headerType);
	        }

	        if (initData.scopeType) {
	            this.scopeTypeSelect.val(initData.scopeType);
	        }

	        if (initData.image) {
	            this.$pathInput.val(initData.image);
	        }

	        if (initData.backgroundColor) {
	            this.backgroundColorPicker.css('backgroundColor', initData.backgroundColor);
	        }

	        if (initData.attachment) {
	            this.backgroundAttachment.val(initData.attachment);
	        }

	        if (initData.repeat) {
	            this.backgroundRepeat.val(initData.repeat);
	        }

	        if (initData.positionX) {
	            this.backgroundPositionX.val(initData.positionX);
	        }

	        if (initData.positionY) {
	            this.backgroundPositionY.val(initData.positionY);
	        }
	    }
	};

	CellDialog.prototype.getCell = function() {
	    var range = this.$dom.selection.get();
	    var cell = range.startContainer;
	    if(cell.nodeName != "TD"){
	        cell = Util.findParentNode(range.startContainer, "td");
	    }
	    return cell;
	};

	CellDialog.prototype.openDialog = function(initData){
	    this.$dialogNode.find(".kk_dialog").hide();
	    var $dialog = this.$dialogNode.find(".kk_dialog_cell");
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();
	    this.resetFields(initData);

	    this.setDialogPosition($dialog);
	};

	module.exports = CellDialog;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	function SettingDialog(editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObject;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_setting">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">'+ window.kukuResource.settingDialog.title +'</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_contents_row">' +
	                    '<label>' +
	                        window.kukuResource.settingDialog.pageTitleLabel  +
	                    '</label>' +
	                    '<input type="text" class="kk_setting_page_title_input">' +
	                '</div>' +
	                '<div class="kk_contents_row">' +
	                    '<label>' +
	                        window.kukuResource.settingDialog.encodingLabel  +
	                    '</label>' +
	                    '<select class="kk_setting_encoding_selection">' +
	                        (function(){
	                            var encodingTypes = window.kukuResource.settingDialog.encodingTypes;

	                            var options = '';

	                            for (var key in encodingTypes){
	                                options += '<option value="' + key + '">' + encodingTypes[key] + '</option>';
	                            }

	                            return options;
	                        })() +
	                    '</select>' +
	                '</div>' +
	                '<div class="kk_contents_row">' +
	                    '<label>' +
	                    window.kukuResource.settingDialog.encodingLabelDri  +
	                    '</label>' +
	                    '<input type="text" class="kk_setting_encoding_input">' +
	                '</div>' +
	                '<div class="kk_contents_row">' +
	                    '<label>' +
	                        window.kukuResource.settingDialog.languageLabel  +
	                    '</label>' +
	                    '<select class="kk_setting_language_selection">' +
	                        (function(){
	                            var languageTypes = window.kukuResource.settingDialog.languageTypes;

	                            var options = '';

	                            for (var key in languageTypes){
	                                options += '<option value="' + key + '">' + languageTypes[key] + '</option>';
	                            }

	                            return options;
	                        })() +
	                    '</select>' +
	                '</div>' +
	                '<div class="kk_contents_row">' +
	                    '<label>' +
	                        window.kukuResource.settingDialog.documentTypeLabel  +
	                    '</label>' +
	                    '<select class="kk_setting_document_type_selection">' +
	                        (function(){
	                            var languageTypes = window.kukuResource.settingDialog.documentTypes;

	                            var options = '';

	                            for (var key in languageTypes){
	                                options += '<option value="' + key + '">' + languageTypes[key] + '</option>';
	                            }

	                            return options;
	                        })() +
	                    '</select>' +
	                '</div>' +
	                '<div class="kk_contents_row">' +
	                    '<label>' +
	                        '<input type="checkbox" class="kk_setting_auto_save_checkbox">' + window.kukuResource.settingDialog.autoSaveLabel  +
	                    '</label>' +
	                    '<input type="text" class="kk_setting_auto_save_input input_sm">' + window.kukuResource.settingDialog.autoSaveMinuteLabel +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(SettingDialog.prototype, new AbstractDialog());

	SettingDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.pageTitleInput = this.$dNode.find('.kk_setting_page_title_input');
	    this.pageEncodingSelection = this.$dNode.find('.kk_setting_encoding_selection');
	    this.pageEncodingInput = this.$dNode.find('.kk_setting_encoding_input');
	    this.pageLanguageSelection = this.$dNode.find('.kk_setting_language_selection');
	    this.pageTypeSelection = this.$dNode.find('.kk_setting_document_type_selection');
	    this.pageAutoSaveCheck = this.$dNode.find('.kk_setting_auto_save_checkbox');
	    this.pageAutoSaveMinuteInput = this.$dNode.find('.kk_setting_auto_save_input');

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){

	                var title = _this.pageTitleInput.val();
	                var encoding = _this.pageEncodingSelection.val();
	                encoding = encoding === 'user' ? _this.pageEncodingInput.val() : encoding;

	                var language = _this.pageLanguageSelection.val();
	                language = language === 'none' ? '' : language;

	                var isAutoSave = _this.pageAutoSaveCheck[0].checked;
	                var autoSaveMinute = _this.pageAutoSaveMinuteInput.val();

	                var eDocument = _this.router.editorObject.editorDocument;
	                var $eDocument = $(eDocument);

	                var $head = Util.getHeaderNode(eDocument);
	                var $title = $head.find('title');

	                if (!$title.length) {
	                    $title = $('<title/>');
	                    $head.prepend($title);
	                }

	                $title.html(title);

	                if (encoding) {
	                    var metaHTML4Type = $head.find('meta[http-equiv="content-type"]');

	                    if (metaHTML4Type.length) {
	                        metaHTML4Type.attr('content', 'text/html;charset=' + encoding);
	                    } else {
	                        var metaHTML4Type = this.$dom.selection.createElement('meta');
	                        metaHTML4Type.attr({
	                            'http-equiv' : 'Content-Type',
	                            'content' : 'text/html; charset=' + encoding
	                        });
	                        $head.prepend(metaHTML4Type);
	                    }

	                    var metaHTML5Type = $eDocument.find('meta[charset]');

	                    if (metaHTML5Type.length) {
	                        metaHTML5Type.attr('charset', encoding);
	                    } else {
	                        var metaHTML5Type = this.$dom.selection.createElement('meta');
	                        metaHTML5Type.attr({
	                            'charset' : encoding
	                        });
	                        $head.prepend(metaHTML5Type);
	                    }
	                }

	                if (language) {
	                    $($eDocument[0].documentElement).attr({
	                        'lang' : language,
	                        'xml:lang' : language
	                    });
	                } else {
	                    $($eDocument[0].documentElement).removeAttr('lang').removeAttr('xml:lang');
	                }


	                _this.setNewDocTypeAppend();


	                _this.router.editorObject.isAutoSave = isAutoSave;

	                if (_this.router.editorObject.isAutoSave) {
	                    _this.router.editorObject.autoSaveMinute = (autoSaveMinute * 60000) || 60000;
	                    _this.router.editorObject.autoSaveList = _this.router.editorObject.autoSaveList || [];

	                    var editorContentView = _this.router.editorObject.editorContentView;

	                    _this.router.editorObject.autoSaveInterval = setInterval(function(){
	                        var dateObject = new Date();

	                        _this.router.editorObject.autoSaveList.push({
	                            timestamp : dateObject.format('yyyy-MM-dd HH:mm:ss'),
	                            html : editorContentView.html()
	                        });
	                    },  _this.router.editorObject.autoSaveMinute);
	                } else {
	                    _this.router.editorObject.autoSaveList = null;
	                    _this.router.editorObject.autoSaveMinute = 0;
	                    if (_this.router.editorObject.autoSaveInterval) {
	                        clearInterval( _this.router.editorObject.autoSaveInterval);
	                        _this.router.editorObject.autoSaveInterval = null;
	                    }
	                }

	                _this.closeDialog();
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.pageEncodingSelection.on('change', function(){
	        var encodingType = _this.pageEncodingSelection.val();

	        if (encodingType === 'user') {
	            encodingType = '';
	        }

	        _this.pageEncodingInput.val(encodingType);
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	SettingDialog.prototype.setNewDocTypeAppend = function() {
	    var docType = 'html';
	    var publicId = '';
	    var systemId = '';

	    var docTypeValue = this.pageTypeSelection.val();

	    switch (docTypeValue) {
	        case "xhtml1.1" :
	            publicId = "-//W3C//DTD XHTML 1.1//EN";
	            systemId = "http://www.w3c.org/TR/xhtml11/DTD/xhtml11.dtd";

	            break;

	        case "xhtml1.0transitional" :
	            publicId = "-//W3C//DTD XHTML 1.0 Transitional//EN";
	            systemId = "http://www.w3c.org/TR/xhtml1/DTD/xhtml1-transitional.dtd";
	            break;

	        case "xhtml1.0strict" :
	            publicId = "-//W3C//DTD XHTML 1.0 Strict//EN";
	            systemId = "http://www.w3c.org/TR/xhtml1/DTD/xhtml1-strict.dtd";
	            break;

	        case "xhtml1.0frameset" :
	            publicId = "-//W3C//DTD XHTML 1.0 Frameset//EN";
	            systemId = "http://www.w3c.org/TR/xhtml1/DTD/xhtml1-frameset.dtd";
	            break;

	        case "html4.01transitional" :
	            publicId = "-//W3C//DTD HTML 4.01 Transitional//EN";
	            systemId = "http://www.w3c.org/TR/xhtml4/loose.dtd";
	            break;

	        case "html4.01strict" :
	            publicId = "-//W3C//DTD HTML 4.01//EN";
	            systemId = "http://www.w3c.org/TR/xhtml4/strict.dtd";
	            break;

	        case "html4.01frameset" :
	            publicId = "-//W3C//DTD HTML 4.01 Frameset//EN";
	            systemId = "http://www.w3c.org/TR/xhtml4/frameset.dtd";
	            break;

	        case "html3.2" :
	            publicId = "-//W3C//DTD HTML 3.2 Final//EN";
	            systemId = "";
	            break;

	        case "html2.0" :
	            publicId = "-//IETF//DTD HTML 3.2//EN";
	            systemId = "";

	            break;

	        case "html5" :
	            break;

	        default:
	            docType = null;
	            break;
	    }

	    var eDocument = this.router.editorObject.editorDocument;

	    if (docType) {
	        var newDocType = eDocument.implementation.createDocumentType(docType, publicId, systemId);

	        if (eDocument.doctype) {
	            eDocument.replaceChild(newDocType, eDocument.doctype);
	        } else {
	            eDocument.insertBefore(newDocType, eDocument.documentElement);
	        }
	    } else {
	        $(eDocument.doctype).remove();
	    }
	};

	SettingDialog.prototype.setDocType = function() {
	    var docType = Util.getHtmlDocType(this.router.editorObject.editorDocument);

	    var publicId = docType ? docType.publicId : "";
	    var typeValue = 'default';

	    switch (publicId) {
	        case "-//W3C//DTD XHTML 1.1//EN" :
	            typeValue = "xhtml1.1";

	            break;

	        case "-//W3C//DTD XHTML 1.0 Transitional//EN" :
	            typeValue = "xhtml1.0transitional";

	            break;

	        case "-//W3C//DTD XHTML 1.0 Strict//EN" :
	            typeValue = "xhtml1.0strict";

	            break;

	        case "-//W3C//DTD XHTML 1.0 Frameset//EN" :
	            typeValue = "xhtml1.0frameset";

	            break;

	        case "-//W3C//DTD HTML 4.01 Transitional//EN" :
	            typeValue = "html4.01transitional";

	            break;

	        case "-//W3C//DTD HTML 4.01//EN" :
	            typeValue = "html4.01strict";

	            break;

	        case "-//W3C//DTD HTML 4.01 Frameset//EN" :
	            typeValue = "html4.01frameset";

	            break;

	        case "-//W3C//DTD HTML 3.2 Final//EN" :
	            typeValue = "html3.2";

	            break;

	        case "-//IETF//DTD HTML 3.2//EN" :
	            typeValue = "html2.0";

	            break;

	        case "" :
	            if (docType) {
	                typeValue = "html5";
	            }

	            break;

	        default:
	            break;
	    }

	    this.pageTypeSelection.val(typeValue);
	};

	SettingDialog.prototype.setLanguageType = function() {
	    var htmlLanguage = Util.getHtmlLanguageType(this.router.editorObject.editorDocument);

	    var langType = 'none';

	    if (htmlLanguage) {
	        htmlLanguage = htmlLanguage.toLowerCase();

	        var languageTypes = window.kukuResource.settingDialog.languageTypes;

	        for (var key in languageTypes){
	            if (key === htmlLanguage) {
	                langType = key;
	                break;
	            }
	        }
	    }

	    this.pageLanguageSelection.val(langType);
	};

	SettingDialog.prototype.setTitle = function() {
	    this.pageTitleInput.val(Util.getHtmlTitle(this.router.editorObject.editorDocument));
	};

	SettingDialog.prototype.setEncoding = function() {
	    var metaTypes = Util.getHtmlEncoding(this.router.editorObject.editorDocument);

	    var $metaTypeHTML4 = metaTypes.metaTypeHTML4;
	    var $metaTypeHTML5 = metaTypes.metaTypeHTML5;

	    var contentTypeValue = "user";

	    var charsetValue = "";

	    if ($metaTypeHTML4.length) {
	        var contentValue = $metaTypeHTML4.attr('content');

	        if (contentValue) {
	            contentValue = contentValue.toLowerCase();
	            var result = contentValue.match(/charset=([a-zA-Z0-9-]+)/);

	            if (result) {
	                charsetValue = result[1];
	            }
	        }
	    }

	    if ($metaTypeHTML5.length) {
	        var charset = $metaTypeHTML5.attr('charset');

	        if (charset) {
	            charsetValue = charset.toLowerCase();
	        }
	    }

	    if (charsetValue) {
	        var encodingTypes = window.kukuResource.settingDialog.encodingTypes;

	        for (var key in encodingTypes){
	            if (key === charsetValue) {
	                contentTypeValue = key;
	                break;
	            }
	        }
	    }

	    this.pageEncodingSelection.val(contentTypeValue);
	    this.pageEncodingInput.val(charsetValue);
	};

	SettingDialog.prototype.setAutoSave = function() {
	    this.pageAutoSaveCheck[0].checked = !!this.router.editorObject.isAutoSave;
	    this.pageAutoSaveMinuteInput.val(this.router.editorObject.autoSaveMinute / 60000 || "");
	};

	SettingDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_setting");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setTitle();
	    this.setDocType();
	    this.setLanguageType();
	    this.setEncoding();
	    this.setAutoSave();

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	/*
	 $(document).find('meta');

	 $('meta[http-equiv="content-type"]');


	 $('html').attr('lang', 'ko');
	 $('html').attr('xml:lang', 'ko');


	 $('html').attr('xmlns', 'http://www.w3.org/1999/xhtml');

	 $('title').html('test');


	 var newDoctype = document.implementation.createDocumentType(
	 'html',
	 '-//W3C//DTD XHTML 1.0 Transitional//EN',
	 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'
	 );

	 document.doctype.parentNode.replaceChild(newDoctype,document.doctype);

	 */

	module.exports = SettingDialog;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);

	var licenseInfo = {
	    companyName : '(주)Kukudocs',
	    licenseName : 'Standard Edition',
	    productKey : 'EXAMPLE_PRODUCT',
	    copyright : Define.EDITOR_INFO.COPYRIGHT,
	    reserved : Define.EDITOR_INFO.RESERVED,
	    version : Define.EDITOR_INFO.VERSION,
	    homepage : Define.EDITOR_INFO.HOMEPAGE
	};

	function AboutDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;

	    var logoHtml = '<div class="kk_about_logo">';
	    if(this.router.licOptions && this.router.licOptions.isOem && this.router.options.info) {
	        if(this.router.options.info.logoImg) {
	            logoHtml = '<div class="kk_about_logo" style="background-image: url(' + this.router.options.info.logoImg +');">';
	        }
	        if(this.router.options.info.companyName) {
	            licenseInfo.companyName = this.router.options.info.companyName
	        }
	        if(this.router.options.info.homepage) {
	            licenseInfo.homepage = this.router.options.info.homepage
	        }
	    }

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_about">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">'+ window.kukuResource.aboutDialog.title +'</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_contents_row kk_editor_about_information_wrapper">' +
	                    '<table class="kk_editor_about_information_table">' +
	                        '<colgroup>' +
	                            '<col style="width:110px;">' +
	                            '<col style="width:200px;">' +
	                        '</colgroup>' +
	                        '<tbody>' +
	                            '<tr>' +
	                                '<td>' + logoHtml + '</td>' +
	                                '<td>' +
	                                    '<p class="kk_editor_company_name">' + '<span>' + window.kukuResource.aboutDialog.companyTitle + '</span></p>' +
	                                    '<p class="kk_editor_sub_name">' + '<span>' + window.kukuResource.aboutDialog.editorTitle + '</span></p>' +
	                                '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' +
	                                    window.kukuResource.aboutDialog.companyName +
	                                '</td>' +
	                                '<td >' +
	                                    licenseInfo.companyName +
	                                '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' +
	                                    window.kukuResource.aboutDialog.licenseName +
	                                '</td>' +
	                                '<td>' +
	                                    licenseInfo.licenseName +
	                                '</td>' +
	                            '</tr>' +
	                            // '<tr>' +
	                            //     '<td>' +
	                            //         window.kukuResource.aboutDialog.productkeyName +
	                            //     '</td>' +
	                            //     '<td>' +
	                            //         licenseInfo.productKey +
	                            //     '</td>' +
	                            // '</tr>' +
	                            '<tr>' +
	                                '<td>' +
	                                    window.kukuResource.aboutDialog.versionName +
	                                '</td>' +
	                                '<td>' +
	                                    licenseInfo.version +
	                                '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' +
	                                    window.kukuResource.aboutDialog.homepage +
	                                '</td>' +
	                                '<td>' +
	                                    '<a href="' + licenseInfo.homepage + '" target="_blank">' + licenseInfo.homepage + '</a>' +
	                                '</td>' +
	                            '</tr>' +
	                        '</tbody>' +
	                    '</table>' +
	                    '<div class="kk_editor_about_information_line">' +
	                    '</div>' +
	                '</div>' +
	                '<div class="kk_contents_row">' + 
	                    '<p>' + licenseInfo.copyright + '</p>' +
	                    '<p>' + licenseInfo.reserved + '</p>' +
	                '</div>'+
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg">' + window.kukuResource.aboutDialog.closeButton + '</a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(AboutDialog.prototype, new AbstractDialog());

	AboutDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	AboutDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_about");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	module.exports = AboutDialog;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);

	function ConvertUpperLowerDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_upper_lower">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">' + window.kukuResource.upperLowerDialog.insert_title + '</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_upper_lower_dialog_contents">' +
	                    '<ul>' +
	                        '<li class="kk_contents_row"><input type="radio" name="upper_lower" value="upper"><span>' + window.kukuResource.upperLowerDialog.upper + '</span></li>' +
	                        '<li class="kk_contents_row"><input type="radio" name="upper_lower" value="lower"><span>' + window.kukuResource.upperLowerDialog.lower + '</span></li>' +
	                        '<li class="kk_contents_row"><input type="radio" name="upper_lower" value="capitalize_first"><span>' + window.kukuResource.upperLowerDialog.capitalize_first + '</span></li>' +
	                    '</ul>' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	                '</div>' +
	        '</div>';
	}

	$.extend(ConvertUpperLowerDialog.prototype, new AbstractDialog());

	ConvertUpperLowerDialog.prototype.initDialog = function(){
	    this.$dNode = $(this.templateHTML);

	    var $listItems = this.$dNode.find('li');
	    $listItems.on('click', function(e){
	        $(e.currentTarget).find('input').prop('checked', true);
	    });

	    this.$dNode.find('li > input').first().prop('checked', true);

	    var _this = this;
	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){
	                var $selectedChecked = _this.$dNode.find('input[type="radio"]:checked');

	                var value = $selectedChecked.val();

	                if (! value || value == ''){
	                    value = 'upper';
	                }

	                _this.router.doOperation({
	                    type:"create",
	                    name:"upperLower",
	                    value: value
	                });

	                _this.closeDialog();
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	ConvertUpperLowerDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_upper_lower");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	module.exports = ConvertUpperLowerDialog;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);
	var classClicked = 'clicked';

	function BlockQuoteDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_blockquote">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">' + window.kukuResource.blockquoteDialog.insert_title + '</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div class="kk_contents_row">' +
	                    '<p>' +
	                        '<img style="background-position: 5px 3px;" type="quote1">' +
	                        '<img style="background-position: -62px 3px;" type="quote2">' +
	                        '<img style="background-position: -126px 3px;" type="quote3">' +
	                        '<img style="background-position: -189px 3px;" type="quote4">' +
	                        '<img style="background-position: -252px 3px;" type="quote5">' +
	                        '<img style="background-position: -318px 3px;" type="quote6">' +
	                        '<img style="background-position: -383px 3px;" type="quote7">' +
	                        '<img style="background-position: -445px 3px;" type="quote8">' +
	                    '</p>' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	                '</div>' +
	        '</div>';
	}

	$.extend(BlockQuoteDialog.prototype, new AbstractDialog());

	BlockQuoteDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    var $images = this.$dNode.find('img');
	    $images.on('click', function(e){
	        _this.$dNode.find('.' + classClicked).removeClass(classClicked);

	        $(e.currentTarget).addClass(classClicked);
	    });


	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){

	                var value = _this.$dNode.find('.' + classClicked).attr('type');

	                _this.router.doOperation({
	                    type:"update",
	                    name:"blockquote",
	                    value: value
	                });

	                _this.closeDialog();
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	BlockQuoteDialog.prototype.openDialog = function(){
	    this.$dialogNode.find(".kk_dialog").hide();

	    var $dialog = this.$dialogNode.find(".kk_dialog_blockquote");

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    $dialog.find('img').removeClass(classClicked);
	    $dialog.find('img').first().addClass(classClicked);
	    this.setSelectionRange();
	    this.setDialogPosition($dialog);
	};

	module.exports = BlockQuoteDialog;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(47);

	var Define = __webpack_require__(3);

	function LayerDialog(editorElement, $domObject, router) {
	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);

	    this.router = router;
	    this.$dialogNode = this.editorElement.find(".kk_editor_dialog");
	    this.$dNode = null;
	    this.selInfo = null;

	    this.defaultLayerSet = null;

	    this.templateHTML = '' +
	        '<div class="kk_dialog kk_dialog_layer">' +
	            '<div class="kk_dialog_header">' +
	                '<div class="kk_dialog_title">' + window.kukuResource.layerDialog.insert_title + '</div>' +
	                '<div class="kk_dialog_close"></div>' +
	            '</div>' +
	            '<div class="kk_dialog_contents">' +
	                '<div>' +
	                    '<table>' +
	                        '<colgroup>' +
	                            '<col style="width:25%;">' +
	                            '<col style="width:25%;">' +
	                            '<col style="width:25%;">' +
	                            '<col style="width:25%;">' +
	                        '</colgroup>' +
	                        '<tbody>' +
	                            '<tr>' +
	                                '<td>' + window.kukuResource.layerDialog.width + '(px)</td>' +
	                                '<td>' + '<input type="text" value="" class="kk_dialog_layer_width_input" /></td>' +
	                                '<td>' + window.kukuResource.layerDialog.height + '(px)</td>' +
	                                '<td>' + '<input type="text" value="" class="kk_dialog_layer_height_input" /></td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' + window.kukuResource.layerDialog.positionX + '(px)</td>' +
	                                '<td>' + '<input type="text" value="" class="kk_dialog_layer_position_x_input" /></td>' +
	                                '<td>' + window.kukuResource.layerDialog.positionY + '(px)</td>' +
	                                '<td>' + '<input type="text" value="" class="kk_dialog_layer_position_y_input" /></td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' + window.kukuResource.layerDialog.id + '</td>' +
	                                '<td>' + '<input type="text" value="" class="kk_dialog_layer_id_input" /></td>' +
	                                '<td>' + window.kukuResource.layerDialog.className + '</td>' +
	                                '<td>' + '<input type="text" value="" class="kk_dialog_layer_class_input" /></td>' +
	                            '</tr>' +
	                        '</tbody>' +
	                    '</table>' +
	                '</div>' +
	            '</div>' +
	            '<div class="kk_dialog_footer">' +
	                '<ul class="kk_dialog_buttons">' +
	                    '<li><a class="kk_dialog_button ok_button btn_style_bg"><span>' + window.kukuResource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="kk_dialog_button cancel_button"><span>' + window.kukuResource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(LayerDialog.prototype, new AbstractDialog());

	LayerDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.titleNode = this.$dNode.find('.kk_dialog_title');
	    
	    this.$width = this.$dNode.find('.kk_dialog_layer_width_input').on('input', $.proxy(this.inputChange, this));
	    this.$height = this.$dNode.find('.kk_dialog_layer_height_input').on('input', $.proxy(this.inputChange, this));
	    this.$positionX = this.$dNode.find('.kk_dialog_layer_position_x_input').on('input', $.proxy(this.inputChange, this));
	    this.$positionY = this.$dNode.find('.kk_dialog_layer_position_y_input').on('input', $.proxy(this.inputChange, this));
	    this.$id = this.$dNode.find('.kk_dialog_layer_id_input').on('input', $.proxy(this.inputChange, this));
	    this.$class = this.$dNode.find('.kk_dialog_layer_class_input').on('input', $.proxy(this.inputChange, this));

	    this.$dNode.find(".kk_dialog_button").each(function(){
	        var $button = $(this);
	        if($button.hasClass('ok_button')){
	            $button.on("click", function(){

	                _this.closeDialog();

	                var isModify = _this.defaultLayerSet.isModify;

	                var opSource = {
	                    type : isModify ? "update" : "create",
	                    name : "layer",
	                    value : _this.defaultLayerSet
	                };

	                _this.router.doOperation(opSource);
	            });
	        }else if($button.hasClass('cancel_button')){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	LayerDialog.prototype.inputChange = function(e){
	    var $element = $(e.target);
	    var inputValue = $element.val();
	    var intValue = parseInt(inputValue);

	    if ($element.hasClass('kk_dialog_layer_width_input')) {
	        if (!isNaN(intValue)) {
	            this.defaultLayerSet.width = intValue;
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultLayerSet.width || '');
	            }
	        }

	    } else if ($element.hasClass('kk_dialog_layer_height_input')) {
	        if (!isNaN(intValue)) {
	            this.defaultLayerSet.height = intValue;
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultLayerSet.height || '');
	            }
	        }

	    } else if ($element.hasClass('kk_dialog_layer_position_x_input')) {
	        if (!isNaN(intValue)) {
	            this.defaultLayerSet.positionX = intValue;
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultLayerSet.positionX || '');
	            }
	        }

	    } else if ($element.hasClass('kk_dialog_layer_position_y_input')) {
	        if (!isNaN(intValue)) {
	            this.defaultLayerSet.positionY = intValue;
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultLayerSet.positionY || '');
	            }
	        }
	    } else if ($element.hasClass('kk_dialog_layer_id_input')) {
	        this.defaultLayerSet.id = $element.val();

	    } else if ($element.hasClass('kk_dialog_layer_class_input')) {
	        this.defaultLayerSet.className = $element.val();
	    }
	};

	LayerDialog.prototype.resetFields = function(initData){
	    this.defaultLayerSet = {
	        isModify : false,
	        width : null,
	        height : null,
	        positionX : null,
	        positionY : null,
	        id :null,
	        className :null
	    };

	    this.titleNode.html(window.kukuResource.layerDialog.title_insert);

	    this.$width.val('');
	    this.$height.val('');
	    this.$positionX.val('');
	    this.$positionY.val('');
	    this.$id.val('');
	    this.$class.val('');

	    if (initData) {
	        if (initData.type == 'modify') {
	            this.titleNode.html(window.kukuResource.tableDialog.modify_title);
	            this.defaultLayerSet.isModify = true;
	        }

	        if (initData.width) {
	            var width = parseInt(initData.width) || '';
	            this.$width.val(width);
	            this.defaultLayerSet.width = width;
	        }

	        if (initData.height) {
	            var height = parseInt(initData.height);
	            this.$height.val(height);
	            this.defaultLayerSet.height = height || '';
	        }

	        if (initData.positionX) {
	            var positionX = parseInt(initData.positionX) || '';
	            this.$positionX.val(positionX);
	            this.defaultLayerSet.positionX = positionX;
	        }

	        if (initData.positionY) {
	            var positionY = parseInt(initData.positionY) || '';
	            this.$positionY.val(positionY);
	            this.defaultLayerSet.positionY = positionY;
	        }

	        if (initData.id) {
	            var id = initData.id;
	            this.$id.val(id);
	            this.defaultLayerSet.id = id;
	        }

	        if (initData.className) {
	            var className = initData.className;
	            this.$class.val(className);
	            this.defaultLayerSet.className = className;
	        }
	    }

	};


	LayerDialog.prototype.openDialog = function(initData){
	    this.$dialogNode.find(".kk_dialog").hide();
	    var $dialog = this.$dialogNode.find(".kk_dialog_layer");
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.resetFields(initData);

	    this.setDialogPosition($dialog);
	};

	module.exports = LayerDialog;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);


	function Toolbar(editorElement, editorContentView, options){
	    this.editorElement = null;
	    this.toolbarElement = null;
	    this.router = null;
	    this.menuController = null;
	    this.$dom = null;

	    this.options = options;

	    this.editorElement = $(editorElement);
	    this.toolbarElement = this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR);
	    this.editorContentView = $(editorContentView);
	}

	Toolbar.prototype.init = function (menuController, $domObject){
	    this.menuController = menuController;
	    this.router = this.menuController.getRouter();
	    this.$dom = $domObject;

	    this.settingToolbar();
	};

	Toolbar.prototype.settingToolbar = function() {
	    var _this = this;

	    var enableContent = function (e,data) {
	        if ($.browser.msie) {
	            var isCollapsed = _this.$dom.selection.isCollapsed();

	            if (isCollapsed) {
	                _this.$dom.selection.editorFocus();
	            }
	        }
	    };
	    var disableContent = function (e,data) {
	        if ($.browser.msie) {
	            _this.$dom.selection.editorBlur();
	        }
	    };

	    this.toolbarElement.find("."+Define.CLASS.EDITOR_TOOLBAR_MENU).each(function(){
	        var menu = this;
	        $(menu).find("." + Define.CLASS.EDITOR_TOOLBAR_MENU_BUTTON).kkButton({
	            callback: function(e,data){
	                if(data.isCustomAction) {
	                    if (_this.options.customButtonMenuItem.length){
	                        for (var i = 0, length = _this.options.customButtonMenuItem.length; i < length; i++) {
	                            var customButton = _this.options.customButtonMenuItem[i];

	                            if (customButton && customButton.id == data.id) {
	                                if (customButton.action && (customButton.action) instanceof Function) {
	                                    customButton.action();
	                                }
	                                break;
	                            }
	                        }
	                    }
	                } else {
	                    var isActive = $(e.target).hasClass("active") ? true : false;
	                    _this.menuController.menuSwitch(data, {isActive : isActive, node : e.target});
	                }
	            }
	        });



	        $(menu).find("." + Define.CLASS.EDITOR_TOOLBAR_MENU_SELECTBOX).kkSelectBox({
	            enableContent : enableContent,
	            disableContent : disableContent,
	            callback: function(e,data){
	                _this.menuController.menuSwitch(data);
	            }
	        });

	        $(menu).find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_COMBOBOX).kkSelectBox({
	            enableContent : enableContent,
	            disableContent : disableContent,
	            callback: function(e,data){
	                _this.menuController.menuSwitch(data);
	            }
	        });

	        $(menu).find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_COLORPICKER).kkColorPicker({
	            colorPicker : _this.options.colorPicker,
	            enableContent : enableContent,
	            disableContent : disableContent,
	            getSelection : function(){
	                return _this.$dom.selection;
	            },
	            callback: function(e,data){
	                _this.menuController.menuSwitch(data);
	            }
	        });


	        $(menu).find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_LISTPICKER).kkListPicker({
	            enableContent : enableContent,
	            disableContent : disableContent,
	            callback: function(e,data){
	                _this.menuController.menuSwitch(data);
	            }
	        });


	        $(menu).find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_TABLEPICKER).kkTablePicker({
	            enableContent : enableContent,
	            disableContent : disableContent,
	            callback: function(e,data){
	                if (data.id === 'table') {
	                    data = {id : "table", value : {row : data.row , col : data.col}};
	                }

	                _this.menuController.menuSwitch(data);
	            }
	        });

	        $(menu).find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_CUSTOMBOX).kkCustomBox({
	            colorPicker : _this.options.colorPicker,
	            callback: function(e,data){
	                _this.menuController.menuSwitch(data);
	            }
	        });

	        $(menu).find("." + Define.CLASS.EDITOR_TOOLBAR_MENU_FINDREPLACEBOX).kkFindReplaceBox({
	            callback: function(e,data){
	                _this.menuController.menuSwitch(data);
	            },
	            saveRange : function() {
	                _this.$dom.selection.setSaveRange();
	            }
	        });
	    });
	};

	Toolbar.prototype.getToolbarElement = function () {
	    return this.toolbarElement;
	};

	Toolbar.prototype.setRouter = function (router) {
	    this.router = router;
	};

	Toolbar.prototype.getRouter = function () {
	    return this.router;
	};

	Toolbar.prototype.setMenuController = function (menuController) {
	    this.menuController = menuController;
	};

	Toolbar.prototype.getMenuController = function () {
	    return this.menuController;
	};

	module.exports = Toolbar;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(5);

	var _menuObject = {
	    // [파일]
	    'menuFile': {
	        name: window.kukuResource.menuTitle.menuFileName,
	        child: [
	            {name: window.kukuResource.menuTitle.new, id: 'new', thumb:'-300px -150px'},
	            {name: window.kukuResource.menuTitle.file_open, id: 'file_open', thumb:'-30px -180px'},
	            {division:true},
	            {name: window.kukuResource.menuTitle.save, id: 'save', thumb:'-30px 0px'},
	            {name: window.kukuResource.menuTitle.print, id: 'print', thumb:'-60px 0px'},
	            {name: window.kukuResource.menuTitle.auto_save_load, id: 'auto_save_load', thumb:'-360px -181px'},
	            {division:true},
	            {name: window.kukuResource.menuTitle.template, id: 'template', thumb:'-90px -211px'},
	            {name: window.kukuResource.menuTitle.layout, id: 'layout', thumb:'-30px -211px'},
	        ]
	    },

	    // [편집]
	    'menuEdit': {
	        name: window.kukuResource.menuTitle.menuEditName,
	        child: [
	            {name: window.kukuResource.menuTitle.undo, id: 'undo', thumb:'-90px 0px'},
	            {name: window.kukuResource.menuTitle.redo, id: 'redo', thumb:'-120px 0px'},
	            {division:true},
	            // {name: window.kukuResource.menuTitle.copy, id: 'copy', thumb:'-150px 0px'},
	            // {name: window.kukuResource.menuTitle.cut, id: 'cut', thumb:'-180px 0px'},
	            // {name: window.kukuResource.menuTitle.paste, id: 'paste', thumb:'-210px 0px'},
	            {name: window.kukuResource.menuTitle.text_paste, id: 'text_paste', thumb:'-0px -180px'},
	            {name: window.kukuResource.menuTitle.all_select, id: 'all_select', thumb:'-330px -150px'},
	            {name: window.kukuResource.menuTitle.find_replace, id: 'find_replace', thumb:'-60px -60px'},
	            {division:true},
	            {name: window.kukuResource.menuTitle.page_break, id: 'page_break', thumb:'-60px -180px'}

	        ]
	    },

	    // [보기]
	    // 'menuView': {
	    //     name: window.kukuResource.menuTitle.menuViewName,
	    //     child: [
	    //         {name: window.kukuResource.menuTitle.fullscreen, id: 'fullscreen', thumb:'-360px -150px'},
	    //         // {name: window.kukuResource.menuTitle.editor, id: 'editor'},
	    //         {name: window.kukuResource.menuTitle.html, id: 'html'},
	    //         {name: window.kukuResource.menuTitle.text, id: 'text'},
	    //         {name: window.kukuResource.menuTitle.preview, id: 'preview'}
	    //     ]
	    // },

	    // [삽입]
	    'menuInsert': {
	        name: window.kukuResource.menuTitle.menuInsertName,
	        child: [
	            {name: window.kukuResource.menuTitle.image, id: 'image'},
	            {name: window.kukuResource.menuTitle.background_image, id: 'background_image', thumb:'-389px -180px'},
	            {name: window.kukuResource.menuTitle.video, id: 'video'},
	            {name: window.kukuResource.menuTitle.file, id: 'file', thumb:'-272px -123px'},
	            {division:true},
	            {name: window.kukuResource.menuTitle.layer, id: 'layer', thumb:'-60px -211px'},
	            {name: window.kukuResource.menuTitle.bookmark, id: 'bookmark', thumb:'-390px -150px'},
	            {name: window.kukuResource.menuTitle.date_format, id: 'date_format', thumb:'-210px -150px'},
	            {name: window.kukuResource.menuTitle.blockquote, id: 'blockquote'},
	            {division:true},
	            {name: window.kukuResource.menuTitle.link, id: 'link', thumb:'-330px -30px'},
	            {name: window.kukuResource.menuTitle.unlink, id : 'unlink'},
	            {division:true},
	            {name: window.kukuResource.menuTitle.horizontal, id: 'horizontal', thumb:'-60px -150px'},
	            {name: window.kukuResource.menuTitle.symbol, id: 'symbol', thumb:'-30px -60px'},
	            {name: window.kukuResource.menuTitle.emoticon, id: 'emoticon', thumb:'-300px -121px'},
	            // {division:true},
	            // {name: 'barcode', id: 'barcode'}
	        ]
	    },

	    // [서식]
	    'menuStyle': {
	        name: window.kukuResource.menuTitle.menuStyleName,
	        child: [
	            {name: window.kukuResource.menuTitle.bold, id: 'bold', thumb:'-270px 0px'},
	            {name: window.kukuResource.menuTitle.italic, id: 'italic', thumb:'-300px 0px'},
	            {name: window.kukuResource.menuTitle.underline, id: 'underline', thumb:'-330px 0px'},
	            {name: window.kukuResource.menuTitle.strikeThrough, id: 'strikeThrough', thumb:'-360px 0px'},
	            {name: window.kukuResource.menuTitle.superscript, id: 'superscript', thumb:'-0px -151px'},
	            {name: window.kukuResource.menuTitle.subscript, id: 'subscript', thumb:'-30px -149px'},
	            {name: window.kukuResource.menuTitle.remove_format, id: 'remove_format', thumb:'-390px 0px'},
	            {division:true},
	            {name: window.kukuResource.menuTitle.numbered_list, id: 'numbered_list', thumb:'-60px -30px', child: Define.NUMBERED_LIST},
	            {name: window.kukuResource.menuTitle.bullet_list, id: 'bullet_list', thumb:'-90px -30px', child: Define.BULLET_LIST},
	            {division:true},
	            {name: window.kukuResource.menuTitle.indent, id: 'indent', thumb:'-150px -30px'},
	            {name: window.kukuResource.menuTitle.outdent, id: 'outdent', thumb:'-120px -30px'},
	            {division:true},
	            {name: window.kukuResource.menuTitle.paragraph_margin, id:'paragraph_margin'},
	            {name: window.kukuResource.menuTitle.dir_ltr, id:'dir_ltr'},
	            {name: window.kukuResource.menuTitle.dir_rtl, id:'dir_rtl'},
	            // {name: '수평 정렬', id: 'line_height', thumb:'-180px -30px', child:
	            //     [
	            //         {name: '1.0', id: 'line_height1'},
	            //         {name: '1.2', id: 'line_height2'},
	            //         {name: '1.5', id: 'line_height3'},
	            //         {name: '2.0', id: 'line_height4'},
	            //         {name: '3.0', id: 'line_height5'}
	            //     ]
	            // }
	        ]
	    },

	    // [표]
	    'menuTable': {
	        name: window.kukuResource.menuTitle.menuTableName,
	        child: [
	            {name: window.kukuResource.menuTitle.table, id: 'tableInsertDialog', thumb:'0px -61px'},
	            {name: window.kukuResource.menuTitle.table_insert_row, id: 'table_insert_row', child:[
	                {name: window.kukuResource.menuTitle.table_insert_top, id: 'table_insert_top', thumb:'-180px -60px'},
	                {name: window.kukuResource.menuTitle.table_insert_bottom, id: 'table_insert_bottom', thumb:'-120px -119px'}
	            ]},

	            {name: window.kukuResource.menuTitle.table_insert_col, id: 'table_insert_col', child:[
	                {name: window.kukuResource.menuTitle.table_insert_left, id: 'table_insert_left', thumb:'-240px -60px'},
	                {name: window.kukuResource.menuTitle.table_insert_right, id: 'table_insert_right', thumb:'-210px -60px'}
	            ]},

	            {division:true},
	            {name: window.kukuResource.menuTitle.table_remove_col, id: 'table_remove_col', thumb:'-300px -60px'},
	            {name: window.kukuResource.menuTitle.table_remove_row, id: 'table_remove_row', thumb:'-270px -60px'},
	            {name: window.kukuResource.menuTitle.table_remove_table, id: 'table_remove_table', thumb:'-330px -60px'},
	            {division:true},
	            {name: window.kukuResource.menuTitle.table_merge, id: 'table_merge', thumb:'-180px -90px'},
	            {name: window.kukuResource.menuTitle.table_split_col, id: 'table_split_col', thumb:'-210px -90px'},
	            {name: window.kukuResource.menuTitle.table_split_row, id: 'table_split_row', thumb:'-240px -90px'},

	            {name: window.kukuResource.menuTitle.cell_horizontal_size, id: 'cell_horizontal_size', thumb:'-331px -211px'},
	            {name: window.kukuResource.menuTitle.cell_vertical_size, id: 'cell_vertical_size', thumb:'-360px -211px'},

	            {division:true},

	            {name: window.kukuResource.menuTitle.table_lock, id: 'table_lock', thumb : '-1px -239px'},
	            {name: window.kukuResource.menuTitle.cell_lock, id: 'cell_lock', thumb : '-29px -239px'},

	            {division:true},

	            {name: window.kukuResource.menuTitle.tableModifyDialog, id: 'tableModifyDialog', thumb : '0px -61px'},
	            {name: window.kukuResource.menuTitle.cellModifyDialog, id: 'cellModifyDialog', thumb : '-90px -180px'},

	            {division:true},
	            {name: window.kukuResource.menuTitle.border_visualize, id: 'border_visualize', thumb : '-124px -240px'}
	        ]
	    },

	    // [도구]
	    'menuTool': {
	        name: window.kukuResource.menuTitle.menuToolName,
	        child: [
	            {name: window.kukuResource.menuTitle.upper_lower, id: 'upper_lower', thumb:'-331px -121px'},
	            {name: window.kukuResource.menuTitle.setting, id: 'setting', thumb:'-269px -181px'}
	        ]
	    },

	    // [도움말]
	    'menuHelp': {
	        name: window.kukuResource.menuTitle.menuHelpName,
	        child:
	            [
	                {name: window.kukuResource.menuTitle.help, id: 'help', thumb:'-90px -150px'},
	                {name: window.kukuResource.menuTitle.about, id: 'about', thumb:'-120px -150px'}
	            ]
	    }
	};

	var innerDefine = {
	    editorMenuBar : 'kk_editor_menubar',
	    menuTabWrapper : 'menu-tab-wrapper',
	    menuTabItem : 'menu-tab-item',

	    menuTabOn : 'menu-tab-on',
	    menuItemWrapper : 'menu-item-wrapper',
	    menuItem : 'menu-item',
	    menuItemSubWrapper : 'menu-item-sub-wrapper',
	    menuItemSub : 'menu-item-sub',

	    disabled : 'disabled',

	    menuItemId : 'menu-item-id'
	};

	var removeClass = function(el, name){
	    var _removeClass = function(_el, _name){
	        var classNames = _el.className.split(' ');
	        var newClass = [];

	        for (var i=0, length=classNames.length; i<length; i++){
	            classNames[i] != _name && newClass.push(classNames[i]);
	        }

	        _el.className = newClass.join(' ');
	    };

	    if (el instanceof Node){
	        _removeClass(el, name);
	    }else if (el instanceof HTMLCollection || el instanceof Array){
	        for (var i=0, length=el.length; i<length; i++){ _removeClass(el[i], name); }
	    }
	};

	var addClass = function(el, name){
	    var className = el.className;

	    if (className.indexOf(name) == -1){
	        el.className = className + ' ' + name;
	    }
	};

	window.Element && function(ElementPrototype) {
	    ElementPrototype.matches = ElementPrototype.matches ||
	        ElementPrototype.matchesSelector ||
	        ElementPrototype.webkitMatchesSelector ||
	        ElementPrototype.msMatchesSelector ||
	        function(selector) {
	            var node = this, nodes = (node.parentNode || node.document).querySelectorAll(selector), i = -1;
	            while (nodes[++i] && nodes[i] != node);
	            return !!nodes[i];
	        }
	}(window.Element.prototype);

	// closest polyfill
	window.Element && function(ElementPrototype) {
	    ElementPrototype.closest = ElementPrototype.closest ||
	        function(selector) {
	            var el = this;
	            while (el.matches && !el.matches(selector)) el = el.parentNode;
	            return el.matches ? el : null;
	        }
	}(window.Element.prototype);

	function Menubar(editorElement){
	    this.menubarElement = null;
	    this.router = null;
	    this.menuController = null;

	    this.editorElement = $(editorElement);

	    var toolBar = this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR)[0];
	    var menuBar = document.createElement('div');

	    if (toolBar){
	        menuBar.className = innerDefine.editorMenuBar;
	        toolBar.insertBefore(menuBar, toolBar.firstChild);
	    }

	    this.menubarElement = menuBar;
	}

	Menubar.prototype.init = function (menuController, options){
	    this.menuController = menuController;
	    this.router = this.menuController.getRouter();
	    this.$dom = this.router.$dom;

	    this.options = options;

	    this.createMenubar();
	};

	Menubar.prototype.create = function(){};

	Menubar.prototype.createMenubar = function(){
	    var listItemHtml = '';
	    var _this = this;

	    var childCheck = function(menuObject){
	        var child = menuObject.child;

	        var useChildMenu = false;

	        if (child.length) {
	            for(var i = 0, length = child.length; i < length; i++) {
	                var childObject = child[i];

	                if (childObject) {
	                    if (childObject.division) {
	                        continue;
	                    }

	                    var id = childObject.id;

	                    if (_this.options.hiddenMenu.indexOf(id) < 0) {

	                        if (_this.options.customAlignMenu.length) {
	                            if (_this.options.customAlignMenu.indexOf(id) < 0) {
	                                continue;
	                            }
	                        }

	                        if (childObject.child) {
	                            useChildMenu = childCheck(childObject);

	                            if (useChildMenu) {
	                                break;
	                            }

	                        } else {
	                            useChildMenu = true;

	                            break;
	                        }
	                    }
	                }
	            }
	        }

	        return useChildMenu;

	    };

	    for (var id in _menuObject){
	        if (this.options.hiddenMenu.indexOf(id) < 0) {

	            var useMenu = childCheck(_menuObject[id]);

	            if (!useMenu) {
	                continue;
	            }

	            listItemHtml += '<li id="' + id + '" class="' + innerDefine.menuTabItem + '">' + _menuObject[id].name + '</li>';
	        }
	    }

	    if (!listItemHtml) {
	        return;
	    }

	    var menuTapHtml = '<ul class="' + innerDefine.menuTabWrapper +'">' +
	                          listItemHtml +
	                      '</ul>' +
	                      '<div class="menubar-dropdown-wrapper">' +
	                          '<div class="' + innerDefine.menuItemWrapper + '"></div>' +
	                          '<div class="' + innerDefine.menuItemSubWrapper + '"></div>' +
	                      '</div>';

	    this.menubarElement.innerHTML = menuTapHtml;

	    this.$menubarElement = $(this.menubarElement);

	    this.menuItemWrapper = this.$menubarElement.find('.' + innerDefine.menuItemWrapper)[0];
	    this.menuItemSubWrapper = this.$menubarElement.find('.' + innerDefine.menuItemSubWrapper)[0];

	    var _this = this;
	    var menubarDropdownWrapper = this.$menubarElement.find('.' + 'menubar-dropdown-wrapper')[0];
	    var menuTapItems = [].slice.call(this.$menubarElement.find('.' + innerDefine.menuTabItem).get());

	    for (var i=0,length=menuTapItems.length; i<length; i++){
	        menuTapItems[i].addEventListener('mouseover', function(e){
	            _this.menuItemSubWrapper.style.display = 'none';

	            var menuTabNodes = [].slice.call(_this.$menubarElement.find('.' + innerDefine.menuTabOn).get());

	            if (menuTabNodes.length > 0){
	                var curMenuTabId = menuTabNodes[0].getAttribute('id');

	                if (curMenuTabId == e.srcElement.getAttribute('id')){
	                    return ;
	                }
	            }

	            removeClass(menuTapItems, innerDefine.menuTabOn);
	            addClass(e.srcElement, innerDefine.menuTabOn);

	            _this.showMenubar(e.srcElement);
	        });

	        menuTapItems[i].addEventListener('mouseleave', function(e){
	            _this.menuItemSubWrapper.style.display = 'none';

	            if ($(menubarDropdownWrapper).css('display') == 'none'){
	                removeClass(menuTapItems, innerDefine.menuTabOn);
	            }
	        });

	        menuTapItems[i].addEventListener('click', function(e){
	            var display = menubarDropdownWrapper.style.display;

	            if (display == '' || display == 'none'){
	                _this.menuController.closeAllDialog();
	                menubarDropdownWrapper.style.display = 'block';
	            }else{
	                menubarDropdownWrapper.style.display = '';
	                var menuTabOnNode = [].slice.call(_this.$menubarElement.find('.' + innerDefine.menuTabOn).get());

	                removeClass(menuTabOnNode, innerDefine.menuTabOn);
	            }
	        });
	    }

	    this.hideMenuBar = function(){
	        removeClass(menuTapItems, innerDefine.menuTabOn);
	        menubarDropdownWrapper.style.display = '';
	    };


	    (function(menuTapItems){
	        document.addEventListener('click', function(e){
	            if (menuTapItems.indexOf(e.srcElement) == -1){
	                removeClass(menuTapItems, innerDefine.menuTabOn);
	                menubarDropdownWrapper.style.display = '';
	            }
	        });
	    })(menuTapItems);

	    this.menuItemWrapper.addEventListener('click', function(e){
	        _this.onMenuItemClickEvent.call(_this, e);
	    });
	    this.menuItemSubWrapper.addEventListener('click', function(e){
	        _this.onMenuItemClickEvent.call(_this, e);
	    });
	};

	Menubar.prototype.showMenubar = function(selectElement){
	    var _this = this;

	    var id = selectElement.getAttribute('id');
	    var group = _menuObject[id];

	    if (group.child){
	        var child = group.child;
	        var offsetTop = selectElement.offsetTop;
	        var offsetLeft = selectElement.offsetLeft;
	        var offsetHeight = selectElement.offsetHeight;

	        var menuTop = offsetTop + offsetHeight - 1;
	        _this.menuItemWrapper.innerHTML = this.createMenuItems(child);
	        _this.menuItemWrapper.style.top = menuTop + 'px';
	        _this.menuItemWrapper.style.left = offsetLeft + 'px';

	        var menuItemNodes = [].slice.call(_this.$menubarElement.find('.' + innerDefine.menuItem).get());

	        for (var i=0,length=menuItemNodes.length; i<length; i++){
	            var menuItemNode = menuItemNodes[i];
	            menuItemNode.addEventListener('mouseover', function(e){

	                var thisElement = e.srcElement;
	                if (e.srcElement.className.indexOf(innerDefine.menuItem) == -1){
	                    thisElement = e.srcElement.parentNode;
	                }

	                if (thisElement.className.indexOf(innerDefine.menuItemSub) > -1){
	                    if ( !$(thisElement).hasClass('disabled') ) {
	                        _this.menuItemSubWrapper.style.display = 'block';
	                        _this.menuItemSubWrapper.style.top = (menuTop + thisElement.offsetTop + 1) + 'px';
	                        _this.menuItemSubWrapper.style.left = (_this.menuItemWrapper.offsetLeft + _this.menuItemWrapper.offsetWidth) + 'px';

	                        _this.showSubMenubar(thisElement);
	                    }
	                }else{
	                    _this.menuItemSubWrapper.style.display = 'none';
	                }

	            });
	        }

	        if ($.browser.msie && $.browser.version < 11) {

	            var $menuItems = $(_this.menuItemWrapper).find('.' + innerDefine.menuItem);

	            $menuItems.on('mouseenter', function(){
	                $(this).addClass(Define.CLASS.HOVER);
	            }).on('mouseleave', function(){
	                $(this).removeClass(Define.CLASS.HOVER);
	            });
	        }

	        this.statusHighlight(menuItemNodes);
	    }
	};

	Menubar.prototype.createMenuItems = function(child, isNotCheck){

	    var menuItemHtml = '';

	    var isBeforeDivision = false;

	    for (var i=0, length=child.length; i<length; i++){

	        if (child[i].division){
	            if (menuItemHtml == '') {
	                continue;
	            }

	            if (!isBeforeDivision) {
	                menuItemHtml += '<div class="division"></div>';
	            }

	            isBeforeDivision = true;
	        }else{
	            if (this.options.hiddenMenu.indexOf(child[i].id) > -1) {
	                continue;
	            }

	            if (!isNotCheck) {
	                if (this.options.customAlignMenu.length) {
	                    if (this.options.customAlignMenu.indexOf(child[i].id) < 0) {
	                        continue;
	                    }
	                }
	            }

	            isBeforeDivision = false;

	            var className = innerDefine.menuItem;
	            // var thumbStyle = '';
	            var moreHtml = '';

	            if (child[i].child){
	                className += ' ' + innerDefine.menuItemSub;

	                moreHtml = '<div class="more">></div>';
	            }

	            // if (child[i].thumb){
	            //     thumbStyle = 'style="background-position:' + child[i].thumb + '"';
	            // }else{
	            //     thumbStyle = 'style="background:none"';
	            // }

	            menuItemHtml += '<div menu-item-id="' + child[i].id + '" class="' + className + '">' +
	                                // '<div class="thumbnail" border="0" ' + thumbStyle + '></div>' +
	                                '<div class="text-content">' + child[i].name + '</div>' + moreHtml +
	                            '</div>';
	        }
	    }

	    return menuItemHtml;
	};

	Menubar.prototype.showSubMenubar = function(mainMenuElement){
	    var id = mainMenuElement.getAttribute(innerDefine.menuItemId);
	    var group = this.getGroupById(id);

	    var child = group.child;
	    this.menuItemSubWrapper.innerHTML = this.createMenuItems(child, true);

	    var menuItemNodes = [].slice.call(this.$menubarElement.find('.' + innerDefine.menuItem).get());
	    this.statusHighlight(menuItemNodes);
	};

	Menubar.prototype.getGroupById = function(id){
	    var group = null;

	    for (var i in _menuObject){
	        var groups = _menuObject[i];
	        groups.child.forEach(function(mainGroup){
	            if (mainGroup.id == id){group = mainGroup; return false;}
	            if (mainGroup.child){
	                mainGroup.child.forEach(function(subGroup){
	                    if (subGroup.id == id){group = subGroup; return false;}
	                })
	            }
	        });
	    }

	    return group;
	};

	Menubar.prototype.onMenuItemClickEvent = function(e){
	    this.menuController.closeAllDialog();

	    var thisElement = e.srcElement;

	    if (thisElement.className.indexOf(innerDefine.menuItem) == -1){
	        thisElement = thisElement.parentNode;
	    }

	    var className = thisElement.className;

	    if (className.indexOf(innerDefine.menuItemSub) > -1){
	        e.preventDefault();
	        e.stopPropagation();
	    }else{

	        this.doAction(thisElement);

	    }
	};

	Menubar.prototype.doAction = function(el){

	    if (el){

	        if ($(el).hasClass(innerDefine.disabled)) {
	            return
	        }

	        var menuItemId = el.getAttribute(innerDefine.menuItemId);

	        if (menuItemId && menuItemId != ''){

	            switch (menuItemId){
	                case "find_replace":
	                    // var findReplaceNode = this.$menubarElement.find('.' + Define.CLASS.EDITOR_TOOLBAR_MENU_FINDREPLACEBOX)[0];
	                    // var findInputTextNode = this.$menubarElement.find('.' + 'findInputText')[0];
	                    var findReplaceNode = $('.menus > .menu .' + Define.CLASS.EDITOR_TOOLBAR_MENU_FINDREPLACEBOX)[0];
	                    var findInputTextNode = $('.menus > .menu .' + 'findInputText')[0];

	                    findReplaceNode && findReplaceNode.click();
	                    findInputTextNode && findInputTextNode.focus();
	                    break;

	                case "html":
	                case "preview":
	                case "text":

	                    //EDITOR_FOOTER_MENU_HTML
	                    this.$footerElement = $(this.editorElement.find("." + Define.CLASS.EDITOR_FOOTER)[0]);
	                    console.log(this.$footerElement)
	                    var triggerNode = null;

	                    if (menuItemId == 'html'){
	                        triggerNode = this.$footerElement.find('.' + Define.CLASS.EDITOR_FOOTER_MENU_HTML)[0];
	                    }else if (menuItemId == 'preview'){
	                        triggerNode = this.$footerElement.find('.' + Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW)[0];
	                    }else{
	                        triggerNode = this.$footerElement.find('.' + Define.CLASS.EDITOR_FOOTER_MENU_TEXT)[0];
	                    }

	                    if(triggerNode) {
	                        triggerNode.click();
	                    }

	                    break;


	                case "tableModifyDialog":
	                    var menuObject = {id : menuItemId};

	                    var range = this.$dom.selection.getRange();
	                    var startContainer = range.startContainer;
	                    var $parentTable = $(startContainer).closest('table').length;

	                    if ($parentTable && $parentTable.length) {

	                        var width = $parentTable.width();
	                        var height = $parentTable.height();

	                        $parentTable = $parentTable.clone();

	                        var rowColInfo = Util.getRowColCount($parentTable);

	                        var headerType = Util.getHeaderType($parentTable);

	                        menuObject.value = {
	                            type : 'modify',
	                            row : rowColInfo.row,
	                            col : rowColInfo.col,
	                            width : width,
	                            height : height,
	                            marginLeft : parseInt($parentTable.css('marginLeft')) || null,
	                            align : $parentTable.attr('align') || null,
	                            id : $parentTable.attr('id') || null,
	                            className : $parentTable.attr(Define.ATTR.CLASS) || null,
	                            borderSeparate : $parentTable.css('border-collapse') === 'separate',
	                            cellSpacing : $parentTable.attr('cellspacing') || null,
	                            cellPadding : $parentTable.attr('cellpadding') || null,
	                            caption : $parentTable[0].caption ? $parentTable[0].caption.textContent : null,
	                            summary : $parentTable[0].summary || null,

	                            image : $parentTable.css('background-image').slice(4, -1).replace(/"/gi,'') || null,
	                            attachment : $parentTable[0].style.backgroundAttachment || null,
	                            repeat : $parentTable[0].style.backgroundRepeat || null,
	                            positionX : parseInt($parentTable.css('background-position-x')) || null,
	                            positionY : parseInt($parentTable.css('background-position-y')) || null,
	                            backgroundColor : Util.getRgbToHex($parentTable[0].style.backgroundColor) || null,

	                            scope : !!$parentTable[0].rows[0].cells[0].getAttribute('scope'),
	                            headerType : headerType === 'none' ? false : headerType
	                        }
	                    }

	                    this.menuController.menuSwitch(menuObject);

	                    break;

	                default :
	                    var isNumberedList = Define.NUMBERED_LIST_ITEMS.indexOf(menuItemId) > -1;
	                    var isBulletList = Define.BULLET_LIST_ITEMS.indexOf(menuItemId) > -1;

	                    if (isNumberedList || isBulletList) {
	                        var data = {
	                            id : (isNumberedList ? 'numbered_list' : 'bullet_list'),
	                            value : {
	                                listType : isNumberedList ? 'numbered' : 'bullet',
	                                specificType : menuItemId,
	                                status : 'on'
	                            }
	                        };

	                        this.menuController.menuSwitch(data);
	                    } else {
	                        var data = {id : menuItemId};
	                        this.menuController.menuSwitch(data);
	                    }

	                    break;

	            }
	        }
	    }
	};

	Menubar.prototype.statusHighlight = function(menuItemNodes){

	    var range = this.$dom.selection.getRange();

	    if (!this.$dom.selection.isCollapsed() && this.menuController.event.mouseEvent.selectedCellNodes) {
	        for (var i = 0, length = menuItemNodes.length; i < length; i++){
	            var menuItemNode = menuItemNodes[i];
	            var menuItemId = menuItemNode.getAttribute(innerDefine.menuItemId);

	            switch(menuItemId) {
	                case "new":
	                case "file_open":
	                case "save":
	                case "print":
	                case "auto_save_load":
	                case "template":
	                case "layout":
	                case "undo":
	                case "redo":
	                case "copy":
	                case "cut":
	                case "paste":
	                case "text_paste":
	                case "all_select":
	                case "find_replace":
	                case "fullscreen":
	                case "html":
	                case "text":
	                case "preview":
	                case "bold":
	                case "italic":
	                case "underline":
	                case "strikeThrough":
	                case "superscript":
	                case "subscript":
	                case "remove_format":
	                case "table_merge":
	                case "cell_horizontal_size":
	                case "cell_vertical_size":
	                case "setting":

	                case "numbered_list":
	                case "numbered_decimal":
	                case "numbered_decimal_leading_zero":
	                case "numbered_alpha":
	                case "numbered_upper_alpha":
	                case "numbered_roman":
	                case "numbered_upper_roman":
	                case "numbered_lower_greek":

	                case "bullet_list":
	                case "bullet_disc":
	                case "bullet_circle":
	                case "bullet_square":

	                case "help":
	                case "about":
	                    removeClass(menuItemNode, innerDefine.disabled);

	                    break;

	                default:
	                    addClass(menuItemNode, innerDefine.disabled);

	                    break;
	            }
	        }
	        return;
	    } else {
	        for (var i = 0, length = menuItemNodes.length; i < length; i++){
	            var menuItemNode = menuItemNodes[i];

	            removeClass(menuItemNode, innerDefine.disabled);
	        }
	    }

	    var startContainer = range.startContainer;

	    var isInTable = !!$(startContainer).closest('table').length;
	    var isTableCellSelected = false;

	    if (isInTable){
	        isTableCellSelected = this.$dom.selection.getSelectedTd().length > 0;
	    }

	    for (var i=0,length=menuItemNodes.length; i<length; i++){
	        var menuItemNode = menuItemNodes[i];
	        var menuItemId = menuItemNode.getAttribute(innerDefine.menuItemId);

	        switch (menuItemId){
	            case 'tableInsertDialog':
	            case 'table_insert_row':
	            case 'table_insert_col':
	            case 'table_insert_top':
	            case 'table_insert_bottom':
	            case 'table_insert_left':
	            case 'table_insert_right':
	            case 'table_remove_col':
	            case 'table_remove_row':
	            case 'table_remove_table':
	            case 'table_merge':
	            case 'table_split_col':
	            case 'table_split_row':
	            case 'cell_horizontal_size':
	            case 'cell_vertical_size':
	            case 'tableModifyDialog':
	            case 'cellModifyDialog':
	            case 'table_lock':
	            case 'cell_lock':

	                if (! isInTable && menuItemId != 'tableInsertDialog'){
	                    addClass(menuItemNode, innerDefine.disabled);
	                } else{
	                    var tableCursorActionIds = ['tableInsertDialog', 'table_insert_row', 'table_insert_col', 'table_insert_top', 'table_insert_bottom', 'table_insert_left',
	                                                'table_insert_right', 'table_remove_col', 'table_remove_row', 'table_split_col'];

	                    if (isTableCellSelected && tableCursorActionIds.indexOf(menuItemId) > -1){
	                        addClass(menuItemNode, innerDefine.disabled);
	                    }else if (! isTableCellSelected && (menuItemId == 'table_merge' || menuItemId == 'cell_horizontal_size' || menuItemId == 'cell_vertical_size')){
	                        addClass(menuItemNode, innerDefine.disabled);
	                    }
	                }

	                break;

	            case 'page_break':
	                if (isInTable){
	                    addClass(menuItemNode, innerDefine.disabled);
	                }
	                break;

	            case 'border_visualize':
	                removeClass(menuItemNode, innerDefine.disabled);
	                break;

	            default :
	                var menuTabOnNode = this.$menubarElement.find('.' + innerDefine.menuTabOn)[0];

	                if (menuTabOnNode){
	                    var menuTabId = menuTabOnNode.getAttribute('id');

	                    if (isTableCellSelected && menuTabId == 'menuInsert'){
	                        addClass(menuItemNode, innerDefine.disabled);
	                    }

	                }

	                break;
	        }
	    }

	};

	module.exports = Menubar;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	var fileGroup = [
	    //{ id : 'new', class:'font-icon', type : 'button', style : '', val : ''},
	    // { id : 'new', class:'font-icon', type : 'button', style : '', val : ''},
	    // { id : 'file_open', type : 'button', style : '', val : ''},
	    // { id : 'save', type : 'button', style : '', val : ''},
	    { id : 'print', type : 'button', style : '', val : '', googleicon : 'print'},
	    // { id : 'auto_save_load', type : 'button', style : '', val : ''},
	    // { id : 'layout', type : 'button', style : '', val : ''},
	    // { id : 'template', type : 'button', style : '', val : ''}
	];

	var editorGroup = [
	    { id : 'undo', type : 'button', style : '', val : '', googleicon : 'undo'},
	    { id : 'redo', type : 'button', style : '', val : '', googleicon : 'redo'},
	    // { id : 'menu_line', type : 'line', style : '', val : ''},
	    // { id : 'copy', type : 'button', style : '', val : ''},
	    // { id : 'paste', type : 'button', style : '', val : ''},
	    // { id : 'cut', type : 'button', style : '', val : ''},
	    { id : 'text_paste', type : 'button', style : '', val : '', googleicon : 'content_paste'},
	    // { id : 'menu_line', type : 'line', style : '', val : ''},
	    // { id : 'all_select', type : 'button', style : '', val : ''},
	    // { id : 'page_break', type : 'button', style : '', val : ''}
	];

	var headingGroup = [
	    { id : 'heading', type : 'selectbox', style : '', val : 'default'}
	];

	var fontFamilyGroup = [
	    { id : 'fontFamily', type : 'selectbox', style : '', val : '나눔고딕, NanumGothic'}
	];

	var fontSizeGroup = [
	    { id : 'fontSize', type : 'selectbox', style : '', val : "12px"}
	];

	var textFormatGroup = [
	    { id : 'bold', type : 'button', style : '', val : '', googleicon : 'format_bold'},
	    { id : 'italic', type : 'button', style : '', val : '', googleicon : 'format_italic'},
	    { id : 'underline', type : 'button', style : '', val : '', googleicon : 'format_underlined'},
	    { id : 'strikeThrough', type : 'button', style : '', val : '', googleicon : 'format_strikethrough'},

	    // { id : 'superscript', type : 'button', style : '', val : '', googleicon : 'superscript'},
	    // { id : 'subscript', type : 'button', style : '', val : '', googleicon : 'subscript'},

	    { id : 'remove_format', type : 'button', style : '', val : '', googleicon : 'format_clear'},

	    // { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'color', type : 'colorpicker', style : '', val : '', googleicon : 'format_color_text'},
	    { id : 'backgroundColor', type : 'colorpicker', style : '', val : '', googleicon : 'format_color_fill'},

	    // { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'textFormatCopy', type : 'button', style : '', val : '', googleicon : 'format_paint'},
	    { id : 'textFormatPaste', type : 'button', style : '', val : '', googleicon : 'content_paste_go'}
	];

	var paragraphFormatGroup = [
	    { id : 'align_left', type : 'button', style : '', val : '', googleicon : 'format_align_left'},
	    { id : 'align_center', type : 'button', style : '', val : '', googleicon : 'format_align_center'},
	    { id : 'align_right', type : 'button', style : '', val : '', googleicon : 'format_align_right'},
	    { id : 'align_justify', type : 'button', style : '', val : '', googleicon : 'format_align_justify'},

	    // { id : 'menu_line', type : 'line', style : '', val : ''},
	    
	    // { id : 'numbered_list', type : 'listpicker', style : '', val : '', googleicon : 'format_list_numbered'},
	    // { id : 'bullet_list', type : 'listpicker', style : '', val : '', googleicon : 'format_list_bulleted'},
	    { id : 'outdent', type : 'button', style : '', val : '', googleicon : 'format_indent_decrease'},
	    { id : 'indent', type : 'button', style : '', val : '', googleicon : 'format_indent_increase'},
	    { id : 'line_height', type : 'combobox', style : '', val : '', googleicon : 'format_line_spacing'},

	    // { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'paragraph_margin', type : 'button', style : '', val : '', googleicon : 'select_all'},

	    // { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'paragraph_remove_format', type : 'button', style : '', val : '', googleicon : 'delete_sweep'},

	    { id : 'dir_ltr', type : 'button', style : '', val : '', googleicon : 'format_textdirection_l_to_r'},
	    { id : 'dir_rtl', type : 'button', style : '', val : '', googleicon : 'format_textdirection_r_to_l'}
	];

	var insertGroup = [
	    { id : 'link', type : 'button', style : '', val : '', googleicon : 'insert_link'},
	    { id : 'unlink', type : 'button', style : '', val : '', googleicon : 'link_off'},

	    // { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'bookmark', type : 'button', style : '', val : '', googleicon : 'bookmark_border'},

	    // { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'horizontal', type : 'button', style : '', val : '', googleicon : 'horizontal_rule'},

	    // { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'date_format', type : 'button', style : '', val : '', googleicon : 'insert_invitation'},

	    // { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'background_image', type : 'button', style : '', val : '', googleicon : 'filter'},

	    { id : 'image', type : 'button', style : '', val : '', googleicon : 'image'},

	    { id : 'video', type : 'button', style : '', val : '', googleicon : 'videocam'},

	    { id : 'file', type : 'button', style : '', val : '', googleicon : 'attachment'},

	    { id : 'symbol', type : 'button', style : '', val : '', googleicon : 'emoji_symbols'},

	    { id : 'emoticon', type : 'button', style : '', val : '', googleicon : 'emoji_emotions'},

	    { id : 'upper_lower', type : 'button', style : '', val : '', googleicon : 'text_fields'},

	    { id : 'blockquote', type : 'button', style : '', val : '', googleicon : 'format_quote'},

	    { id : 'layer', type : 'button', style : '', val : '', googleicon : 'layers'}
	    
	];

	var tableGroup = [
	    { id : 'table', type : 'tablepicker', style : '', val : '', googleicon : 'grid_on'},
	/*
	    { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'table_insert_top', type : 'button', style : '', val : '', googleicon : ''},
	    { id : 'table_insert_bottom', type : 'button', style : '', val : '', googleicon : ''},
	    { id : 'table_insert_left', type : 'button', style : '', val : '', googleicon : ''},
	    { id : 'table_insert_right', type : 'button', style : '', val : '', googleicon : ''},

	    { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'table_remove_col', type : 'button', style : '', val : '', googleicon : ''},
	    { id : 'table_remove_row', type : 'button', style : '', val : '', googleicon : ''},
	    { id : 'table_remove_table', type : 'button', style : '', val : '', googleicon : 'grid_off'},

	    { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'table_merge', type : 'button', style : '', val : '', googleicon : ''},
	    { id : 'table_split_col', type : 'button', style : '', val : '', googleicon : ''},
	    { id : 'table_split_row', type : 'button', style : '', val : '', googleicon : ''},

	    { id : 'cell_horizontal_size', type : 'button', style : '', val : '', googleicon : ''},
	    { id : 'cell_vertical_size', type : 'button', style : '', val : '', googleicon : ''},

	    { id : 'table_lock', type : 'button', style : '', val : '', googleicon : ''},
	    { id : 'cell_lock', type : 'button', style : '', val : '', googleicon : ''},

	    { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'border_visualize', type : 'button', style : '', val : '', googleicon : ''},

	    { id : 'menu_line', type : 'line', style : '', val : ''},

	    { id : 'table_background_color', type : 'colorpicker', style : '', val : '', googleicon : ''},
	    { id : 'table_border_style', type : 'custombox', style : '', val : '', googleicon : ''}
	*/
	];

	var toolGroup = [
	    { id : 'find_replace', type : 'findreplacebox', style : '', val : '', googleicon : 'find_replace'}
	];

	var viewGroup = [
	    { id : 'fullscreen', type : 'button', style : '', val : ''}
	];

	var helpGroup = [
	    { id : 'setting', type : 'button', style : '', val : ''},
	    { id : 'help', type : 'button', style : '', val : ''},
	    { id : 'about', type : 'button', style : '', val : ''}
	];

	var Layout = {
	    menuGroups : {
	        toolGroup : toolGroup,
	        fileGroup : fileGroup,
	        editGroup : editorGroup,
	        headingGroup : headingGroup,
	        fontFamilyGroup : fontFamilyGroup,
	        fontSizeGroup : fontSizeGroup,
	        textFormatGroup : textFormatGroup,
	        paragraphFormatGroup : paragraphFormatGroup,
	        // insertGroup : insertGroup,
	        tableGroup : tableGroup,
	        // viewGroup :viewGroup,
	        // helpGroup : helpGroup
	    },

	    createLayout: function (rootElement, options) {
	        this.options = options;

	        if (options.defaultFontSize) {
	            this.menuGroups.fontSizeGroup[0].val = options.defaultFontSize;
	        }

	        if (options.defaultFontFamily) {
	            this.menuGroups.fontFamilyGroup[0].val = options.defaultFontFamily;
	        }

	        if (options.customButtonMenuItem && options.customButtonMenuItem.length) {
	            this.menuGroups.customButtonMenuItem = options.customButtonMenuItem;
	        }

	        var $element = this.createRootLayout(rootElement, options);

	        var toolbarLayoutHTML = this.getToolbarLayoutHTML(options);
	        var editorLayoutHTML = this.getEditorLayoutHTML(options);
	        var footerLayoutHTML = this.getFooterLayoutHTML(options);

	        $element.html(footerLayoutHTML + toolbarLayoutHTML + editorLayoutHTML);

	        return $element;
	    },

	    createRootLayout: function (rootElement, options) {
	        var $baseElement = $(rootElement);

	        var css = {visibility : 'hidden'};

	        if (!options.useDialogMoveConfineEditor) {
	            css['overflow'] = 'visible';
	        }

	        var $element = $('<div class="kk_editor"/>').css(css);

	        if ($baseElement[0].nodeName == 'TEXTAREA') {
	            $baseElement.after($element);
	        } else {
	            $baseElement.append($element);
	        }

	        return $element;
	    },

	    getToolbarLayoutHTML : function(options) {
	        var hiddenMenu = options.hiddenMenu;
	        var customAlignMenu = options.customAlignMenu;

	        var isHiddenMenu = false;

	        var _this = this;

	        var checkHiddenMenu = function(key){
	            var isHidden = false;

	            if (isHiddenMenu) {
	                if (hiddenMenu.indexOf(key) > -1) {
	                    isHidden = true;
	                }
	            }

	            if (customAlignMenu.length) {
	                if (!isHidden && (key.indexOf('Group') < 0) && customAlignMenu.indexOf(key) < 0) {
	                    isHidden = true;
	                }
	            }

	            return isHidden;
	        };

	        var getToolbarMenuHTML = function(menuGroup, isCustomGroup) {
	            var groupMenuHTML = '';

	            var prevMenu = null;

	            if (isCustomGroup) {
	                for (var menuKey in menuGroup) {
	                    var menu = menuGroup[menuKey];

	                    customAlignMenu.push(menu.id);
	                }
	            }

	            for (var menuKey in menuGroup) {
	                var menu = menuGroup[menuKey];

	                if (checkHiddenMenu(menu[Define.ATTR.ID])) {
	                    continue;
	                }

	                var menuId = menu.id;
	                var iconClass = menu.class ? menu.class : menu.id;
	                var menuType = menu.type;
	                var menuTitle = (window.kukuResource.menuTitle[menuId] || '' );
	                var googleIcon = menu.googleicon;


	                if ((!prevMenu && menuType === 'line') || (prevMenu && prevMenu.type === 'line' && menuType === 'line')) {
	                    continue;
	                }

	                var toolbarMenuHTML = '';


	                var customMenuStyle = '';
	                var customAction = '';

	                if (!menuType && menu.action) {
	                    menuType = menu.type = 'button';
	                    menuTitle = menu.title = menu.name || '';
	                    customMenuStyle = ' style="' + (menu.style || '') + '"';
	                    customAction = ' data-custom-action="on"';
	                }

	                if (menuType === 'line') {
	                    toolbarMenuHTML += '<a class="' + 'menu_' + menuType + '">' +
	                        '<span></span>' +
	                        '</a> ';
	                } else if (menuType === 'tablepicker') {
	                    toolbarMenuHTML += '<a u-id="' + menuId + '" class="' + 'menu_' + menuType + '" title="' + menuTitle + '" >' +
	                        '<i class="material-icons i_icon i_' + iconClass + '">' + googleIcon + '</i>' +
	                        '</a> ';
	                } else if (menuType === 'combobox') {
	                    toolbarMenuHTML += '<a u-id="' + menuId + '" class="' + 'menu_' + menuType + '" mode="combo" title="' + menuTitle + '" >' +
	                        '<i class="material-icons i_icon i_' + iconClass + '">' + googleIcon + '</i>' +
	                        '</a> ';
	                } else if (menuType === 'selectbox') {
	                    toolbarMenuHTML += '<a u-id="' + menuId + '" class="' + 'menu_' + menuType + '" val="' + menu.val + '" style="' + menu.style + '" title="' + menuTitle + '" >' +
	                        '<i class="material-icons i_icon i_' + iconClass + '">' + googleIcon + '</i>' +
	                        '</a> ';
	                } else {
	                    //if (menu.type == 'button' || menu.type == 'colorpicker' || menu.type == 'combobox' || menu.type == 'custombox'  || menu.type == 'tablepicker' || menu.type == 'findreplacebox' ) {
	                    toolbarMenuHTML += '<a u-id="' + menuId + '" class="' + 'menu_' + menuType + '" title="' + menuTitle + '"' + customAction + '>' +
	                        '<i class="material-icons i_icon i_' + iconClass + '"' + customMenuStyle + '>' + googleIcon + '</i>' +
	                        '</a> ';
	                }

	                prevMenu = menu;

	                groupMenuHTML += toolbarMenuHTML;
	            }

	            return groupMenuHTML;
	        };

	        if (hiddenMenu && hiddenMenu.length) {
	            isHiddenMenu = true;
	        }

	        var toolbarMenuHTML = '';

	        if (customAlignMenu.length) {
	            var menuGroups = null;

	            var createCustomAlignMenu = function(menuList){
	                var allGroupMenu = [].concat(fileGroup, editorGroup, headingGroup, fontFamilyGroup, fontSizeGroup, textFormatGroup, paragraphFormatGroup, insertGroup, tableGroup, toolGroup, viewGroup, helpGroup);

	                if (options.customButtonMenuItem && options.customButtonMenuItem.length) {
	                    allGroupMenu = allGroupMenu.concat(options.customButtonMenuItem);
	                }

	                var customGroups = {};

	                var group = [];
	                var customGroupIdx = 0;

	                $.each(menuList, function(idx, item){
	                    if (item instanceof Array) {
	                        var menuSliceGroup = createCustomAlignMenu(item);

	                        if (menuSliceGroup) {
	                            customGroups['customGroup' + customGroupIdx] = menuSliceGroup;
	                            group = [];
	                            customGroupIdx++;
	                        }
	                    }else if (_this.menuGroups[item]) {
	                        if (group.length) {
	                            customGroups['customGroup' + customGroupIdx] = group;
	                            group = [];
	                            customGroupIdx++;
	                        }

	                        var groups =  _this.menuGroups[item];

	                        for (var menuItem in groups) {
	                            if (menuList.indexOf(groups[menuItem].id) != -1) {
	                                if (groups[menuItem].id != 'menu_line') {
	                                    delete groups[menuItem];
	                                }
	                            }
	                        }

	                        if (groups.length > 0) {
	                            for(var menuIdx = groups.length - 1; menuIdx >= 0; menuIdx--) {
	                                var menu = groups[menuIdx];

	                                if (menu) {
	                                    if (menu.id == 'menu_line' && (menuIdx == (groups.length - 1) || menuIdx == 0)) {
	                                        delete groups[menuIdx];
	                                    } else if (menu.id == 'menu_line' && menuIdx != 0 && groups[menuIdx-1].id == 'menu_line') {
	                                        delete groups[menuIdx];
	                                    }
	                                }
	                            }
	                        }

	                        if (groups.length) {
	                            customGroups['customGroup' + customGroupIdx] = groups;
	                            customGroupIdx++;
	                        }
	                    } else {
	                        for(var menuIdx = 0, length = allGroupMenu.length; menuIdx < length; menuIdx++) {
	                            var menu = allGroupMenu[menuIdx];

	                            if (menu.id == item) {

	                                // if (item == 'heading' || item == 'fontFamily' || item == 'fontSize') {
	                                //     if (group.length) {
	                                //         customGroups['customGroup' + customGroupIdx] = group;
	                                //         group = [];
	                                //         customGroupIdx++;
	                                //     }
	                                //
	                                //     group.push(menu);
	                                //
	                                //     customGroups['customGroup' + customGroupIdx] = group;
	                                //     group = [];
	                                //     customGroupIdx++;
	                                // } else {
	                                group.push(menu);
	                                // }

	                                break;
	                            }
	                        }
	                    }
	                });

	                if (group.length) {
	                    customGroups['customGroup' + customGroupIdx] = group;
	                }

	                return customGroups;
	            };

	            menuGroups = createCustomAlignMenu(customAlignMenu);

	            // var menuHTML = getToolbarMenuHTML(allGroupMenu);
	            //
	            // toolbarMenuHTML += menuHTML;

	            var createToolbarMenu = function(customMenuGroup){
	                var customMenuHTML = '';

	                for (var groupKey in customMenuGroup) {
	                    if (!(customMenuGroup[groupKey] instanceof Array)) {
	                        customMenuHTML += '<div>';
	                        customMenuHTML += createToolbarMenu(customMenuGroup[groupKey]);
	                        customMenuHTML += '</div>';

	                    } else {
	                        if (checkHiddenMenu(groupKey)) {
	                            continue;
	                        }

	                        var menuHTML = getToolbarMenuHTML(customMenuGroup[groupKey], true);

	                        if (menuHTML) {
	                            customMenuHTML += '<li class="menu">';
	                            customMenuHTML += menuHTML;
	                            customMenuHTML += '</li> ';
	                        }
	                    }
	                }

	                return customMenuHTML;
	            };

	            toolbarMenuHTML = createToolbarMenu(menuGroups);
	        } else {
	            for (var groupKey in this.menuGroups) {
	                if (checkHiddenMenu(groupKey)) {
	                    continue;
	                }

	                var menuHTML = getToolbarMenuHTML(this.menuGroups[groupKey]);

	                if (menuHTML) {

	                    // toolbarMenuHTML += '<li class="menu" menu-group="'+ groupKey +'">';
	                    toolbarMenuHTML += menuHTML;
	                    // toolbarMenuHTML += '</li> ';
	                }
	            }
	        }
	        toolbarMenuHTML += '<a u-id="more" class="menu_button menu_more"><i class="material-icons i_icon ">more_horiz</i></a>'


	        var toolbarHTML = '<div class="kk_editor_toolbar' + ($.browser.chrome ? ' chrome' : '') + '">';

	        if (toolbarMenuHTML) {
	            toolbarHTML += '<ul class ="menus"><li class="menu">';
	            toolbarHTML += toolbarMenuHTML;
	            toolbarHTML += '</li>';
	            toolbarHTML += '<li class="menu_more_wrap menu">'+toolbarMenuHTML+'</li></ul>';
	        }
	        
	        toolbarHTML += '<div class="kk_editor_toolbar_disabled"></div>';
	        toolbarHTML += '</div>';

	        return toolbarHTML;
	    },

	    getEditorLayoutHTML : function(options) {
	        var useHtmlMode = options.useHtmlMode;
	        var useTextMode = options.useTextMode;
	        var usePreviewMode = options.usePreviewMode;
	        var firstMode = options.useFirstMode;

	        var editModeLayoutHtml = "";
	        var htmlModeLayoutHtml = "";
	        var textModeLayoutHtml = "";
	        var previewModeLayoutHtml = "";

	        var editorLayoutHTML = '' +
	            '<div class="kk_editorArea">';

	        editModeLayoutHtml = '<div class="kk_view kk_editorView' + (firstMode === 'editor' || null ? ' ' : ' ' + 'kk_view_hide') + '" style="">' +
	            '<iframe class="kk_contentView"></iframe>' +
	            '</div>';

	        if (useHtmlMode) {
	            htmlModeLayoutHtml = '<div class="kk_view kk_htmlView kk_view_hide" style="">' +
	                '<textarea class="kk_htmlContents"></textarea>' +
	                '</div>'
	        }

	        if (useTextMode) {
	            textModeLayoutHtml = '<div class="kk_view kk_textView kk_view_hide" style="">' +
	                '<textarea class="kk_textContents"></textarea>' +
	                '</div>'
	        }

	        if (usePreviewMode) {
	            previewModeLayoutHtml = '<div class="kk_view kk_preView' + (firstMode === 'preview' ? ' ' : ' ' + 'kk_view_hide') + '" style="">' +
	                '<iframe class="kk_previewContents"></iframe>' +
	                '</div>';
	        }
	        editorLayoutHTML += editModeLayoutHtml + htmlModeLayoutHtml + textModeLayoutHtml + previewModeLayoutHtml;

	        




	        if (options.useAdjustForChrome) {

	            editorLayoutHTML += '<iframe class="kk_chrome_adjust" style="display:none;"></iframe>';

	            //
	            //
	            // //Clipboard Iframe
	            // this.$testIframe = $('<iframe class="' + Define.CLASS.CHROME_PASTE_ADJUST + '" style="display:none;"></iframe>');
	            //
	            // $(document.body).append(this.$testIframe);
	            //
	            // setTimeout(function(){
	            //     var eDocument = _this.$testIframe[0].contentWindow.document;
	            //
	            //     var newDocType = eDocument.implementation.createDocumentType('html', '', '');
	            //
	            //     if (eDocument.doctype) {
	            //         eDocument.replaceChild(newDocType, eDocument.doctype);
	            //     } else {
	            //         eDocument.insertBefore(newDocType, eDocument.documentElement);
	            //     }
	            //
	            //     var meta = eDocument.createElement('meta');
	            //     meta.setAttribute('http-equiv', 'Content-Type');
	            //     meta.setAttribute('content', 'text/html; charset=utf-8');
	            //
	            //     $(eDocument.documentElement).find('head').append(meta);
	            // }, 100);
	        }

	        editorLayoutHTML += '</div>';

	        editorLayoutHTML += '' +
	            '<div class="kk_editor_dialog" style="display:none;">' +
	            '</div>';

	        return editorLayoutHTML;
	    },

	    getFooterLayoutHTML : function(options) {
	        //TODO : i18n 대응 예정

	        var useHtmlMode = options.useHtmlMode;
	        var useTextMode = options.useTextMode;
	        var usePreviewMode = options.usePreviewMode;
	        var firstMode = options.useFirstMode

	        var useEditorResize = options.useEditorResize;

	        var footerHTML = '<div class="kk_editor_footer' + (options.useFooterMenu ? '' : ' ' + 'footer_disabled') + '">';

	        // if (useEditorResize) {
	        //     footerHTML += '<div class="vertical_resize">' + window.kukuResource.menuText.editorResize + '</div>';
	        // }

	        footerHTML += '<ul class="change_mode_menus">';




	        // var editorLayoutHTML = '' + '<div class="' + Define.CLASS.EDITOR_AREA + '">';
	        //
	        // var editorModeString = '<div class="' + Define.CLASS.MAIN_VIEW + ' ' + Define.CLASS.EDITOR_VIEW + '">' +
	        //     '<iframe class="' + Define.CLASS.CONTENT_VIEW + '"></iframe>' +
	        //     '</div>';
	        //
	        // var htmlModeString = '<div class="' + Define.CLASS.MAIN_VIEW + ' ' + Define.CLASS.HTML_VIEW + ' ' + Define.CLASS.VIEW_HIDE + '" style="">' +
	        //     '<textarea class="' + Define.CLASS.HTML_CONTENTS + '"></textarea>' +
	        //     '</div>';
	        //
	        // var textModeString = '<div class="' + Define.CLASS.MAIN_VIEW + ' ' + Define.CLASS.TEXT_VIEW + ' ' + Define.CLASS.VIEW_HIDE + '" style="">' +
	        //     '<textarea class="' + Define.CLASS.TEXT_CONTENTS + '"></textarea>' +
	        //     '</div>';
	        //
	        // var previewModeString = '<div class="' + Define.CLASS.MAIN_VIEW + ' ' + Define.CLASS.PRE_VIEW + ' ' + Define.CLASS.VIEW_HIDE + '" style="">' +
	        //     // '<div class="' + Define.CLASS.PREVIEW_CONTENTS + '"></div>' +
	        //     '<iframe class="' + Define.CLASS.PREVIEW_CONTENTS + '"></iframe>' +
	        //     '</div>';
	        //
	        // if(firstMode === 'html') {
	        //     editorLayoutHTML += ( useHtmlMode? htmlModeString : '' ) + editorModeString + ( useTextMode? textModeString : '' ) + ( usePreviewMode? previewModeString : '' );
	        // }
	        // else if(firstMode === 'text') {
	        //     editorLayoutHTML += ( useTextMode? textModeString : '' ) + editorModeString + ( useHtmlMode? htmlModeString : '' ) + ( usePreviewMode? previewModeString : '' );
	        // }
	        // else if(firstMode === 'preview') {
	        //     editorLayoutHTML += ( usePreviewMode? previewModeString : '' ) + editorModeString + ( useHtmlMode? htmlModeString : '' ) + ( useTextMode? textModeString : '' );
	        // }
	        // else {
	        //     editorLayoutHTML += editorModeString + ( useHtmlMode? htmlModeString : '' ) + ( useTextMode? textModeString : '' ) + ( usePreviewMode? previewModeString : '' );
	        // }


	        var editorModeString = '<li class="mode_menu kk_menu_editor ' + (firstMode === 'editor'? ' kk_footer_menu_active' : '') + '">' +
	            '<a class="">' +
	            window.kukuResource.mode.editor +
	            '</a>' +
	            '</li>';

	        var htmlModeString = '<li class="mode_menu kk_menu_html ' + (firstMode === 'html'? ' kk_footer_menu_active' : '') + '">' +
	            '<a class="">' +
	            window.kukuResource.mode.html +
	            '</a>' +
	            '</li>';

	        var textModeString = '<li class="mode_menu kk_menu_text ' + (firstMode === 'text'? ' kk_footer_menu_active' : '') + '">' +
	            '<a class="">' +
	            window.kukuResource.mode.text +
	            '</a>' +
	            '</li>';

	        var previewModeString = '<li class="mode_menu kk_menu_preview ' + (firstMode === 'preview'? ' kk_footer_menu_active' : '') + '">' +
	            '<a class="">' +
	            window.kukuResource.mode.preview +
	            '</a>' +
	            '</li>';

	        if(firstMode === 'html') {
	            footerHTML += ( useHtmlMode? htmlModeString : '' ) + editorModeString + ( useTextMode? textModeString : '' ) + ( usePreviewMode? previewModeString : '' );
	        }
	        else if(firstMode === 'text') {
	            footerHTML += ( useTextMode? textModeString : '' ) + editorModeString + ( useHtmlMode? htmlModeString : '' ) + ( usePreviewMode? previewModeString : '' );
	        }
	        else if(firstMode === 'preview') {
	            footerHTML += ( usePreviewMode? previewModeString : '' ) + editorModeString + ( useHtmlMode? htmlModeString : '' ) + ( useTextMode? textModeString : '' );
	        }
	        else {
	            footerHTML += editorModeString + ( useHtmlMode? htmlModeString : '' ) + ( useTextMode? textModeString : '' ) + ( usePreviewMode? previewModeString : '' );
	        }


	        // footerHTML += '' +
	        //     '<li>' +
	        //         '<a class="' + Define.CLASS.EDITOR_FOOTER_MENU + ' ' + Define.CLASS.EDITOR_FOOTER_MENU_EDITOR + ' ' + Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE + '">' +
	        //             '<span>' +
	        //                 window.kukuResource.mode.editor +
	        //             '</span>' +
	        //         '</a>' +
	        //     '</li>';
	        //
	        // if (useHtmlMode) {
	        //     footerHTML += '' +
	        //         '<li>' +
	        //             '<a class="' + Define.CLASS.EDITOR_FOOTER_MENU + ' ' + Define.CLASS.EDITOR_FOOTER_MENU_HTML + '">' +
	        //                 '<span>' +
	        //                     window.kukuResource.mode.html +
	        //                 '</span>' +
	        //             '</a>' +
	        //         '</li>';
	        // }
	        //
	        // if (useTextMode) {
	        //     footerHTML += '' +
	        //         '<li>' +
	        //             '<a class="' + Define.CLASS.EDITOR_FOOTER_MENU + ' ' + Define.CLASS.EDITOR_FOOTER_MENU_TEXT + '">' +
	        //                 '<span>' +
	        //                     window.kukuResource.mode.text +
	        //                 '</span>' +
	        //             '</a>' +
	        //         '</li>';
	        // }
	        //
	        // if (usePreviewMode) {
	        //     footerHTML += '' +
	        //         '<li>' +
	        //             '<a class="' + Define.CLASS.EDITOR_FOOTER_MENU + ' ' + Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW + '">' +
	        //                 '<span>' +
	        //                     window.kukuResource.mode.preview +
	        //                 '</span>' +
	        //             '</a>' +
	        //         '</li>';
	        // }

	        footerHTML += '</ul>';
	        footerHTML += '</div>';

	        return footerHTML;
	    },

	    resizeToolbarMenu : function () {
	        var menusW = $(".menus").width();
	        var sum_btnW = 0;

	        $('.menu a[u-id="more"]').removeClass("active");
	        $('.menu_more_wrap').removeClass("active");

	        $(".menus .menu a").removeClass("hidden");
	        $(".menus .menu:first a").each( function () {
	            var btnW = $(this).outerWidth() + 10;
	            sum_btnW += btnW;

	            if ( menusW >= sum_btnW ) {
	                var uId = $(this).attr("u-id");
	                $('.menu_more_wrap a[u-id="'+uId+'"]').addClass("hidden");
	                $('.menu_more_wrap a[u-id="more"]').remove();
	                $('.menu a[u-id="more"]').removeClass("show");
	            } else {
	                $(this).addClass("hidden");
	                var menuLength = $('.menu_more_wrap a').length;
	                var menuHiddenLength = $('.menu_more_wrap .hidden').length;
	                if (menuLength !== menuHiddenLength) {
	                    $('.menu a[u-id="more"]').addClass("show");
	                }
	            }
	        });

	    }
	};

	module.exports = Layout;



/***/ })
/******/ ]);