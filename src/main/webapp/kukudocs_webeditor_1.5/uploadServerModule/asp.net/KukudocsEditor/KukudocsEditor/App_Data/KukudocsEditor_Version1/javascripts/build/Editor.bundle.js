/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(2);

	var Router = __webpack_require__(4);
	var Dom = __webpack_require__(31);

	var MenuController = __webpack_require__(36);

	var UI = __webpack_require__(80);
	var Toolbar = __webpack_require__(81);
	var Menubar = __webpack_require__(82);
	var Filter = __webpack_require__(44);
	var Util = __webpack_require__(6);
	var Resource = __webpack_require__(13);

	var Define = __webpack_require__(3);
	var Layout = __webpack_require__(83);

	function KuKudocsEditor(element, options) {
	    this.rootElement = null;
	    this.editorElement = null;
	    this.$domObject = null;

	    this.options = {
	        minHeight : 0,
	        maxHeight : 0,
	        initHTML : '',
	        width : '600px',
	        height : '700px',
	        hiddenMenu : [],
	        lang : 'kr',
	        helpURL : '/help.html',

	        publicPathURL : './',
	        loadingImageURL : 'images/load.gif',
	        errorImageURL : 'images/error.png',
	        playImageURL : 'images/play.png',
	        emoticonPathURL : 'images/emoticon/',

	        useHtmlMode : true,
	        useTextMode : true,
	        usePreviewMode : true,
	        useEditorResize : true,

	        useMenuBar : false,
	        useDeleteTableAlert : false,

	        emoticonList : [],

	        fileUploadURL : '/fileUpload',
	        imageUploadURL : '', // '/fileUpload'
	        videoUploadURL : '', // '/fileUpload'
	        Editor_Complete : null,
	        Key_event : null,
	        Mouse_event : null,
	        cell_lock_name : 'kaoni_free',

	        useFooterMenu : true,

	        templateList : [
	            { name : '부서양식',
	                items : [
	                    { name : '회의록', type : 'url', value : './template/meeting_log.html' },
	                    { name : '보고서', type : 'url', value : './template/report.html' }
	                ]
	            },
	            { name : '인사', items : [ { name : '휴가신청서', type : 'url', value : './template/vacation.html' } ] }
	        ]
	    };

	    this.ui = null;
	    this.router = null;
	    this.event = null;
	    this.menuController = null;
	    this.toolbar = null;
	    this.clientFilter = null;

	    window.console = window.console || (function(){
	        var c = {}; c.log = c.warn = c.debug = c.info = c.error = c.time = c.dir = c.profile = c.clear = c.exception = c.trace = c.assert = function(){};
	        return c;
	    })();

	    this.init(element, options);
	}

	KuKudocsEditor.prototype.init = function(element, options) {
	    if (typeof element == 'string') {
	        this.rootElement = $('#' + element);
	    } else if (element instanceof Node) {
	        this.rootElement = $(element);
	    }

	    if (!(this.rootElement && this.rootElement.length)) {
	        // Error
	        return null;
	    }

	    this.optionInitialize(options);

	    this.createEditor();

	    var $body = $(document.body);

	    if (!$('#' + Define.ID.KK_EXPORT).length) {
	        var $exportIframe = $('<iframe style="display: none;" id="' + Define.ID.KK_EXPORT + '">');
	        $body.append($exportIframe);
	    }

	    if ($.browser.msie) {
	        var $clipboardDiv = $('<div id="' + Define.ID.KK_MS_CLIPBOARD + '" contenteditable="true"/>');
	        $body.append($clipboardDiv);
	    }

	    this.clientFilter = new Filter(this.options);

	    this.appendMaking();
	    setTimeout($.proxy(this.operationSetting, this), 100);

	};

	KuKudocsEditor.prototype.appendMaking = function() {

	    if (window.isMaking) {
	        return;
	    }

	    var license = "Generated by Kukudocs (" + Define.EDITOR_INFO.VERSION +  ")";
	    var homepage = Define.EDITOR_INFO.HOMEPAGE;

	    var making = "" +
	        "<!--          ,,:::::,,, \n" +
	        "         ,:ssSHS2H552H2522ssi, \n" +
	        "      :isssssssssssrsrsrssss22s, \n" +
	        "    :rrrir;rrsssssrsrsrsrrrrrssX, \n" +
	        "  ,ii:i:iirrrrsssrsrsrsrsrrrrrsS: \n" +
	        "  :;:::::iirrrrsrsssrsrsrsrss22r \n" +
	        "  ,i::::iiiirrsssrsrsrsss222si \n" +
	        "   ::::i:ii;irrssssss225sr, \n" +
	        "   ,i,:::iiirrrsss552r: \n" +
	        "   ,i::::iiiirss2s:                " + license + " \n" +
	        "    i:::::iir:,                    " + homepage + " \n" +
	        "    ,i:::i:,  iSH2ri,, \n" +
	        "    ,i::,  :SB@MMMMMBMM9X2r: \n" +
	        "     i:  rB@BM99X9SXSXSX999G92 \n" +
	        "     , i@B@GG999XXX5H5S25222HGG \n" +
	        "      X@BMGG9G99XXSXHS2522225G5 \n" +
	        "      @BBGGGG9G99XXSSHS5HH9GGr \n" +
	        "      r@B@B@MMGGGG999GGMMMSr \n" +
	        "        :sGB@B@B@@@BM9Sr: \n -->";

	    var $making = $(making);

	    $(document).find('html').before($making);

	    window.isMaking = true;
	};

	KuKudocsEditor.prototype.optionInitialize = function(options) {
	    var keys = Object.keys(this.options);

	    if (options) {
	        for (var key in options) {
	            if (keys.indexOf(key) !== -1) {
	                this.options[key] = options[key];
	            }
	        }
	    }

	    if (this.options.publicPathURL) {
	        this.options.loadingImageURL = this.options.publicPathURL + this.options.loadingImageURL;
	        this.options.errorImageURL = this.options.publicPathURL + this.options.errorImageURL;
	        this.options.playImageURL = this.options.publicPathURL + this.options.playImageURL;
	        this.options.emoticonPathURL = this.options.publicPathURL + this.options.emoticonPathURL;
	    }

	    if (!this.options.emoticonList || !this.options.emoticonList.length) {
	        this.options.emoticonList = [];

	        var emoticonPath = this.options.emoticonPathURL;
	        var emoticonType = '.png';
	        var emoticonList = ['face', 'food', 'nature', 'animal', 'object'];

	        var faceList = [];
	        var foodList = [];
	        var natureList = [];
	        var animalList = [];
	        var objectlList = [];

	        for (var i = 0; i < 10; i++) {
	            faceList.push(emoticonPath + emoticonList[0] + i + emoticonType);
	            foodList.push(emoticonPath + emoticonList[1] + i + emoticonType);
	            natureList.push(emoticonPath + emoticonList[2] + i + emoticonType);
	            animalList.push(emoticonPath + emoticonList[3] + i + emoticonType);
	            objectlList.push(emoticonPath + emoticonList[4] + i + emoticonType);
	        }

	        this.options.emoticonList = this.options.emoticonList.concat(faceList, foodList, natureList, animalList, objectlList);
	    }
	};

	KuKudocsEditor.prototype.createEditor = function() {
	    var _this = this;

	    //Layout 생성 function
	    this.editorElement = Layout.createLayout(this.rootElement, this.options);

	    this.toolbarElement = this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR);
	    this.editorViewElement = this.editorElement.find('.' + Define.CLASS.EDITOR_VIEW);
	    this.footerElement = this.editorElement.find('.' + Define.CLASS.EDITOR_FOOTER);

	    this.contentsElements = $(this.editorViewElement[0].childNodes);

	    this.editorContentView = this.editorElement.find('.' + Define.CLASS.CONTENTS);

	    this.htmlContentView = this.editorElement.find('.' + Define.CLASS.HTML_CONTENTS);
	    this.textContentView = this.editorElement.find('.' + Define.CLASS.TEXT_CONTENTS);
	    this.previewContentView = this.editorElement.find('.' + Define.CLASS.PREVIEW_CONTENTS);

	    $(window).on('resize', $.proxy(this.setResize, this));


	    this.setParseSize();
	    this.setResize();

	    this.editorElement.css('visibility', '');
	};

	KuKudocsEditor.prototype.setParseSize = function() {
	    this.intHeight = 0;
	    this.intWidth = 0;

	    if (this.options.height.indexOf('%') < 0) {
	        this.intHeight = parseInt(this.options.height);
	    }

	    if (this.options.width.indexOf('%') < 0) {
	        this.intWidth = parseInt(this.options.width);
	    }
	};


	KuKudocsEditor.prototype.setResize = function() {
	    var bufferPadding = 26;

	    var $parentNode = this.editorElement.parent();
	    var footerHeightSize = this.footerElement.height();

	    var bufferBorderSize = 2;

	    if (footerHeightSize === 0) {
	        bufferPadding = 21;
	    }

	    if (this.editorElement.hasClass(Define.CLASS.FULL_SCREEN)) {
	        this.editorElement.width(window.innerWidth - bufferBorderSize);
	        this.editorElement.height(window.innerHeight - bufferBorderSize);
	    } else {

	        var width = 0;
	        var height = 0;

	        if (this.options.width === '100%') {
	            var scrollWidth = $parentNode[0].scrollWidth;
	            var clientWidth = $parentNode[0].clientWidth;

	            if (scrollWidth === clientWidth) {
	                width = scrollWidth;
	            } else {
	                $parentNode.css('overflow', 'hidden');
	                width = $parentNode[0].clientWidth;
	                $parentNode.css('overflow', '');
	            }

	            // width -= parseInt($parentNode.css('margin-left'));
	            // width -= parseInt($parentNode.css('margin-right'));

	            this.editorElement.width(width - bufferBorderSize);
	        } else {
	            if (this.intWidth > 0) {
	                width = this.intWidth;
	                // width -= parseInt($parentNode.css('margin-left'));
	                // width -= parseInt($parentNode.css('margin-right'));

	                this.editorElement.width(width - bufferBorderSize);
	            } else {
	                this.editorElement.width(this.options.width);
	            }
	        }

	        if (this.options.height === '100%') {
	            var scrollHeight = $parentNode[0].scrollHeight;
	            var clientHeight = $parentNode[0].clientHeight;

	            if (scrollHeight === clientHeight) {
	                height = scrollHeight;
	            } else {
	                $parentNode.css('overflow', 'hidden');
	                height = $parentNode[0].clientHeight;
	                $parentNode.css('overflow', '');
	            }

	            // height -= parseInt($parentNode.css('margin-top'));
	            // height -= parseInt($parentNode.css('margin-bottom'));

	            this.editorElement.height(height - bufferBorderSize);
	        } else {
	            if (this.intHeight > 0) {
	                height = this.intHeight;
	                // height -= parseInt($parentNode.css('margin-top'));
	                // height -= parseInt($parentNode.css('margin-bottom'));

	                this.editorElement.height(height - bufferBorderSize);
	            } else {
	                this.editorElement.height(this.options.height);
	            }
	        }
	    }

	    var editorHeight = this.editorElement.height() - (this.toolbarElement.height() + footerHeightSize) - bufferPadding;

	    this.contentsElements.height(editorHeight);
	};

	KuKudocsEditor.prototype.operationSetting = function() {

	    this.ui = new UI(this.editorElement, this.options);

	    this.toolbar = new Toolbar(this.editorElement);

	    //Widget Setting

	    var initHTML = '';

	    if (this.rootElement[0].nodeName === 'TEXTAREA') {
	        initHTML = this.rootElement.val();
	    }

	    initHTML = initHTML || this.options.initHTML || Define.DEFAULT_PARAGRAPH_HTML;

	    initHTML = this.clientFilter.doSimpleTreeChange(initHTML);

	    this.editorContentView[0].innerHTML = initHTML;

	    var context = this;

	    // if ($.browser.msie && $.browser.versionNumber < 10){
	    //     $('a[u-id]').addClass('disabled');
	    //     $('.menu_selectbox').each(function(){
	    //         $(context.parentNode).remove();
	    //     });
	    //
	    //     setTimeout(function(){
	    //         alert('이 브라우저는 지원하지 않는 브라우저입니다. \nInternet Explorer 10 또는 11 \n크롬, 파이어폭스 브라우저를 이용해주세요.');
	    //     }, 1000);
	    //
	    //     return;
	    // }


	    Util.makePageBreakImage();

	    context.$domObject = new Dom();

	    context.router = new Router(context.editorElement, context.$domObject, context.options);

	    context.menuController = new MenuController(context.editorElement, context.$domObject, context.router, context);

	    context.toolbar.init(context.menuController, context.$domObject);

	    if (context.options.useMenuBar){
	        context.menuBar = new Menubar(this.editorElement);

	        context.menuBar.init(context.menuController, this.options);

	        context.setResize();
	    }

	    context.$domObject.selection.setEditorElement(context.editorElement);

	    var defaultNode = context.$domObject.selection.setDefault();
	    context.router.doStatusHighlight(defaultNode);

	    if (context.options.Editor_Complete) {
	        context.options.Editor_Complete();
	    }

	    this.doCheckedLicense();
	};

	KuKudocsEditor.prototype.doCheckedLicense = function() {
	    var today = new Date();

	    var year = 2018;
	    var month = 6;
	    var date = 30;

	    var endDate = new Date(month + '/' + date + '/' + year);

	    if (today > endDate) {
	        alert(Resource.licenseErrorMsg);
	    }
	};

	/* Core API */

	KuKudocsEditor.prototype._getElementObject = function(element) {
	    var $element = null;

	    if (element instanceof Node){
	        $element = $(element);
	    } else if (typeof element === 'string'){
	        $element = this.editorContentView.find('#' + element);
	    }

	    return $element;
	};

	KuKudocsEditor.prototype._getDomObject = function() {
	    return this.$domObject;
	};

	KuKudocsEditor.prototype.getRootElement = function() {
	    return this.editorElement;
	};

	KuKudocsEditor.prototype.getToolbarElement = function() {
	    return this.toolbarElement;
	};

	KuKudocsEditor.prototype.getEditorElement = function() {
	    return this.editorViewElement;
	};

	KuKudocsEditor.prototype.getFooterElement = function() {
	    return this.footerElement;
	};

	KuKudocsEditor.prototype.getContentViewElement = function() {
	    return this.editorContentView;
	};



	KuKudocsEditor.prototype.getEditorWidth = function() {
	    return this.editorElement.width();
	};

	KuKudocsEditor.prototype.getEditorHeight = function() {
	    return this.editorElement.height();
	};

	KuKudocsEditor.prototype.getEditorContentWidth = function() {
	    return this.editorContentView.width();
	};

	KuKudocsEditor.prototype.getEditorContentHeight = function() {
	    return this.editorContentView.height();
	};




	/* Option API */
	KuKudocsEditor.prototype.getOptions = function() {
	    return this.options;
	};



	KuKudocsEditor.prototype.getHelpURL = function() {
	    return this.options.helpURL;
	};

	KuKudocsEditor.prototype.setHelpURL = function(helpURL) {
	    this.options.helpURL = helpURL;
	};

	KuKudocsEditor.prototype.getPublicPathURL = function() {
	    return this.options.publicPathURL;
	};

	KuKudocsEditor.prototype.setPublicPathURL = function(publicPathURL) {
	    this.options.publicPathURL = publicPathURL;
	};

	KuKudocsEditor.prototype.getLoadingImageURL = function() {
	    return this.options.loadingImageURL;
	};

	KuKudocsEditor.prototype.setLoadingImageURL = function(loadingImageURL) {
	    this.options.loadingImageURL = loadingImageURL;
	};

	KuKudocsEditor.prototype.getErrorImageURL = function() {
	    return this.options.errorImageURL;
	};

	KuKudocsEditor.prototype.setErrorImageURL = function(errorImageURL) {
	    this.options.errorImageURL = errorImageURL;
	};

	KuKudocsEditor.prototype.getPlayImageURL = function() {
	    return this.options.playImageURL;
	};

	KuKudocsEditor.prototype.setPlayImageURL = function(playImageURL) {
	    this.options.playImageURL = playImageURL;
	};



	KuKudocsEditor.prototype.getFileUploadURL = function() {
	    return this.options.fileUploadURL;
	};

	KuKudocsEditor.prototype.setFileUploadURL = function(fileUploadURL) {
	    this.options.fileUploadURL = fileUploadURL;
	};

	KuKudocsEditor.prototype.getImageUploadURL = function() {
	    return this.options.imageUploadURL;
	};

	KuKudocsEditor.prototype.setImageUploadURL = function(imageUploadURL) {
	    this.options.imageUploadURL = imageUploadURL;
	};

	KuKudocsEditor.prototype.getVideoUploadURL = function() {
	    return this.options.videoUploadURL;
	};

	KuKudocsEditor.prototype.setVideoUploadURL = function(videoUploadURL) {
	    this.options.videoUploadURL = videoUploadURL;
	};

	KuKudocsEditor.prototype.getEmoticonList = function() {
	    return this.options.emoticonList;
	};

	KuKudocsEditor.prototype.setEmoticonList = function(emoticonList) {
	    this.options.emoticonList = emoticonList;
	};


	KuKudocsEditor.prototype.setTemplateList = function(templateList) {
	    this.options.templateList = templateList;
	};

	KuKudocsEditor.prototype.getTemplateList = function() {
	    return this.options.templateList;
	};





	KuKudocsEditor.prototype.getEditorComplete = function() {
	    return this.options.Editor_Complete;
	};

	KuKudocsEditor.prototype.setEditorComplete = function(Editor_Complete) {
	    this.options.Editor_Complete = Editor_Complete;
	};

	KuKudocsEditor.prototype.getKeyEvent = function() {
	    return this.options.Key_event;
	};

	KuKudocsEditor.prototype.setKeyEvent = function(Key_event) {
	    this.options.Key_event = Key_event;
	};

	KuKudocsEditor.prototype.getMouseEvent = function() {
	    return this.options.Mouse_event;
	};

	KuKudocsEditor.prototype.setMouseEvent = function(Mouse_event) {
	    this.options.Mouse_event = Mouse_event;
	};

	KuKudocsEditor.prototype.getCellLockName = function() {
	    return this.options.cell_lock_name;
	};

	KuKudocsEditor.prototype.setCellLockName = function(cell_lock_name) {
	    this.options.cell_lock_name = cell_lock_name;
	};

	KuKudocsEditor.prototype.getUseFooterMenu = function() {
	    return this.options.useFooterMenu;
	};

	KuKudocsEditor.prototype.setUseFooterMenu = function(useFooterMenu) {
	    this.options.useFooterMenu = useFooterMenu;

	    var methodName = this.options.useFooterMenu ? 'removeClass' : 'addClass';

	    this.footerElement[methodName](Define.CLASS.EDITOR_FOOTER_DISABLED);

	    this.setResize();
	};





	KuKudocsEditor.prototype.getElementParentCells = function(element, tagNames) {
	    var query = [];

	    var parentList = Define.CELL_TYPE;

	    if (tagNames) {
	        if (typeof tagNames === 'string') {
	            parentList = [tagNames];
	        } else if (tagNames instanceof Array) {
	            parentList = tagNames;
	        }
	    }

	    for (var i = 0, length = parentList.length; i < length; i++) {
	        query.push('.' + Define.CLASS.CONTENTS + ' ' + parentList[i]);
	    }

	    var $cellNode = $(element).parent().closest(query.join(','));

	    return $cellNode.toArray();
	};

	KuKudocsEditor.prototype.getElementText = function(element) {

	    var $element = $(element);

	    var textValue = '';

	    if ($element.length) {
	        var htmlString = $element.html();

	        for (var i = 0; i < Define.PARAGRAPH_NODES.length; i++) {

	            var regexExpression = '</' + Define.PARAGRAPH_NODES[i] + '>';
	            var regexp = new RegExp(regexExpression, 'ig');

	            htmlString = htmlString.replace(regexp, regexExpression + '\n');
	        }

	        textValue = $('<div/>').html(htmlString).text();
	    }

	    return textValue;

	};

	KuKudocsEditor.prototype.setAnotherContents = function() {

	    if (this.options.useHtmlMode || this.options.usePreviewMode || this.options.useTextMode) {
	        var commonHTML = '';

	        var $clipboardDivWrap = $('<div/>');
	        var $clone = this.editorContentView.clone();

	        if (this.options.useHtmlMode || this.options.usePreviewMode) {
	            var videoTypeNode = $clone.find('img[' + Define.ATTR.DATA_VIDEO_SOURCE + ']');

	            if (videoTypeNode.length) {
	                videoTypeNode.replaceWith(function(){
	                    var style = $(this).attr(Define.ATTR.STYLE);
	                    var decodingHTML = decodeURIComponent($(this).attr(Define.ATTR.DATA_VIDEO_SOURCE));
	                    var $decodingHTML = $(decodingHTML);

	                    $decodingHTML.attr(Define.ATTR.STYLE, style);
	                    $decodingHTML.find('object, embed').attr(Define.ATTR.STYLE, style);

	                    if ($decodingHTML.is('embed')) {
	                        $decodingHTML.attr(Define.ATTR.SRC, $decodingHTML[0].src);
	                    } else {
	                        $decodingHTML.find('source, embed').attr(Define.ATTR.SRC, function(){
	                            return this.src;
	                        });

	                        $decodingHTML.find('object').attr(Define.ATTR.DATA, function(){
	                            return this.data;
	                        });
	                    }

	                    return $decodingHTML[0].outerHTML;
	                });
	            }

	            commonHTML = this.clientFilter.doAdjustCopyDatas($clone[0].childNodes);

	            if (this.options.useHtmlMode) {
	                $clipboardDivWrap.html(commonHTML);

	                var prettyHtml = Util.prettyHtml($clipboardDivWrap[0]);

	                if (prettyHtml){
	                    this.htmlContentView.val(prettyHtml.trim());
	                }else{
	                    this.htmlContentView.val($clipboardDivWrap.html());
	                }
	            }

	            if (this.options.usePreviewMode) {
	                this.previewContentView.html(commonHTML);
	            }
	        }

	        if (this.options.useTextMode) {
	            if (!commonHTML) {
	                commonHTML = this.clientFilter.doAdjustCopyDatas($clone[0].childNodes);
	            }

	            $clipboardDivWrap.html(commonHTML);

	            var textValue = '';
	            var $paragraphs = $clipboardDivWrap.find(Define.PARAGRAPH_NODES.join(','));

	            if ($paragraphs.length) {
	                $paragraphs.each(function(){
	                    textValue += this.textContent + '\n';
	                });
	            } else if ($clipboardDivWrap.text()){
	                textValue = $clipboardDivWrap.text();
	            }

	            this.textContentView.val(textValue);
	        }

	        $clipboardDivWrap.remove();
	    }
	};






	/* Kaoni API */

	/* 전체 엘리먼트 가져오기 */
	KuKudocsEditor.prototype.GetAllElements = function(){
	    return this.editorContentView.find('*').toArray();
	};

	/**
	 *  현재 커서위치의 Element 가져오기
	 *
	 *  @param { String } tagName
	 *
	 *  @return { Null || Element || Array } currentElement
	 *
	 *  */
	KuKudocsEditor.prototype.GetCurrentElement = function(tagName){

	    var parentList = tagName? [tagName] : Define.CELL_TYPE;

	    var $selected_td = this.$domObject.selection.getSelectedTd();
	    var $selected = this.$domObject.selection.getSelectedNode();

	    if (!$selected.length) {
	        var range = this.$domObject.selection.getRange();

	        if (range) {
	            if(range.collapsed) {
	                $selected = $(range.startContainer);
	            }
	        }
	    }

	    $selected = $selected.add($selected_td);

	    var query = parentList.join(',');

	    var targetNodes = [];
	    var destNodes = [];

	    $selected.each(function(idx, node){
	        var $node = $(node);

	        if ($node.is(query)) {
	            targetNodes.push(node);
	        } else {
	            destNodes.push(node);
	        }
	    });

	    var cellNodes = this.getElementParentCells(destNodes, parentList);

	    var currentElement = $(targetNodes).add($(cellNodes)).toArray();

	    if (currentElement.length === 0) {
	        currentElement = null;
	    } else if (currentElement.length === 1) {
	        currentElement = currentElement[0];
	    }

	    return currentElement;
	};

	/* 지정한 ID의 Element가져오기 */
	KuKudocsEditor.prototype.GetElement = function(ElementID){
	    return this.editorContentView.find('#' + ElementID)[0];
	};

	/* 에디터 사이즈 조정 */
	KuKudocsEditor.prototype.SetEditorSize = function(width, height){
	    this.options.width = width;
	    this.options.height = height;

	    this.setParseSize();
	    this.setResize();
	};

	/* 에디터 사이즈 조정(Width만 조정) */
	KuKudocsEditor.prototype.SetEditorWidth = function(width){
	    this.options.width = width;

	    this.setParseSize();
	    this.setResize();
	};

	/* 에디터 사이즈 조정(Height) */
	KuKudocsEditor.prototype.SetEditorHeight = function(height){
	    this.options.height = height;

	    this.setParseSize();
	    this.setResize();
	};

	/* 에디터 사이즈 가져오기 */
	KuKudocsEditor.prototype.GetEditorSize = function(){
	    return {
	        width : this.editorElement.width(),
	        height : this.editorElement.height()
	    };
	};

	/* 에디터 모드 지정 */
	KuKudocsEditor.prototype.SetEditMode = function(modeType){

	    var selectedFooterMenuClass = null;

	    switch(modeType) {
	        case Define.EDITOR_MODE :
	            selectedFooterMenuClass = Define.CLASS.EDITOR_FOOTER_MENU_EDITOR;

	            break;

	        case Define.HTML_MODE :
	            selectedFooterMenuClass = Define.CLASS.EDITOR_FOOTER_MENU_HTML;

	            break;

	        case Define.TEXT_MODE :
	            selectedFooterMenuClass = Define.CLASS.EDITOR_FOOTER_MENU_TEXT;

	            break;

	        case Define.PREVIEW_MODE :
	            selectedFooterMenuClass = Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW;

	            break;
	    }

	    if (selectedFooterMenuClass) {
	        var $selectedFooterMenu = this.footerElement.find('.' + selectedFooterMenuClass);

	        this.menuController.event.setFooterMenu($selectedFooterMenu, true);
	    }
	};

	/* Body 컨텐츠의 HTML 가져오기 */
	KuKudocsEditor.prototype.GetEditorContent = function(){
	    var $contentCloneNode = this.editorContentView.clone();

	    var $selectedNodes = $contentCloneNode.find('.' + Define.CLASS.SELECTED + ', .' + Define.CLASS.SELECTED_TABLE + ', .' + Define.CLASS.SELECTED_TD + ', .' + Define.CLASS.SELECTED_SYMBOL);

	    $selectedNodes.removeClass(Define.CLASS.SELECTED + ' ' + Define.CLASS.SELECTED_TABLE + ' ' + Define.CLASS.SELECTED_TD + ' ' + Define.CLASS.SELECTED_SYMBOL);

	    var $contents = this.clientFilter.doAdjustCopyDatas($contentCloneNode[0].childNodes);

	    $contentCloneNode.html($contents);

	    $contentCloneNode.css('background-image', this.editorContentView.css('background-image'));
	    $contentCloneNode.css('background-attachment', this.editorContentView.css('background-attachment'));
	    $contentCloneNode.css('background-repeat', this.editorContentView.css('background-repeat'));
	    $contentCloneNode.css('background-position', this.editorContentView.css('background-position'));
	    $contentCloneNode.css('background-color', this.editorContentView.css('background-color'));

	    $contentCloneNode.css('min-height', '500px');
	    $contentCloneNode.css('min-width', '100%');

	    $contentCloneNode.removeAttr('contenteditable').removeAttr('class').removeAttr('dropzone');

	    return $contentCloneNode[0].outerHTML;
	};

	/* Body 컨텐츠의 TEXT 가져오기 */
	KuKudocsEditor.prototype.GetEditorTextContent = function(){
	    var $element = this.editorContentView;

	    return this.getElementText($element);
	};

	/**
	 *  에디터 내의 내용을 HTML파일 형태로 가져오기
	 *
	 *  @return { String } htmlString
	 *  */
	KuKudocsEditor.prototype.GetContentHTMLFile = function(){
	    return this._GetContentHTMLFile(true);
	};

	KuKudocsEditor.prototype._GetContentHTMLFile = function(isGetDocType){

	    var isIE10 = $.browser.msie && $.browser.version < 11 ;

	    var $iframe = null;

	    if (isIE10) {
	        $iframe = $('#' + Define.ID.KK_EXPORT);
	    } else {
	        $iframe = $('<iframe id="' + Define.ID.EXPORT_WRAPPER_IFRAME +  '" style="display: none;"/>');
	        $(document.body).append($iframe);
	    }

	    var exportDocument = $iframe[0].contentWindow.document;
	    var $exportDocument = $(exportDocument);
	    var $exportHead = $exportDocument.find('head');

	    /* DocType 설정 */

	    var docType = null;
	    var newDocType = null;

	    if (isGetDocType) {
	        docType = Util.getHtmlDocType();

	        if (exportDocument.doctype) {
	            $(exportDocument.childNodes[0]).remove();
	        }

	        newDocType = exportDocument.implementation.createDocumentType('html', docType.publicId, docType.systemId);
	        exportDocument.insertBefore(newDocType, exportDocument.childNodes[0]);
	    }

	    /* Title 설정 */
	    var title = Util.getHtmlTitle();
	    var $title = $exportHead.find('title');

	    if ($title.length) {
	        $title.html(title);
	    } else {
	        $exportHead.append($('<title>' + title + '</title>'));
	    }

	    /* Encoding 설정 */
	    var encodingInfo = Util.getHtmlEncoding();
	    var charsetValue = '';

	    if (encodingInfo.metaTypeHTML4.length) {
	        var contentValue = encodingInfo.metaTypeHTML4.attr('content');

	        if (contentValue) {
	            contentValue = contentValue.toLowerCase();
	            var result = contentValue.match(/charset=([a-zA-Z0-9-]+)/);

	            if (result) {
	                charsetValue = result[1];
	            }
	        }

	        var $contentTypeHTML4 = $exportHead.find('meta[http-equiv="Content-Type"]');

	        if ($contentTypeHTML4.length) {
	            $contentTypeHTML4.attr('content', 'text/html; charset=' + charsetValue);
	        } else {
	            var metaHTML4Type = $('<meta http-equiv="Content-Type" content="text/html; charset=' + charsetValue + '">');
	            $exportHead.prepend(metaHTML4Type);
	        }
	    }

	    if (encodingInfo.metaTypeHTML5.length) {
	        var charset = encodingInfo.metaTypeHTML4.attr('charset');

	        if (charset) {
	            charsetValue = charset.toLowerCase();
	        }


	        var $contentTypeHTML5 = $exportHead.find('meta[charset]');
	        if ($contentTypeHTML5.length) {
	            $contentTypeHTML5.attr('charset', charsetValue );
	        } else {
	            var metaHTML5Type = $('<meta charset="' + charsetValue + '">');
	            $exportHead.prepend(metaHTML5Type);
	        }
	    }

	    var mustHaveStyleString = '<style>' + Define.MUST_HAVE_STYLE + '</style>';
	    $exportHead.append($(mustHaveStyleString));

	    /* Language 설정 */
	    var language = Util.getHtmlLanguageType();
	    $exportDocument.find('html').attr('lang', language).attr('xml:lang', language);

	    exportDocument.body.innerHTML = this.GetEditorContent();


	    var $contents = this.editorElement.find('.' + Define.CLASS.CONTENTS);

	    var $exportDocumentBody = $(exportDocument.body);

	    var backgroundImageURL = $contents.css('background-image');
	    var backgroundImageRepeat = $contents.css('background-repeat');
	    var backgroundImagePositionX = $contents.css('background-position-x') || '';
	    var backgroundImagePositionY = $contents.css('background-position-y') || '';
	    var backgroundImageAttachment = $contents.css('background-attachment');
	    var backgroundImageColor = $contents.css('background-color');

	    $exportDocumentBody.css({
	        'background-image' : backgroundImageURL,
	        'background-repeat' : backgroundImageRepeat,
	        'background-position-x' : backgroundImagePositionX,
	        'background-position-y' : backgroundImagePositionY,
	        'background-attachment' : backgroundImageAttachment,
	        'background-color' : backgroundImageColor
	    });

	    var documentHTML = exportDocument.documentElement.outerHTML;

	    $exportDocumentBody.css({
	        'background-image' : '',
	        'background-repeat' : '',
	        'background-position-x' : '',
	        'background-position-y' : '',
	        'background-attachment' : '',
	        'background-color' : ''
	    });

	    if (!isIE10) {
	        $iframe.remove();
	    }

	    var docTypeString = "";
	    if (isGetDocType) {
	        docTypeString = new XMLSerializer().serializeToString(newDocType);
	    }

	    var htmlString = docTypeString + documentHTML;

	    return htmlString;
	};


	/**
	 * 지정한 Element에 Attribute 가져오기
	 *
	 * @param { Element || String } element
	 * @param { String } attributeName
	 * @return { String } result
	 */
	KuKudocsEditor.prototype.GetAttribute = function(element, attributeName){

	    var $element = this._getElementObject(element);
	    var result = '';

	    if ($element && $element.length) {
	        result = $element.attr(attributeName);
	    }

	    return result;
	};

	/**
	 * 지정한 Element에 Attribute 지정
	 *
	 * @param { Element || String } element
	 * @param { String } AttributeName
	 * @param { String } AttributeValue
	 * @return { boolean }
	 */

	KuKudocsEditor.prototype.SetAttribute = function(element, AttributeName, AttributeValue){

	    var $element = this._getElementObject(element);
	    var isSuccess = false;

	    if ($element && $element.length) {
	        this.router.doOperation({type:"read", name:"text", value:""});

	        $element.attr(AttributeName, AttributeValue);
	        isSuccess = $element.attr(AttributeName) === AttributeValue;

	        this.router.setRedoHistory();
	    }

	    return isSuccess;
	};

	/* Body 컨텐츠의 HTML 넣기 */
	KuKudocsEditor.prototype.SetEditorContent = function(htmlString){
	    var htmlContents = '';

	    if (htmlString) {
	        htmlContents = this.clientFilter.doSimpleTreeChange(htmlString);

	        var $htmlContent = $('<div>' + htmlContents + '</div>');
	        htmlContents = $htmlContent[0].innerHTML;

	        if ($htmlContent[0].childNodes.length === 1 && $.inArray($htmlContent[0].childNodes[0].nodeName, Define.CONTENT_NODES) !== -1) {
	            htmlContents = Define.DEFAULT_P_STYLE + htmlContents + '</p>';
	        }
	    }

	    if ($ && $.browser && $.browser.msie && $.browser.versionNumber == 9){
	        htmlContents = htmlContents.replace(/row-span/g, 'rowspan');
	        htmlContents = htmlContents.replace(/col-span/g, 'colspan');
	    }

	    this.router.doOperation({type:"read", name:"text", value:""});

	    var editorHTML = (htmlContents || Define.DEFAULT_PARAGRAPH_HTML);

	    this.editorContentView[0].innerHTML = editorHTML;

	    this.setAnotherContents();

	    this.router.setRedoHistory();

	    this.editorContentView.attr('contenteditable', 'true');
	    this.editorContentView.focus();

	    this.$domObject.selection.setDefault();
	};

	/* Body 컨텐츠의 TEXT 넣기 */
	KuKudocsEditor.prototype.SetEditorTextContent = function(textString){
	    var htmlContents = '';

	    textString = $('<div/>').text(textString).html();

	    if (textString) {
	        var plain = textString;
	        plain = plain.replace(/\u000a\u000d/gi, "</span></p>" + Define.DEFAULT_PARAGRAPH_HTML + Define.DEFAULT_P_STYLE + "<span>");
	        plain = plain.replace(/\u000a/gi, "</span></p>" + Define.DEFAULT_P_STYLE + "<span>");

	        var plainText = Define.DEFAULT_P_STYLE + "<span>" + plain + "</span></p>";

	        //console.log("plainText >>>>>>>>>>>", plainText);

	        htmlContents = this.clientFilter.doSimpleTreeChange(plainText);
	    }

	    this.router.doOperation({type:"read", name:"text", value:""});

	    this.editorContentView[0].innerHTML = (htmlContents || Define.DEFAULT_PARAGRAPH_HTML);

	    this.setAnotherContents();

	    this.router.setRedoHistory();

	    this.editorContentView.attr('contenteditable', 'true');
	};

	/**
	 *  지정한 Element에 커서 이동
	 *
	 *  @param { Element || String } element
	 *
	 *  */
	KuKudocsEditor.prototype.SetFocus = function(element){
	    var $element = this._getElementObject(element);

	    if ($element && $element.length) {
	        var op = this.$domObject.selection.getOp($element[0], 0);

	        var node = this.$domObject.selection.getOpNode(op.p, op.r);

	        this.$domObject.selection.removeSelected();
	        this.$domObject.selection.setOp(op);
	        this.$domObject.selection.set(op);

	        this.$domObject.selection.removeRange();

	        var range = document.createRange();
	        range.setStart(node.container, 0);
	        range.setEnd(node.container, 0);

	        this.$domObject.selection.setRange(range);
	    }
	};

	/**
	 *  지정한 ID의 Element가 존재하는지 체크
	 *
	 *  @param { String } elementID
	 *
	 *  @return { Boolean } isExists
	 *
	 *  */
	KuKudocsEditor.prototype.IsExistsElement = function(elementID){
	    var $element = this.editorContentView.find('#' + elementID);
	    var isExists = false;

	    if ($element && $element.length) {
	        isExists = true;
	    }

	    return isExists;
	};

	/**
	 *  BODY태그의 AttValue 가져오기
	 *
	 *  @param { String } attributeName
	 *
	 *  @return { String } attributeValue
	 *
	 *  */
	KuKudocsEditor.prototype.GetAttributeValueByBody = function(attributeName){
	    return this.editorContentView.attr(attributeName) || '';
	};

	/**
	 *  BODY태그의 AttValue 설정하기
	 *
	 *  @param { String } attributeName
	 *  @param { String } attributeValue
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetAttributeValueByBody = function(attributeName, attributeValue){
	    this.editorContentView.attr(attributeName, attributeValue);

	    return this.editorContentView.attr(attributeName) === attributeValue;
	};

	/**
	 *  지정된 ID의 AttValue 가져오기
	 *
	 *  @param { String } elementID
	 *  @param { String } attributeName
	 *
	 *  @return { String } attributeValue
	 *
	 *  */
	KuKudocsEditor.prototype.GetAttributeValueByID = function(elementID, attributeName){
	    var $element = this.editorContentView.find('#' + elementID);
	    var attributeValue = '';

	    if ($element.length) {
	        this.router.doOperation({type:"read", name:"text", value:""});

	        attributeValue = $element.attr(attributeName) || '';

	        this.router.setRedoHistory();
	    }

	    return attributeValue;
	};

	/**
	 *  지정된 ID의 AttValue 설정하기
	 *
	 *  @param { String } elementID
	 *  @param { String } attributeName
	 *  @param { String } attributeValue
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetAttributeValueByID = function(elementID, attributeName, attributeValue){
	    var $element = this.editorContentView.find('#' + elementID);
	    var isSuccess = false;

	    if ($element.length) {
	        this.router.doOperation({type:"read", name:"text", value:""});

	        $element.attr(attributeName, attributeValue);

	        this.router.setRedoHistory();

	        isSuccess = $element.attr(attributeName) === attributeValue;
	    }

	    return isSuccess;
	};

	/**
	 *  지정된 ID의 InnerHtml 정보 가져오기
	 *
	 *  @param { String } elementID
	 *
	 *  @return { String } innerHTML
	 *
	 *  */
	KuKudocsEditor.prototype.GetHtmlByID = function(elementID){
	    var $element = this.editorContentView.find('#' + elementID).clone();

	    var innerHTML = '';

	    if ($element.length) {
	        var $elementClone = $element.clone();
	        var $selectedNodes = $elementClone.find('.' + Define.CLASS.SELECTED + ', .' + Define.CLASS.SELECTED_TD + ', .' + Define.CLASS.SELECTED_TABLE + ', .' + Define.CLASS.SELECTED_SYMBOL);

	        $selectedNodes.removeClass(Define.CLASS.SELECTED + ' ' + Define.CLASS.SELECTED_TABLE + ' ' + Define.CLASS.SELECTED_TD + ' ' + Define.CLASS.SELECTED_SYMBOL);

	        var $contents = this.clientFilter.doAdjustCopyDatas($elementClone[0].childNodes);
	        var $wrapperHTML = $('<div/>').html($contents);

	        innerHTML = $wrapperHTML[0].innerHTML;
	    }

	    return innerHTML;
	};

	/**
	 *  지정된 ID의 InnerHtml 정보 설정하기
	 *
	 *  @param { String } elementID
	 *  @param { String } htmlString
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetHtmlByID = function(elementID, htmlString){
	    var $element = this.editorContentView.find('#' + elementID);

	    var isSuccess = false;

	    if ($element.length) {
	        var htmlContents = this.clientFilter.doSimpleTreeChange(htmlString);

	        this.router.doOperation({type:"read", name:"text", value:""});

	        $element[0].innerHTML = htmlContents;

	        this.router.setRedoHistory();
	    }

	    return isSuccess;
	};














	/**
	 *  지정된 ID의 InnerText 정보 가져오기
	 *
	 *  @param { String } elementID
	 *
	 *  @return { String } textValue
	 *
	 *  */

	KuKudocsEditor.prototype.GetTextByID = function(elementID){
	    var $element = this.editorContentView.find('#' + elementID);

	    return this.getElementText($element);
	};

	/**
	 *  지정된 ID의 InnerText 정보 설정하기
	 *
	 *  @param { String } elementID
	 *  @param { String } textValue
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetTextByID = function(elementID, textValue){
	    var isSuccess = false;

	    var $element = this.editorContentView.find('#' + elementID);

	    textValue = $('<div/>').text(textValue).html();

	    if ($element.length) {
	        var plain = textValue || Define.DEFAULT_TEXT_HTML;

	        if ($element.is(Define.CONTENT_NODES.join(','))) {

	        } else if ($element.is(Define.BLOCK_NODES.join(','))) {
	            if ($element.is(Define.PARAGRAPH_NODES.join(','))) {
	                plain = '<span>' + plain + '</span>';
	            } else if ($element.is(Define.CELL_TYPE.join(','))) {
	                plain = Define.DEFAULT_P_STYLE + '<span>' + plain + '</span></p>';
	            }
	        }

	        this.router.doOperation({type:"read", name:"text", value:""});

	        $element[0].innerHTML = plain;

	        this.router.setRedoHistory();

	        isSuccess = true;
	    }

	    return isSuccess;
	};

	/**
	 *  선택한 Element의 AttValue 가져오기
	 *
	 *  @param { String } attributeName
	 *  @param { String } tagName
	 *
	 *  @return { String } attributeValue
	 *
	 *  */
	KuKudocsEditor.prototype.GetAttributeValueByFocus = function(attributeName, tagName){
	    var focusNode = this.GetCurrentElement(tagName);
	    var attributeValue = null;

	    if (focusNode) {
	        attributeValue = $(focusNode).attr(attributeName);
	    }

	    return attributeValue;
	};

	/**
	 *  선택한 Element의 AttValue 설정하기
	 *
	 *  @param { String } attributeName
	 *  @param { String } attributeValue
	 *  @param { String } tagName
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetAttributeValueByFocus = function(attributeName, attributeValue, tagName){

	    var isSuccess = false;

	    var focusNode = this.GetCurrentElement(tagName);

	    if (focusNode) {
	        var $focusNode = $(focusNode);

	        this.router.doOperation({type:"read", name:"text", value:""});

	        $focusNode.attr(attributeName, attributeValue);

	        this.router.setRedoHistory();

	        attributeValue = $focusNode.attr(attributeName);

	        isSuccess = $focusNode.attr(attributeName) === attributeValue;
	    }

	    return isSuccess;
	};

	/**
	 * 지정된 ID의 쓰기금지 적용이 되어있는지 여부
	 *
	 * @param { String } elementID
	 *
	 * @return { Boolean } isCellLock
	 *
	 *
	 * */
	KuKudocsEditor.prototype.IsCellLockByID = function(elementID){
	    var $cell = this.editorContentView.find('#' + elementID);

	    var isCellLock = true;

	    if ($cell.length) {
	        if ($cell.is(Define.CELL_TYPE.join(',') + ',DIV')){

	            var cell = $cell[0];

	            var free = cell.getAttribute(this.options.cell_lock_name);

	            if (free === "" || free === this.options.cell_lock_name) {
	                isCellLock = false;
	            }
	        }
	    }

	    return isCellLock;
	};


	/**
	 *  지정된 ID의 CellLock 적용(true)/미적용(false) 처리
	 *
	 *  @param { String } elementID
	 *  @param { Boolean } isLock
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetCellLockByID = function(elementID, isLock){
	    var $cell = this.editorContentView.find('#' + elementID);

	    var isSuccess = false;

	    if ($cell.length) {
	        if ($cell.is(Define.CELL_TYPE.join(',') + ',DIV')) {
	            this.router.doOperation({type:"read", name:"text", value:""});

	            if (isLock) {
	                $cell.attr(this.options.cell_lock_name, this.options.cell_lock_name);
	            } else {
	                $cell.removeAttr(this.options.cell_lock_name);
	            }

	            this.router.setRedoHistory();

	            isSuccess = true;
	        }
	    }

	    return isSuccess;
	};



	/**
	 * 선택한 Element의 쓰기금지 적용이 되어있는지 여부
	 *
	 * @return { Boolean } isCellLock
	 *
	 * */
	KuKudocsEditor.prototype.IsCellLockByFocus = function(){
	    var isCellLock = true;
	    var cellNode = [];
	    var targetNode = null;

	    var $selectedNodes = this.$domObject.selection.getSelectedNode();

	    if ($selectedNodes.length) {
	        targetNode = $selectedNodes.first();

	    } else {
	        var range = this.$domObject.selection.getRange();

	        if (range && range.startContainer) {
	            targetNode = range.startContainer;
	        }
	    }

	    if (targetNode) {
	        cellNode = this.getElementParentCells(targetNode);

	        if (!cellNode.length) {
	            cellNode = this.getElementParentCells(targetNode, 'div');
	        }
	    }

	    if (cellNode.length) {
	        var cell = cellNode[0];

	        var free = cell.getAttribute(this.options.cell_lock_name);

	        if (free === "" || free === this.options.cell_lock_name) {
	            isCellLock = false;
	        }
	    }

	    return isCellLock;
	};

	/**
	 *  선택한 Element의 CellLock 적용(true)/미적용(false) 처리
	 *
	 *  @param { Boolean } isLock
	 *
	 *  @return { Boolean } isSuccess
	 *
	 *  */
	KuKudocsEditor.prototype.SetCellLockByFocus = function(isLock){
	    var isSuccess = false;
	    var cellNode = [];
	    var targetNode = null;

	    var $selectedNodes = this.$domObject.selection.getSelectedNode();

	    if ($selectedNodes.length) {
	        targetNode = $selectedNodes.first();

	    } else {
	        var range = this.$domObject.selection.getRange();

	        if (range && range.startContainer) {
	            targetNode = range.startContainer;
	        }
	    }

	    if (targetNode) {
	        cellNode = this.getElementParentCells(targetNode);

	        if (!cellNode.length) {
	            cellNode = this.getElementParentCells(targetNode, 'div');
	        }
	    }

	    if (cellNode.length) {
	        this.router.doOperation({type:"read", name:"text", value:""});

	        var $cell = $(cellNode[0]);

	        if (isLock) {
	            $cell.removeAttr(this.options.cell_lock_name);
	        } else {
	            $cell.attr(this.options.cell_lock_name, this.options.cell_lock_name);
	        }

	        this.router.setRedoHistory();

	        isSuccess = true;
	    }

	    return isSuccess;
	};

	/* Editor에 포커스 지정 */
	KuKudocsEditor.prototype.SetEditorFocus = function(){
	    this.editorContentView.focus();
	};


	module.exports = window.KuKudocsEditor = KuKudocsEditor;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	var $ = window.$;

	if (!$.fn.typeOf){
	    (function(o){
	        o.typeOf = function(node){
	            if ( ! node){
	                return null;
	            }

	            var objectTypeAttrs = [Define.ATTR_VALUE.KK_IMAGE];
	            var oType = { type : "none", realType : "none" };

	            if (node.nodeType == 3){
	                oType.type = oType.realType = "text";
	            }else{
	                var objClass = null;
	                o.each(objectTypeAttrs, function(attrValue){
	                    if ($(node).attr(Define.ATTR.KK_TYPE) == attrValue){
	                        objClass = attrValue;
	                        return false;
	                    }
	                });

	                if (objClass){
	                    oType.type = "object";
	                    oType.realType = objClass;
	                }
	            }

	            return oType;
	        }
	    })($);
	}

	if (!$.fn.attrAll) {
	    (function(old) {
	        $.fn.attrAll = function() {
	            if(arguments.length === 0) {
	                if(this.length === 0) {
	                    return null;
	                }

	                var obj = {};
	                $.each(this[0].attributes, function() {
	                    if(this.specified && this.value && this.value != "") {
	                        obj[this.name] = this.value;
	                    }
	                });
	                return obj;
	            }

	            return old.apply(this, arguments);
	        };
	    })($.fn.attr);
	}

	if (!$.browser){
	    /*!
	     * jQuery Browser Plugin 0.1.0
	     * https://github.com/gabceb/jquery-browser-plugin
	     *
	     * Original jquery-browser code Copyright 2005, 2015 jQuery Foundation, Inc. and other contributors
	     * http://jquery.org/license
	     *
	     * Modifications Copyright 2015 Gabriel Cebrian
	     * https://github.com/gabceb
	     *
	     * Released under the MIT license
	     *
	     * Date: 05-07-2015
	     */
	    /*global window: false */

	    (function (factory) {
	        //if (typeof define === 'function' && define.amd) {
	        //    // AMD. Register as an anonymous module.
	        //    define(['jquery'], function ($) {
	        //        return factory($);
	        //    });
	        //} else if (typeof module === 'object' && typeof module.exports === 'object') {
	        //    // Node-like environment
	        //    module.exports = factory(require('jquery'));
	        //} else {
	        // Browser globals
	        factory(window.jQuery);
	        //}
	    }(function(jQuery) {
	        "use strict";

	        function uaMatch( ua ) {
	            // If an UA is not provided, default to the current browser UA.
	            if ( ua === undefined ) {
	                ua = window.navigator.userAgent;
	            }
	            ua = ua.toLowerCase();

	            var match = /(edge)\/([\w.]+)/.exec( ua ) ||
	                /(opr)[\/]([\w.]+)/.exec( ua ) ||
	                /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
	                /(iemobile)[\/]([\w.]+)/.exec( ua ) ||
	                /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec( ua ) ||
	                /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec( ua ) ||
	                /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
	                /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
	                /(msie) ([\w.]+)/.exec( ua ) ||
	                ua.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec( ua ) ||
	                ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
	                [];

	            var platform_match = /(ipad)/.exec( ua ) ||
	                /(ipod)/.exec( ua ) ||
	                /(windows phone)/.exec( ua ) ||
	                /(iphone)/.exec( ua ) ||
	                /(kindle)/.exec( ua ) ||
	                /(silk)/.exec( ua ) ||
	                /(android)/.exec( ua ) ||
	                /(win)/.exec( ua ) ||
	                /(mac)/.exec( ua ) ||
	                /(linux)/.exec( ua ) ||
	                /(cros)/.exec( ua ) ||
	                /(playbook)/.exec( ua ) ||
	                /(bb)/.exec( ua ) ||
	                /(blackberry)/.exec( ua ) ||
	                [];

	            var browser = {},
	                matched = {
	                    browser: match[ 5 ] || match[ 3 ] || match[ 1 ] || "",
	                    version: match[ 2 ] || match[ 4 ] || "0",
	                    versionNumber: match[ 4 ] || match[ 2 ] || "0",
	                    platform: platform_match[ 0 ] || ""
	                };

	            if ( matched.browser ) {
	                browser[ matched.browser ] = true;
	                browser.version = matched.version;
	                browser.versionNumber = parseInt(matched.versionNumber, 10);
	            }

	            if ( matched.platform ) {
	                browser[ matched.platform ] = true;
	            }

	            // These are all considered mobile platforms, meaning they run a mobile browser
	            if ( browser.android || browser.bb || browser.blackberry || browser.ipad || browser.iphone ||
	                browser.ipod || browser.kindle || browser.playbook || browser.silk || browser[ "windows phone" ]) {
	                browser.mobile = true;
	            }

	            // These are all considered desktop platforms, meaning they run a desktop browser
	            if ( browser.cros || browser.mac || browser.linux || browser.win ) {
	                browser.desktop = true;
	            }

	            // Chrome, Opera 15+ and Safari are webkit based browsers
	            if ( browser.chrome || browser.opr || browser.safari ) {
	                browser.webkit = true;
	            }

	            // IE11 has a new token so we will assign it msie to avoid breaking changes
	            if ( browser.rv || browser.iemobile) {
	                var ie = "msie";

	                matched.browser = ie;
	                browser[ie] = true;
	            }

	            // Edge is officially known as Microsoft Edge, so rewrite the key to match
	            if ( browser.edge ) {
	                delete browser.edge;
	                var msedge = "msedge";

	                matched.browser = msedge;
	                browser[msedge] = true;
	            }

	            // Blackberry browsers are marked as Safari on BlackBerry
	            if ( browser.safari && browser.blackberry ) {
	                var blackberry = "blackberry";

	                matched.browser = blackberry;
	                browser[blackberry] = true;
	            }

	            // Playbook browsers are marked as Safari on Playbook
	            if ( browser.safari && browser.playbook ) {
	                var playbook = "playbook";

	                matched.browser = playbook;
	                browser[playbook] = true;
	            }

	            // BB10 is a newer OS version of BlackBerry
	            if ( browser.bb ) {
	                var bb = "blackberry";

	                matched.browser = bb;
	                browser[bb] = true;
	            }

	            // Opera 15+ are identified as opr
	            if ( browser.opr ) {
	                var opera = "opera";

	                matched.browser = opera;
	                browser[opera] = true;
	            }

	            // Stock Android browsers are marked as Safari on Android.
	            if ( browser.safari && browser.android ) {
	                var android = "android";

	                matched.browser = android;
	                browser[android] = true;
	            }

	            // Kindle browsers are marked as Safari on Kindle
	            if ( browser.safari && browser.kindle ) {
	                var kindle = "kindle";

	                matched.browser = kindle;
	                browser[kindle] = true;
	            }

	            // Kindle Silk browsers are marked as Safari on Kindle
	            if ( browser.safari && browser.silk ) {
	                var silk = "silk";

	                matched.browser = silk;
	                browser[silk] = true;
	            }

	            // Assign the name and platform variable
	            browser.name = matched.browser;
	            browser.platform = matched.platform;
	            return browser;
	        }

	        // Run the matching process, also assign the function to the returned object
	        // for manual, jQuery-free use if desired
	        window.jQBrowser = uaMatch( window.navigator.userAgent );
	        window.jQBrowser.uaMatch = uaMatch;

	        // Only assign to jQuery.browser if jQuery is loaded
	        if ( jQuery ) {
	            jQuery.browser = window.jQBrowser;
	        }

	        return window.jQBrowser;
	    }));
	}

	if (!$.fn.visible){
	    (function($){

	        /**
	         * Copyright 2012, Digital Fusion
	         * Licensed under the MIT license.
	         * http://teamdf.com/jquery-plugins/license/
	         *
	         * @author Sam Sehnert
	         * @desc A small plugin that checks whether elements are within
	         *       the user visible viewport of a web browser.
	         *       only accounts for vertical position, not horizontal.
	         */
	        var $w = $(window);
	        $.fn.visible = function(partial,hidden,direction){

	            if (this.length < 1)
	                return;

	            var $t        = this.length > 1 ? this.eq(0) : this,
	                t         = $t.get(0),
	                vpWidth   = $w.width(),
	                vpHeight  = $w.height(),
	                direction = (direction) ? direction : 'both',
	                clientSize = hidden === true ? t.offsetWidth * t.offsetHeight : true;

	            if (typeof t.getBoundingClientRect === 'function'){

	                // Use this native browser method, if available.
	                var rec = t.getBoundingClientRect(),
	                    tViz = rec.top    >= 0 && rec.top    <  vpHeight,
	                    bViz = rec.bottom >  0 && rec.bottom <= vpHeight,
	                    lViz = rec.left   >= 0 && rec.left   <  vpWidth,
	                    rViz = rec.right  >  0 && rec.right  <= vpWidth,
	                    vVisible   = partial ? tViz || bViz : tViz && bViz,
	                    hVisible   = partial ? lViz || rViz : lViz && rViz;

	                if(direction === 'both')
	                    return clientSize && vVisible && hVisible;
	                else if(direction === 'vertical')
	                    return clientSize && vVisible;
	                else if(direction === 'horizontal')
	                    return clientSize && hVisible;
	            } else {

	                var viewTop         = $w.scrollTop(),
	                    viewBottom      = viewTop + vpHeight,
	                    viewLeft        = $w.scrollLeft(),
	                    viewRight       = viewLeft + vpWidth,
	                    offset          = $t.offset(),
	                    _top            = offset.top,
	                    _bottom         = _top + $t.height(),
	                    _left           = offset.left,
	                    _right          = _left + $t.width(),
	                    compareTop      = partial === true ? _bottom : _top,
	                    compareBottom   = partial === true ? _top : _bottom,
	                    compareLeft     = partial === true ? _right : _left,
	                    compareRight    = partial === true ? _left : _right;

	                if(direction === 'both')
	                    return !!clientSize && ((compareBottom <= viewBottom) && (compareTop >= viewTop)) && ((compareRight <= viewRight) && (compareLeft >= viewLeft));
	                else if(direction === 'vertical')
	                    return !!clientSize && ((compareBottom <= viewBottom) && (compareTop >= viewTop));
	                else if(direction === 'horizontal')
	                    return !!clientSize && ((compareRight <= viewRight) && (compareLeft >= viewLeft));
	            }
	        };

	    })(jQuery);
	}

	if (!$.fn.spinit) {

	    (function($) {
	        $.fn.extend({
	            spinit: function(options) {
	                var settings = $.extend({ min: 0, max: 100, initValue: 0, callback: null, stepInc: 1, pageInc: 10, width: 50, height: 15, btnWidth: 10, mask: '' }, options);
	                var _this = this;
	                return this.each(function() {
	                    var UP = 38;
	                    var DOWN = 40;
	                    var PAGEUP = 33;
	                    var PAGEDOWN = 34;
	                    var mouseCaptured = false;
	                    var mouseIn = false;
	                    var interval;
	                    var timeout;
	                    var direction = 'none';
	                    var isPgeInc = false;
	                    var value = Math.max(settings.initValue, settings.min);
	                    var el = $(this).val(value).css('width', (settings.width) + 'px').css('height', settings.height + 'px').addClass('smartspinner');
	                    raiseCallback(value);
	                    if (settings.mask != '') el.val(settings.mask);

	                    //TODO : 보정 처리 작업중......
	                    this.reset = function(val) {
	                        if (isNaN(val)) val = 0;
	                        value = Math.max(val, settings.min);
	                        $(this).val(value);
	                        raiseCallback(value);
	                    };

	                    // $.fn.reset = function(val) {
	                    //     if (isNaN(val)) val = 0;
	                    //     value = Math.max(val, settings.min);
	                    //     $(this).val(value);
	                    //     raiseCallback(value);
	                    // };

	                    function setDirection(dir) {
	                        direction = dir;
	                        isPgeInc = false;
	                        switch (dir) {
	                            case 'up':
	                                setClass('up');
	                                break;
	                            case 'down':
	                                setClass('down');
	                                break;
	                            case 'pup':
	                                isPgeInc = true;
	                                setClass('up');
	                                break;
	                            case 'pdown':
	                                isPgeInc = true;
	                                setClass('down');
	                                break;
	                            case 'none':
	                                setClass('');
	                                break;
	                        }
	                    }
	                    el.focusin(function() {
	                        el.val(value);
	                    });
	                    el.click(function(e) {
	                        mouseCaptured = true;
	                        isPgeInc = false;

	                        clearTimeout(timeout);

	                        if (interval != null) {
	                            clearInterval(interval);
	                            interval = null;
	                        } else {
	                            onValueChange();
	                        }
	                    });
	                    el.mouseenter(function(e) {
	                        el.val(value);
	                    });
	                    el.mousemove(function(e) {

	                        if (e.pageX > (el.offset().left + settings.width) - settings.btnWidth - 4) {
	                            if (e.pageY < el.offset().top + settings.height / 2)
	                                setDirection('up');
	                            else
	                                setDirection('down');
	                        }
	                        else
	                            setDirection('none');
	                    });
	                    el.mousedown(function(e) {
	                        isPgeInc = false;
	                        clearTimeout(timeout);
	                        clearInterval(interval);

	                        timeout = null;
	                        interval = null;
	                        timeout = setTimeout(function(){
	                            interval = setInterval(onValueChange, 300);
	                        }, 800);
	                    });
	                    el.mouseup(function(e) {
	                        mouseCaptured = false;
	                        isPgeInc = false;
	                        clearTimeout(timeout);
	                        clearInterval(interval);
	                    });
	                    el.mouseleave(function(e) {
	                        setDirection('none');
	                        if (settings.mask != '') el.val(settings.mask);
	                    });

	                    el.keydown(function(e) {
	                        switch (e.which) {
	                            case UP:
	                                setDirection('up');
	                                onValueChange();
	                                break; // Arrow Up
	                            case DOWN:
	                                setDirection('down');
	                                onValueChange();
	                                break; // Arrow Down
	                            case PAGEUP:
	                                setDirection('pup');
	                                onValueChange();
	                                break; // Page Up
	                            case PAGEDOWN:
	                                setDirection('pdown');
	                                onValueChange();
	                                break; // Page Down
	                            default:
	                                setDirection('none');
	                                break;
	                        }
	                    });

	                    el.keyup(function(e) {
	                        setDirection('none');
	                    });
	                    el.keypress(function(e) {
	                        if (!_this[0].hasAttribute('readonly')) {
	                            if (el.val() == settings.mask) el.val('');
	                            var sText = getSelectedText();

	                            if (sText != '') {
	                                sText = el.val().replace(sText, '');
	                                el.val(sText);
	                            }

	                            if (e.which >= 48 && e.which <= 57) {
	                                var temp = parseFloat(el.val() + (e.which - 48));
	                                if (temp >= settings.min && temp <= settings.max) {
	                                    value = temp;
	                                    raiseCallback(value);
	                                }
	                                else {
	                                    e.preventDefault();
	                                }
	                            }
	                        }
	                    });
	                    el.blur(function() {

	                        if (settings.mask == '') {
	                            if (el.val() == '')
	                                el.val(settings.min);
	                        }
	                        else {
	                            el.val(settings.mask);
	                        }
	                    });
	                    el.bind("mousewheel", function(e) {
	                        if (e.wheelDelta >= 120) {
	                            setDirection('down');
	                            onValueChange();
	                        }
	                        else if (e.wheelDelta <= -120) {
	                            setDirection('up');
	                            onValueChange();
	                        }

	                        e.preventDefault();
	                    });
	                    if (this.addEventListener) {
	                        this.addEventListener('DOMMouseScroll', function(e) {
	                            if (e.detail > 0) {
	                                setDirection('down');
	                                onValueChange();
	                            }
	                            else if (e.detail < 0) {
	                                setDirection('up');
	                                onValueChange();
	                            }
	                            e.preventDefault();
	                        }, false);
	                    }

	                    function raiseCallback(val) {
	                        if (settings.callback != null) settings.callback(_this, val);
	                    }
	                    function getSelectedText() {

	                        var startPos = el.get(0).selectionStart;
	                        var endPos = el.get(0).selectionEnd;
	                        var doc = document.selection;

	                        if (doc && doc.createRange().text.length != 0) {
	                            return doc.createRange().text;
	                        } else if (!doc && el.val().substring(startPos, endPos).length != 0) {
	                            return el.val().substring(startPos, endPos);
	                        }
	                        return '';
	                    }
	                    function setValue(a, b) {
	                        if (!_this[0].hasAttribute('readonly')) {
	                            if (a >= settings.min && a <= settings.max) {
	                                value = b;
	                            } el.val(value);
	                        }
	                    }
	                    function onValueChange() {
	                        if (!_this[0].hasAttribute('readonly')){
	                            if (direction == 'up') {
	                                value += settings.stepInc;
	                                if (value > settings.max) value = settings.max;
	                                setValue(parseFloat(el.val()), value);
	                            }
	                            if (direction == 'down') {
	                                value -= settings.stepInc;
	                                if (value < settings.min) value = settings.min;
	                                setValue(parseFloat(el.val()), value);
	                            }
	                            if (direction == 'pup') {
	                                value += settings.pageInc;
	                                if (value > settings.max) value = settings.max;
	                                setValue(parseFloat(el.val()), value);
	                            }
	                            if (direction == 'pdown') {
	                                value -= settings.pageInc;
	                                if (value < settings.min) value = settings.min;
	                                setValue(parseFloat(el.val()), value);
	                            }
	                            raiseCallback(value);
	                        }
	                    }
	                    function setClass(name) {
	                        el.removeClass('up').removeClass('down');
	                        if (name != '') el.addClass(name);
	                    }
	                });
	            }
	        });
	    })(jQuery);
	}

	if (!Date.prototype.format) {
	    Date.prototype.format = function(f) {
	        if (!this.valueOf()) return " ";

	        var weekName = ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"];
	        var d = this;

	        return f.replace(/(yyyy|yy|MM|dd|E|hh|mm|ss|a\/p)/gi, function($1) {
	            switch ($1) {
	                case "yyyy": return d.getFullYear();
	                case "yy": return (d.getFullYear() % 1000).zf(2);
	                case "MM": return (d.getMonth() + 1).zf(2);
	                case "dd": return d.getDate().zf(2);
	                case "E": return weekName[d.getDay()];
	                case "HH": return d.getHours().zf(2);
	                case "hh": return ((h = d.getHours() % 12) ? h : 12).zf(2);
	                case "mm": return d.getMinutes().zf(2);
	                case "ss": return d.getSeconds().zf(2);
	                case "a/p": return d.getHours() < 12 ? "오전" : "오후";
	                default: return $1;
	            }
	        });
	    };

	    String.prototype.string = function(len){var s = '', i = 0; while (i++ < len) { s += this; } return s;};
	    String.prototype.zf = function(len){return "0".string(len - this.length) + this;};
	    Number.prototype.zf = function(len){return this.toString().zf(len);};
	}



	/**
	 * jQuery contextMenu v@VERSION - Plugin for simple contextMenu handling
	 *
	 * Version: v@VERSION
	 *
	 * Authors: Björn Brala (SWIS.nl), Rodney Rehm, Addy Osmani (patches for FF)
	 * Web: http://swisnl.github.io/jQuery-contextMenu/
	 *
	 * Copyright (c) 2011-@YEAR SWIS BV and contributors
	 *
	 * Licensed under
	 *   MIT License http://www.opensource.org/licenses/mit-license
	 *
	 * Date: @DATE
	 */

	// jscs:disable
	/* jshint ignore:start */
	(function (factory) {
	    // if (typeof define === 'function' && define.amd) {
	    //     // AMD. Register as anonymous module.
	    //     define(['jquery'], factory);
	    // } else if (typeof exports === 'object') {
	    //     // Node / CommonJS
	    //     factory(require('jquery'));
	    // } else {
	    //     // Browser globals.
	        factory(jQuery);
	    // }
	})(
	    function ($) {

	    'use strict';

	    // TODO: -
	    // ARIA stuff: menuitem, menuitemcheckbox und menuitemradio
	    // create <menu> structure if $.support[htmlCommand || htmlMenuitem] and !opt.disableNative

	    // determine html5 compatibility
	    $.support.htmlMenuitem = ('HTMLMenuItemElement' in window);
	    $.support.htmlCommand = ('HTMLCommandElement' in window);
	    $.support.eventSelectstart = ('onselectstart' in document.documentElement);
	    /* // should the need arise, test for css user-select
	     $.support.cssUserSelect = (function(){
	     var t = false,
	     e = document.createElement('div');

	     $.each('Moz|Webkit|Khtml|O|ms|Icab|'.split('|'), function(i, prefix) {
	     var propCC = prefix + (prefix ? 'U' : 'u') + 'serSelect',
	     prop = (prefix ? ('-' + prefix.toLowerCase() + '-') : '') + 'user-select';

	     e.style.cssText = prop + ': text;';
	     if (e.style[propCC] == 'text') {
	     t = true;
	     return false;
	     }

	     return true;
	     });

	     return t;
	     })();
	     */


	    if (!$.ui || !$.widget) {
	        // duck punch $.cleanData like jQueryUI does to get that remove event
	        $.cleanData = (function (orig) {
	            return function (elems) {
	                var events, elem, i;
	                for (i = 0; elems[i] != null; i++) {
	                    elem = elems[i];
	                    try {
	                        // Only trigger remove when necessary to save time
	                        events = $._data(elem, 'events');
	                        if (events && events.remove) {
	                            $(elem).triggerHandler('remove');
	                        }

	                        // Http://bugs.jquery.com/ticket/8235
	                    } catch (e) {
	                    }
	                }
	                orig(elems);
	            };
	        })($.cleanData);
	    }
	    /* jshint ignore:end */
	    // jscs:enable

	    var // currently active contextMenu trigger
	        $currentTrigger = null,
	        // is contextMenu initialized with at least one menu?
	        initialized = false,
	        // window handle
	        $win = $(window),
	        // number of registered menus
	        counter = 0,
	        // mapping selector to namespace
	        namespaces = {},
	        // mapping namespace to options
	        menus = {},
	        // custom command type handlers
	        types = {},
	        // default values
	        defaults = {
	            // selector of contextMenu trigger
	            selector: null,
	            // where to append the menu to
	            appendTo: null,
	            // method to trigger context menu ["right", "left", "hover"]
	            trigger: 'right',
	            // hide menu when mouse leaves trigger / menu elements
	            autoHide: false,
	            // ms to wait before showing a hover-triggered context menu
	            delay: 200,
	            // flag denoting if a second trigger should simply move (true) or rebuild (false) an open menu
	            // as long as the trigger happened on one of the trigger-element's child nodes
	            reposition: true,

	            //ability to select submenu
	            selectableSubMenu: false,

	            // Default classname configuration to be able avoid conflicts in frameworks
	            classNames: {
	                hover: 'context-menu-hover', // Item hover
	                disabled: 'context-menu-disabled', // Item disabled
	                visible: 'context-menu-visible', // Item visible
	                notSelectable: 'context-menu-not-selectable', // Item not selectable

	                icon: 'context-menu-icon',
	                iconEdit: 'context-menu-icon-edit',
	                iconCut: 'context-menu-icon-cut',
	                iconCopy: 'context-menu-icon-copy',
	                iconPaste: 'context-menu-icon-paste',
	                iconDelete: 'context-menu-icon-delete',
	                iconAdd: 'context-menu-icon-add',
	                iconQuit: 'context-menu-icon-quit',
	                iconLoadingClass: 'context-menu-icon-loading'
	            },

	            // determine position to show menu at
	            determinePosition: function ($menu) {
	                // position to the lower middle of the trigger element
	                if ($.ui && $.ui.position) {
	                    // .position() is provided as a jQuery UI utility
	                    // (...and it won't work on hidden elements)
	                    $menu.css('display', 'block').position({
	                        my: 'center top',
	                        at: 'center bottom',
	                        of: this,
	                        offset: '0 5',
	                        collision: 'fit'
	                    }).css('display', 'none');
	                } else {
	                    // determine contextMenu position
	                    var offset = this.offset();
	                    offset.top += this.outerHeight();
	                    offset.left += this.outerWidth() / 2 - $menu.outerWidth() / 2;
	                    $menu.css(offset);
	                }
	            },
	            // position menu
	            position: function (opt, x, y) {
	                var offset;
	                // determine contextMenu position
	                if (!x && !y) {
	                    opt.determinePosition.call(this, opt.$menu);
	                    return;
	                } else if (x === 'maintain' && y === 'maintain') {
	                    // x and y must not be changed (after re-show on command click)
	                    offset = opt.$menu.position();
	                } else {
	                    // x and y are given (by mouse event)
	                    var offsetParentOffset = opt.$menu.offsetParent().offset();
	                    offset = {top: y - offsetParentOffset.top, left: x -offsetParentOffset.left};
	                }

	                // correct offset if viewport demands it
	                var bottom = $win.scrollTop() + $win.height(),
	                    right = $win.scrollLeft() + $win.width(),
	                    height = opt.$menu.outerHeight(),
	                    width = opt.$menu.outerWidth();

	                if (offset.top + height > bottom) {
	                    offset.top -= height;
	                }

	                if (offset.top < 0) {
	                    offset.top = 0;
	                }

	                if (offset.left + width > right) {
	                    offset.left -= width;
	                }

	                if (offset.left < 0) {
	                    offset.left = 0;
	                }

	                opt.$menu.css(offset);
	            },
	            // position the sub-menu
	            positionSubmenu: function ($menu) {
	                if (typeof $menu === 'undefined') {
	                    // When user hovers over item (which has sub items) handle.focusItem will call this.
	                    // but the submenu does not exist yet if opt.items is a promise. just return, will
	                    // call positionSubmenu after promise is completed.
	                    return;
	                }
	                if ($.ui && $.ui.position) {
	                    // .position() is provided as a jQuery UI utility
	                    // (...and it won't work on hidden elements)
	                    $menu.css('display', 'block').position({
	                        my: 'left top-5',
	                        at: 'right top',
	                        of: this,
	                        collision: 'flipfit fit'
	                    }).css('display', '');
	                } else {
	                    // determine contextMenu position
	                    var offset = {
	                        top: -9,
	                        left: this.outerWidth() - 5
	                    };

	                    var overSizeCheck = this.parent().width() + parseInt(this.parent().css('left')) + this.children('ul').width();

	                    if (overSizeCheck > $win.width()) {
	                        offset.left = -(this.children('ul').width() + 5);
	                    }

	                    // console.log(this, offset, overSizeCheck, $win.width() );

	                    $menu.css(offset);
	                }
	            },
	            // offset to add to zIndex
	            zIndex: 1,
	            // show hide animation settings
	            animation: {
	                duration: 50,
	                show: 'slideDown',
	                hide: 'slideUp'
	            },
	            // events
	            events: {
	                show: $.noop,
	                hide: $.noop
	            },
	            // default callback
	            callback: null,
	            // list of contextMenu items
	            items: {}
	        },
	        // mouse position for hover activation
	        hoveract = {
	            timer: null,
	            pageX: null,
	            pageY: null
	        },
	        // determine zIndex
	        zindex = function ($t) {
	            var zin = 0,
	                $tt = $t;

	            while (true) {
	                zin = Math.max(zin, parseInt($tt.css('z-index'), 10) || 0);
	                $tt = $tt.parent();
	                if (!$tt || !$tt.length || 'html body'.indexOf($tt.prop('nodeName').toLowerCase()) > -1) {
	                    break;
	                }
	            }
	            return zin;
	        },
	        // event handlers
	        handle = {
	            // abort anything
	            abortevent: function (e) {
	                e.preventDefault();
	                e.stopImmediatePropagation();
	            },
	            // contextmenu show dispatcher
	            contextmenu: function (e) {
	                var $this = $(this);

	                // disable actual context-menu if we are using the right mouse button as the trigger
	                if (e.data.trigger === 'right') {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                }

	                // abort native-triggered events unless we're triggering on right click
	                if ((e.data.trigger !== 'right' && e.data.trigger !== 'demand') && e.originalEvent) {
	                    return;
	                }

	                // Let the current contextmenu decide if it should show or not based on its own trigger settings
	                if (typeof e.mouseButton !== 'undefined' && e.data) {
	                    if (!(e.data.trigger === 'left' && e.mouseButton === 0) && !(e.data.trigger === 'right' && e.mouseButton === 2)) {
	                        // Mouse click is not valid.
	                        return;
	                    }
	                }

	                // abort event if menu is visible for this trigger
	                if ($this.hasClass('context-menu-active')) {
	                    return;
	                }

	                if (!$this.hasClass('context-menu-disabled')) {
	                    // theoretically need to fire a show event at <menu>
	                    // http://www.whatwg.org/specs/web-apps/current-work/multipage/interactive-elements.html#context-menus
	                    // var evt = jQuery.Event("show", { data: data, pageX: e.pageX, pageY: e.pageY, relatedTarget: this });
	                    // e.data.$menu.trigger(evt);

	                    $currentTrigger = $this;
	                    if (e.data.build) {
	                        var built = e.data.build($currentTrigger, e);
	                        // abort if build() returned false
	                        if (built === false) {
	                            return;
	                        }

	                        // dynamically build menu on invocation
	                        e.data = $.extend(true, {}, defaults, e.data, built || {});

	                        // abort if there are no items to display
	                        if (!e.data.items || $.isEmptyObject(e.data.items)) {
	                            // Note: jQuery captures and ignores errors from event handlers
	                            if (window.console) {
	                                (console.error || console.log).call(console, 'No items specified to show in contextMenu');
	                            }

	                            throw new Error('No Items specified');
	                        }

	                        // backreference for custom command type creation
	                        e.data.$trigger = $currentTrigger;

	                        op.create(e.data);
	                    }
	                    var showMenu = false;
	                    for (var item in e.data.items) {
	                        if (e.data.items.hasOwnProperty(item)) {
	                            var visible;
	                            if ($.isFunction(e.data.items[item].visible)) {
	                                visible = e.data.items[item].visible.call($(e.currentTarget), item, e.data);
	                            } else if (typeof e.data.items[item] !== 'undefined' && e.data.items[item].visible) {
	                                visible = e.data.items[item].visible === true;
	                            } else {
	                                visible = true;
	                            }
	                            if (visible) {
	                                showMenu = true;
	                            }
	                        }
	                    }
	                    if (showMenu) {
	                        // show menu
	                        op.show.call($this, e.data, e.pageX, e.pageY);
	                    }
	                }
	            },
	            // contextMenu left-click trigger
	            click: function (e) {
	                e.preventDefault();
	                e.stopImmediatePropagation();
	                $(this).trigger($.Event('contextmenu', {data: e.data, pageX: e.pageX, pageY: e.pageY}));
	            },
	            // contextMenu right-click trigger
	            mousedown: function (e) {
	                // register mouse down
	                var $this = $(this);

	                // hide any previous menus
	                if ($currentTrigger && $currentTrigger.length && !$currentTrigger.is($this)) {
	                    $currentTrigger.data('contextMenu').$menu.trigger('contextmenu:hide');
	                }

	                // activate on right click
	                if (e.button === 2) {
	                    $currentTrigger = $this.data('contextMenuActive', true);
	                }
	            },
	            // contextMenu right-click trigger
	            mouseup: function (e) {
	                // show menu
	                var $this = $(this);
	                if ($this.data('contextMenuActive') && $currentTrigger && $currentTrigger.length && $currentTrigger.is($this) && !$this.hasClass('context-menu-disabled')) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    $currentTrigger = $this;
	                    $this.trigger($.Event('contextmenu', {data: e.data, pageX: e.pageX, pageY: e.pageY}));
	                }

	                $this.removeData('contextMenuActive');
	            },
	            // contextMenu hover trigger
	            mouseenter: function (e) {
	                var $this = $(this),
	                    $related = $(e.relatedTarget),
	                    $document = $(document);

	                // abort if we're coming from a menu
	                if ($related.is('.context-menu-list') || $related.closest('.context-menu-list').length) {
	                    return;
	                }

	                // abort if a menu is shown
	                if ($currentTrigger && $currentTrigger.length) {
	                    return;
	                }

	                hoveract.pageX = e.pageX;
	                hoveract.pageY = e.pageY;
	                hoveract.data = e.data;
	                $document.on('mousemove.contextMenuShow', handle.mousemove);
	                hoveract.timer = setTimeout(function () {
	                    hoveract.timer = null;
	                    $document.off('mousemove.contextMenuShow');
	                    $currentTrigger = $this;
	                    $this.trigger($.Event('contextmenu', {
	                        data: hoveract.data,
	                        pageX: hoveract.pageX,
	                        pageY: hoveract.pageY
	                    }));
	                }, e.data.delay);
	            },
	            // contextMenu hover trigger
	            mousemove: function (e) {
	                hoveract.pageX = e.pageX;
	                hoveract.pageY = e.pageY;
	            },
	            // contextMenu hover trigger
	            mouseleave: function (e) {
	                // abort if we're leaving for a menu
	                var $related = $(e.relatedTarget);
	                if ($related.is('.context-menu-list') || $related.closest('.context-menu-list').length) {
	                    return;
	                }

	                try {
	                    clearTimeout(hoveract.timer);
	                } catch (e) {
	                }

	                hoveract.timer = null;
	            },
	            // click on layer to hide contextMenu
	            layerClick: function (e) {
	                var $this = $(this),
	                    root = $this.data('contextMenuRoot'),
	                    button = e.button,
	                    x = e.pageX,
	                    y = e.pageY,
	                    target,
	                    offset;

	                e.preventDefault();

	                setTimeout(function () {
	                    var $window;
	                    var triggerAction = ((root.trigger === 'left' && button === 0) || (root.trigger === 'right' && button === 2));

	                    // find the element that would've been clicked, wasn't the layer in the way
	                    if (document.elementFromPoint && root.$layer) {
	                        root.$layer.hide();
	                        target = document.elementFromPoint(x - $win.scrollLeft(), y - $win.scrollTop());

	                        // also need to try and focus this element if we're in a contenteditable area,
	                        // as the layer will prevent the browser mouse action we want
	                        if (target.isContentEditable) {
	                            var range = document.createRange(),
	                                sel = window.getSelection();
	                            range.selectNode(target);
	                            range.collapse(true);
	                            sel.removeAllRanges();
	                            sel.addRange(range);
	                        }
	                        $(target).trigger(e);

	                        if (root.$layer) {
	                            root.$layer.show();
	                        }
	                    }

	                    if (root.reposition && triggerAction) {
	                        if (document.elementFromPoint) {
	                            if (root.$trigger.is(target)) {
	                                root.position.call(root.$trigger, root, x, y);
	                                return;
	                            }
	                        } else {
	                            offset = root.$trigger.offset();
	                            $window = $(window);
	                            // while this looks kinda awful, it's the best way to avoid
	                            // unnecessarily calculating any positions
	                            offset.top += $window.scrollTop();
	                            if (offset.top <= e.pageY) {
	                                offset.left += $window.scrollLeft();
	                                if (offset.left <= e.pageX) {
	                                    offset.bottom = offset.top + root.$trigger.outerHeight();
	                                    if (offset.bottom >= e.pageY) {
	                                        offset.right = offset.left + root.$trigger.outerWidth();
	                                        if (offset.right >= e.pageX) {
	                                            // reposition
	                                            root.position.call(root.$trigger, root, x, y);
	                                            return;
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }

	                    if (target && triggerAction) {
	                        root.$trigger.one('contextmenu:hidden', function () {
	                            $(target).contextMenu({x: x, y: y, button: button});
	                        });
	                    }

	                    if (root !== null && typeof root !== 'undefined' && root.$menu !== null  && typeof root.$menu !== 'undefined') {
	                        root.$menu.trigger('contextmenu:hide');
	                    }
	                }, 50);
	            },
	            // key handled :hover
	            keyStop: function (e, opt) {
	                if (!opt.isInput) {
	                    e.preventDefault();
	                }

	                e.stopPropagation();
	            },
	            key: function (e) {

	                var opt = {};

	                // Only get the data from $currentTrigger if it exists
	                if ($currentTrigger) {
	                    opt = $currentTrigger.data('contextMenu') || {};
	                }
	                // If the trigger happen on a element that are above the contextmenu do this
	                if (typeof opt.zIndex === 'undefined') {
	                    opt.zIndex = 0;
	                }
	                var targetZIndex = 0;
	                var getZIndexOfTriggerTarget = function (target) {
	                    if (target.style.zIndex !== '') {
	                        targetZIndex = target.style.zIndex;
	                    } else {
	                        if (target.offsetParent !== null && typeof target.offsetParent !== 'undefined') {
	                            getZIndexOfTriggerTarget(target.offsetParent);
	                        }
	                        else if (target.parentElement !== null && typeof target.parentElement !== 'undefined') {
	                            getZIndexOfTriggerTarget(target.parentElement);
	                        }
	                    }
	                };
	                getZIndexOfTriggerTarget(e.target);
	                // If targetZIndex is heigher then opt.zIndex dont progress any futher.
	                // This is used to make sure that if you are using a dialog with a input / textarea / contenteditable div
	                // and its above the contextmenu it wont steal keys events
	                if (targetZIndex > opt.zIndex) {
	                    return;
	                }
	                switch (e.keyCode) {
	                    case 9:
	                    case 38: // up
	                        handle.keyStop(e, opt);
	                        // if keyCode is [38 (up)] or [9 (tab) with shift]
	                        if (opt.isInput) {
	                            if (e.keyCode === 9 && e.shiftKey) {
	                                e.preventDefault();
	                                if (opt.$selected) {
	                                    opt.$selected.find('input, textarea, select').blur();
	                                }
	                                if (opt.$menu !== null && typeof opt.$menu !== 'undefined') {
	                                    opt.$menu.trigger('prevcommand');
	                                }
	                                return;
	                            } else if (e.keyCode === 38 && opt.$selected.find('input, textarea, select').prop('type') === 'checkbox') {
	                                // checkboxes don't capture this key
	                                e.preventDefault();
	                                return;
	                            }
	                        } else if (e.keyCode !== 9 || e.shiftKey) {
	                            if (opt.$menu !== null && typeof opt.$menu !== 'undefined') {
	                                opt.$menu.trigger('prevcommand');
	                            }
	                            return;
	                        }
	                        break;
	                    // omitting break;
	                    // case 9: // tab - reached through omitted break;
	                    case 40: // down
	                        handle.keyStop(e, opt);
	                        if (opt.isInput) {
	                            if (e.keyCode === 9) {
	                                e.preventDefault();
	                                if (opt.$selected) {
	                                    opt.$selected.find('input, textarea, select').blur();
	                                }
	                                if (opt.$menu !== null && typeof opt.$menu !== 'undefined') {
	                                    opt.$menu.trigger('nextcommand');
	                                }
	                                return;
	                            } else if (e.keyCode === 40 && opt.$selected.find('input, textarea, select').prop('type') === 'checkbox') {
	                                // checkboxes don't capture this key
	                                e.preventDefault();
	                                return;
	                            }
	                        } else {
	                            if (opt.$menu !== null && typeof opt.$menu !== 'undefined') {
	                                opt.$menu.trigger('nextcommand');
	                            }
	                            return;
	                        }
	                        break;

	                    case 37: // left
	                        handle.keyStop(e, opt);
	                        if (opt.isInput || !opt.$selected || !opt.$selected.length) {
	                            break;
	                        }

	                        if (!opt.$selected.parent().hasClass('context-menu-root')) {
	                            var $parent = opt.$selected.parent().parent();
	                            opt.$selected.trigger('contextmenu:blur');
	                            opt.$selected = $parent;
	                            return;
	                        }
	                        break;

	                    case 39: // right
	                        handle.keyStop(e, opt);
	                        if (opt.isInput || !opt.$selected || !opt.$selected.length) {
	                            break;
	                        }

	                        var itemdata = opt.$selected.data('contextMenu') || {};
	                        if (itemdata.$menu && opt.$selected.hasClass('context-menu-submenu')) {
	                            opt.$selected = null;
	                            itemdata.$selected = null;
	                            itemdata.$menu.trigger('nextcommand');
	                            return;
	                        }
	                        break;

	                    case 35: // end
	                    case 36: // home
	                        if (opt.$selected && opt.$selected.find('input, textarea, select').length) {
	                            return;
	                        } else {
	                            (opt.$selected && opt.$selected.parent() || opt.$menu)
	                                .children(':not(.' + opt.classNames.disabled + ', .' + opt.classNames.notSelectable + ')')[e.keyCode === 36 ? 'first' : 'last']()
	                                .trigger('contextmenu:focus');
	                            e.preventDefault();
	                            return;
	                        }
	                        break;

	                    case 13: // enter
	                        handle.keyStop(e, opt);
	                        if (opt.isInput) {
	                            if (opt.$selected && !opt.$selected.is('textarea, select')) {
	                                e.preventDefault();
	                                return;
	                            }
	                            break;
	                        }
	                        if (typeof opt.$selected !== 'undefined' && opt.$selected !== null) {
	                            opt.$selected.trigger('mouseup');
	                        }
	                        return;

	                    case 32: // space
	                    case 33: // page up
	                    case 34: // page down
	                        // prevent browser from scrolling down while menu is visible
	                        handle.keyStop(e, opt);
	                        return;

	                    case 27: // esc
	                        handle.keyStop(e, opt);
	                        if (opt.$menu !== null && typeof opt.$menu !== 'undefined') {
	                            opt.$menu.trigger('contextmenu:hide');
	                        }
	                        return;

	                    default: // 0-9, a-z
	                        var k = (String.fromCharCode(e.keyCode)).toUpperCase();
	                        if (opt.accesskeys && opt.accesskeys[k]) {
	                            // according to the specs accesskeys must be invoked immediately
	                            opt.accesskeys[k].$node.trigger(opt.accesskeys[k].$menu ? 'contextmenu:focus' : 'mouseup');
	                            return;
	                        }
	                        break;
	                }
	                // pass event to selected item,
	                // stop propagation to avoid endless recursion
	                e.stopPropagation();
	                if (typeof opt.$selected !== 'undefined' && opt.$selected !== null) {
	                    opt.$selected.trigger(e);
	                }
	            },
	            // select previous possible command in menu
	            prevItem: function (e) {
	                e.stopPropagation();
	                var opt = $(this).data('contextMenu') || {};
	                var root = $(this).data('contextMenuRoot') || {};

	                // obtain currently selected menu
	                if (opt.$selected) {
	                    var $s = opt.$selected;
	                    opt = opt.$selected.parent().data('contextMenu') || {};
	                    opt.$selected = $s;
	                }

	                var $children = opt.$menu.children(),
	                    $prev = !opt.$selected || !opt.$selected.prev().length ? $children.last() : opt.$selected.prev(),
	                    $round = $prev;

	                // skip disabled or hidden elements
	                while ($prev.hasClass(root.classNames.disabled) || $prev.hasClass(root.classNames.notSelectable) || $prev.is(':hidden')) {
	                    if ($prev.prev().length) {
	                        $prev = $prev.prev();
	                    } else {
	                        $prev = $children.last();
	                    }
	                    if ($prev.is($round)) {
	                        // break endless loop
	                        return;
	                    }
	                }

	                // leave current
	                if (opt.$selected) {
	                    handle.itemMouseleave.call(opt.$selected.get(0), e);
	                }

	                // activate next
	                handle.itemMouseenter.call($prev.get(0), e);

	                // focus input
	                var $input = $prev.find('input, textarea, select');
	                if ($input.length) {
	                    $input.focus();
	                }
	            },
	            // select next possible command in menu
	            nextItem: function (e) {
	                e.stopPropagation();
	                var opt = $(this).data('contextMenu') || {};
	                var root = $(this).data('contextMenuRoot') || {};

	                // obtain currently selected menu
	                if (opt.$selected) {
	                    var $s = opt.$selected;
	                    opt = opt.$selected.parent().data('contextMenu') || {};
	                    opt.$selected = $s;
	                }

	                var $children = opt.$menu.children(),
	                    $next = !opt.$selected || !opt.$selected.next().length ? $children.first() : opt.$selected.next(),
	                    $round = $next;

	                // skip disabled
	                while ($next.hasClass(root.classNames.disabled) || $next.hasClass(root.classNames.notSelectable) || $next.is(':hidden')) {
	                    if ($next.next().length) {
	                        $next = $next.next();
	                    } else {
	                        $next = $children.first();
	                    }
	                    if ($next.is($round)) {
	                        // break endless loop
	                        return;
	                    }
	                }

	                // leave current
	                if (opt.$selected) {
	                    handle.itemMouseleave.call(opt.$selected.get(0), e);
	                }

	                // activate next
	                handle.itemMouseenter.call($next.get(0), e);

	                // focus input
	                var $input = $next.find('input, textarea, select');
	                if ($input.length) {
	                    $input.focus();
	                }
	            },
	            // flag that we're inside an input so the key handler can act accordingly
	            focusInput: function () {
	                var $this = $(this).closest('.context-menu-item'),
	                    data = $this.data(),
	                    opt = data.contextMenu,
	                    root = data.contextMenuRoot;

	                root.$selected = opt.$selected = $this;
	                root.isInput = opt.isInput = true;
	            },
	            // flag that we're inside an input so the key handler can act accordingly
	            blurInput: function () {
	                var $this = $(this).closest('.context-menu-item'),
	                    data = $this.data(),
	                    opt = data.contextMenu,
	                    root = data.contextMenuRoot;

	                root.isInput = opt.isInput = false;
	            },
	            // :hover on menu
	            menuMouseenter: function () {
	                var root = $(this).data().contextMenuRoot;
	                root.hovering = true;
	            },
	            // :hover on menu
	            menuMouseleave: function (e) {
	                var root = $(this).data().contextMenuRoot;
	                if (root.$layer && root.$layer.is(e.relatedTarget)) {
	                    root.hovering = false;
	                }
	            },
	            // :hover done manually so key handling is possible
	            itemMouseenter: function (e) {
	                var $this = $(this),
	                    data = $this.data(),
	                    opt = data.contextMenu,
	                    root = data.contextMenuRoot;

	                root.hovering = true;

	                // abort if we're re-entering
	                if (e && root.$layer && root.$layer.is(e.relatedTarget)) {
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                }

	                // make sure only one item is selected
	                (opt.$menu ? opt : root).$menu
	                    .children('.' + root.classNames.hover).trigger('contextmenu:blur')
	                    .children('.hover').trigger('contextmenu:blur');

	                if ($this.hasClass(root.classNames.disabled) || $this.hasClass(root.classNames.notSelectable)) {
	                    opt.$selected = null;
	                    return;
	                }

	                $this.trigger('contextmenu:focus');
	            },
	            // :hover done manually so key handling is possible
	            itemMouseleave: function (e) {
	                var $this = $(this),
	                    data = $this.data(),
	                    opt = data.contextMenu,
	                    root = data.contextMenuRoot;

	                if (root !== opt && root.$layer && root.$layer.is(e.relatedTarget)) {
	                    if (typeof root.$selected !== 'undefined' && root.$selected !== null) {
	                        root.$selected.trigger('contextmenu:blur');
	                    }
	                    e.preventDefault();
	                    e.stopImmediatePropagation();
	                    root.$selected = opt.$selected = opt.$node;
	                    return;
	                }

	                $this.trigger('contextmenu:blur');
	            },
	            // contextMenu item click
	            itemClick: function (e) {
	                var $this = $(this),
	                    data = $this.data(),
	                    opt = data.contextMenu,
	                    root = data.contextMenuRoot,
	                    key = data.contextMenuKey,
	                    callback;

	                // abort if the key is unknown or disabled or is a menu
	                if (!opt.items[key] || $this.is('.' + root.classNames.disabled + ', .context-menu-separator, .' + root.classNames.notSelectable) || ($this.is('.context-menu-submenu') && root.selectableSubMenu === false )) {
	                    return;
	                }

	                e.preventDefault();
	                e.stopImmediatePropagation();

	                if ($.isFunction(opt.callbacks[key]) && Object.prototype.hasOwnProperty.call(opt.callbacks, key)) {
	                    // item-specific callback
	                    callback = opt.callbacks[key];
	                } else if ($.isFunction(root.callback)) {
	                    // default callback
	                    callback = root.callback;
	                } else {
	                    // no callback, no action
	                    return;
	                }

	                // hide menu if callback doesn't stop that
	                if (callback.call(root.$trigger, key, root) !== false) {
	                    root.$menu.trigger('contextmenu:hide');
	                } else if (root.$menu.parent().length) {
	                    op.update.call(root.$trigger, root);
	                }
	            },
	            // ignore click events on input elements
	            inputClick: function (e) {
	                e.stopImmediatePropagation();
	            },
	            // hide <menu>
	            hideMenu: function (e, data) {
	                var root = $(this).data('contextMenuRoot');
	                op.hide.call(root.$trigger, root, data && data.force);
	            },
	            // focus <command>
	            focusItem: function (e) {
	                e.stopPropagation();
	                var $this = $(this),
	                    data = $this.data(),
	                    opt = data.contextMenu,
	                    root = data.contextMenuRoot;

	                if ($this.hasClass(root.classNames.disabled) || $this.hasClass(root.classNames.notSelectable)) {
	                    return;
	                }

	                $this
	                    .addClass([root.classNames.hover, root.classNames.visible].join(' '))
	                    // select other items and included items
	                    .parent().find('.context-menu-item').not($this)
	                    .removeClass(root.classNames.visible)
	                    .filter('.' + root.classNames.hover)
	                    .trigger('contextmenu:blur');

	                // remember selected
	                opt.$selected = root.$selected = $this;

	                // position sub-menu - do after show so dumb $.ui.position can keep up
	                if (opt.$node) {
	                    root.positionSubmenu.call(opt.$node, opt.$menu);
	                }
	            },
	            // blur <command>
	            blurItem: function (e) {
	                e.stopPropagation();
	                var $this = $(this),
	                    data = $this.data(),
	                    opt = data.contextMenu,
	                    root = data.contextMenuRoot;

	                if (opt.autoHide) { // for tablets and touch screens this needs to remain
	                    $this.removeClass(root.classNames.visible);
	                }
	                $this.removeClass(root.classNames.hover);
	                opt.$selected = null;
	            }
	        },
	        // operations
	        op = {
	            show: function (opt, x, y) {
	                var $trigger = $(this),
	                    css = {};

	                // hide any open menus
	                $('#context-menu-layer').trigger('mousedown');

	                // backreference for callbacks
	                opt.$trigger = $trigger;

	                // show event
	                if (opt.events.show.call($trigger, opt) === false) {
	                    $currentTrigger = null;
	                    return;
	                }

	                // create or update context menu
	                op.update.call($trigger, opt);

	                // position menu
	                opt.position.call($trigger, opt, x, y);

	                // make sure we're in front
	                if (opt.zIndex) {
	                    var additionalZValue = opt.zIndex;
	                    // If opt.zIndex is a function, call the function to get the right zIndex.
	                    if (typeof opt.zIndex === 'function') {
	                        additionalZValue = opt.zIndex.call($trigger, opt);
	                    }
	                    css.zIndex = zindex($trigger) + additionalZValue;
	                }

	                // add layer
	                op.layer.call(opt.$menu, opt, css.zIndex);

	                // adjust sub-menu zIndexes
	                opt.$menu.find('ul').css('zIndex', css.zIndex + 1);

	                // position and show context menu
	                opt.$menu.css(css)[opt.animation.show](opt.animation.duration, function () {
	                    $trigger.trigger('contextmenu:visible');
	                });
	                // make options available and set state
	                $trigger
	                    .data('contextMenu', opt)
	                    .addClass('context-menu-active');

	                // register key handler
	                $(document).off('keydown.contextMenu').on('keydown.contextMenu', handle.key);
	                // register autoHide handler
	                if (opt.autoHide) {
	                    // mouse position handler
	                    $(document).on('mousemove.contextMenuAutoHide', function (e) {
	                        // need to capture the offset on mousemove,
	                        // since the page might've been scrolled since activation
	                        var pos = $trigger.offset();
	                        pos.right = pos.left + $trigger.outerWidth();
	                        pos.bottom = pos.top + $trigger.outerHeight();

	                        if (opt.$layer && !opt.hovering && (!(e.pageX >= pos.left && e.pageX <= pos.right) || !(e.pageY >= pos.top && e.pageY <= pos.bottom))) {
	                            /* Additional hover check after short time, you might just miss the edge of the menu */
	                            setTimeout(function () {
	                                if (!opt.hovering && opt.$menu !== null && typeof opt.$menu !== 'undefined') {
	                                    opt.$menu.trigger('contextmenu:hide');
	                                }
	                            }, 50);
	                        }
	                    });
	                }
	            },
	            hide: function (opt, force) {
	                var $trigger = $(this);
	                if (!opt) {
	                    opt = $trigger.data('contextMenu') || {};
	                }

	                // hide event
	                if (!force && opt.events && opt.events.hide.call($trigger, opt) === false) {
	                    return;
	                }

	                // remove options and revert state
	                $trigger
	                    .removeData('contextMenu')
	                    .removeClass('context-menu-active');

	                if (opt.$layer) {
	                    // keep layer for a bit so the contextmenu event can be aborted properly by opera
	                    setTimeout((function ($layer) {
	                        return function () {
	                            $layer.remove();
	                        };
	                    })(opt.$layer), 10);

	                    try {
	                        delete opt.$layer;
	                    } catch (e) {
	                        opt.$layer = null;
	                    }
	                }

	                // remove handle
	                $currentTrigger = null;
	                // remove selected
	                opt.$menu.find('.' + opt.classNames.hover).trigger('contextmenu:blur');
	                opt.$selected = null;
	                // collapse all submenus
	                opt.$menu.find('.' + opt.classNames.visible).removeClass(opt.classNames.visible);
	                // unregister key and mouse handlers
	                // $(document).off('.contextMenuAutoHide keydown.contextMenu'); // http://bugs.jquery.com/ticket/10705
	                $(document).off('.contextMenuAutoHide').off('keydown.contextMenu');
	                // hide menu
	                if (opt.$menu) {
	                    opt.$menu[opt.animation.hide](opt.animation.duration, function () {
	                        // tear down dynamically built menu after animation is completed.
	                        if (opt.build) {
	                            opt.$menu.remove();
	                            $.each(opt, function (key) {
	                                switch (key) {
	                                    case 'ns':
	                                    case 'selector':
	                                    case 'build':
	                                    case 'trigger':
	                                        return true;

	                                    default:
	                                        opt[key] = undefined;
	                                        try {
	                                            delete opt[key];
	                                        } catch (e) {
	                                        }
	                                        return true;
	                                }
	                            });
	                        }

	                        setTimeout(function () {
	                            $trigger.trigger('contextmenu:hidden');
	                        }, 10);
	                    });
	                }
	            },
	            create: function (opt, root) {
	                if (typeof root === 'undefined') {
	                    root = opt;
	                }
	                // create contextMenu
	                opt.$menu = $('<ul class="context-menu-list"></ul>').addClass(opt.className || '').data({
	                    'contextMenu': opt,
	                    'contextMenuRoot': root
	                });

	                $.each(['callbacks', 'commands', 'inputs'], function (i, k) {
	                    opt[k] = {};
	                    if (!root[k]) {
	                        root[k] = {};
	                    }
	                });

	                if (!root.accesskeys) {
	                    root.accesskeys = {};
	                }

	                function createNameNode(item) {
	                    var $name = $('<span></span>');

	                    if ($.browser.msie){
	                        $name.css('font-size', '12px');
	                    }

	                    if (item._accesskey) {
	                        if (item._beforeAccesskey) {
	                            $name.append(document.createTextNode(item._beforeAccesskey));
	                        }
	                        $('<span></span>')
	                            .addClass('context-menu-accesskey')
	                            .text(item._accesskey)
	                            .appendTo($name);
	                        if (item._afterAccesskey) {
	                            $name.append(document.createTextNode(item._afterAccesskey));
	                        }
	                    } else {
	                        if (item.isHtmlName) {
	                            // restrict use with access keys
	                            if (typeof item.accesskey !== 'undefined') {
	                                throw new Error('accesskeys are not compatible with HTML names and cannot be used together in the same item');
	                            }
	                            $name.html(item.name);
	                        } else {
	                            $name.text(item.name);
	                        }
	                    }
	                    return $name;
	                }

	                // create contextMenu items
	                $.each(opt.items, function (key, item) {
	                    var $t = $('<li class="context-menu-item"></li>').addClass(item.className || ''),
	                        $label = null,
	                        $input = null;

	                    // iOS needs to see a click-event bound to an element to actually
	                    // have the TouchEvents infrastructure trigger the click event
	                    $t.on('click', $.noop);

	                    // Make old school string seperator a real item so checks wont be
	                    // akward later.
	                    // And normalize 'cm_separator' into 'cm_seperator'.
	                    if (typeof item === 'string' || item.type === 'cm_separator') {
	                        item = {type: 'cm_seperator'};
	                    }

	                    item.$node = $t.data({
	                        'contextMenu': opt,
	                        'contextMenuRoot': root,
	                        'contextMenuKey': key
	                    });

	                    // register accesskey
	                    // NOTE: the accesskey attribute should be applicable to any element, but Safari5 and Chrome13 still can't do that
	                    if (typeof item.accesskey !== 'undefined') {
	                        var aks = splitAccesskey(item.accesskey);
	                        for (var i = 0, ak; ak = aks[i]; i++) {
	                            if (!root.accesskeys[ak]) {
	                                root.accesskeys[ak] = item;
	                                var matched = item.name.match(new RegExp('^(.*?)(' + ak + ')(.*)$', 'i'));
	                                if (matched) {
	                                    item._beforeAccesskey = matched[1];
	                                    item._accesskey = matched[2];
	                                    item._afterAccesskey = matched[3];
	                                }
	                                break;
	                            }
	                        }
	                    }

	                    if (item.type && types[item.type]) {
	                        // run custom type handler
	                        types[item.type].call($t, item, opt, root);
	                        // register commands
	                        $.each([opt, root], function (i, k) {
	                            k.commands[key] = item;
	                            // Overwrite only if undefined or the item is appended to the root. This so it
	                            // doesn't overwrite callbacks of root elements if the name is the same.
	                            if ($.isFunction(item.callback) && (typeof k.callbacks[key] === 'undefined' || typeof opt.type === 'undefined')) {
	                                k.callbacks[key] = item.callback;
	                            }
	                        });
	                    } else {
	                        // add label for input
	                        if (item.type === 'cm_seperator') {
	                            $t.addClass('context-menu-separator ' + root.classNames.notSelectable);
	                        } else if (item.type === 'html') {
	                            $t.addClass('context-menu-html ' + root.classNames.notSelectable);
	                        } else if (item.type === 'sub') {
	                            // We don't want to execute the next else-if if it is a sub.
	                        } else if (item.type) {
	                            $label = $('<label></label>').appendTo($t);
	                            createNameNode(item).appendTo($label);

	                            $t.addClass('context-menu-input');
	                            opt.hasTypes = true;
	                            $.each([opt, root], function (i, k) {
	                                k.commands[key] = item;
	                                k.inputs[key] = item;
	                            });
	                        } else if (item.items) {
	                            item.type = 'sub';
	                        }

	                        switch (item.type) {
	                            case 'cm_seperator':
	                                break;

	                            case 'text':
	                                $input = $('<input type="text" value="1" name="" />')
	                                    .attr('name', 'context-menu-input-' + key)
	                                    .val(item.value || '')
	                                    .appendTo($label);
	                                break;

	                            case 'textarea':
	                                $input = $('<textarea name=""></textarea>')
	                                    .attr('name', 'context-menu-input-' + key)
	                                    .val(item.value || '')
	                                    .appendTo($label);

	                                if (item.height) {
	                                    $input.height(item.height);
	                                }
	                                break;

	                            case 'checkbox':
	                                $input = $('<input type="checkbox" value="1" name="" />')
	                                    .attr('name', 'context-menu-input-' + key)
	                                    .val(item.value || '')
	                                    .prop('checked', !!item.selected)
	                                    .prependTo($label);
	                                break;

	                            case 'radio':
	                                $input = $('<input type="radio" value="1" name="" />')
	                                    .attr('name', 'context-menu-input-' + item.radio)
	                                    .val(item.value || '')
	                                    .prop('checked', !!item.selected)
	                                    .prependTo($label);
	                                break;

	                            case 'select':
	                                $input = $('<select name=""></select>')
	                                    .attr('name', 'context-menu-input-' + key)
	                                    .appendTo($label);
	                                if (item.options) {
	                                    $.each(item.options, function (value, text) {
	                                        $('<option></option>').val(value).text(text).appendTo($input);
	                                    });
	                                    $input.val(item.selected);
	                                }
	                                break;

	                            case 'sub':
	                                createNameNode(item).appendTo($t);
	                                item.appendTo = item.$node;
	                                $t.data('contextMenu', item).addClass('context-menu-submenu');
	                                item.callback = null;

	                                // If item contains items, and this is a promise, we should create it later
	                                // check if subitems is of type promise. If it is a promise we need to create
	                                // it later, after promise has been resolved.
	                                if ('function' === typeof item.items.then) {
	                                    // probably a promise, process it, when completed it will create the sub menu's.
	                                    op.processPromises(item, root, item.items);
	                                } else {
	                                    // normal submenu.
	                                    op.create(item, root);
	                                }
	                                break;

	                            case 'html':
	                                $(item.html).appendTo($t);
	                                break;

	                            default:
	                                $.each([opt, root], function (i, k) {
	                                    k.commands[key] = item;
	                                    // Overwrite only if undefined or the item is appended to the root. This so it
	                                    // doesn't overwrite callbacks of root elements if the name is the same.
	                                    if ($.isFunction(item.callback) && (typeof k.callbacks[key] === 'undefined' || typeof opt.type === 'undefined')) {
	                                        k.callbacks[key] = item.callback;
	                                    }
	                                });
	                                createNameNode(item).appendTo($t);
	                                break;
	                        }

	                        // disable key listener in <input>
	                        if (item.type && item.type !== 'sub' && item.type !== 'html' && item.type !== 'cm_seperator') {
	                            $input
	                                .on('focus', handle.focusInput)
	                                .on('blur', handle.blurInput);

	                            if (item.events) {
	                                $input.on(item.events, opt);
	                            }
	                        }

	                        // add icons
	                        if (item.icon) {
	                            if ($.isFunction(item.icon)) {
	                                item._icon = item.icon.call(this, this, $t, key, item);
	                            } else {
	                                if (typeof(item.icon) === 'string' && item.icon.substring(0, 3) === 'fa-') {
	                                    // to enable font awesome
	                                    item._icon = root.classNames.icon + ' ' + root.classNames.icon + '--fa fa ' + item.icon;
	                                } else {
	                                    item._icon = root.classNames.icon + ' ' + root.classNames.icon + '-' + item.icon;
	                                }
	                            }
	                            $t.addClass(item._icon);
	                        }
	                    }

	                    // cache contained elements
	                    item.$input = $input;
	                    item.$label = $label;

	                    // attach item to menu
	                    $t.appendTo(opt.$menu);

	                    // Disable text selection
	                    if (!opt.hasTypes && $.support.eventSelectstart) {
	                        // browsers support user-select: none,
	                        // IE has a special event for text-selection
	                        // browsers supporting neither will not be preventing text-selection
	                        $t.on('selectstart.disableTextSelect', handle.abortevent);
	                    }
	                });
	                // attach contextMenu to <body> (to bypass any possible overflow:hidden issues on parents of the trigger element)
	                if (!opt.$node) {
	                    opt.$menu.css('display', 'none').addClass('context-menu-root');
	                }
	                opt.$menu.appendTo(opt.appendTo || document.body);
	            },
	            resize: function ($menu, nested) {
	                var domMenu;
	                // determine widths of submenus, as CSS won't grow them automatically
	                // position:absolute within position:absolute; min-width:100; max-width:200; results in width: 100;
	                // kinda sucks hard...

	                // determine width of absolutely positioned element
	                $menu.css({position: 'absolute', display: 'block'});
	                // don't apply yet, because that would break nested elements' widths
	                $menu.data('width',
	                    (domMenu = $menu.get(0)).getBoundingClientRect ?
	                        Math.ceil(domMenu.getBoundingClientRect().width) :
	                        $menu.outerWidth() + 1); // outerWidth() returns rounded pixels
	                // reset styles so they allow nested elements to grow/shrink naturally
	                $menu.css({
	                    position: 'static',
	                    minWidth: '0px',
	                    maxWidth: '100000px'
	                });
	                // identify width of nested menus
	                $menu.find('> li > ul').each(function () {
	                    op.resize($(this), true);
	                });
	                // reset and apply changes in the end because nested
	                // elements' widths wouldn't be calculatable otherwise
	                if (!nested) {
	                    $menu.find('ul').addBack().css({
	                        position: '',
	                        display: '',
	                        minWidth: '',
	                        maxWidth: ''
	                    }).outerWidth(function () {
	                        return $(this).data('width');
	                    });
	                }
	            },
	            update: function (opt, root) {
	                var $trigger = this;
	                if (typeof root === 'undefined') {
	                    root = opt;
	                    op.resize(opt.$menu);
	                }
	                // re-check disabled for each item
	                opt.$menu.children().each(function () {
	                    var $item = $(this),
	                        key = $item.data('contextMenuKey'),
	                        item = opt.items[key],
	                        disabled = ($.isFunction(item.disabled) && item.disabled.call($trigger, key, root)) || item.disabled === true,
	                        visible;
	                    if ($.isFunction(item.visible)) {
	                        visible = item.visible.call($trigger, key, root);
	                    } else if (typeof item.visible !== 'undefined') {
	                        visible = item.visible === true;
	                    } else {
	                        visible = true;
	                    }
	                    $item[visible ? 'show' : 'hide']();

	                    // dis- / enable item
	                    $item[disabled ? 'addClass' : 'removeClass'](root.classNames.disabled);

	                    if ($.isFunction(item.icon)) {
	                        $item.removeClass(item._icon);
	                        item._icon = item.icon.call(this, $trigger, $item, key, item);
	                        $item.addClass(item._icon);
	                    }

	                    if (item.type) {
	                        // dis- / enable input elements
	                        $item.find('input, select, textarea').prop('disabled', disabled);

	                        // update input states
	                        switch (item.type) {
	                            case 'text':
	                            case 'textarea':
	                                item.$input.val(item.value || '');
	                                break;

	                            case 'checkbox':
	                            case 'radio':
	                                item.$input.val(item.value || '').prop('checked', !!item.selected);
	                                break;

	                            case 'select':
	                                item.$input.val((item.selected === 0 ? "0" : item.selected) || '');
	                                break;
	                        }
	                    }

	                    if (item.$menu) {
	                        // update sub-menu
	                        op.update.call($trigger, item, root);
	                    }
	                });
	            },
	            layer: function (opt, zIndex) {
	                // add transparent layer for click area
	                // filter and background for Internet Explorer, Issue #23
	                var $layer = opt.$layer = $('<div id="context-menu-layer"></div>')
	                    .css({
	                        height: $win.height(),
	                        width: $win.width(),
	                        display: 'block',
	                        position: 'fixed',
	                        'z-index': zIndex,
	                        top: 0,
	                        left: 0,
	                        opacity: 0,
	                        filter: 'alpha(opacity=0)',
	                        'background-color': '#000'
	                    })
	                    .data('contextMenuRoot', opt)
	                    .insertBefore(this)
	                    .on('contextmenu', handle.abortevent)
	                    .on('mousedown', handle.layerClick);

	                // IE6 doesn't know position:fixed;
	                if (typeof document.body.style.maxWidth === 'undefined') { // IE6 doesn't support maxWidth
	                    $layer.css({
	                        'position': 'absolute',
	                        'height': $(document).height()
	                    });
	                }

	                return $layer;
	            },
	            processPromises: function (opt, root, promise) {
	                // Start
	                opt.$node.addClass(root.classNames.iconLoadingClass);

	                function completedPromise(opt, root, items) {
	                    // Completed promise (dev called promise.resolve). We now have a list of items which can
	                    // be used to create the rest of the context menu.
	                    if (typeof items === 'undefined') {
	                        // Null result, dev should have checked
	                        errorPromise(undefined);//own error object
	                    }
	                    finishPromiseProcess(opt, root, items);
	                }

	                function errorPromise(opt, root, errorItem) {
	                    // User called promise.reject() with an error item, if not, provide own error item.
	                    if (typeof errorItem === 'undefined') {
	                        errorItem = {
	                            "error": {
	                                name: "No items and no error item",
	                                icon: "context-menu-icon context-menu-icon-quit"
	                            }
	                        };
	                        if (window.console) {
	                            (console.error || console.log).call(console, 'When you reject a promise, provide an "items" object, equal to normal sub-menu items');
	                        }
	                    } else if (typeof errorItem === 'string') {
	                        errorItem = {"error": {name: errorItem}};
	                    }
	                    finishPromiseProcess(opt, root, errorItem);
	                }

	                function finishPromiseProcess(opt, root, items) {
	                    if (typeof root.$menu === 'undefined' || !root.$menu.is(':visible')) {
	                        return;
	                    }
	                    opt.$node.removeClass(root.classNames.iconLoadingClass);
	                    opt.items = items;
	                    op.create(opt, root, true); // Create submenu
	                    op.update(opt, root); // Correctly update position if user is already hovered over menu item
	                    root.positionSubmenu.call(opt.$node, opt.$menu); // positionSubmenu, will only do anything if user already hovered over menu item that just got new subitems.
	                }

	                // Wait for promise completion. .then(success, error, notify) (we don't track notify). Bind the opt
	                // and root to avoid scope problems
	                promise.then(completedPromise.bind(this, opt, root), errorPromise.bind(this, opt, root));
	            }
	        };

	    // split accesskey according to http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#assigned-access-key
	    function splitAccesskey(val) {
	        var t = val.split(/\s+/);
	        var keys = [];

	        for (var i = 0, k; k = t[i]; i++) {
	            k = k.charAt(0).toUpperCase(); // first character only
	            // theoretically non-accessible characters should be ignored, but different systems, different keyboard layouts, ... screw it.
	            // a map to look up already used access keys would be nice
	            keys.push(k);
	        }

	        return keys;
	    }

	// handle contextMenu triggers
	    $.fn.contextMenu = function (operation) {
	        var $t = this, $o = operation;
	        if (this.length > 0) {  // this is not a build on demand menu
	            if (typeof operation === 'undefined') {
	                this.first().trigger('contextmenu');
	            } else if (typeof operation.x !== 'undefined' && typeof operation.y !== 'undefined') {
	                this.first().trigger($.Event('contextmenu', {
	                    pageX: operation.x,
	                    pageY: operation.y,
	                    mouseButton: operation.button
	                }));
	            } else if (operation === 'hide') {
	                var $menu = this.first().data('contextMenu') ? this.first().data('contextMenu').$menu : null;
	                if ($menu) {
	                    $menu.trigger('contextmenu:hide');
	                }
	            } else if (operation === 'destroy') {
	                $.contextMenu('destroy', {context: this});
	            } else if ($.isPlainObject(operation)) {
	                operation.context = this;
	                $.contextMenu('create', operation);
	            } else if (operation) {
	                this.removeClass('context-menu-disabled');
	            } else if (!operation) {
	                this.addClass('context-menu-disabled');
	            }
	        } else {
	            $.each(menus, function () {
	                if (this.selector === $t.selector) {
	                    $o.data = this;

	                    $.extend($o.data, {trigger: 'demand'});
	                }
	            });

	            handle.contextmenu.call($o.target, $o);
	        }

	        return this;
	    };

	    // manage contextMenu instances
	    $.contextMenu = function (operation, options) {
	        if (typeof operation !== 'string') {
	            options = operation;
	            operation = 'create';
	        }

	        if (typeof options === 'string') {
	            options = {selector: options};
	        } else if (typeof options === 'undefined') {
	            options = {};
	        }

	        // merge with default options
	        var o = $.extend(true, {}, defaults, options || {});
	        var $document = $(document);
	        var $context = $document;
	        var _hasContext = false;

	        if (!o.context || !o.context.length) {
	            o.context = document;
	        } else {
	            // you never know what they throw at you...
	            $context = $(o.context).first();
	            o.context = $context.get(0);
	            _hasContext = !$(o.context).is(document);
	        }

	        switch (operation) {
	            case 'create':
	                // no selector no joy
	                if (!o.selector) {
	                    throw new Error('No selector specified');
	                }
	                // make sure internal classes are not bound to
	                if (o.selector.match(/.context-menu-(list|item|input)($|\s)/)) {
	                    throw new Error('Cannot bind to selector "' + o.selector + '" as it contains a reserved className');
	                }
	                if (!o.build && (!o.items || $.isEmptyObject(o.items))) {
	                    throw new Error('No Items specified');
	                }
	                counter++;
	                o.ns = '.contextMenu' + counter;
	                if (!_hasContext) {
	                    namespaces[o.selector] = o.ns;
	                }
	                menus[o.ns] = o;

	                // default to right click
	                if (!o.trigger) {
	                    o.trigger = 'right';
	                }

	                if (!initialized) {
	                    var itemClick = o.itemClickEvent === 'click' ? 'click.contextMenu' : 'mouseup.contextMenu';
	                    var contextMenuItemObj = {
	                        // 'mouseup.contextMenu': handle.itemClick,
	                        // 'click.contextMenu': handle.itemClick,
	                        'contextmenu:focus.contextMenu': handle.focusItem,
	                        'contextmenu:blur.contextMenu': handle.blurItem,
	                        'contextmenu.contextMenu': handle.abortevent,
	                        'mouseenter.contextMenu': handle.itemMouseenter,
	                        'mouseleave.contextMenu': handle.itemMouseleave
	                    };
	                    contextMenuItemObj[itemClick] = handle.itemClick;
	                    // make sure item click is registered first
	                    $document
	                        .on({
	                            'contextmenu:hide.contextMenu': handle.hideMenu,
	                            'prevcommand.contextMenu': handle.prevItem,
	                            'nextcommand.contextMenu': handle.nextItem,
	                            'contextmenu.contextMenu': handle.abortevent,
	                            'mouseenter.contextMenu': handle.menuMouseenter,
	                            'mouseleave.contextMenu': handle.menuMouseleave
	                        }, '.context-menu-list')
	                        .on('mouseup.contextMenu', '.context-menu-input', handle.inputClick)
	                        .on(contextMenuItemObj, '.context-menu-item');

	                    initialized = true;
	                }

	                // engage native contextmenu event
	                $context
	                    .on('contextmenu' + o.ns, o.selector, o, handle.contextmenu);

	                if (_hasContext) {
	                    // add remove hook, just in case
	                    $context.on('remove' + o.ns, function () {
	                        $(this).contextMenu('destroy');
	                    });
	                }

	                switch (o.trigger) {
	                    case 'hover':
	                        $context
	                            .on('mouseenter' + o.ns, o.selector, o, handle.mouseenter)
	                            .on('mouseleave' + o.ns, o.selector, o, handle.mouseleave);
	                        break;

	                    case 'left':
	                        $context.on('click' + o.ns, o.selector, o, handle.click);
	                        break;
	                    /*
	                     default:
	                     // http://www.quirksmode.org/dom/events/contextmenu.html
	                     $document
	                     .on('mousedown' + o.ns, o.selector, o, handle.mousedown)
	                     .on('mouseup' + o.ns, o.selector, o, handle.mouseup);
	                     break;
	                     */
	                }

	                // create menu
	                if (!o.build) {
	                    op.create(o);
	                }
	                break;

	            case 'destroy':
	                var $visibleMenu;
	                if (_hasContext) {
	                    // get proper options
	                    var context = o.context;
	                    $.each(menus, function (ns, o) {

	                        if (!o) {
	                            return true;
	                        }

	                        // Is this menu equest to the context called from
	                        if (!$(context).is(o.selector)) {
	                            return true;
	                        }

	                        $visibleMenu = $('.context-menu-list').filter(':visible');
	                        if ($visibleMenu.length && $visibleMenu.data().contextMenuRoot.$trigger.is($(o.context).find(o.selector))) {
	                            $visibleMenu.trigger('contextmenu:hide', {force: true});
	                        }

	                        try {
	                            if (menus[o.ns].$menu) {
	                                menus[o.ns].$menu.remove();
	                            }

	                            delete menus[o.ns];
	                        } catch (e) {
	                            menus[o.ns] = null;
	                        }

	                        $(o.context).off(o.ns);

	                        return true;
	                    });
	                } else if (!o.selector) {
	                    $document.off('.contextMenu .contextMenuAutoHide');
	                    $.each(menus, function (ns, o) {
	                        $(o.context).off(o.ns);
	                    });

	                    namespaces = {};
	                    menus = {};
	                    counter = 0;
	                    initialized = false;

	                    $('#context-menu-layer, .context-menu-list').remove();
	                } else if (namespaces[o.selector]) {
	                    $visibleMenu = $('.context-menu-list').filter(':visible');
	                    if ($visibleMenu.length && $visibleMenu.data().contextMenuRoot.$trigger.is(o.selector)) {
	                        $visibleMenu.trigger('contextmenu:hide', {force: true});
	                    }

	                    try {
	                        if (menus[namespaces[o.selector]].$menu) {
	                            menus[namespaces[o.selector]].$menu.remove();
	                        }

	                        delete menus[namespaces[o.selector]];
	                    } catch (e) {
	                        menus[namespaces[o.selector]] = null;
	                    }

	                    $document.off(namespaces[o.selector]);
	                }
	                break;

	            case 'html5':
	                // if <command> or <menuitem> are not handled by the browser,
	                // or options was a bool true,
	                // initialize $.contextMenu for them
	                if ((!$.support.htmlCommand && !$.support.htmlMenuitem) || (typeof options === 'boolean' && options)) {
	                    $('menu[type="context"]').each(function () {
	                        if (this.id) {
	                            $.contextMenu({
	                                selector: '[contextmenu=' + this.id + ']',
	                                items: $.contextMenu.fromMenu(this)
	                            });
	                        }
	                    }).css('display', 'none');
	                }
	                break;

	            default:
	                throw new Error('Unknown operation "' + operation + '"');
	        }

	        return this;
	    };

	// import values into <input> commands
	    $.contextMenu.setInputValues = function (opt, data) {
	        if (typeof data === 'undefined') {
	            data = {};
	        }

	        $.each(opt.inputs, function (key, item) {
	            switch (item.type) {
	                case 'text':
	                case 'textarea':
	                    item.value = data[key] || '';
	                    break;

	                case 'checkbox':
	                    item.selected = data[key] ? true : false;
	                    break;

	                case 'radio':
	                    item.selected = (data[item.radio] || '') === item.value;
	                    break;

	                case 'select':
	                    item.selected = data[key] || '';
	                    break;
	            }
	        });
	    };

	// export values from <input> commands
	    $.contextMenu.getInputValues = function (opt, data) {
	        if (typeof data === 'undefined') {
	            data = {};
	        }

	        $.each(opt.inputs, function (key, item) {
	            switch (item.type) {
	                case 'text':
	                case 'textarea':
	                case 'select':
	                    data[key] = item.$input.val();
	                    break;

	                case 'checkbox':
	                    data[key] = item.$input.prop('checked');
	                    break;

	                case 'radio':
	                    if (item.$input.prop('checked')) {
	                        data[item.radio] = item.value;
	                    }
	                    break;
	            }
	        });

	        return data;
	    };

	// find <label for="xyz">
	    function inputLabel(node) {
	        return (node.id && $('label[for="' + node.id + '"]').val()) || node.name;
	    }

	// convert <menu> to items object
	    function menuChildren(items, $children, counter) {
	        if (!counter) {
	            counter = 0;
	        }

	        $children.each(function () {
	            var $node = $(this),
	                node = this,
	                nodeName = this.nodeName.toLowerCase(),
	                label,
	                item;

	            // extract <label><input>
	            if (nodeName === 'label' && $node.find('input, textarea, select').length) {
	                label = $node.text();
	                $node = $node.children().first();
	                node = $node.get(0);
	                nodeName = node.nodeName.toLowerCase();
	            }

	            /*
	             * <menu> accepts flow-content as children. that means <embed>, <canvas> and such are valid menu items.
	             * Not being the sadistic kind, $.contextMenu only accepts:
	             * <command>, <menuitem>, <hr>, <span>, <p> <input [text, radio, checkbox]>, <textarea>, <select> and of course <menu>.
	             * Everything else will be imported as an html node, which is not interfaced with contextMenu.
	             */

	            // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#concept-command
	            switch (nodeName) {
	                // http://www.whatwg.org/specs/web-apps/current-work/multipage/interactive-elements.html#the-menu-element
	                case 'menu':
	                    item = {name: $node.attr('label'), items: {}};
	                    counter = menuChildren(item.items, $node.children(), counter);
	                    break;

	                // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#using-the-a-element-to-define-a-command
	                case 'a':
	                // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#using-the-button-element-to-define-a-command
	                case 'button':
	                    item = {
	                        name: $node.text(),
	                        disabled: !!$node.attr('disabled'),
	                        callback: (function () {
	                            return function () {
	                                $node.click();
	                            };
	                        })()
	                    };
	                    break;

	                // http://www.whatwg.org/specs/web-apps/current-work/multipage/commands.html#using-the-command-element-to-define-a-command

	                case 'menuitem':
	                case 'command':
	                    switch ($node.attr('type')) {
	                        case undefined:
	                        case 'command':
	                        case 'menuitem':
	                            item = {
	                                name: $node.attr('label'),
	                                disabled: !!$node.attr('disabled'),
	                                icon: $node.attr('icon'),
	                                callback: (function () {
	                                    return function () {
	                                        $node.click();
	                                    };
	                                })()
	                            };
	                            break;

	                        case 'checkbox':
	                            item = {
	                                type: 'checkbox',
	                                disabled: !!$node.attr('disabled'),
	                                name: $node.attr('label'),
	                                selected: !!$node.attr('checked')
	                            };
	                            break;
	                        case 'radio':
	                            item = {
	                                type: 'radio',
	                                disabled: !!$node.attr('disabled'),
	                                name: $node.attr('label'),
	                                radio: $node.attr('radiogroup'),
	                                value: $node.attr('id'),
	                                selected: !!$node.attr('checked')
	                            };
	                            break;

	                        default:
	                            item = undefined;
	                    }
	                    break;

	                case 'hr':
	                    item = '-------';
	                    break;

	                case 'input':
	                    switch ($node.attr('type')) {
	                        case 'text':
	                            item = {
	                                type: 'text',
	                                name: label || inputLabel(node),
	                                disabled: !!$node.attr('disabled'),
	                                value: $node.val()
	                            };
	                            break;

	                        case 'checkbox':
	                            item = {
	                                type: 'checkbox',
	                                name: label || inputLabel(node),
	                                disabled: !!$node.attr('disabled'),
	                                selected: !!$node.attr('checked')
	                            };
	                            break;

	                        case 'radio':
	                            item = {
	                                type: 'radio',
	                                name: label || inputLabel(node),
	                                disabled: !!$node.attr('disabled'),
	                                radio: !!$node.attr('name'),
	                                value: $node.val(),
	                                selected: !!$node.attr('checked')
	                            };
	                            break;

	                        default:
	                            item = undefined;
	                            break;
	                    }
	                    break;

	                case 'select':
	                    item = {
	                        type: 'select',
	                        name: label || inputLabel(node),
	                        disabled: !!$node.attr('disabled'),
	                        selected: $node.val(),
	                        options: {}
	                    };
	                    $node.children().each(function () {
	                        item.options[this.value] = $(this).text();
	                    });
	                    break;

	                case 'textarea':
	                    item = {
	                        type: 'textarea',
	                        name: label || inputLabel(node),
	                        disabled: !!$node.attr('disabled'),
	                        value: $node.val()
	                    };
	                    break;

	                case 'label':
	                    break;

	                default:
	                    item = {type: 'html', html: $node.clone(true)};
	                    break;
	            }

	            if (item) {
	                counter++;
	                items['key' + counter] = item;
	            }
	        });

	        return counter;
	    }

	// convert html5 menu
	    $.contextMenu.fromMenu = function (element) {
	        var $this = $(element),
	            items = {};

	        menuChildren(items, $this.children());

	        return items;
	    };

	// make defaults accessible
	    $.contextMenu.defaults = defaults;
	    $.contextMenu.types = types;
	// export internal functions - undocumented, for hacking only!
	    $.contextMenu.handle = handle;
	    $.contextMenu.op = op;
	    $.contextMenu.menus = menus;
	});

	if (!$.fn.changeTagName) {
	    (function($){
	        var $newTag = null;
	        $.fn.changeTagName = function(newTag){
	            this.each(function(i, el){
	                var $el = $(el);
	                $newTag = $("<" + newTag + ">");

	                // attributes
	                $.each(el.attributes, function(i, attribute){
	                    $newTag.attr(attribute.nodeName, attribute.nodeValue);
	                });
	                // content
	                $newTag.html($el.html());

	                $el.replaceWith($newTag);
	            });
	            return $newTag;
	        };
	    })(jQuery);
	}

	/*  cellPos jQuery plugin
	    ---------------------
	    Get visual position of cell in HTML table (or its block like thead).
	    Return value is object with "top" and "left" properties set to row and column index of top-left cell corner.
	    Example of use:
	        $("#myTable tbody td").each(function(){
	            $(this).text( $(this).cellPos().top +", "+ $(this).cellPos().left );
	        });
	*/
	(function($){
	    /* scan individual table and set "cellPos" data in the form { left: x-coord, top: y-coord } */
	    function scanTable( $table ) {
	        var m = [];
	        $table.children( "tr" ).each( function( y, row ) {
	            $( row ).children( "td, th" ).each( function( x, cell ) {
	                var $cell = $( cell ),
	                    cspan = $cell.attr( "colspan" ) | 0,
	                    rspan = $cell.attr( "rowspan" ) | 0,
	                    tx, ty;
	                cspan = cspan ? cspan : 1;
	                rspan = rspan ? rspan : 1;
	                for( ; m[y] && m[y][x]; ++x );  //skip already occupied cells in current row
	                for( tx = x; tx < x + cspan; ++tx ) {  //mark matrix elements occupied by current cell with true
	                    for( ty = y; ty < y + rspan; ++ty ) {
	                        if( !m[ty] ) {  //fill missing rows
	                            m[ty] = [];
	                        }
	                        m[ty][tx] = true;
	                    }
	                }
	                var pos = { top: y, left: x };
	                $cell.data( "cellPos", pos );
	            } );
	        } );
	    };

	    /* plugin */
	    $.fn.cellPos = function( rescan ) {
	        var $cell = this.first(),
	            pos = $cell.data( "cellPos" );
	        if( !pos || rescan ) {
	            var $table = $cell.closest( "table, thead, tbody, tfoot" );
	            scanTable( $table );
	        }
	        pos = $cell.data( "cellPos" );
	        return pos;
	    }
	})(jQuery);

	if (!String.prototype.toUnicode) {
	    String.prototype.toUnicode = function(){
	        var result = "";
	        for(var i = 0; i < this.length; i++){
	            // Assumption: all characters are < 0xffff
	            result += "\\u" + ("000" + this[i].charCodeAt(0).toString(16)).substr(-4);
	        }
	        return result;
	    };
	}

	/*!
	 * jQuery cxDialog 1.2.4
	 * http://code.ciaoca.com/
	 * https://github.com/ciaoca/cxDialog
	 * E-mail: ciaoca@gmail.com
	 * Released under the MIT license
	 * Date: 2017-01-06
	 *
	 * 简易调用：$.cxDialog(string[, ok, no])
	 * 完整方法：$.cxDialog(opt)
	 * @param {object|string} opt 参数设置 or 内容
	 *   title {string} 标题
	 *   info {string|dom} 内容
	 *   ok {fn} 点击确认时的回调函数
	 *   okText {string} 确认按钮文字
	 *   no {fn} 点击取消时的回调函数
	 *   noText {string} 取消按钮文字
	 *   buttons {array} 自定义按钮：[{text: 'text', callback: fn}, ...]
	 *   closeBtn {boolean} 是否显示关闭按钮
	 *   lockScroll {boolean} 是否锁定滚动
	 *   baseClass {string} 给对话框容器增加 class，不会覆盖默认的 class
	 *   background {string} 遮罩背景的颜色
	 *   width {int} 提示框固定宽度
	 *   height {int} 提示框固定高度
	 *   zIndex {int} 提示框的层级
	 *
	 * @param {function} ok 点击确认时的回调函数
	 * @param {function} no 点击取消时的回调函数
	 */
	(function(factory){
	    // if (typeof define === 'function' && define.amd) {
	    //     define(['jquery'], factory);
	    // } else {
	        factory(window.jQuery || window.Zepto || window.$);
	    // };
	}(function($){
	    if (typeof Zepto === 'function' || typeof Zepto === 'object') {
	        // Add inner and outer width to zepto (adapted from https://gist.github.com/alanhogan/3935463)
	        var ioDim = function(dimension, includeBorder) {
	            return function (includeMargin) {
	                var sides, size, elem;
	                if (this) {
	                    elem = this;
	                    size = elem[dimension]();
	                    sides = {
	                        width: ['left', 'right'],
	                        height: ['top', 'bottom']
	                    };
	                    sides[dimension].forEach(function(side) {
	                        if (!elem.css('box-sizing') || elem.css('box-sizing') === 'content-box') {
	                            size += parseInt(elem.css('padding-' + side), 10);
	                            if (includeBorder) {
	                                size += parseInt(elem.css('border-' + side + '-width'), 10);
	                            };
	                        };
	                        if (includeMargin) {
	                            size += parseInt(elem.css('margin-' + side), 10);
	                        };
	                    });
	                    return size;
	                } else {
	                    return null;
	                };
	            };
	        };
	        ['width', 'height'].forEach(function(dimension) {
	            var Dimension = dimension.substr(0,1).toUpperCase() + dimension.substr(1);
	            if (typeof Zepto.fn['inner' + Dimension] === 'undefined') {
	                Zepto.fn['inner' + Dimension] = ioDim(dimension, false);
	            };
	            if (typeof Zepto.fn['outer' + Dimension] === 'undefined') {
	                Zepto.fn['outer' + Dimension] = ioDim(dimension, true);
	            };
	        });
	    };

	    var dialog = {
	        dom: {},
	        isElement: function(o){
	            if (o && (typeof HTMLElement === 'function' || typeof HTMLElement === 'object') && o instanceof HTMLElement) {
	                return true;
	            } else {
	                return (o && o.nodeType && o.nodeType === 1) ? true : false;
	            };
	        },
	        isJquery: function(o){
	            return (o && o.length && (typeof jQuery === 'function' || typeof jQuery === 'object') && o instanceof jQuery) ? true : false;
	        },
	        isZepto: function(o){
	            return (o && o.length && (typeof Zepto === 'function' || typeof Zepto === 'object') && Zepto.zepto.isZ(o)) ? true : false;
	        }
	    };

	    dialog.init = function(opt, ok, no){
	        var self = this;

	        self.dom.docHtml = $('html');
	        self.dom.box = $('<div></div>', {'id': 'cxdialog', 'class': 'cxdialog'});
	        self.dom.overlay = $('<div></div>', {'id': 'cxdialog_overlay', 'class': 'cxdialog_overlay'});
	        self.dom.holder = $('<div></div>', {'id': 'cxdialog_holder', 'class': 'cxdialog_holder'});
	        self.dom.title = $('<div></div>', {'class': 'cxdialog_title'});
	        self.dom.info = $('<div></div>', {'class': 'cxdialog_info'});
	        self.dom.btns = $('<div></div>', {'class': 'cxdialog_btns'});
	        self.dom.closeBtn = $('<a></a>', {'rel': 'cxdialog', 'rev': 'close'});

	        $(document).ready(function() {
	            self.dom.box.appendTo('body').after(self.dom.overlay);
	        });

	        self.isIE6 = !!window.ActiveXObject && !window.XMLHttpRequest;

	        self.dom.box.on('click', 'a', function(){
	            var _rel = this.rel;
	            var _rev = this.rev;
	            var _result;

	            if (_rel !== 'cxdialog') {return};

	            if (_rev === 'close') {
	                self.exit();

	            } else {
	                for (var i = 0, l = self.btnCache.length; i < l; i++) {
	                    if (self.btnCache[i].name === _rev && typeof self.btnCache[i].callback === 'function') {
	                        _result = self.btnCache[i].callback();
	                        break;
	                    };
	                };
	            };

	            if (_result !== false) {
	                self.exit();
	            };

	            return false;
	        });
	    };

	    dialog.format = function(opt, ok, no){
	        var self = this;
	        self.exit();

	        if (typeof opt === 'string' && !opt.length) {return};

	        if (typeof opt === 'string' || self.isElement(opt) || self.isJquery(opt) || self.isZepto(opt)) {
	            opt = {
	                info: opt
	            };
	        } else if (typeof opt !== 'object') {
	            return;
	        };

	        if (typeof ok === 'function') {opt.ok = ok};
	        if (typeof no === 'function') {opt.no = no};

	        opt = $.extend({}, $.cxDialog.defaults, opt);

	        self.dom.box.attr('class', 'cxdialog');

	        self.setContent(opt);
	        self.show(opt);
	    };

	    // 设置内容
	    dialog.setContent = function(opt){
	        var self = this;
	        var _timeStamp = new Date().getTime();

	        self.dom.box.empty();

	        // 设置标题
	        if (typeof opt.title === 'string' && opt.title.length) {
	            self.dom.title.html(opt.title).appendTo(self.dom.box);
	        };

	        self.infoCache = undefined;

	        // 设置文本内容
	        if (typeof opt.info === 'string' && opt.info.length) {
	            self.dom.info.html(opt.info).appendTo(self.dom.box);

	            // 设置内容为 DOM 元素或 jQuery 对象
	        } else if (self.isElement(opt.info) || self.isJquery(opt.info) || self.isZepto(opt.info)) {
	            var _cacheDom = self.isElement(opt.info) ? $(opt.info) : opt.info;
	            self.infoCache = {
	                dom: _cacheDom
	            };

	            var _style = _cacheDom.attr('style');

	            if (typeof _style === 'string' && _style.length) {
	                self.infoCache.styleText = _style;
	            };

	            self.dom.holder.css({
	                'float': _cacheDom.css('float'),
	                'display': _cacheDom.css('display'),
	                'visibility': _cacheDom.css('visibility'),
	                'position': _cacheDom.css('position'),
	                'width': _cacheDom.outerWidth(),
	                'height': _cacheDom.outerHeight()
	            }).insertAfter(_cacheDom);

	            _cacheDom.css('display', 'block').appendTo(self.dom.box);

	        } else {
	            opt.info = String(opt.info);
	            self.dom.info.html(opt.info).appendTo(self.dom.box);
	        };

	        // 设置按钮
	        self.btnCache = [];

	        if (typeof opt.ok === 'function') {
	            self.btnCache.push({
	                name: 'btn_ok',
	                className: 'btn_ok',
	                text: opt.okText,
	                callback: opt.ok
	            });
	        };
	        if (typeof opt.no === 'function') {
	            self.btnCache.push({
	                name: 'btn_no',
	                className: 'btn_no',
	                text: opt.noText,
	                callback: opt.no
	            });
	        };

	        for (var i = 0, l = opt.buttons.length; i < l; i++) {
	            self.btnCache.push({
	                name: 'btn_' + _timeStamp + '_' + i,
	                className: 'btn_' + i,
	                text: opt.buttons[i].text,
	                callback: opt.buttons[i].callback
	            });
	        };

	        if (self.btnCache.length) {
	            var _html = '';
	            for (var i = 0, l = self.btnCache.length; i < l; i++) {
	                _html += '<a class="' + self.btnCache[i].className + '" rel="cxdialog" rev="' + self.btnCache[i].name + '">' + self.btnCache[i].text + '</a>';
	            };
	            self.dom.btns.html(_html).appendTo(self.dom.box);
	        };

	        // 关闭按钮
	        if (opt.closeBtn) {
	            self.dom.closeBtn.appendTo(self.dom.box);
	        };
	    };

	    // 显示对话框
	    dialog.show = function(opt){
	        var self = this;

	        if (opt.lockScroll === true) {
	            self.dom.docHtml.addClass('cxdialog_lock');
	        };

	        if (typeof opt.background === 'string') {
	            self.dom.overlay.css('background', opt.background);
	        } else {
	            self.dom.overlay.css('display', 'none');
	        };

	        if (typeof opt.baseClass === 'string' && opt.baseClass.length) {
	            self.dom.box.addClass(opt.baseClass);
	        };

	        self.dom.box.removeAttr('style');

	        var _cssAttr = {};

	        // IE6 不支持 fixed，设置当前位置
	        if (self.isIE6) {
	            _cssAttr.top = document.documentElement.scrollTop + window.screen.availHeight / 4;
	        };

	        if (opt.width > 0) {
	            _cssAttr.width = opt.width;
	            _cssAttr.marginLeft = -(opt.width / 2);
	        } else {
	            _cssAttr.marginLeft = -(self.dom.box.outerWidth() / 2);
	        };

	        if (opt.height > 0) {
	            _cssAttr.height = opt.height;
	            _cssAttr.marginTop = -(opt.height / 2);
	        } else {
	            _cssAttr.marginTop = -(self.dom.box.outerHeight() / 2);
	        };

	        if (opt.zIndex > 0) {
	            _cssAttr.zIndex = opt.zIndex;
	        };

	        self.dom.box.css(_cssAttr).addClass('in');
	    };

	    // 归还加载的 DOM
	    dialog.backDom = function(){
	        var self = this;

	        if (self.infoCache && (self.isJquery(self.infoCache.dom) || self.isZepto(self.infoCache.dom))) {
	            if (typeof self.infoCache.styleText === 'string' && self.infoCache.styleText.length) {
	                self.infoCache.dom.attr('style', self.infoCache.styleText);
	            } else {
	                self.infoCache.dom.removeAttr('style');
	            };

	            self.infoCache.dom.insertAfter(self.dom.holder);

	            self.dom.holder.remove();
	        };

	        self.infoCache = undefined;
	    };

	    // 关闭对话框
	    dialog.exit = function(){
	        var self = this;

	        self.backDom();

	        self.btnCache = undefined;

	        self.dom.box.removeClass('in').addClass('out');
	        if (typeof $.cxDialog.defaults.background !== 'string') {
	            self.dom.overlay.css('display', '');
	        };
	        self.dom.docHtml.removeClass('cxdialog_lock');
	    };

	    $.cxDialog = function(){
	        dialog.format.apply(dialog, arguments);
	    };

	    $.cxDialog.close = function(){
	        dialog.exit.apply(dialog);
	    };

	    $.cxDialog.defaults = {
	        title: '',
	        info: '',
	        ok: null,
	        okText: '确 定',
	        no: null,
	        noText: '取 消',
	        buttons: [],
	        closeBtn: true,
	        lockScroll: false,
	        baseClass: '',
	        background: '',
	        width: 0,
	        height: 0
	    };

	    dialog.init();
	}));

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	var paragraphDefaultStyle = ' style="margin: 0px; padding: 0px; line-height: 1; font-family: \'Arial, MalgunGothic, AppleSDGothic\'; font-size: 12px;"';
	var cellBorderDefaultStyle = '1px solid #e6e6e6';

	module.exports = {
	    EDITOR_INFO : {
	        VERSION : '1.4.10',
	        HOMEPAGE : 'http://www.kukudocs.com'
	    },
	    CHANGE_STYLE : {
	        STRONG : "bold",
	        B : "bold",
	        I : "italic",
	        CITE : "italic",
	        EM : "italic",
	        VAR : "italic",
	        ADDRESS : "italic",
	        DFN : "italic",
	        U : "underline",
	        INS : "underline",
	        STRIKE : "line-through",
	        S : "line-through",
	        DEL : "line-through",
	        SUP : "super",
	        SUB : "sub"
	    },
	    NAME : {
	        FORM_NAME : 'formname',
	        UPLOAD_NAME : 'uploadfile',
	        UPLOAD_IMAGE_TYPE : 'image_type',
	        UPLOAD_IMAGE_BASE64_TYPE : 'image_base64_type',
	        UPLOAD_VIDEO_TYPE : 'video_type',
	        UPLOAD_FILE_TYPE : 'file_type',
	        UPLOAD_FLASH_TYPE : 'flash_type',
	        POST_IFRAME : 'postiframe'
	    },
	    ATTR : {
	        TABLE_SELECTED : "kk-selected-cell",

	        HREF : "href",
	        TITLE : "title",
	        ID : "id",
	        SRC : "src",
	        TARGET : "target",
	        CLASS : "class",
	        STYLE : "style",
	        TYPE : "type",
	        WIDTH : "width",
	        HEIGHT : "height",

	        SIZE : "size",
	        FACE : "face",
	        COLOR : "color",

	        DATA : "data",
	        VALUE : "value",

	        FILE_TYPE : "filedata",

	        PLUGINSPAGE : "pluginspage",

	        KK_TYPE : "kk_type",
	        ALIGN : "align",
	        ROWSPAN : "rowspan",
	        COLSPAN : "colspan",

	        CELL_COUNT : "cellCount",
	        CURRENT_WIDTH : 'currentWidth',
	        CURRENT_HEIGHT : 'currentHeight',

	        SUMMARY : 'summary',

	        VALIIGN : 'valign',

	        DATA_VIDEO_SOURCE : "videosource",
	        DATA_VIDEO_TYPE : 'videotype',
	        UPLOADING_IMAGE : 'uploadingimage',

	        CONTROLS : 'controls',
	        AUTO_START : 'autostart',
	        LOOP : 'loop',
	        SHOW_TRACKER : 'showtracker',
	        SHOW_STATUSBAR : 'showstatusbar',
	        SHOW_CONTROLS : 'showcontrols',
	        SHOW_AUDIO_CONTROLS : 'showaudiocontrols',
	        SHOW_DISPLAY : 'showdisplay',
	        SHOW_POSITION_CONTROLS : 'showpositioncontrols',
	        PLAY : 'play',
	        MENU : 'menu',
	        ALLOW_FULLSCREEN : 'allowfullscreen',

	        CONTENT_EDIT_ABLE : 'contenteditable'
	    },

	    ATTR_VALUE : {
	        KK_IMAGE : "kk_type_image",
	        KK_HYPERLINK : "kk_type_hyperlink",
	        KK_TYPE_BOOKMARK : "kk_type_bookmark",
	        KK_REISZE_COL : "kk-resize-col",
	        KK_REISZE_ROW : "kk-resize-row",
	        KK_VIDEO : "kk_type_video",

	        KK_FILE : "kk_type_file",

	        KK_LAYER : "kk_type_layer",

	        KK_FLASH_TYPE : "application/x-shockwave-flash",
	        KK_FLASH_PLUGIN : "http://www.macromedia.com/go/getflashplayer",

	        KK_VIDEO_TYPE : "application/x-mplayer2",
	        KK_VIDEO_PLUGIN : "http://www.microsoft.com/windows/windowsmedia/download/",

	        KK_FIND_DIRECTION : 'direction'

	    },

	    WIDGET_CLASS : {
	        UI_FIND_REPLACE : 'ui_find_replace_box',
	        UI_ACTIVE : 'ui_active',
	        UI_SELECT_LIST : 'ui_select_list',
	        UI_COMBO_BOX : 'ui_combobox',
	        UI_COLOR_PICKER : 'ui_colorpicker',
	        UI_TABLE_PICKER : 'ui_tablepicker',
	        UI_LIST_PICKER : 'ui_listpicker',
	        UI_CUSTOM_BOX : 'ui_custombox'
	    },

	    CLASS : {
	        KKEDITOR : "kk_editor",
	        EDITOR_TOOLBAR : "kk_editor_toolbar",
	        EDITOR_TOOLBAR_MENUS : "menus",
	        EDITOR_TOOLBAR_MENU : "menu",
	        EDITOR_TOOLBAR_MENU_BUTTON : "menu_button",
	        EDITOR_TOOLBAR_MENU_SELECTBOX : "menu_selectbox",
	        EDITOR_TOOLBAR_MENU_COMBOBOX : "menu_combobox",
	        EDITOR_TOOLBAR_MENU_COLORPICKER : "menu_colorpicker",
	        EDITOR_TOOLBAR_MENU_LISTPICKER : "menu_listpicker",
	        EDITOR_TOOLBAR_MENU_TABLEPICKER : "menu_tablepicker",
	        EDITOR_TOOLBAR_MENU_CUSTOMBOX : "menu_custombox",
	        EDITOR_TOOLBAR_MENU_FINDREPLACEBOX : "menu_findreplacebox",

	        EDITOR_TOOLBAR_DISABLED : "kk_editor_toolbar_disabled",
	        EDITOR_CONTEXT_MENU : "kk_context_menu",


	        EDITOR_FOOTER : "kk_editor_footer",
	        EDITOR_FOOTER_DISABLED : "footer_disabled",
	        EDITOR_FOOTER_RESIZE_BAR : "vertical_resize",
	        EDITOR_FOOTER_MENUS : "change_mode_menus",
	        EDITOR_FOOTER_MENU : "mode_menu",
	        EDITOR_FOOTER_MENU_EDITOR : "kk_menu_editor",
	        EDITOR_FOOTER_MENU_HTML : "kk_menu_html",
	        EDITOR_FOOTER_MENU_TEXT : "kk_menu_text",
	        EDITOR_FOOTER_MENU_PREVIEW : "kk_menu_preview",

	        EDITOR_FOOTER_MENU_ACTIVE : "kk_footer_menu_active",


	        EDITOR_VIEW : "kk_editView",

	        MAIN_VIEW : "kk_view",
	        VIEW_HIDE : "kk_view_hide",

	        CONTENT_VIEW : "kk_contentView",
	        CONTENTS : "kk_contents",

	        HTML_VIEW : "kk_htmlView",
	        HTML_CONTENTS : "kk_htmlContents",

	        TEXT_VIEW : "kk_textView",
	        TEXT_CONTENTS : "kk_textContents",

	        PRE_VIEW : "kk_preView",
	        PREVIEW_CONTENTS : "kk_previewContents",

	        BLUR : "dpblur",
	        FIELD : "field",
	        DIALOG : "kk_editor_dialog",
	        DIALOG_DIALOG_MAIN : "kk_dialog",
	        DIALOG_HYPERLINK : "kk_dialog_hyperlink",
	        DIALOG_HYPERLINK_TEXT : "link_text",
	        DIALOG_HYPERLINK_URL : "link_url",

	        DIALOG_FILE_OPEN : "kk_dialog_file_open",

	        DIALOG_TEXT_PASTE : "kk_dialog_text_paste",
	        DIALOG_SYMBOLS : "kk_dialog_symbols",
	        DIALOG_BACKGROUND_IMAGE : "kk_dialog_background_image",
	        DIALOG_IMAGE : "kk_dialog_image",
	        DIALOG_VIDEO : "kk_dialog_video",
	        DIALOG_FILE : "kk_dialog_file",
	        DIALOG_EMOTICON : "kk_dialog_emoticon",
	        DIALOG_LAYER : "kk_dialog_layer",

	        DIALOG_UPPER_LOWER : "kk_dialog_upper_lower",
	        DIALOG_BLOCK_QUOTE : "kk_dialog_blockquote",

	        DIALOG_PARAGRAPH : "kk_dialog_paragraph",
	        DIALOG_DATE_FORMAT : "kk_dialog_date_format",
	        DIALOG_BOOKMARK : "kk_dialog_bookmark",
	        DIALOG_TABLE : "kk_dialog_table",
	        DIALOG_CELL : "kk_dialog_cell",

	        DIALOG_LAYOUT : "kk_dialog_layout",

	        DIALOG_SETTING : "kk_dialog_setting",
	        DIALOG_ABOUT : "kk_dialog_about",

	        ABOUT_LOGO : "kk_about_logo",
	        ABOUT_EDITOR_TITLE_COMPANY_NAME : "kk_editor_company_name",
	        ABOUT_EDITOR_TITLE_SUB_NAME : "kk_editor_sub_name",

	        ABOUT_EDITOR_INFORMATION_WRAPPER : "kk_editor_about_information_wrapper",
	        ABOUT_EDITOR_INFORMATION_TABLE : "kk_editor_about_information_table",
	        ABOUT_EDITOR_INFORMATION_LINE : "kk_editor_about_information_line",

	        DIALOG_HEADER : "kk_dialog_header",
	        DIALOG_CONTENTS : "kk_dialog_contents",
	        DIALOG_FOOTER : "kk_dialog_footer",
	        DIALOG_TITLE : "kk_dialog_title",
	        DIALOG_CLOSE : "kk_dialog_close",
	        DIALOG_BUTTONS : "kk_dialog_buttons",
	        DIALOG_BUTTON : "kk_dialog_button",
	        DIALOG_BUTTON_DISABLED : "disabled_button",

	        OK_BUTTON : 'ok_button',
	        CANCEL_BUTTON : 'cancel_button',
	        DELETE_BUTTON : 'delete_button',

	        FULL_SCREEN : "kk_fullscreen",

	        SELECTED : "selected",
	        SELECTED_TD : "selected_td",
	        SELECTED_TABLE : "selected_table",
	        SELECTED_SYMBOL : "selected_symbol",

	        TABLE_RESIZE_COL : "kk_resize_col_bar",
	        TABLE_RESIZE_ROW : "kk_resize_row_bar",

	        PAGE_BREAK : "kk_page_break",

	        PREFIX : "kuku",
	        TEMP_IMAGE_UPLOAD : "imageUpload",
	        HIDE : "hide",
	        DISABLED : "kk_disabled",

	        TEXT_PASTE_CONTENTS : 'kk_text_paste_contents',



	        SMART_SPINNER : "smartspinner",
	        SMART_SPINNER_CUSTOM : "spinner_custom",
	        PARAGRAPH_MARGIN_LEFT : "kk_paragraph_margin_left",
	        PARAGRAPH_MARGIN_RIGHT : "kk_paragraph_margin_right",
	        PARAGRAPH_MARGIN_TOP : "kk_paragraph_margin_top",
	        PARAGRAPH_MARGIN_BOTTOM : "kk_paragraph_margin_bottom",
	        PARAGRAPH_LETTER_SPACING : "kk_paragraph_letter_spacing",
	        PARAGRAPH_WORD_SPACING : "kk_paragraph_word_spacing",


	        FILE_OPEN_PATH_WRAPPER : "kk_file_open_path_wrapper",
	        FILE_OPEN_PATH_LABEL : "kk_file_open_path_label",
	        FILE_OPEN_PATH_INPUT : "kk_file_open_path_input",
	        FILE_OPEN_INPUT_LABEL : "kk_file_open_input_label",
	        FILE_OPEN_INPUT : "kk_file_open_input",
	        FILE_OPEN_VALID_WRAPPER : "kk_file_open_valid_wrapper",

	        FILE_OPEN_ENCODING_WRAPPER : "kk_file_open_encoding_wrapper",
	        FILE_OPEN_ENCODING_LABEL : "kk_file_open_encoding_label",
	        FILE_OPEN_ENCODING_SELECTION : "kk_file_open_encoding_selection",




	        DATE_FORMAT_LIST : 'kk_date_format_list',
	        DATE_FORMAT_ITEM : 'kk_date_format_item',
	        DATE_FORMAT_ITEM_SELECTED : 'date_format_item_selected',


	        BOOKMARK_EDIT_AREA : 'kk_bookmark_edit_area',
	        BOOKMARK_EDIT_AREA_WRAP : 'kk_bookmark_edit_area_wrap',
	        BOOKMARK_EDIT_LABEL : 'kk_bookmark_edit_label',
	        BOOKMARK_EDIT_INPUT : 'kk_bookmark_edit_input',
	        BOOKMARK_BUTTON : 'kk_bookmark_button',
	        BOOKMARK_BUTTON_ADD : 'kk_bookmark_button_add',
	        BOOKMARK_BUTTON_MODIFY : 'kk_bookmark_button_modify',
	        BOOKMARK_BUTTON_DELETE : 'kk_bookmark_button_delete',
	        BOOKMARK_BUTTON_DISABLED : 'kk_bookmark_button_disabled',

	        BOOKMARK_LIST_AREA : 'kk_bookmark_list_area',
	        BOOKMARK_LIST_AREA_WRAP : 'kk_bookmark_list_area_wrap',
	        BOOKMARK_LIST_AREA_LABEL_WRAP : 'kk_bookmark_list_area_label_wrap',
	        BOOKMARK_LIST : 'kk_bookmark_list',
	        BOOKMARK_LIST_ITEM : 'kk_bookmark_list_item',
	        SELECTED_BOOKMARK : 'selected_bookmark',

	        KK_BOOKMARK_VIEW : 'kk_bookmark_view',




	        HYPERLINK_TYPE_WRAP : 'kk_hyperlink_type_wrap',
	        HYPERLINK_TYPE_LABEL : 'kk_hyperlink_type_label',
	        HYPERLINK_TYPE_SELECT : 'kk_hyperlink_type_select',

	        HYPERLINK_TYPE_URL_WRAP : 'kk_hyperlink_type_url_wrap',

	        HYPERLINK_TYPE_URL_LABEL_WRAP : 'kk_hyperlink_type_url_label_wrap',
	        HYPERLINK_TYPE_URL_INPUT_WRAP : 'kk_hyperlink_type_url_input_wrap',
	        HYPERLINK_TYPE_URL_PLUGIN_SEPARATE : 'url_input_plugin_separate',

	        HYPERLINK_TYPE_URL_LABEL : 'kk_hyperlink_type_url_label',
	        HYPERLINK_TYPE_URL_TEXT : 'kk_hyperlink_type_url_text',
	        HYPERLINK_TYPE_URL_TITLE : 'kk_hyperlink_type_url_title',
	        HYPERLINK_TYPE_URL_TARGET : 'kk_hyperlink_type_url_target',
	        HYPERLINK_TYPE_URL_ID : 'kk_hyperlink_type_url_id',
	        HYPERLINK_TYPE_URL_CLASS : 'kk_hyperlink_type_url_class',

	        HYPERLINK_TYPE_URL_INPUT : 'kk_hyperlink_type_url_input',
	        HYPERLINK_TYPE_URL_TEXT_INPUT : 'kk_hyperlink_type_url_text_input',
	        HYPERLINK_TYPE_URL_TITLE_INPUT : 'kk_hyperlink_type_url_title_input',
	        HYPERLINK_TYPE_URL_TARGET_SELECT : 'kk_hyperlink_type_url_target_select',
	        HYPERLINK_TYPE_URL_ID_INPUT : 'kk_hyperlink_type_url_id_input',
	        HYPERLINK_TYPE_URL_CLASS_INPUT : 'kk_hyperlink_type_url_class_input',


	        HYPERLINK_TYPE_BOOKMARK_WRAP : 'kk_hyperlink_type_bookmark_wrap',
	        HYPERLINK_TYPE_BOOKMARK_LABEL_WRAP : 'kk_hyperlink_type_bookmark_label_wrap',
	        HYPERLINK_TYPE_BOOKMARK_INPUT_WRAP : 'kk_hyperlink_type_bookmark_input_wrap',

	        HYPERLINK_TYPE_BOOKMARK_TEXT_LABEL : 'kk_hyperlink_type_bookmark_text_label',
	        HYPERLINK_TYPE_BOOKMARK_LIST_LABEL : 'kk_hyperlink_type_bookmark_list_label',

	        HYPERLINK_TYPE_BOOKMARK_TEXT_INPUT : 'kk_hyperlink_type_bookmark_text_input',
	        HYPERLINK_TYPE_BOOKMARK_LIST_SELECT : 'kk_hyperlink_type_bookmark_list_select',



	        TABLE_DIALOG_TAB_MENUS : 'kk_table_dialog_tab_menus',
	        TABLE_DIALOG_TAB_MENU_ITEM : 'kk_table_dialog_tab_menu_item',
	        TABLE_DIALOG_TAB_MENU_COMMON : 'kk_table_dialog_tab_menu_common',
	        TABLE_DIALOG_TAB_MENU_BACKGROUND : 'kk_table_dialog_tab_menu_background',
	        TABLE_DIALOG_TAB_MENU_TAMPLATE : 'kk_table_dialog_tab_menu_template',
	        TABLE_DIALOG_TAB_MENU_ON : 'kk_table_dialog_tab_menu_on',

	        TABLE_DIALOG_TAB_CONTENTS : 'kk_table_dialog_tab_menu_contents',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON : 'kk_table_dialog_tab_menu_contents_common',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND : 'kk_table_dialog_tab_menu_contents_background',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE : 'kk_table_dialog_tab_menu_contents_template',

	        TABLE_DIALOG_TAB_CONTENTS_ON : 'kk_table_dialog_tab_menu_contents_on',

	        TABLE_DIALOG_TAB_CONTENTS_COMMON_PROPERTY_FIELD : 'kk_table_dialog_tab_menu_contents_common_property_field',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_BORDER_FIELD : 'kk_table_dialog_tab_menu_contents_common_border_field',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_CAPTION_FIELD : 'kk_table_dialog_tab_menu_contents_common_caption_field',

	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_SET : 'kk_table_dialog_tab_menu_contents_common_table_set',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_LABEL : 'kk_table_dialog_tab_menu_contents_common_table_td_label',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_td_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_CHECK : 'kk_table_dialog_tab_menu_contents_common_table_td_check',

	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ROW_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_row_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_COL_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_col_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_WIDTH_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_width_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_HEIGHT_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_height_input',

	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_MARGIN_LEFT_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_margin_left_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ALIGN_SELECT : 'kk_table_dialog_tab_menu_contents_common_table_align_select',

	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ID_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_id_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_CLASS_INPUT : 'kk_table_dialog_tab_menu_contents_common_table_class_input',
	        TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_SEPARATE_CHECK : 'kk_table_dialog_tab_menu_contents_common_table_separate_check',


	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_SET : 'kk_table_dialog_tab_menu_contents_border_table_set',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_LABEL : 'kk_table_dialog_tab_menu_contents_border_table_td_label',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_INPUT : 'kk_table_dialog_tab_menu_contents_border_table_td_input',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_WRAP: 'kk_table_dialog_tab_menu_contents_border_type_wrap',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM: 'kk_table_dialog_tab_menu_contents_border_type_item',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_LABEL: 'kk_table_dialog_tab_menu_contents_border_type_label',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_SOLID: 'kk_table_dialog_tab_menu_contents_border_type_solid',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOUBLE: 'kk_table_dialog_tab_menu_contents_border_type_double',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DASHED: 'kk_table_dialog_tab_menu_contents_border_type_dashed',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOTTED: 'kk_table_dialog_tab_menu_contents_border_type_dotted',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE: 'kk_table_dialog_tab_menu_contents_border_type_none',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE_LABEL: 'kk_table_dialog_tab_menu_contents_border_type_none_label',

	        BORDER_ITEM_SELECTED: 'border_item_selected',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BORDER_COLOR_PICKER : 'kk_table_dialog_tab_menu_contents_border_table_border_color_picker',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BORDER_WIDTH_INPUT : 'kk_table_dialog_tab_menu_contents_border_table_border_width_input',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_CELL_SPACING_INPUT : 'kk_table_dialog_tab_menu_contents_border_table_cell_spacing_input',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_CELL_PADDING_INPUT : 'kk_table_dialog_tab_menu_contents_border_table_cell_padding_input',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_WRAP: 'kk_table_dialog_tab_menu_contents_border_line_wrap',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU: 'kk_table_dialog_tab_menu_contents_border_line_menu',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ITEM: 'kk_table_dialog_tab_menu_contents_border_line_menu_item',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_OUTLINE: 'kk_table_dialog_tab_menu_contents_border_line_menu_outline',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_INNER: 'kk_table_dialog_tab_menu_contents_border_line_menu_inner',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ALL: 'kk_table_dialog_tab_menu_contents_border_line_menu_all',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_LABEL: 'kk_table_dialog_tab_menu_contents_border_line_menu_label',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER: 'kk_table_dialog_tab_menu_contents_border_line_controller',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_TABLE: 'kk_table_dialog_tab_menu_contents_border_line_controller_table',


	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_WRAP : 'kk_table_dialog_tab_menu_contents_border_line_controller_wrap',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS: 'kk_table_dialog_tab_menu_contents_border_line_controller_buttons',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_TOP: 'kk_table_dialog_tab_menu_contents_border_line_controller_left_top',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_MIDDLE: 'kk_table_dialog_tab_menu_contents_border_line_controller_left_middle',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_BOTTOM: 'kk_table_dialog_tab_menu_contents_border_line_controller_left_bottom',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_LEFT: 'kk_table_dialog_tab_menu_contents_border_line_controller_bottom_left',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_CENTER: 'kk_table_dialog_tab_menu_contents_border_line_controller_bottom_center',
	        TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_RIGHT: 'kk_table_dialog_tab_menu_contents_border_line_controller_bottom_right',


	        TABLE_DIALOG_TAB_CONTENTS_CAPTION_TABLE_SET : 'kk_table_dialog_tab_menu_contents_caption_table_set',
	        TABLE_DIALOG_TAB_CONTENTS_CAPTION_TABLE_TD_LABEL : 'kk_table_dialog_tab_menu_contents_caption_table_td_label',
	        TABLE_DIALOG_TAB_CONTENTS_CAPTION_TABLE_TD_INPUT : 'kk_table_dialog_tab_menu_contents_caption_table_td_input',

	        TABLE_DIALOG_TAB_CONTENTS_TABLE_CAPTION_INPUT : 'kk_table_dialog_tab_menu_contents_caption_input',
	        TABLE_DIALOG_TAB_CONTENTS_TABLE_SUMMARY_INPUT : 'kk_table_dialog_tab_menu_contents_summary_input',

	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_PROPERTY_FIELD : 'kk_table_dialog_tab_menu_contents_background_property_field',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_SET : 'kk_table_dialog_tab_menu_contents_background_table_set',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_LABEL : 'kk_table_dialog_tab_menu_contents_background_table_td_label',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_INPUT : 'kk_table_dialog_tab_menu_contents_background_table_td_input',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_ATTACHMENT_SELECT : 'kk_table_dialog_tab_menu_contents_background_attachment_select',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_REPEAT_SELECT : 'kk_table_dialog_tab_menu_contents_background_repeat_select',

	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_X_INPUT : 'kk_table_dialog_tab_menu_contents_background_position_x_input',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_Y_INPUT : 'kk_table_dialog_tab_menu_contents_background_position_y_input',

	        TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BACKGROUND_COLOR_PICKER : 'kk_table_dialog_tab_menu_contents_border_table_background_color_picker',

	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_FIELD : 'kk_table_dialog_tab_menu_contents_background_header_field',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_SCOPE_WRAP : 'kk_table_dialog_tab_menu_contents_background_scope_wrap',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_SCOPE_CHECK : 'kk_table_dialog_tab_menu_contents_background_scope_check',

	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_WRAP : 'kk_table_dialog_tab_menu_contents_background_header_wrap',
	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM : 'kk_table_dialog_tab_menu_contents_background_header_item',
	        TABLE_BACKGROUND_HEADER_ITEM_SELECTED : 'background_header_item_selected',
	        TABLE_BACKGROUND_HEADER_NONE : 'background_header_item_none',
	        TABLE_BACKGROUND_HEADER_LEFT : 'background_header_item_left',
	        TABLE_BACKGROUND_HEADER_TOP : 'background_header_item_top',
	        TABLE_BACKGROUND_HEADER_LEFT_TOP : 'background_header_item_left_top',

	        TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM_LABEL : 'kk_table_dialog_tab_menu_contents_background_header_item_label',


	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_PROPERTY_FIELD : 'kk_table_template_property_field',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_SET : 'kk_table_template_set',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_TD_LABEL : 'kk_table_template_td_label',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_TD_INPUT : 'kk_table_template_td_input',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_ROW_INPUT : 'kk_table_template_row_input',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_COL_INPUT : 'kk_table_template_col_input',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_WIDTH_INPUT : 'kk_table_template_width_input',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_HEIGHT_INPUT : 'kk_table_template_height_input',

	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_FIELD : 'kk_table_template_header_field',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_SCOPE_WRAP : 'kk_table_template_scope_wrap',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_SCOPE_CHECK : 'kk_table_template_scope_check',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_WRAP : 'kk_table_template_header_wrap',

	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_ITEM : 'kk_table_template_header_item',
	        TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_ITEM_LABEL : 'kk_table_template_header_item_label',

	        TABLE_TEMPLATE_ITEM_SELECTED : 'template_header_item_selected',

	        TABLE_TEMPLATE_HEADER_ITEM : 'template_header_item',













	        CELL_DIALOG_TAB_MENUS : 'kk_cell_dialog_tab_menus',
	        CELL_DIALOG_TAB_MENU_ITEM : 'kk_cell_dialog_tab_menu_item',
	        CELL_DIALOG_TAB_MENU_COMMON : 'kk_cell_dialog_tab_menu_common',
	        CELL_DIALOG_TAB_MENU_BACKGROUND : 'kk_cell_dialog_tab_menu_background',
	        CELL_DIALOG_TAB_MENU_ON : 'kk_cell_dialog_tab_menu_on',

	        CELL_DIALOG_TAB_CONTENTS : 'kk_cell_dialog_tab_menu_contents',
	        CELL_DIALOG_TAB_CONTENTS_COMMON : 'kk_cell_dialog_tab_menu_contents_common',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND : 'kk_cell_dialog_tab_menu_contents_background',
	        CELL_DIALOG_TAB_CONTENTS_ON : 'kk_cell_dialog_tab_menu_contents_on',

	        CELL_DIALOG_TAB_CONTENTS_COMMON_PROPERTY_FIELD : 'kk_cell_dialog_tab_menu_contents_common_property_field',
	        CELL_DIALOG_TAB_CONTENTS_COMMON_HEADER_FIELD : 'kk_cell_dialog_tab_menu_contents_common_header_field',
	        CELL_DIALOG_TAB_CONTENTS_COMMON_BORDER_FIELD : 'kk_cell_dialog_tab_menu_contents_common_border_field',


	        CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_SET : 'kk_cell_dialog_tab_menu_contents_common_cell_set',
	        CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_TD_LABEL : 'kk_cell_dialog_tab_menu_contents_common_cell_td_label',
	        CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_TD_INPUT : 'kk_cell_dialog_tab_menu_contents_common_cell_td_input',


	        CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_VERTICAL_ALIGN_SELECT : 'kk_cell_dialog_tab_menu_contents_common_cell_vertical_align_select',
	        CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_ALIGN_SELECT : 'kk_cell_dialog_tab_menu_contents_common_cell_align_select',
	        CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_WHITE_SPACE_SELECT : 'kk_cell_dialog_tab_menu_contents_common_cell_white_space_select',



	        CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_SET : 'kk_cell_dialog_tab_menu_contents_header_cell_set',
	        CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_TD_LABEL : 'kk_cell_dialog_tab_menu_contents_header_cell_td_label',
	        CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_TD_INPUT : 'kk_cell_dialog_tab_menu_contents_header_cell_td_input',

	        CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_HEADER_SELECT : 'kk_cell_dialog_tab_menu_contents_header_cell_header_select',
	        CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_SCOPE_SELECT : 'kk_cell_dialog_tab_menu_contents_header_cell_scope_select',


	        CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_SET : 'kk_cell_dialog_tab_menu_contents_border_cell_set',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_LABEL : 'kk_cell_dialog_tab_menu_contents_border_cell_td_label',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_INPUT : 'kk_cell_dialog_tab_menu_contents_border_cell_td_input',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_WRAP: 'kk_cell_dialog_tab_menu_contents_border_type_wrap',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM: 'kk_cell_dialog_tab_menu_contents_border_type_item',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_LABEL: 'kk_cell_dialog_tab_menu_contents_border_type_label',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_SOLID: 'kk_cell_dialog_tab_menu_contents_border_type_solid',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOUBLE: 'kk_cell_dialog_tab_menu_contents_border_type_double',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DASHED: 'kk_cell_dialog_tab_menu_contents_border_type_dashed',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOTTED: 'kk_cell_dialog_tab_menu_contents_border_type_dotted',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE: 'kk_cell_dialog_tab_menu_contents_border_type_none',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE_LABEL: 'kk_cell_dialog_tab_menu_contents_border_type_none_label',

	        CELL_BORDER_ITEM_SELECTED: 'cell_border_item_selected',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BORDER_COLOR_PICKER : 'kk_cell_dialog_tab_menu_contents_border_cell_border_color_picker',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BORDER_WIDTH_INPUT : 'kk_cell_dialog_tab_menu_contents_border_cell_border_width_input',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_WRAP: 'kk_cell_dialog_tab_menu_contents_border_line_wrap',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU: 'kk_cell_dialog_tab_menu_contents_border_line_menu',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ITEM: 'kk_cell_dialog_tab_menu_contents_border_line_menu_item',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_OUTLINE: 'kk_cell_dialog_tab_menu_contents_border_line_menu_outline',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_LABEL: 'kk_cell_dialog_tab_menu_contents_border_line_menu_label',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER: 'kk_cell_dialog_tab_menu_contents_border_line_controller',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_WRAP : 'kk_cell_dialog_tab_menu_contents_border_line_controller_wrap',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_CELL: 'kk_cell_dialog_tab_menu_contents_border_line_controller_cell',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS: 'kk_cell_dialog_tab_menu_contents_border_line_controller_buttons',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_TOP: 'kk_cell_dialog_tab_menu_contents_border_line_controller_left_top',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_BOTTOM: 'kk_cell_dialog_tab_menu_contents_border_line_controller_left_bottom',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_LEFT: 'kk_cell_dialog_tab_menu_contents_border_line_controller_bottom_left',
	        CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_RIGHT: 'kk_cell_dialog_tab_menu_contents_border_line_controller_bottom_right',


	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_PROPERTY_FIELD : 'kk_cell_dialog_tab_menu_contents_background_property_field',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_SET : 'kk_cell_dialog_tab_menu_contents_background_cell_set',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_LABEL : 'kk_cell_dialog_tab_menu_contents_background_cell_td_label',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_INPUT : 'kk_cell_dialog_tab_menu_contents_background_cell_td_input',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_ATTACHMENT_SELECT : 'kk_cell_dialog_tab_menu_contents_background_attachment_select',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_REPEAT_SELECT : 'kk_cell_dialog_tab_menu_contents_background_repeat_select',

	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_X_INPUT : 'kk_cell_dialog_tab_menu_contents_background_position_x_input',
	        CELL_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_Y_INPUT : 'kk_cell_dialog_tab_menu_contents_background_position_y_input',

	        CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BACKGROUND_COLOR_PICKER : 'kk_cell_dialog_tab_menu_contents_border_cell_background_color_picker',


	        IMAGE_DIALOG_TAB_MENUS : 'kk_image_dialog_tab_menus',
	        IMAGE_DIALOG_TAB_MENU_ITEM : 'kk_image_dialog_tab_menu_item',
	        IMAGE_DIALOG_TAB_MENU_COMMON : 'kk_image_dialog_tab_menu_common',
	        IMAGE_DIALOG_TAB_MENU_HYPERLINK : 'kk_image_dialog_tab_menu_hyperlink',
	        IMAGE_DIALOG_TAB_MENU_ON : 'kk_image_dialog_tab_menu_on',

	        IMAGE_DIALOG_TAB_CONTENTS : 'kk_image_dialog_tab_menu_contents',
	        IMAGE_DIALOG_TAB_CONTENTS_COMMON : 'kk_image_dialog_tab_menu_contents_common',
	        IMAGE_DIALOG_TAB_CONTENTS_HYPERLINK : 'kk_image_dialog_tab_menu_contents_hyperlink',
	        IMAGE_DIALOG_TAB_CONTENTS_ON : 'kk_image_dialog_tab_menu_contents_on',

	        IMAGE_DIALOG_TABLE_TD_LABEL : 'kk_image_dialog_table_td_label',
	        IMAGE_DIALOG_TABLE_TD_INPUT : 'kk_image_dialog_table_td_input',

	        IMAGE_DIALOG_TAB_CONTENTS_PATH_PROPERTY_FIELD : 'kk_image_dialog_tab_menu_contents_path_property_field',
	        IMAGE_DIALOG_TAB_CONTENTS_PATH_TABLE_SET : 'kk_image_dialog_tab_menu_contents_path_table_set',

	        IMAGE_DIALOG_IMAGE_TITLE_INPUT : 'kk_image_dialog_common_image_title_input',
	        IMAGE_DIALOG_IMAGE_ALT_INPUT : 'kk_image_dialog_common_image_alt_input',


	        IMAGE_DIALOG_TAB_CONTENTS_STYLE_PROPERTY_FIELD : 'kk_image_dialog_tab_menu_contents_style_property_field',
	        IMAGE_DIALOG_TAB_CONTENTS_STYLE_TABLE_SET : 'kk_image_dialog_tab_menu_contents_style_table_set',

	        IMAGE_DIALOG_IMAGE_WIDTH_INPUT : 'kk_image_dialog_common_image_width_input',
	        IMAGE_DIALOG_IMAGE_HEIGHT_INPUT : 'kk_image_dialog_common_image_height_input',
	        IMAGE_DIALOG_IMAGE_MARGIN_LEFT_INPUT : 'kk_image_dialog_common_image_margin_left_input',
	        IMAGE_DIALOG_IMAGE_MARGIN_RIGHT_INPUT : 'kk_image_dialog_common_image_margin_right_input',
	        IMAGE_DIALOG_IMAGE_MARGIN_TOP_INPUT : 'kk_image_dialog_common_image_margin_top_input',
	        IMAGE_DIALOG_IMAGE_MARGIN_BOTTOM_INPUT : 'kk_image_dialog_common_image_margin_bottom_input',

	        IMAGE_DIALOG_IMAGE_ALIGN_SELECT : 'kk_image_dialog_common_image_align_select',

	        IMAGE_DIALOG_IMAGE_ID_INPUT : 'kk_image_dialog_common_image_id_input',
	        IMAGE_DIALOG_IMAGE_CLASS_INPUT : 'kk_image_dialog_common_image_class_input',

	        IMAGE_DIALOG_IMAGE_BORDER_SELECT : 'kk_image_dialog_common_image_border_select',
	        IMAGE_DIALOG_IMAGE_BORDER_WIDTH_INPUT : 'kk_image_dialog_common_image_border_width_input',
	        IMAGE_DIALOG_IMAGE_BORDER_COLOR_PICKER : 'kk_image_dialog_common_image_border_color_picker',

	        IMAGE_DIALOG_IMAGE_ORIGINAL_SIZE_CHECK : 'kk_image_dialog_common_image_original_size_check',
	        IMAGE_DIALOG_IMAGE_NEXT_INSERT_CHECK : 'kk_image_dialog_common_image_next_insert_check',


	        VIDEO_TYPE_WRAP : 'kk_video_type_wrap',
	        VIDEO_TYPE_LABEL : 'kk_video_type_label',
	        VIDEO_TYPE_SELECT : 'kk_video_type_select',


	        VIDEO_TYPE_FILE_CONTENTS : 'kk_video_type_file_contents',
	        VIDEO_TYPE_SOURCE_CONTENTS : 'kk_video_type_source_contents',
	        VIDEO_CONTENTS_ON : 'kk_video_contents_on',


	        VIDEO_TYPE_FILE_CONTENTS_SET : 'kk_video_type_file_contents_set',
	        VIDEO_TYPE_FILE_LABEL_WRAP : 'kk_video_type_file_label_wrap',
	        VIDEO_TYPE_FILE_INPUT_WRAP : 'kk_video_type_file_input_wrap',
	        VIDEO_WIDTH_INPUT : 'kk_video_type_file_width',
	        VIDEO_HEIGHT_INPUT : 'kk_video_type_file_height',

	        VIDEO_TYPE_FILE_OPTIONS_SET : 'kk_video_type_file_options_set',
	        VIDEO_TYPE_FILE_OPTIONS_CHECK_INPUT_WRAP : 'kk_video_type_file_options_check_input_wrap',

	        VIDEO_AUTO_PLAY_CHECK : 'kk_video_type_auto_play_check',
	        VIDEO_INFINITY_LOOP_CHECK : 'kk_video_type_infinity_loop_check',
	        VIDEO_SHOW_TRACKER_CHECK : 'kk_video_type_show_tracker_check',
	        VIDEO_SHOW_STATUS_CHECK : 'kk_video_type_show_status_check',
	        VIDEO_SHOW_CONTROLS_CHECK : 'kk_video_type_show_controls_check',
	        VIDEO_SHOW_VOLUME_CHECK : 'kk_video_type_show_volume_check',
	        VIDEO_SHOW_DISPLAY_CHECK : 'kk_video_type_show_display_check',
	        VIDEO_SHOW_POSITION_CHECK : 'kk_video_type_show_position_check',

	        VIDEO_TYPE_FILE_CONTENTS_SEPARATE : 'url_input_plugin_separate',

	        VIDEO_TYPE_SOURCE_SET : 'kk_video_type_source_set',
	        VIDEO_TYPE_SOURCE_TEXTAREA : 'kk_video_type_source_textarea',


	        SETTING_PAGE_TITLE_WRAPPER : 'kk_setting_page_title_wrapper',
	        SETTING_PAGE_TITLE_LABEL : 'kk_setting_page_title_label',
	        SETTING_PAGE_TITLE_INPUT : 'kk_setting_page_title_input',

	        SETTING_PAGE_ENCODING_WRAPPER : 'kk_setting_encoding_wrapper',
	        SETTING_PAGE_ENCODING_LABEL : 'kk_setting_encoding_label',
	        SETTING_PAGE_ENCODING_SELECTION : 'kk_setting_encoding_selection',
	        SETTING_PAGE_ENCODING_INPUT : 'kk_setting_encoding_input',

	        SETTING_PAGE_LANGUAGE_WRAPPER : 'kk_setting_language_wrapper',
	        SETTING_PAGE_LANGUAGE_LABEL : 'kk_setting_language_label',
	        SETTING_PAGE_LANGUAGE_SELECTION : 'kk_setting_language_selection',

	        SETTING_PAGE_DOCUMENT_TYPE_WRAPPER : 'kk_setting_document_type_wrapper',
	        SETTING_PAGE_DOCUMENT_TYPE_LABEL : 'kk_setting_document_type_label',
	        SETTING_PAGE_DOCUMENT_TYPE_SELECTION : 'kk_setting_document_type_selection',


	        SETTING_PAGE_AUTO_SAVE_WRAPPER : 'kk_setting_auto_save_wrapper',
	        SETTING_PAGE_AUTO_SAVE_LABEL : 'kk_setting_auto_save_label',
	        SETTING_PAGE_AUTO_SAVE_CHECKBOX : 'kk_setting_auto_save_checkbox',
	        SETTING_PAGE_AUTO_SAVE_MINUTE_INPUT : 'kk_setting_auto_save_input',




	        DIALOG_AUTO_SAVE_LOAD_OPEN : "kk_dialog_auto_save_load",
	        AUTO_SAVE_LOAD_INFO_WRAPPER : "kk_dialog_auto_save_load_info_wrapper",
	        AUTO_SAVE_LOAD_INFO_LIST : "kk_dialog_auto_save_load_info_list",
	        AUTO_SAVE_LOAD_INFO_LIST_NAME : "kk_dialog_auto_save_load_info_list_name",

	        AUTO_SAVE_LOAD_INFO_LIST_ITEM_WRAPPER : "kk_dialog_auto_save_load_info_list_item_wrapper",
	        AUTO_SAVE_LOAD_INFO_LIST_ITEM : "kk_dialog_auto_save_load_info_list_item",
	        AUTO_SAVE_LOAD_INFO_LIST_ITEM_SELECTED : "selected_save",

	        AUTO_SAVE_LOAD_INFO_PREVIEW : "kk_dialog_auto_save_load_info_preview",

	        AUTO_SAVE_LOAD_DISABLED_BUTTON : "kk_dialog_auto_save_load_disabled",





	        BACKGROUND_DIALOG_WRAPPER : 'kk_background_dialog_wrapper',
	        BACKGROUND_DIALOG_PROPERTY_FIELD : 'kk_background_dialog_field',
	        BACKGROUND_DIALOG_SET : 'kk_background_dialog_set',
	        BACKGROUND_DIALOG_SET_TD_LABEL : 'kk_background_dialog_set_td_label',
	        BACKGROUND_DIALOG_SET_TD_INPUT : 'kk_background_dialog_set_td_input',
	        BACKGROUND_DIALOG_ATTACHMENT_SELECT : 'kk_background_dialog_attachment_select',
	        BACKGROUND_DIALOG_REPEAT_SELECT : 'kk_background_dialog_repeat_select',

	        BACKGROUND_DIALOG_POSITION_X_INPUT : 'kk_background_dialog_position_x_input',
	        BACKGROUND_DIALOG_POSITION_Y_INPUT : 'kk_background_dialog_position_y_input',
	        BACKGROUND_DIALOG_COLOR_PICKER : 'kk_background_dialog_color_picker',

	        BACKGROUND_DIALOG_CLEAR_CHECKBOX : 'kk_background_dialog_clear_checkbox',

	        UPPER_LOWER_DIALOG_CONTENTS : 'kk_upper_lower_dialog_contents',
	        BLOCKQUOTE_DIALOG_CONTENTS : 'kk_blockquote_dialog_contents',


	        //Layout Dialog


	        DIALOG_LAYOUT_ITEM_WRAPPER : "kk_dialog_layout_item_wrapper",
	        DIALOG_LAYOUT_ITEM_LIST : "kk_dialog_layout_item_list",
	        DIALOG_LAYOUT_ITEM : "kk_dialog_layout_item",
	        DIALOG_LAYOUT_ITEM_SEQ : "kk_dialog_layout_item_seq",
	        DIALOG_LAYOUT_ITEM_SELECTED : "kk_dialog_layout_item_selected",





	        //Layer Dialog

	        DIALOG_LAYER_WRAPPER : "kk_dialog_layer_wrapper",
	        DIALOG_LAYER_FIELD_SET : "kk_dialog_layer_field_set",
	        DIALOG_LAYER_SET_TD_LABEL : "kk_dialog_layer_td_label",
	        DIALOG_LAYER_SET_TD_INPUT : "kk_dialog_layer_td_input",

	        DIALOG_LAYER_SET_WIDTH_INPUT : "kk_dialog_layer_width_input",
	        DIALOG_LAYER_SET_HEIGHT_INPUT : "kk_dialog_layer_height_input",
	        DIALOG_LAYER_SET_POSITION_X_INPUT : "kk_dialog_layer_position_x_input",
	        DIALOG_LAYER_SET_POSITION_Y_INPUT : "kk_dialog_layer_position_y_input",
	        DIALOG_LAYER_SET_ID_INPUT : "kk_dialog_layer_id_input",
	        DIALOG_LAYER_SET_CLASS_INPUT : "kk_dialog_layer_class_input",




	        //Template Dialog

	        DIALOG_TEMPLATE : "kk_dialog_template",
	        DIALOG_TEMPLATE_WRAPPER : "kk_dialog_template_wrapper",
	        DIALOG_TEMPLATE_CATEGORY : "kk_dialog_template_category",
	        DIALOG_TEMPLATE_CATEGORY_TITLE : "kk_dialog_template_category_title",
	        DIALOG_TEMPLATE_CATEGORY_LIST : "kk_dialog_template_category_list",
	        DIALOG_TEMPLATE_CATEGORY_NAME : "kk_dialog_template_category_name",

	        DIALOG_TEMPLATE_LIST : "kk_dialog_template_list",
	        DIALOG_TEMPLATE_ITEM_TITLE : "kk_dialog_template_item_title",
	        DIALOG_TEMPLATE_ITEM_LIST : "kk_dialog_template_item_list",
	        DIALOG_TEMPLATE_ITEM : "kk_dialog_template_item",

	        DIALOG_TEMPLATE_CATEGORY_SELECTED : "category_selected",
	        DIALOG_TEMPLATE_ITEM_SELECTED : "template_selected",









	        FILE_DIALOG_CONTENTS : 'kk_file_dialog_contents',
	        FILE_CONTENTS_SET : 'kk_file_contents_set',

	        FILE_LABEL_WRAP : 'kk_file_label_wrap',
	        FILE_INPUT_WRAP : 'kk_file_input_wrap',

	        FILE_DIALOG_TEXT_INPUT : 'kk_file_text_input',
	        FILE_DIALOG_TITLE_INPUT : 'kk_file_title_input',

	        FILE_DIALOG_ID_INPUT : 'kk_file_id_input',
	        FILE_DIALOG_CLASS_INPUT : 'kk_file_class_input',


	        EMOTICON_WRAPPER : 'kk_emoticon_wrapper',
	        EMOTICON_ITEM : 'kk_emoticon_item',
	        EMOTICON_INPUT_WRAPPER : 'kk_emoticon_input_wrapper',
	        EMOTICON_INPUT : 'kk_emoticon_input',



	        RESIZE_HANDLER : 'resizable-handle',
	        IMAGE_RESIZE_HANDLER : 'resizable-handle-image',
	        TABLE_RESIZE_HANDLER : 'resizable-handle-table',
	        TABLE_RESIZE_TOOLTIP : 'resizable-handle-table-tooltip',

	        WEB_ACCESSIBILITY_ICON : 'kk_web_accessibility_icon',

	        KK_SELECT_OBJECT : 'kk_select_object',
	        KK_MODIFY_OBJECT : 'kk_modify_object',

	        KK_ADD_PARAGRAPH : 'kk_add_paragraph',
	        KK_CELL_RESIZE_BAR_Y : 'kk_cell_resize_bar_y',
	        KK_CELL_RESIZE_BAR_X : 'kk_cell_resize_bar_x',

	        KK_TABLE_MOVE_BAR : 'kk_table_move_bar',
	        KK_IMAGE_MOVE_BAR : 'kk_image_move_bar',

	        ACCORDION_WRAP : 'kk_accordion_wrap',
	        ACCORDION_FIELD : 'kk_accordion_field',
	        ACCORDION_BAR : 'kk_accordion_bar',
	        DEFAULT_OPEN_FIELD : 'kk_accordion_default_open',



	        FIND_REPLACE_CONTENTS : 'findreplace_contents',
	        FIND_REPLACE_ITEMS : 'findreplace_items',
	        FIND_REPLACE_ITEM : 'findreplace_item',
	        FIND_REPLACE_AREA : 'findreplaceArea',

	        FIND_LABEL_AREA : 'labelArea',
	        FIND_INPUT_AREA : 'inputArea',
	        FIND_BUTTON_AREA : 'buttonArea',

	        FIND_BUTTON_CLASS : 'findButton',
	        REPLACE_BUTTON_CLASS : 'replaceButton',

	        FIND_INPUT_LABEL_CLASS : 'findLabel',
	        FIND_INPUT_CLASS : 'findInputText',
	        REPLACE_INPUT_LABEL_CLASS : 'replaceLabel',
	        REPLACE_INPUT_CLASS : 'replaceInputText',


	        FIND_OPTION_LABEL_AREA : 'optionLabelArea',
	        FIND_DIRECTION_LABEL_AREA : 'directionLabelArea',

	        FIND_REPLACE_TEXT_CASE_WRAP : 'textCaseWrap',
	        FIND_REPLACE_TEXT_CASE_CHECK : 'caseCheck',

	        FIND_REPLACE_RESTART_WRAP : 'restartWrap',
	        FIND_REPLACE_RESTART_CHECK : 'restartCheck',

	        FIND_REPLACE_WORD_WRAP : 'wordWrap',
	        FIND_REPLACE_WORD_CHECK : 'wordCheck',

	        FIND_REPLACE_DIRECTION_WRAP : 'directionWrap',
	        FIND_REPLACE_DIRECTION_UP_RADIO : 'directionUpRadio',
	        FIND_REPLACE_DIRECTION_DOWN_RADIO : 'directionDownRadio',


	        FIND_REPLACE_ALL_BUTTON : 'replaceAllButton',
	        FIND_REPLACE_CLOSE_BUTTON : 'closeButton',

	        FIND_TEXT_CASE : 'caseText',
	        FIND_RESTART : 'findRestart',
	        FIND_WORD: 'findRestart',

	        FIND_DIRECTION_UP: 'findDirectionUp',
	        FIND_DIRECTION_DOWN: 'findDirectionDown',

	        SELECTED_SYMBOL :'selected_symbol',
	        SELECTED_SYMBOL_TEXT :'selected_symbol_text_width',

	        UPLOAD_FORM: 'uploadForm',
	        POST_IFRAME : 'postiframe',
	        UPLOAD_LOADING : 'upload_loading'
	    },

	    ID : {
	        PASTE_WRAPPER : 'pasteWrapper',
	        EXPORT_WRAPPER_IFRAME : 'exportWrapperIframe',
	        KK_EXPORT : 'kk_export',
	        KK_MS_CLIPBOARD : 'kk_ms_clipboard',

	        FIND_INPUT_ID : 'findInputText',
	        REPLACE_INPUT_ID : 'replaceInputText',

	        FIND_BUTTON_ID : 'find',
	        REPLACE_BUTTON_ID : 'replace',
	        FIND_REPLACE_TEXT_CASE_CHECK : 'caseCheck',
	        FIND_REPLACE_RESTART_CHECK : 'restartCheck',
	        FIND_REPLACE_WORD_CHECK : 'restartCheck',

	        FIND_REPLACE_DIRECTION_UP_RADIO : 'directionUpRadio',
	        FIND_REPLACE_DIRECTION_DOWN_RADIO : 'directionDownRadio',

	    },

	    CUSTOM_NODE : {

	    },

	    NODE_TYPE : {
	        BLOCK : ['div', 'ul', 'ol', 'li', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'table', 'tbody', 'tbody', 'tr', 'th', 'td', 'colgroup', 'col'],
	        INLINE : ['span', 'a']
	    },

	    fontSizeList : [8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 22, 24, 26, 36, 48, 72],

	    tableOpList : ["insertTable", "insertRowTop", "insertRowBottom", "insertColLeft", "insertColRight", "delCol", "delRow", "delTable", "mergeCell", "divideRow", "divideCol", "cell_align_tl", "cell_align_tc", "cell_align_tr", "cell_align_ml", "cell_align_mc", "cell_align_mr", "cell_align_bl", "cell_align_bc", "cell_align_br", "cell_border_top", "cell_border_left", "cell_border_right", "cell_border_bottom", "cell_border_in", "cell_border_out", "cell_border_none", "cell_border_all", "tableStyle", "cellBackgroundColor", "resizeCell"],

	    tableDefaultBorderColor : "dddddd",

	    JwertyKeyChar : {
	        mac : {
	            command : '⌘'
	        },

	        window : {

	        }
	    },

	    FILTER_NODE_TYPE : {
	        ELEMENT : 'Element',
	        TEXT : 'Text',
	        COMMENT : 'Comment'
	    },

	    NOT_DIRECT_PARENT_TYPE : ['TABLE', 'TR', 'COLGROUP', 'COL'],
	    CELL_TYPE : ['TD', 'TH'],

	    REMOVE_TYPE : ['COLGROUP', 'COL'],

	    BLOCK_NODES   : ['BODY', 'DIV', 'UL', 'OL', 'LI', 'P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'TABLE', 'TBODY', 'TR', 'TH', 'TD', 'DL', 'DT', 'DD', 'CAPTION', 'BLOCKQUOTE'],


	    CONTENT_NODES  : ['A', 'SPAN', 'STRONG', 'B', 'I', 'CITE', 'EM', 'VAR', 'ADDRESS', 'DFN', 'U', 'INS', 'STRIKE', 'S', 'DEL', 'FONT', 'SUP', 'SUB'],

	    SPECIAL_NODES  : ['STYLE', 'LINK', 'META', 'TITLE'],

	    PARAGRAPH_NODES  : ['P', 'LI', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'],


	    MS_SPECIAL_BLOCK_NODES   : ['W:SDT'],
	    MS_SPECIAL_SINGLE_RUN_NODES : [ 'W:PTAB' ],
	    MS_ATTRIBUTE : [ ':sdt', ':ptab', ':sdtpr' ],

	    WALK_EXIT     : 10000,
	    WALK_CONTINUE : 10001,
	    WALK_REVERSE  : 10002,
	    SINGLE_RUN_NODES : ['IMG', 'BR', 'HR', 'INPUT', 'SELECT', 'BUTTON', 'EMBED', 'VIDEO'],

	    HTML_TYPE_FILES : ['html', 'htm', 'txt'],
	    IMAGE_TYPE_FILES : ['png', 'jpg', 'jpeg', 'gif', 'bmp'],
	    VIDEO_TYPE_FILES : ['avi', 'wmv', 'asf'],
	    FILE_TYPE_FILES : ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'pdf', 'hwp', 'hwpx'],

	    NBSP : String.fromCharCode(160),

	    DEFAULT_CELL_BORDER_STYLE : cellBorderDefaultStyle,

	    DEFAULT_P_STYLE : '<p' + paragraphDefaultStyle + '>',

	    DEFAULT_TEXT_HTML : '&nbsp;',
	    DEFAULT_SPAN_HTML : '<span>&nbsp;</span>',
	    DEFAULT_PARAGRAPH_TYPE_HTML : '<@@type@@><span>&nbsp;</span></@@type@@>',
	    DEFAULT_PARAGRAPH_HTML : '<p' + paragraphDefaultStyle + '><span>&nbsp;</span></p>',
	    DEFAULT_LI_HTML : '<li><span>&nbsp;</span></li>',
	    DEFAULT_DT_HTML : '<dt><span>&nbsp;</span></dt>',
	    DEFAULT_DD_HTML : '<dd><span>&nbsp;</span></dd>',

	    SELECTION_COLOR_STYLE : '.kk_contents ::selection { background-color:transparent; }',
	    SELECTION_COLOR_SELECTOR : '.kk_contents ::selection',

	    EDITOR_MODE : 0,
	    HTML_MODE : 1,
	    TEXT_MODE : 2,
	    PREVIEW_MODE : 3,

	    EDITOR_HEIGHT_BUFFER_SIZE : 20,
	    EDITOR_WIDTH_BUFFER_SIZE : 16,
	    FOOTER_BUFFER_SIZE : 3,
	    BORDER_BUFFER_SIZE : 2,

	    MUST_HAVE_STYLE : 'body { font-size:12px; font-family : Arial, MalgunGothic, AppleSDGothic; word-break: break-word; word-wrap: break-word; } body p { padding:0;margin: 0px; } body table { word-break: break-all; word-wrap: break-word; } ',

	    DIALOG_FONT : '돋움',

	    TEMP : '___temp___',

	    INPUT_STYLE_NODE : '__input_style_node__',

	    BYTE_TO_MB_SIZE : (1024 * 1024),
	    BYTE_LIMIT_SIZE : (1024 * 1024 * 5),
	    LIMIT_SIZE_TEXT : "5 MB",

	    NUMBERED_LIST : [
	        {
	            id : 'numbered_decimal',
	            name : '숫자(1, 2, 3, 4...)',
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'numbered_alpha',
	            name : '알파벳 대문자(A, B, C...)',
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'numbered_upper_alpha',
	            name : '알파벳 소문자(a, b, c...)',
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'numbered_roman',
	            name : '로마 대문자(I, II, III...)',
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'numbered_upper_roman',
	            name : '로마 소문자(i, ii, iii...)',
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'numbered_lower_greek',
	            name : '그리스 소문자(α, β, γ...)',
	            title : '',
	            thumb : '',
	            className : ''
	        }
	    ],

	    BULLET_LIST : [
	        {
	            id : 'bullet_disc',
	            name : '채워진 원(●)',
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'bullet_circle',
	            name : '빈 원(○)',
	            title : '',
	            thumb : '',
	            className : ''
	        },
	        {
	            id : 'bullet_square',
	            name : '사각형(■)',
	            title : '',
	            thumb : '',
	            className : ''
	        }
	    ]
	};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	var UndoRedo = __webpack_require__(5);
	var Delete = __webpack_require__(26);
	var StatusHighlight = __webpack_require__(27);

	var Define = __webpack_require__(3);

	var scrollIntoView = __webpack_require__(28);

	function Router(editorElement, $dom, options){
	    this.$dom = null;
	    this.editorElement = null;
	    this.deleteModule = null;
	    this.undoredo = null;
	    this.statusHighlight = null;
	    this.options = null;

	    this.init(editorElement, $dom, options);
	}

	Router.prototype.init = function (editorElement, $dom, options){
	    this.editorElement = editorElement;
	    this.contentView = this.editorElement.find("." + Define.CLASS.CONTENT_VIEW)[0];

	    this.$dom = $dom;
	    this.options = options;

	    this.statusHighlight = new StatusHighlight(this.editorElement, this.$dom);

	    this.undoredo = new UndoRedo(this.editorElement, this.$dom, this);
	    this.undoredo.changedUndoRedoButtonEnable();

	    this.deleteModule = new Delete(this.editorElement, this.$dom, this.options);

	    this.scrollConfig = {
	        allowHorizontalScroll : true,
	        onlyScrollIfNeeded : true,
	        offsetTop : 100
	    }
	};


	//scrollIntoView API

	Router.prototype.scrollIntoView = function (node){
	    scrollIntoView(node, this.contentView, this.scrollConfig);
	};


	//Delete API

	Router.prototype.doDelete = function (opData){
	    this.deleteModule.execute(opData);

	    var range = this.$dom.selection.getRange();

	    var startContainer = range.startContainer;

	    if (startContainer.nodeType == Node.TEXT_NODE) {
	        startContainer = startContainer.parentNode;
	    }

	    scrollIntoView(startContainer, this.contentView, this.scrollConfig);
	};



	//UndoRedo API

	Router.prototype.externalSetUndoHistory = function (isKeydownInputKey){
	    this.undoredo.externalSetUndoHistory(isKeydownInputKey)
	};

	Router.prototype.setRedoHistory = function (){
	    this.undoredo.setRedoHistory();
	};

	Router.prototype.setIsSetUndoHistoryClear = function (){
	    this.undoredo.setIsSetUndoHistoryClear();
	};

	Router.prototype.changedUndoRedoButtonEnable = function (){
	    this.undoredo.changedUndoRedoButtonEnable();
	};

	Router.prototype.setClearAllHistories = function (){
	    this.undoredo.setClearAllHistories();
	};




	Router.prototype.doOperation = function (opSources, callbackFn){
	    var response = this.routerSendOperation(opSources);

	    if (callbackFn) {
	        callbackFn(response);
	    }
	};

	Router.prototype.throwOperation = function (menu){
	    this.undoredo.throwExecute(menu);
	};

	Router.prototype.routerSendOperation = function (opSources){
	    return this.undoredo.execute(opSources);
	};


	//StatusHighlight API

	Router.prototype.doStatusHighlight = function (args){
	    if (args instanceof Array){
	        this.statusHighlight.onChangedListener(args[0], args[1]);
	    }else{
	        this.statusHighlight.onChangedListener(args);
	    }
	};

	Router.prototype.setStatusHighlight = function (statusHighlight){
	    return this.statusHighlight = statusHighlight;
	};

	Router.prototype.getStatusHighlight = function (){
	    return this.statusHighlight;
	};

	Router.prototype.getOptions = function (){
	    return this.options;
	};

	module.exports = Router;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);
	var ModuleManager = __webpack_require__(7);

	function UndoRedo(editorElement, $domObject, router) {
	    this.router = null;
	    this.$dom = null;

	    this.editorElement = null;
	    this.toolbarElement = null;
	    this.$contents = null;

	    this.UNDO_LIMIT = 100;
	    this.undoHistories = [];
	    this.redoHistories = [];
	    this.undoTempHistories = [];
	    this.redoTempHistories = [];

	    this.undoRedoTime = null;
	    this.isSetUndoHistory = false;

	    this.init(editorElement, $domObject, router);
	}

	UndoRedo.prototype.init = function(editorElement, $domObject, router) {
	    this.$dom = $domObject;
	    this.router = router;
	    this.editorElement = $(editorElement);
	    this.toolbarElement = this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR);

	    this.$contents = this.editorElement.find("." + Define.CLASS.CONTENTS);
	    this.$undoButtonNode = this.toolbarElement.find(".menu_button[u-id='undo']");
	    this.$redoButtonNode = this.toolbarElement.find(".menu_button[u-id='redo']");

	    this.moduleManager = new ModuleManager(this.editorElement, this.$dom, this.router);
	};

	UndoRedo.prototype.changedUndoRedoButtonEnable = function() {
	    var undoStyle = this.getUndoDataLength() ? "removeClass" : "addClass"
	        , redoStyle = this.getRedoDataLength() ? "removeClass" : "addClass";

	    this.$undoButtonNode[undoStyle]("disabled");
	    this.$redoButtonNode[redoStyle]("disabled");
	};

	UndoRedo.prototype.setIsSetUndoHistoryClear = function() {
	    this.isSetUndoHistory = false;
	};

	UndoRedo.prototype.externalSetUndoHistory = function(isKeydownInputKey) {
	    this.clearRedoHistories();
	    this.setUndoHistory(isKeydownInputKey);
	};

	UndoRedo.prototype.setUndoHistory = function(isKeydownInputKey) {
	    if (!this.isSetUndoHistory) {
	        if (this.getUndoDataLength() > this.UNDO_LIMIT) {
	            this.shiftUndoHistories();
	            this.shiftRedoTempHistories();
	        }

	        var length = this.redoTempHistories.length
	            , currentHistoryData = this.redoTempHistories[length - 1];

	        var $cloneHTML = this.$contents.clone();
	        $cloneHTML.find('.' + Define.CLASS.SELECTED).removeClass(Define.CLASS.SELECTED);

	        var currentHistoryDataHTML = currentHistoryData && !isKeydownInputKey ? currentHistoryData.data : $cloneHTML.html();

	        // console.log(currentHistoryDataHTML);

	        this.setUndoHistories({
	            data : currentHistoryDataHTML,
	            range : this.getCurrentRange(!isKeydownInputKey)
	        });

	        // console.log("UndoHistory", this.getCurrentRange(!isKeydownInputKey));

	        this.isSetUndoHistory = true;
	        this.undoRedoTime = new Date().getTime();
	    }
	}

	UndoRedo.prototype.setRedoHistory = function() {
	    var undoLength = this.undoHistories.length;

	    var $cloneHTML = this.$contents.clone();
	    $cloneHTML.find('.' + Define.CLASS.SELECTED).removeClass(Define.CLASS.SELECTED);

	    this.redoTempHistories[undoLength ? undoLength - 1 : 0] = {
	        data : $cloneHTML.html(),
	        range : this.getCurrentRange()
	    };

	    if (this.undoRedoTime) {
	        var time = new Date().getTime();
	        if ((time - this.undoRedoTime) > 500){
	            this.undoRedoTime = null;
	            this.setIsSetUndoHistoryClear();
	        }
	    }
	};

	UndoRedo.prototype.throwExecute = function(menu) {
	    this.moduleManager.throwExecute(menu);
	};

	UndoRedo.prototype.execute = function(opSources){
	    var _this = this;

	    //TODO : 임시 DOM 기반 Undo/Redo 처리
	    if (!this.$contents || !this.$contents.length) {
	        this.$contents = this.editorElement.find("." + Define.CLASS.CONTENTS);
	    }

	    if (!(opSources instanceof Array)) {
	        opSources = [opSources];
	    }

	    if (opSources[0].name == "undo") {
	        this.doUndo();
	        this.undoRedoTime = null;
	        this.setIsSetUndoHistoryClear();
	        this.changedUndoRedoButtonEnable();
	        this.router.doStatusHighlight();

	        if (this.$dom.selection.getSelectedTd().length > 0){
	            this.$dom.selection.hideWindowSelection();
	        }

	    } else if (opSources[0].name == "redo") {
	        this.doRedo();
	        this.undoRedoTime = null;
	        this.setIsSetUndoHistoryClear();
	        this.changedUndoRedoButtonEnable();
	        this.router.doStatusHighlight();

	        if (this.$dom.selection.getSelectedTd().length > 0){
	            this.$dom.selection.hideWindowSelection();
	        }

	    } else {
	        var opDataList = this.createOpList(opSources);
	        var opListLength = opDataList.length;
	        var lastOP = opDataList[opListLength - 1];
	        var isTextCreate = lastOP.name == "text" || lastOP.name == "paste";

	        if (!isTextCreate || opListLength > 1) {
	            this.setIsSetUndoHistoryClear();
	        }

	        var isStop = this.isStopExecuteCheck(lastOP);

	        if (isStop) {
	            return;
	        }

	        this.clearRedoHistories();
	        this.setUndoHistory();

	        var returnDatas = this._executeModule(opDataList);

	        this.router.doStatusHighlight();

	        if (returnDatas && returnDatas[0].range){
	            this.$dom.selection.set(JSON.parse(JSON.stringify(returnDatas[0].range)));
	        }else if (lastOP && lastOP.range && lastOP.type != "del" && $.inArray(lastOP.name, ["text", "image", "paste"]) == -1){

	            var cloneOP = JSON.parse(JSON.stringify(lastOP.range));

	            // if (lastOP.name == "hyperlink" && lastOP.type == "create" && lastOP.value.text) {
	            //     cloneOP.p[1] = cloneOP.p[0];
	            //     cloneOP.r[1] = cloneOP.r[0];
	            //     this.$dom.selection.set(cloneOP);
	            // } else
	            if (lastOP.name == "table" && lastOP.type == "create" ) {
	                cloneOP.p[1] = cloneOP.p[0] = cloneOP.p[0] + 1;
	                cloneOP.r[1] = cloneOP.r[0] = 0;

	                this.$dom.selection.set(cloneOP);
	            } else if (lastOP.name == "page_break" && lastOP.type == "create" ) {
	                cloneOP.p[1] = cloneOP.p[0] = cloneOP.p[0] + 1;
	                cloneOP.r[1] = cloneOP.r[0] = 0;

	                this.$dom.selection.set(cloneOP);
	            } else {
	                this.$dom.selection.set(cloneOP);
	            }

	        }

	        if (!isTextCreate || opListLength > 1) {
	            this.setRedoHistory();
	        }

	        if (this.$dom.selection.getSelectedTd().length > 0){
	            this.$dom.selection.hideWindowSelection();
	        }

	        this.changedUndoRedoButtonEnable();
	        return returnDatas;
	    }
	};

	UndoRedo.prototype.isStopExecuteCheck =function(opData) {
	    var isStop = false;
	    // if (opData.type == "delete" && opData.name == "text" && opData.range.p[0] != opData.range.p[1]) {
	    //     var paragraphList = this.$dom.selection.getPByIndex(opData.range.p);
	    //     var startNodeP = paragraphList[0];
	    //     var firstParagraphSize = this.$dom.selection.getRunIndexSize(startNodeP);
	    //
	    //     if (firstParagraphSize == opData.range.r[0] && opData.range.r[1] == 0 && opData.range.p[1] - opData.range.p[0] == 1) {
	    //         var endNodeP = paragraphList[1];
	    //         var $startNodeP = $(startNodeP);
	    //         var $endNodeP = $(endNodeP);
	    //
	    //         if (firstParagraphSize == opData.range.r[0] && opData.range.r[1] == 0 && opData.range.p[1] - opData.range.p[0] == 1) {
	    //             var $startNodeParentTable = $startNodeP.closest("." + Define.CLASS.CONTENTS + " table");
	    //             var $endNodeParentTable = $endNodeP.closest("." + Define.CLASS.CONTENTS + " table");
	    //
	    //             if ($startNodeParentTable.length && $endNodeParentTable.length) {
	    //                 if ($startNodeParentTable[0] !== $endNodeParentTable[0]) {
	    //                     if ($startNodeP.parent().find($endNodeParentTable).length && opData.value.keyName == "backspace"
	    //                         || $endNodeP.parent().find($startNodeParentTable).length && opData.value.keyName == "delete") {
	    //                         isStop = true;
	    //                     }
	    //                 } else {
	    //                     if ($startNodeP.parent()[0] !== $endNodeP.parent()[0]) {
	    //                         isStop = true;
	    //                     }
	    //                 }
	    //             } else if ($startNodeParentTable.length && !$endNodeParentTable.length) {
	    //                 if (opData.value.keyName == "delete") {
	    //                     isStop = true;
	    //                 }
	    //             } else if (!$startNodeParentTable.length && $endNodeParentTable.length) {
	    //                 if (opData.value.keyName == "backspace") {
	    //                     isStop = true;
	    //                 }
	    //             }
	    //         }
	    //     }
	    // }

	    return isStop;
	};

	UndoRedo.prototype._executeModule = function(opDataList) {
	    var returnDatas = [];
	    var _this = this;

	    // console.log(opDataList);

	    $.each(opDataList, function(index, opData){
	        if (!opData.ignore) {
	            var returnData = _this.moduleManager.execute(opData);


	            if (returnData) {
	                returnDatas.push(returnData);
	            }
	        }
	    });

	    var firstOp = opDataList[0];
	    var lastOP = opDataList[opDataList.length-1];

	    if (lastOP.type == "del" && lastOP.name == "text") {
	        // this.$dom.selection.setOp({
	        //     p : [lastOP.range.p[0], lastOP.range.p[0]],
	        //     r : [lastOP.range.r[0], lastOP.range.r[0]],
	        //     s : lastOP.s,
	        //     section : lastOP.section
	        // });

	        this.setRedoHistory();
	    } else if (lastOP.type == "replace" && lastOP.name == "text") {

	        this.setRedoHistory();
	    } else if (lastOP.type == "create" && lastOP.name == "text") {
	        if (opDataList.length > 1 && firstOp && firstOp.type == "del" && firstOp.name == "text"){
	            this.$dom.selection.setOp({
	                p : [firstOp.range.p[0], firstOp.range.p[0]],
	                r : [firstOp.range.r[0], firstOp.range.r[0]],
	                s : firstOp.s,
	                section : firstOp.section
	            });

	        }else if (lastOP.value && lastOP.value.shiftKey && lastOP.value.keyCode == 13){
	        }

	        this.setRedoHistory();
	    } else {
	        if (lastOP.type == "del" && lastOP.name == "table") {
	            this.$dom.selection.setOp({
	                p : [lastOP.range.p[0], lastOP.range.p[0]],
	                r : [lastOP.range.r[0], lastOP.range.r[0]],
	                s : lastOP.s,
	                section : lastOP.section
	            });
	        }

	        // var $selected = this.editorElement.find('.' + Define.CLASS.CONTENTS).find("td[" + Define.ATTR.TABLE_SELECTED + "=true]");
	        //
	        // $selected.each(function(){
	        //     this.removeAttribute(Define.ATTR.TABLE_SELECTED);
	        // });
	        //
	        // $selected.each(function(){
	        //     this.setAttribute(Define.ATTR.TABLE_SELECTED, true);
	        // });
	    }

	    return returnDatas.length > 0 ? returnDatas : null;
	};

	UndoRedo.prototype.shiftRedoTempHistories = function() {
	    this.redoTempHistories.shift();
	};

	UndoRedo.prototype.shiftUndoHistories = function() {
	    this.undoHistories.shift();
	};

	//UndoHistories Setter
	UndoRedo.prototype.setUndoHistories = function(opList) {
	    this.undoHistories.push(opList);
	};

	//UndoHistories Getter
	UndoRedo.prototype.getUndoHistories = function() {
	    return this.undoHistories;
	};

	//UndoTempHistories Setter
	UndoRedo.prototype.setUndoTempHistories = function(opDataList) {
	    this.undoTempHistories.push(opDataList);
	};

	//UndoTempHistories Getter
	UndoRedo.prototype.getUndoTempHistories = function() {
	    return this.undoTempHistories;
	};

	//RedoHistories Setter
	UndoRedo.prototype.setRedoHistories = function(opList) {
	    this.redoHistories.push(opList);
	};

	//RedoHistories Getter
	UndoRedo.prototype.getRedoHistories = function() {
	    return this.redoHistories;
	};

	//RedoTempHistories Setter
	UndoRedo.prototype.setRedoTempHistories = function(opDataList) {
	    this.redoTempHistories.push(opDataList);
	};

	//RedoTempHistories Getter
	UndoRedo.prototype.getRedoTempHistories = function() {
	    return this.redoTempHistories;
	};

	UndoRedo.prototype.getUndoDataLength = function() {
	    return this.undoHistories.length;
	};

	UndoRedo.prototype.getRedoDataLength = function() {
	    return this.redoHistories.length;
	};

	UndoRedo.prototype.doUndo = function() {
	    if(this.getUndoDataLength() > 0) {
	        var undoHistoryDatas = this.getUndoHistories().pop()
	            , redoHistoryDatas = this.getRedoTempHistories().pop();

	        this.setRedoHistories(redoHistoryDatas);
	        this.setUndoTempHistories(undoHistoryDatas);

	        this.$contents.html(undoHistoryDatas.data);

	        // this.$contents.find("table").find("td["+Define.ATTR.TABLE_SELECTED+"=true]").removeAttr(Define.ATTR.TABLE_SELECTED);
	        this.$dom.selection.set(JSON.parse(JSON.stringify(undoHistoryDatas.range)), false, true);

	        var opRange = Util.cloneObject(undoHistoryDatas.range);
	        var opNode = this.$dom.selection.getOpNode(opRange.p[0], opRange.r[0]);

	        this.$dom.selection.removeSelected();
	        this.$dom.selection.setWindowRange(opNode.container, opNode.offset);
	    } else {
	        console.log("Empty UndoHistories");
	    }
	};

	UndoRedo.prototype.doRedo = function() {
	    if(this.getRedoDataLength() > 0) {
	        var redoHistoryDatas = this.getRedoHistories().pop()
	            , undoHistoryDatas = this.getUndoTempHistories().pop();

	        this.setUndoHistories(undoHistoryDatas);
	        this.setRedoTempHistories(redoHistoryDatas);

	        this.$contents.html(redoHistoryDatas.data);
	        this.$contents.find("table").find("td["+Define.ATTR.TABLE_SELECTED+"=true]").removeAttr(Define.ATTR.TABLE_SELECTED);
	        this.$dom.selection.set(JSON.parse(JSON.stringify(redoHistoryDatas.range)), false, true);
	    } else {
	        console.log("Empty RedoHistories");
	    }
	};

	UndoRedo.prototype.clearRedoHistories = function() {
	    this.redoHistories = [];
	    this.undoTempHistories = [];
	};

	UndoRedo.prototype.setClearAllHistories = function() {
	    this.undoHistories = [];
	    this.redoHistories = [];
	    this.undoTempHistories = [];
	    this.redoTempHistories = [];

	    this.undoRedoTime = null;
	    this.isSetUndoHistory = false;
	};

	UndoRedo.prototype.reverseOpList = function (opList) {
	    return null;
	};

	UndoRedo.prototype.createOpList = function(opSources) {
	    var _this = this
	        , opDataList = [];

	    $.each(opSources, function(index, opSource){
	        var opData = _this.makeDefaultOperation(opSource);
	        opDataList.push(opData);
	    });

	    return opDataList;
	};

	UndoRedo.prototype.makeDefaultOperation = function(opSource){
	    return {
	        type : opSource.type ? opSource.type : 'create',
	        name : opSource.name ? opSource.name : '',
	        value : opSource.value ? opSource.value : '',
	        range : opSource.range ? opSource.range : this.getCurrentRange(),
	        ignore : opSource.ignore ? opSource.ignore : false
	    }
	};

	UndoRedo.prototype.getCurrentRange = function(isNotKeydownInputKey) {
	    var selInfo = this.$dom.selection.get()
	        , range = {
	        p : [0, 0],
	        r : [0, 0],
	        s : "text"
	    };

	    if (selInfo) {
	        range.p = [selInfo.p[0], selInfo.p[1]];
	        range.r = [selInfo.r[0], selInfo.r[1]];
	        range.s = 'text';
	    }

	    if (isNotKeydownInputKey) {
	        // this.$dom.selection.setSelectedByRange();
	    }

	    return range;
	};

	module.exports = UndoRedo;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	var findParentNode = function (node, selector) {
	    if (!node) {
	        return null;
	    }

	    while (node && !$(node).is(selector)) {
	        if($(node).hasClass(Define.CLASS.KKEDITOR)){
	            return null;
	        }
	        node = node.parentNode;
	    }

	    return node;
	};

	var getOffsetTop = function (node) {
	    var offsetTop = node.offsetTop;
	    var parentNode = node.offsetParent;

	    while (parentNode) {
	        offsetTop += parentNode.offsetTop;
	        parentNode = parentNode.offsetParent;
	    }

	    return offsetTop;
	};

	var getOffsetLeft = function (node) {
	    var offsetLeft = node.offsetLeft;
	    var parentNode = node.offsetParent;

	    while (parentNode) {
	        offsetLeft += parentNode.offsetLeft;
	        parentNode = parentNode.offsetParent;
	    }

	    return offsetLeft;
	};

	var findRecursiveFirstNode = function  (node, callback) {

	    if (!node) {
	        return null;
	    }

	    if (callback && callback(node) === false) {
	        return node;
	    }

	    var fNode = node;

	    while (fNode) {
	        var target = fNode.firstChild;
	        if (!target) {
	            break;
	        }

	        if (callback) {
	            if (callback(target) === false) {
	                fNode = target;
	                break;
	            }
	        }

	        fNode = target;
	    }

	    return fNode;
	};

	var findRecursiveLastNode = function (node, callback) {

	    if (!node) {
	        return null;
	    }

	    var lNode = node;

	    while (lNode) {
	        var target = lNode.lastChild;
	        if (!target) {
	            break;
	        }

	        if (callback) {
	            if (callback(target) === false) {
	                break;
	            }
	        }

	        lNode = target;
	    }

	    return lNode;
	};

	var getNodeIndex = function (node) {
	    var i = 0;
	    while ((node = node.previousSibling)) {
	        ++i;
	    }
	    return i;
	};

	var walkTheDOM = function (node, func, noBlock) {

	    if (! noBlock && (! node || Define.BLOCK_NODES.indexOf(node.nodeName) == -1)) {
	        // console.log('you must call block node. ');
	        return false;
	    }

	    var isStop = false;
	    function _walkDOM(_node, _func, _depth) {

	        if (! _node) {
	            return false;
	        }

	        _depth ++;

	        for (var i=0, length=_node.childNodes.length; i<length; i++) {

	            if (isStop || ! _node.childNodes[i]){
	                return false;
	            }

	            var childNode = _node.childNodes[i];
	            var response = _func(childNode,  _depth);
	            if (response === Define.WALK_CONTINUE) {
	                continue;
	            }else if (response === Define.WALK_EXIT) {
	                isStop = true;
	                return false;
	            }else if (response === Define.WALK_REVERSE) {
	                _depth --;
	                _walkDOM(_node, _func, _depth);
	                return false;
	            }

	            _walkDOM(childNode, _func, _depth);
	        }
	    };

	    var depth = -1;
	    _walkDOM(node, func, depth);
	};

	var prettyHtml = function(node){

	    if (! node || ! (node instanceof Node)){
	        return null;
	    }

	    var nodeList = [];
	    walkTheDOM(node, function(_node, depth){
	        if (_node.nodeType == 1 && nodeList.indexOf(_node) == -1){
	            var beforeSpace = '';
	            for (var i=0; i<depth; i++){
	                beforeSpace += '\t';
	            }

	            var afterSpace = '';
	            for (var i=0; i<depth - 1; i++){
	                afterSpace += '\t';
	            }

	            $(_node).before(document.createTextNode('\n' + beforeSpace));

	            if (! _node.nextSibling){
	                $(_node).after(document.createTextNode('\n' + afterSpace));
	            }

	            nodeList.push(_node);
	            return Define.WALK_REVERSE;
	        }
	    });

	    nodeList = null;

	    return $(node).html();
	};

	var isCheckParagraphEmpty = function (paragraph) {

	    var childNodes = $(paragraph).find('img, video, table');

	    if (paragraph.textContent.length == 0 && !childNodes.length) {
	        return true;
	    } else if (paragraph.textContent == String.fromCharCode(160) && !childNodes.length){
	        return true;
	    } else {
	        return false;
	    }


	    // var offset = $(paragraph).find("IMG").length + paragraph.textContent.length;
	    // if (offset < 1) {
	    //     return true;
	    // } else if (offset == 1 && $(paragraph).find("br").length > 0) {
	    //     return true;
	    // } else {
	    //     return false;
	    // }
	};

	var isCheckEmpty = function (area) {

	    var isEmpty = false;

	    var $area = $(area);

	    var text = $area.text();

	    if (text == "" || text == " " || text == "\u00A0") {
	        var childNodes = $area.find('img, video, table');

	        if (!childNodes.length) {
	            isEmpty = true;
	        }
	    }

	    return isEmpty;
	};

	var getSearchCell = function(rows, rowIndex, cellIndex){
	    var returnTdNode = null;

	    for (var rowIdx = 0, rowLength = rows.length; rowIdx < rowLength; rowIdx++) {
	        var trNode = rows[rowIdx];
	        var cells = trNode.cells;

	        for (var cellIdx = 0, length = cells.length; cellIdx < length; cellIdx++) {

	            var targetCell = $(cells[cellIdx]);
	            var cellPosition = targetCell.cellPos();

	            var cellColIndex = cellPosition.left;
	            var cellRowIndex = cellPosition.top;

	            if ((cellRowIndex == rowIndex  || (cellRowIndex < rowIdx && cellRowIndex + targetCell[0].rowSpan > rowIndex))
	                && (cellColIndex == cellIndex || (cellColIndex < cellIndex && cellColIndex + cells[cellIdx].colSpan > cellIndex))) {

	                returnTdNode = targetCell;

	                break;
	            }
	        }
	    }

	    return returnTdNode;
	};

	var getStyleObject = function (node){
	    if (! node || !node.style){ return []; }
	    var values = [], arr = node.style.cssText.split(';');

	    for (var css in arr) {
	        if (arr[css] != "") {
	            var value = arr[css].split(":");
	            var obj = {key:value[0].replace(/^\s*|\s*$/g, ''), value:value[1].replace(/^\s*|\s*$/g, '')};
	            values.push(obj);
	        }
	    }
	    return values;
	};

	var getCurrentStyle = function (node, styles) {
	    if (! styles){
	        styles = ['fontFamily', 'fontSize', 'fontWeight', 'fontStyle', 'color', 'backgroundColor', 'textAlign', 'lineHeight', 'textDecoration', 'verticalAlign'];
	    }

	    var idoc = window.document;
	    if (!node) { return null; }

	    var computedObj = null;
	    try {
	        if (window.getComputedStyle){
	            var getComputedStyle = idoc.defaultView.getComputedStyle(node, null);
	            computedObj = getComputedStyle;
	        }else if (node.currentStyle){
	            computedObj = node.currentStyle;
	        }else{
	            computedObj = node.style;
	        }
	    } catch(e) {
	        return null;
	    }

	    if (computedObj){
	        var styleProps = [];
	        for (var i=0; i<styles.length; i++){
	            var value = computedObj[styles[i]];

	            if (styles[i] == "backgroundColor") {
	                value = node.style[styles[i]];
	            }else if (styles[i] == "textDecoration"){
	                var decoration = [];
	                if (value.indexOf("underline") != -1){
	                    decoration.push("underline");
	                }

	                if (value.indexOf("line-through") != -1){
	                    decoration.push("line-through");
	                }

	                if (decoration.length > 0){
	                    value = decoration.join(" ");
	                }else{
	                    value = "";
	                }

	            }
	            styleProps.push({key : styles[i], value : value});
	        }

	        return styleProps;
	    }else{
	        return null;
	    }
	};

	var findNextParagraph = function (direction, startNode){
	    if (! startNode){
	        return null;
	    }

	    var _this = this;
	    var startP = this.findParentNode(startNode, "p");
	    var findNext = function(node){
	        if (node[direction + "Sibling"]){
	            node = node[direction + "Sibling"];
	            if (node.nodeType == 1 && node.childNodes.length > 0){
	                node = _this.findRecursiveFirstNode(node);
	            }
	        }else{
	            if (node.parentNode){
	                node = node.parentNode;
	            }else{
	                return null;
	            }
	        }

	        if (node != startP && node.nodeType == 1 && node.nodeName == "P"){
	            return node;
	        }else{
	            return findNext(node);
	        }
	    };

	    return findNext(startNode);
	};

	var cloneObject = function (o){
	    var pair = {};

	    //http://stackoverflow.com/questions/7390426/better-way-to-get-type-of-a-javascript-variable
	    var toType = function(transfer){ return ({}).toString.call(transfer).match(/\s([a-zA-Z]+)/)[1].toLowerCase();};

	    for (var k in o) {
	        if (typeof(o[k]) === "object" && toType(o[k]) === "object") {
	            pair[k] = arguments.callee(o[k]);
	        } else {
	            pair[k] = $.isArray(o[k]) ? o[k].slice(0) : (o[k] instanceof Node ? $(o[k]).clone()[0] : o[k]);
	        }
	    }

	    return pair;
	};

	var doChangeSpace = function (targetContents, isGlobal){
	    targetContents = targetContents.replace(/\&nbsp;/g, " ");

	//        targetContents = targetContents.replace(/[ ]{2,}/g, function(originalContent) {
	//            var changeContent = " ";
	//            if (originalContent.length > 1) { for (var i = 0; i < originalContent.length - 1; i++) { changeContent += "\u00a0"; }}
	//            else if(originalContent.length == 1) { changeContent = "\u00a0"; }
	//            else { changeContent = originalContent; }
	//            return changeContent;
	//        });

	    // ex) " </span><span> "
	    targetContents = targetContents.replace(/([ ]<\/(?:span|font)\s*>\s*<(?:span|font)[^>]*>)[ ]/gi, function(a, b) { return b + "\u00a0"; });

	    if (isGlobal) {
	//            // ex) "</p><p><span> "
	        targetContents = targetContents.replace(/(<p[^>]*>\s*<(?:span|font)[^>]*>)[ ]/gi, function(a, b) { return b + "\u00a0"; });

	//            // ex) " </span></p><p>"
	        targetContents = targetContents.replace(/[ ](<\/(?:span|font)\s*>\s*<\/p\s*>)/gi, function(a, b) { return "\u00a0" + b; })

	    } else {
	//           // ex) "<span> "
	        targetContents = targetContents.replace(/(\s*<(?:span|font)[^>]*>)[ ]/gi, function(a, b) { return b + "\u00a0"; });

	//           // ex) " </span>"
	        targetContents = targetContents.replace(/[ ](<\/(?:span|font)\s*>)/gi, function(a, b) { return "\u00a0" + b; });
	    }

	    return targetContents;
	};

	var getRgbToHex = function (rgb){
	    if (! rgb || rgb.length == 0){
	        return "#ffffff";
	    }

	    if (rgb.substr(0, 1) === '#') {
	        return color;
	    }

	    rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
	    return (rgb && rgb.length === 4) ? "#" +
	        ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
	        ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
	        ("0" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';
	};

	var firstToUpperCase = function (str) {
	    return str.substr(0, 1).toUpperCase() + str.substr(1);
	};

	var firstToLowerCase = function (str) {
	    return str.substr(0, 1).toLowerCase() + str.substr(1);
	};

	var doMergeNode = function (frontNode, backNode, isBackKeep) {
	    if (!frontNode || !backNode || (frontNode.nodeName !== backNode.nodeName)) {
	        return null;
	    }

	    var keepParagraph = isBackKeep ? backNode : frontNode
	        , removePragraph = isBackKeep ? frontNode : backNode
	        , childNodes = isBackKeep ? frontNode.childNodes : backNode.childNodes
	        , methodName = isBackKeep ? "prepend" : "append";

	    $(keepParagraph)[methodName](childNodes);
	    $(removePragraph).remove();

	    return keepParagraph;
	};

	var splitParagraphNode = function (currentRange) {

	    var $splitTargetNode = null;
	    var startOffset = 0;

	    if (currentRange.startContainer) {
	        $splitTargetNode = $(currentRange.startContainer);
	        startOffset = currentRange.startOffset;
	    } else {
	        $splitTargetNode = $(currentRange);
	    }


	    var $parentNodes = $splitTargetNode.parents('.' + Define.CLASS.CONTENTS + ' ' + Define.PARAGRAPH_NODES.join(', .' + Define.CLASS.CONTENTS + ' '));

	    var $parentCell = $splitTargetNode.closest('.' + Define.CLASS.CONTENTS + ' ' + Define.CELL_TYPE.join(', .' + Define.CLASS.CONTENTS + ' '));

	    if ($parentCell.length) {
	        $parentNodes = $parentCell.find($parentNodes);
	    }

	    var prveNode = null;
	    var nextNode = null;

	    if (!$parentNodes.length) {

	        if ($splitTargetNode[0].nodeType == Node.TEXT_NODE) {
	            var $spanNode = $splitTargetNode.closest('.' + Define.CLASS.CONTENTS + ' ' + Define.CONTENT_NODES.join(', .' + Define.CLASS.CONTENTS + ' '));

	            if (!$spanNode.length) {
	                var textContent = $splitTargetNode[0].textContent;

	                if (startOffset == 0) {
	                    nextNode = $('<span>' + textContent + '</span>');
	                    $splitTargetNode.before(nextNode);
	                } else if (startOffset == textContent.length) {
	                    prveNode = $('<span>' + textContent + '</span>');
	                    $splitTargetNode.before(prveNode);
	                } else {
	                    var first = textContent.substr(0, startOffset);
	                    var second = textContent.substr(startOffset, textContent.length - startOffset);

	                    prveNode = $('<span>' + first + '</span>');
	                    nextNode = $('<span>' + second + '</span>');

	                    $splitTargetNode.before(prveNode);
	                    $splitTargetNode.after(nextNode);
	                }

	                $splitTargetNode.remove();
	            } else {
	                var range = document.createRange();

	                var $spanClone = $spanNode.clone().html('');

	                range.setStart($splitTargetNode[0], startOffset);
	                range.setEnd($spanNode[0], $spanNode[0].childNodes.length);

	                var extractContents = range.extractContents();

	                $spanClone.html(extractContents.childNodes);
	                $spanNode.after($spanClone);

	                prveNode = $spanNode;
	                nextNode = $spanClone;
	            }
	        } else {
	            prveNode = $splitTargetNode.prev();

	            if (!prveNode.length) {
	                prveNode = $splitTargetNode;
	            }

	            nextNode = $splitTargetNode.next();

	            if (!nextNode.length) {
	                nextNode = $splitTargetNode;
	            }
	        }
	    } else {
	        var $rootParagraph = $parentNodes.last();

	        if ($rootParagraph[0].nodeName == 'LI') {
	            var listParent = $rootParagraph.parent('OL, UL');

	            if (listParent.length) {
	                $rootParagraph = listParent;
	            }
	        }

	        var range = document.createRange();

	        range.setStart($splitTargetNode[0], startOffset);
	        range.setEnd($rootParagraph[0], $rootParagraph[0].childNodes.length);

	        var extractContents = range.extractContents();

	        var $destParagraphSplitNode = $rootParagraph.clone().html('');
	        $destParagraphSplitNode.html(extractContents.childNodes);

	        prveNode = $rootParagraph;

	        if(!this.isCheckParagraphEmpty($destParagraphSplitNode[0])) {
	            $rootParagraph.after($destParagraphSplitNode);
	            nextNode = $destParagraphSplitNode;
	        }
	    }

	    return {
	        prevNode : prveNode,
	        nextNode : nextNode
	    };
	};

	var getPixelToPoint = function (val){
	    val = val.replace("pt", "") * 1;
	    return Math.round((val * 72/96));
	};

	var setStyleForMultiBrowser = function (element, property, value){
	    $.each(['-moz-','-webkit-','-o-','-ms-','-khtml-',''], function(){
	        var prop = this + property;
	        if(prop in element.style){
	            element.style[prop] = value;
	        }
	    });
	};

	var hyperlinkColorSetting = function (spanNodes, isReverse) {
	    var _this = this;

	    return $(spanNodes).css({
	        "color" : function(index, value) {
	            var value = _this.getRgbToHex(value);
	            if (isReverse) {
	                if (value == "#0000ff") {
	                    value = "#000000";
	                }
	            } else {
	                if (value != "#0000ff") {
	                    value = "#0000ff";
	                }
	            }

	            return value;
	        },
	        "text-decoration" : function(index, value) {
	            var underline = false;
	            var strikethrough = false;

	            if (value.indexOf("underline") != -1) underline = true;
	            if (value.indexOf("line-through") != -1) strikethrough = true;

	            if (isReverse) {
	                return underline ? (strikethrough ? "line-through" : "") : value;
	            }

	//                    console.log(underline ? value : "underline " + value);

	            return underline ? value : "underline " + (strikethrough ? "line-through" : "");
	        }
	    });
	};

	var uploadProcess = function (data, successCallback, errorCallback) {
	    $.ajax({
	        url : '../editor/_mediaAction.php',
	        type: "POST",
	        dataType:"json",
	        data: data,
	        contentType: 'application/x-www-form-urlencoded'
	    }).done(successCallback).fail(errorCallback);
	};

	var consolePrintOP = function (opSources) {
	    var opList = opSources
	        , consoleText = "";

	    if (!(opSources instanceof Array)) {
	        opList = [opSources];
	    }

	    for (var i = 0 ; i < opList.length ; i++) {
	//                consoleText += "type : " + opList[i].type + ", name : " + opList[i].name + ", value : " + JSON.stringify(opList[i].value) + ", p : [" + opList[i].range.p[0] + ", " + opList[i].range.p[1] + "], r : [" + opList[i].range.r[0] + ", " + opList[i].range.r[1] + "] \n";
	        consoleText += "OP Index[" + i + "] === > type : " + opList[i].type + ", name : " + opList[i].name + ", value : " + JSON.stringify(opList[i].value) + ", range : " + JSON.stringify(opList[i].range) + "\n";
	    }

	//            console.log(consoleText);
	};

	var removeAttrbuteAll = function(node) {
	    var $node = $(node)
	        , attributes = $.map(node.attributes, function(item) {
	        return item.name;
	    });

	    $.each(attributes, function(i, item) {
	        $node.removeAttr(item);
	    });

	    return node;
	};

	var isUnicode = function (s){
	    return s.charCodeAt(0) != 160 && s.charCodeAt(0) > 127 && /[^\\u0000-\\u00ff]/.test(s);
	};

	var hasClass = function (node, className){
	    var name = node.className;

	    return name && (name.length > 0 && name.indexOf(className) > -1);
	};

	var getRootNode = function (node){
	    if (!node){
	        return null;
	    }

	    while(node){
	        node = node.parentNode;
	        if (node && node.nodeName == "BODY"){
	            break;
	        }
	    }

	    return node;
	};

	var collectTextNodes = function (textNode){

	    // while there are text siblings, concatenate them into the first
	    while (textNode.nextSibling) {
	        var next = textNode.nextSibling;

	        if (next.nodeType == 3 || next.nodeType == 4) {
	            textNode.nodeValue += next.nodeValue;
	            textNode.parentNode.removeChild(next);

	            // Stop if not a text node
	        } else {
	            return;
	        }
	    }
	};

	var normalise = function  (element) {
	    var node = element.firstChild;

	    // Traverse siblings, call normalise for elements and
	    // collectTextNodes for text nodes
	    while (node && node.nextSibling) {
	        if (node.nodeType == 1) {
	            this.normalise(node);

	        } else if (node.nodeType == 3) {
	            this.collectTextNodes(node);
	        }
	        node = node.nextSibling;
	    }
	};

	var getTime = function () {
	    var today = new Date();    // 현재시간 얻기
	    var runTime = today.getTime(); // 밀리초 from 1/1/70
	    return runTime;
	};

	var uniqueArrayData = function (list) {
	    var result = [];
	    $.each(list, function(i, e) {
	        if ($.inArray(e, result) == -1) result.push(e);
	    });
	    return result;
	};

	var setAttributes = function (node, attributes) {
	    var $node = $(node);
	    $.each(attributes, function(index, attribute) {
	        if (!$node.attr(attribute.name)) {
	            $node.attr(attribute.name, attribute.value);
	        }
	    });
	};

	var normalize = function (elem){
	    if ($.browser.msie && $.browser.msie11){
	        for (var i = 0; i < elem.childNodes.length; i++) {
	            if (elem.childNodes[i].nodeType != 3) {
	                normalize(elem.childNodes[i]);
	            }
	            else {
	                if (elem.childNodes[i].nextSibling != null && elem.childNodes[i].nextSibling.nodeType == 3) {
	                    elem.childNodes[i].nodeValue = elem.childNodes[i].nodeValue + elem.childNodes[i].nextSibling.nodeValue;
	                    elem.removeChild(elem.childNodes[i].nextSibling);
	                    i--;
	                }
	            }
	        }
	    }else{
	        elem && elem.normalize();
	    }
	};

	var cssStyleNomalize = function(prop){
	    if (! prop){
	        return "";
	    }

	    prop = prop.replace(/'/g, '');
	    prop = prop.split(',');

	    var nProp = [];
	    $(prop).each(function(i, name){
	        name = name.trim();

	        if (name != ''){
	            nProp.push(name);
	        }
	    });

	    return nProp.join(',');
	};

	var forceRedraw = function(element){
	    var disp = element.style.display;
	    element.style.display = 'none';
	    var trick = element.offsetHeight;
	    element.style.display = disp;
	};

	function getCSSRule(ruleName, deleteFlag) {
	    try{
	        if (document.styleSheets) {
	            for (var i=0; i<document.styleSheets.length; i++) {
	                var styleSheet=document.styleSheets[i];
	                var ii=0;
	                var cssRule=false;
	                do {

	                    cssRule = styleSheet.rules[ii];

	                    if (cssRule)  {
	                        if (cssRule.selectorText==ruleName) {
	                            if (deleteFlag=='delete') {
	                                if (! $.browser.msie) {
	                                    styleSheet.deleteRule(ii);
	                                } else {
	                                    styleSheet.removeRule(ii);
	                                }
	                                ii --;
	                                continue;
	                                // return true;
	                            } else {
	                                return cssRule;
	                            }
	                        }
	                    }
	                    ii++;
	                } while (cssRule)
	            }
	        }
	    }catch(e){
	        console.log('selector error : ', e);
	    }

	    return false;
	}

	function killCSSRule(ruleName) {
	    if ($.browser.chrome && document.styleSheets[0].rules == null){
	        if (! this.insertCssRuleLength){
	            this.insertCssRuleLength = [];
	        }else{

	            for (var i=0,length=this.insertCssRuleLength.length; i<length; i++){
	                try{
	                    document.styleSheets[0].deleteRule(this.insertCssRuleLength[i]);
	                }catch(e){
	                }
	            }
	        }

	    }else{
	        return getCSSRule(ruleName,'delete');
	    }

	}

	function addCSSRule(ruleName) {
	    if ($.browser.chrome && document.styleSheets[0].rules == null){
	        try{
	            document.styleSheets[0].insertRule(ruleName, 100000);
	        }catch(e){
	            if (e['code'] == 1){
	                var msg = e['message'];
	                msg = msg.replace('(100000)', '');

	                var pre = msg.indexOf('(') + 1;
	                var end = msg.indexOf(')');
	                var length = msg.substring(pre, end);

	                if (! this.insertCssRuleLength){
	                    this.insertCssRuleLength = [];
	                }else{
	                    if (this.insertCssRuleLength.indexOf(length) == -1){
	                        this.insertCssRuleLength.push(length);
	                    }
	                }

	                try{
	                    document.styleSheets[0].insertRule(ruleName, length);
	                }catch(e1){
	                    console.log(e1);
	                }
	            }

	        }

	    }else {
	        if (document.styleSheets) {
	            if (!getCSSRule(ruleName)) {
	                document.styleSheets[0].insertRule(ruleName, document.styleSheets[0].cssRules.length);
	            }
	        }
	        return getCSSRule(ruleName);
	    }

	}

	var makePageBreakImage = function () {
	    var canvas = document.createElement("canvas");
	    var ctx = canvas.getContext('2d');

	    if ($.browser.msie || $.browser.platform == 'win'){
	        canvas.setAttribute('height', '14px');
	        canvas.setAttribute('width', '64px');
	    }else{

	        canvas.setAttribute('height', '12px');
	        canvas.setAttribute('width', '56px');
	    }

	    ctx.font = "9pt 'Arial','맑은고딕'";
	    ctx.textBaseline = 'alphabetic';
	    ctx.fillStyle = "black";

	    if ($.browser.msie){
	        ctx.fillText("페이지 분할", 0, 12);
	    }else{
	        ctx.fillText("페이지 분할", 0, 10);
	    }

	    var base64Image = canvas.toDataURL("image/png");

	    var rule = '.kk_editor .kk_editView .kk_contentView .kk_contents .kk_page_break:before { background-image : url(' + base64Image + '); }';
	    addCSSRule(rule);

	    if (this.insertCssRuleLength){
	        this.insertCssRuleLength = [];
	    }
	};

	var getHtmlEncoding = function(){
	    var $document = $(document);

	    var $metaTypeHTML4 = $document.find('meta[http-equiv="content-type"], meta[charset]');
	    var $metaTypeHTML5 = $document.find('meta[charset]');

	    return {
	        metaTypeHTML4 : $metaTypeHTML4,
	        metaTypeHTML5 : $metaTypeHTML5
	    }
	};

	var getHtmlTitle = function(){
	    return $(document).find('title').html();
	};

	var getHtmlLanguageType = function(){
	    var $html = $(document).find('html');
	    return $html.attr('lang');
	};

	var getHtmlDocType = function(){
	    return document.doctype;
	};

	var getHtmlDocTypeSystemId = function(publicId){
	    var systemId = '';

	    switch (publicId) {
	        case "-//W3C//DTD XHTML 1.1//EN" :
	            systemId = "http://www.w3c.org/TR/xhtml11/DTD/xhtml11.dtd";

	            break;

	        case "-//W3C//DTD XHTML 1.0 Transitional//EN" :
	            systemId = "http://www.w3c.org/TR/xhtml1/DTD/xhtml1-transitional.dtd";
	            break;

	        case "-//W3C//DTD XHTML 1.0 Strict//EN":
	            systemId = "http://www.w3c.org/TR/xhtml1/DTD/xhtml1-strict.dtd";
	            break;

	        case "-//W3C//DTD XHTML 1.0 Frameset//EN":
	            systemId = "http://www.w3c.org/TR/xhtml1/DTD/xhtml1-frameset.dtd";
	            break;

	        case "-//W3C//DTD HTML 4.01 Transitional//EN":
	            systemId = "http://www.w3c.org/TR/xhtml4/loose.dtd";
	            break;

	        case "-//W3C//DTD HTML 4.01//EN":
	            systemId = "http://www.w3c.org/TR/xhtml4/strict.dtd";
	            break;

	        case "-//W3C//DTD HTML 4.01 Frameset//EN":
	            systemId = "http://www.w3c.org/TR/xhtml4/frameset.dtd";
	            break;

	        case "-//W3C//DTD HTML 3.2 Final//EN":
	            systemId = "";
	            break;

	        case "-//IETF//DTD HTML 3.2//EN":
	            systemId = "";

	            break;

	        case "html5" :
	            break;

	        default:
	            break;
	    }

	    return systemId;
	};

	var getTargetTables = function(selection){
	    var $parentTable = null;
	    var $tdNodes = selection.getSelectedTd();

	    if ($tdNodes.length) {
	        $parentTable = $tdNodes.closest('.' + Define.CLASS.CONTENTS + ' table');
	    } else {
	        var $selectedNodes = selection.getSelectedNode();

	        if (!$selectedNodes.length) {
	            var op = selection.get();
	            var currentNode = selection.getOpNode(op.p[0], op.r[0]);
	            $selectedNodes = $(currentNode.container);
	        }

	        $parentTable = $selectedNodes.closest('.' + Define.CLASS.CONTENTS + ' table');
	    }

	    return $parentTable;
	};

	var getTargetCells = function(selection){
	    var $tdNodes = selection.getSelectedTd();

	    if (!$tdNodes.length) {
	        var $selectedNodes = selection.getSelectedNode();

	        if (!$selectedNodes.length) {
	            var op = selection.get();
	            var currentNode = selection.getOpNode(op.p[0], op.r[0]);
	            $selectedNodes = $(currentNode.container);
	        }

	        $tdNodes = $selectedNodes.closest('.' + Define.CLASS.CONTENTS + ' ' + Define.CELL_TYPE.join((', .'  + Define.CLASS.CONTENTS + ' ' )));
	    }

	    return $tdNodes;
	};

	var isEscapeEvent = function(target) {
	    var targetClassCheck = [Define.CLASS.DIALOG, Define.CLASS.HTML_VIEW, Define.CLASS.TEXT_VIEW, Define.CLASS.PRE_VIEW, Define.CLASS.EDITOR_TOOLBAR_MENU_FINDREPLACEBOX];

	    var $target = $(target);
	    var isEscape = false;

	    if ($target.hasClass(targetClassCheck.join(','))
	        || $target.closest("." + targetClassCheck.join(', .')).length
	        || $target.is('input, textarea, select')
	    ) {
	        isEscape = true;
	    }

	    return isEscape;
	};

	var getRowColCount = function(table){
	    var $table = $(table);
	    var rows = $table[0].rows;
	    var cols = rows[0].cells;
	    var count = 0;

	    for(var i = 0; i < cols.length; i++){
	        if (cols[i].style.display !== 'none') {
	            var colspan = cols[i].getAttribute("colspan");

	            if( colspan && colspan > 1) {
	                count += Number(colspan);
	            } else {
	                count++;
	            }
	        }
	    }

	    return {
	        row : rows.length,
	        col : count
	    }
	};

	var getHeaderType = function(table){
	    var $table = $(table);
	    var rows = $table[0].rows;
	    var count = 0;

	    var LEFT = false;
	    var TOP = false;

	    var HEADER_TYPE = 'none';

	    if($(rows[0].cells).filter('th').length) {
	        TOP = true;
	    }

	    if (rows.length > 1 && rows[1].cells[0]) {
	        LEFT = true;
	    }

	    if (LEFT && TOP) {
	        HEADER_TYPE = 'left_top';
	    } else if (LEFT) {
	        HEADER_TYPE = 'left';
	    } else if (TOP) {
	        HEADER_TYPE = 'top';
	    }

	    return HEADER_TYPE;
	};

	var doUploadData = function (url, data, successFn, errorFn, progressFn) {

	    var ajaxRun = function() {
	        $.ajax({
	            url: url,
	            data: data,
	            processData: false,
	            contentType: false,
	            type: 'POST',
	            dataType: 'json',

	            // cache: false,
	            // enctype:"multipart/form-data",
	            // encoding:"multipart/form-data",
	            // async: true,

	            xhr: progressFn || function () {
	                return $.ajaxSettings.xhr();
	            },
	            success: successFn || function(data){ },
	            error: errorFn || function(data) { }
	        });
	    };

	    if ($.browser.msie && $.browser.version == 11) {
	        setTimeout(function(){
	            ajaxRun();
	        }, 3);
	    } else {
	        ajaxRun();
	    }
	};




	var Util = {};

	Util.makePageBreakImage = makePageBreakImage;

	Util.getCSSRule = getCSSRule;

	Util.killCSSRule = killCSSRule;

	Util.addCSSRule = addCSSRule;

	Util.getOffsetTop = getOffsetTop;

	Util.getOffsetLeft = getOffsetLeft;

	Util.findRecursiveFirstNode = findRecursiveFirstNode;

	Util.findRecursiveLastNode = findRecursiveLastNode;

	Util.findParentNode = findParentNode;

	Util.getNodeIndex = getNodeIndex;

	Util.walkTheDOM = walkTheDOM;

	Util.prettyHtml = prettyHtml;

	Util.isCheckParagraphEmpty = isCheckParagraphEmpty;

	Util.isCheckEmpty = isCheckEmpty;

	Util.getSearchCell = getSearchCell;

	Util.getStyleObject = getStyleObject;

	Util.getCurrentStyle= getCurrentStyle;

	Util.findNextParagraph = findNextParagraph ;

	Util.cloneObject = cloneObject;

	Util.doChangeSpace = doChangeSpace;

	Util.getRgbToHex = getRgbToHex;

	Util.firstToUpperCase = firstToUpperCase;

	Util.firstToLowerCase = firstToLowerCase;

	Util.doMergeNode = doMergeNode;

	Util.splitParagraphNode = splitParagraphNode;

	Util.getPixelToPoint = getPixelToPoint;

	Util.setStyleForMultiBrowser = setStyleForMultiBrowser;

	Util.hyperlinkColorSetting = hyperlinkColorSetting;

	Util.uploadProcess = uploadProcess;

	Util.consolePrintOP = consolePrintOP;

	Util.removeAttrbuteAll = removeAttrbuteAll;

	Util.isUnicode = isUnicode;

	Util.hasClass = hasClass;

	Util.getRootNode = getRootNode;

	Util.collectTextNodes = collectTextNodes;

	Util.normalise = normalise;

	Util.getTime = getTime;

	Util.uniqueArrayData = uniqueArrayData;

	Util.setAttributes = setAttributes;

	Util.normalize = normalize;

	Util.cssStyleNomalize = cssStyleNomalize;

	Util.forceRedraw = forceRedraw;

	Util.getHtmlEncoding = getHtmlEncoding;

	Util.getHtmlTitle = getHtmlTitle;

	Util.getHtmlLanguageType = getHtmlLanguageType;

	Util.getHtmlDocType = getHtmlDocType;

	Util.getHtmlDocTypeSystemId = getHtmlDocTypeSystemId;

	Util.getTargetTables = getTargetTables;

	Util.getTargetCells = getTargetCells;

	Util.isEscapeEvent = isEscapeEvent;

	Util.doUploadData = doUploadData;

	Util.isTagName = function(node, tagName){
	    if (node && node.nodeType == 1){
	        if (tagName instanceof Array){
	            return tagName.indexOf(node.nodeName) > -1;
	        }else{
	            return node.nodeName == tagName;
	        }
	    }

	    return false;
	};

	Util.isBlockNode = function(node){
	    return node && node.nodeType == 1 && Define.BLOCK_NODES.indexOf(node.nodeName) > -1;
	};

	Util.isSingleRunNode = function(node){
	    return node && node.nodeType == 1 && Define.SINGLE_RUN_NODES.indexOf(node.nodeName) > -1;
	};

	Util.isTextNode = function(node){
	    return node && node.nodeType == 3;
	};

	Util.getRowColCount = getRowColCount;
	Util.getHeaderType = getHeaderType;

	Util.getCommonAncestor = function (node1 /*, node2, node3, ... nodeN */) {
	    if (arguments.length < 2)
	        throw new Error("getCommonAncestor: not enough parameters");

	    var i,
	        method = "contains" in node1 ? "contains" : "compareDocumentPosition",
	        test   = method === "contains" ? 1 : 0x0010,
	        nodes  = [].slice.call(arguments, 1);

	    rocking:
	        while (node1 = node1.parentNode) {
	            i = nodes.length;
	            while (i--) {
	                if ((node1[method](nodes[i]) & test) !== test)
	                    continue rocking;
	            }
	            return node1;
	        }

	    return null;
	};

	Util.hasSpecialText = function(text) {
	    var special_pattern =  /[₩~!@\#$%<>{}\[\]^&*\()\-=+_\'\";:\/?,.|\\]/gi;

	    return special_pattern.test(text);
	};

	module.exports = Util;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	var Text = __webpack_require__(8);
	var Image = __webpack_require__(10);
	var Video = __webpack_require__(11);
	var Layer = __webpack_require__(12);
	var HyperLink = __webpack_require__(14);
	var Paragraph = __webpack_require__(15);
	var List = __webpack_require__(16);
	var Table = __webpack_require__(17);
	var Symbol = __webpack_require__(18);
	var FindReplace = __webpack_require__(19);
	var Paste = __webpack_require__(20);
	var PageBreak = __webpack_require__(21);
	var Horizontal = __webpack_require__(22);
	var Bookmark = __webpack_require__(23);
	var Tab = __webpack_require__(24);
	var UpperLower = __webpack_require__(25);

	function ModuleManager(editorElement, $domObject, router){
	    this.router = null;
	    this.editorElement = null;
	    this.init(editorElement, $domObject, router);
	}

	ModuleManager.prototype.init = function (editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.contentArea = $(this.editorElement).find('.' + Define.CLASS.CONTENTS);
	    this.router = router;

	    this.text = new Text(this.editorElement, $domObject, this.router);
	    this.image = new Image(this.editorElement, $domObject, this.router);
	    this.video = new Video(this.editorElement, $domObject, this.router);
	    this.layer = new Layer(this.editorElement, $domObject, this.router);
	    this.hyperlink = new HyperLink(this.editorElement, $domObject, this.router);
	    this.paragraph = new Paragraph(this.editorElement, $domObject, this.router);
	    this.list = new List(this.editorElement, $domObject, this.router);
	    this.table = new Table(this.editorElement, $domObject, this.router);
	    this.symbol = new Symbol(this.editorElement, $domObject, this.router);
	    this.paste = new Paste(this.editorElement, $domObject, this.router);
	    this.pageBreak = new PageBreak(this.editorElement, $domObject, this.router);
	    this.horizontal = new Horizontal(this.editorElement, $domObject, this.router);
	    this.bookmark = new Bookmark(this.editorElement, $domObject, this.router);
	    this.tab = new Tab(this.editorElement, $domObject, this.router);
	    this.upperLower = new UpperLower(this.editorElement, $domObject, this.router);

	    this.findReplace = new FindReplace(this.editorElement, $domObject, this.router);
	};

	ModuleManager.prototype.throwExecute = function(menu) {
	    switch(menu.id){
	        case "find_replace" :
	            this.findReplace.execute(menu);
	            break;
	        default :
	            break;
	    }
	};

	ModuleManager.prototype.execute = function(opData) {
	    var returnData = null;

	    // console.log(opData);

	    this.contentArea.attr('contenteditable', 'true');

	    opData.type = (opData.type == "delete") ? "del" : opData.type;
	    switch (opData.name) {
	        case "text" :
	            returnData = this.text[opData.type](opData);
	            break;
	        case "image" :
	            returnData = this.image[opData.type](opData);
	            break;
	        case "video" :
	            returnData = this.video[opData.type](opData);
	            break;
	        case "layer" :
	            returnData = this.layer[opData.type](opData);
	            break;
	        case "paste" :
	            returnData = this.paste[opData.type](opData);
	            break;
	        case "hyperlink" :
	            returnData = this.hyperlink[opData.type](opData);
	            break;
	        case "horizontal" :
	            returnData = this.horizontal[opData.type](opData);
	            break;
	        case "page_break" :
	            returnData = this.pageBreak[opData.type](opData);
	            break;
	        case "table" :
	            returnData = this.table[opData.type](opData);
	            break;
	        case "symbol" :
	            returnData = this.symbol[opData.type](opData);
	            break;
	        case "bookmark" :
	            returnData = this.bookmark[opData.type](opData);
	            break;
	        case "tab" :
	            returnData = this.tab[opData.type](opData);
	            break;
	        case "upperLower" :
	            returnData = this.upperLower[opData.type](opData);
	            break;
	        default :
	            if ([
	                    "heading",
	                    "fontFamily",
	                    "fontSize",
	                    "marginLeft",
	                    "marginRight",
	                    "marginTop",
	                    "marginBottom",
	                    "letterSpacing",
	                    "wordSpacing",
	                    "textFormatPaste",
	                    "bold",
	                    "italic",
	                    "underline",
	                    "strike_through",
	                    "remove_format",
	                    "paragraph_remove_format",
	                    "color",
	                    "background_color",
	                    "super",
	                    "sub",
	                    "dir_ltr",
	                    "dir_rtl",
	                    "blockquote"].indexOf(opData.name) > -1){
	                returnData = this.paragraph[opData.type](opData);

	            }else if (["indent", "outdent", "align_left", "align_center", "align_right", "align_justify", "line_height"].indexOf(opData.name) > -1){
	                returnData = this.paragraph[opData.type](opData);
	            } else if(opData.name == "list"){
	                returnData = this.list[opData.type](opData);
	            } else {
	                // console.log("Unknown Module : " + opData.name);
	            }

	            break;
	    }

	    return returnData;
	};

	module.exports = ModuleManager;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(9);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);

	function Text (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Text.prototype, new AbstractModule());

	Text.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.contentView = this.editorElement.find("." + Define.CLASS.CONTENT_VIEW)[0];
	    this.contentNode = this.contentView.firstChild;
	    this.router = router;


	};

	Text.prototype.replace = function (opData, isNotSelection) {

	    console.log(opData);

	    this.$dom.selection.removeRange();
	    this.$dom.selection.removeSelected();

	    var range = opData.range;

	    this.$dom.selection.setOp({
	        p : [range.p[0], range.p[1]],
	        r : [range.r[0], range.r[1]]
	    });

	    var $selectedNode = this.$dom.selection.getSelectedNode();

	    if ($selectedNode.length) {
	        $selectedNode.remove();
	    }

	    var insertableNode = this.$dom.selection.getInsertableNode(range.p[0], range.r[0]);

	    if(insertableNode){
	        insertableNode.innerHTML = opData.value;
	    }

	};

	Text.prototype.create = function (opData) {

	    var range = opData.range;
	    var pIndex = range.p[0];
	    var rIndex = range.r[0];
	    var opNode = this.$dom.selection.getOpNode(pIndex, rIndex);
	    var blockNode = this.$dom.selection.getParentBlockNode(opNode.container);

	    if (blockNode == this.contentNode){
	        this.$dom.selection.setOp({p:[pIndex, pIndex], r:[rIndex, rIndex]});

	        var container = opNode.container;

	        var spanNode = container;
	        if (Util.isTextNode(container) || Util.isSingleRunNode(container) || Util.isTagName(container, 'A')){
	            if (! Util.isTagName(container.parentNode, 'SPAN')){
	                var cloneNode = node.cloneNode(false);
	                spanNode = document.createElement('span');
	                spanNode.appendChild(cloneNode);
	                $(container).before(spanNode);
	                $(container).remove();
	            }
	        }

	        if (spanNode){
	            this.$dom.selection.getSameBlockNode({p:[range.p[0], range.p[1]], r:[range.r[0], range.r[1]]});

	            var $selectedNode = this.$dom.selection.getSelectedNode();
	            var newOp = this.$dom.selection.getOp($selectedNode[0].firstChild, 0);

	            $selectedNode.remove();

	            range = {
	                p : [newOp.p, newOp.p],
	                r : [newOp.r, newOp.r]
	            };

	            pIndex = range.p[0];
	            rIndex = range.r[0];
	            opNode = this.$dom.selection.getOpNode(pIndex, rIndex);
	            blockNode = this.$dom.selection.getParentBlockNode(opNode.container);
	        }
	    }

	    if (Util.isTagName(blockNode, 'CAPTION') || Util.isTagName(blockNode.parentNode, 'CAPTION') || $(blockNode).parents('CAPTION').length > 0){
	        return;
	    }

	    var $pNode = $(Define.DEFAULT_PARAGRAPH_HTML);
	    var $lastSpanNode = $(blockNode).find('span').last();

	    if (blockNode && blockNode.nodeName == 'LI'){
	        $pNode = $(Define.DEFAULT_LI_HTML);
	    }else if (blockNode && blockNode.nodeName == 'DT'){
	        $pNode = $(Define.DEFAULT_DT_HTML);
	    }else if (blockNode && blockNode.nodeName == 'DD'){
	        $pNode = $(Define.DEFAULT_DD_HTML);
	    }

	    if ($lastSpanNode[0] && blockNode){
	        var lastCloneNode = $lastSpanNode[0].cloneNode(true);
	        lastCloneNode.innerHTML = Define.DEFAULT_TEXT_HTML;

	        var blockCloneNode = blockNode.cloneNode(true);
	        blockCloneNode.innerHTML = '';
	        blockCloneNode.appendChild(lastCloneNode);
	        $pNode = $(blockCloneNode);
	    }

	    // 시작점에 있는 경우 TODO. 시작점에 텍스트가 공백으로 보이지 않는 경우 range 는 1또는 갯수에 해당하는 만큼을 가르킴 이건 보정이 필요할듯
	    // p 로 만들어지는게 아니라 dt dd 또는 ul li 간격으로 만들어져 복사되는 경우도 있으니 확인하자

	    if (rIndex == 0){
	        var container = opNode.container;

	        var $li = $(container).closest('li');
	        if ($li.length > 0){

	            var listParentNode = $li[0].parentNode;
	            var listType = 'numbered';
	            if (listParentNode.nodeName == 'UL'){
	                listType = 'bullet'
	            }

	            return this.router.doOperation({type:"create", name:"list", value:{listType : listType, status : 'off'}});

	        }else{
	            if (! (opNode.container.nodeType == 1 && opNode.container.nodeName == 'SPAN')){
	                container = this.$dom.selection.getParentTagNode(container, ['SPAN'])[0];
	            }

	            var isContainBlockInBlock = false;
	            var firstNode = container;
	            while(container){
	                if (container.previousSibling && container.previousSibling.nodeType == 1 && Define.BLOCK_NODES.indexOf(container.previousSibling.nodeName) > -1){
	                    isContainBlockInBlock = true;
	                    break;
	                }

	                container = container.previousSibling;
	                if (container){
	                    firstNode = container;
	                }
	            }

	            if (! isContainBlockInBlock){
	                var blockParentNode = blockNode.parentNode;
	                blockParentNode.insertBefore($pNode[0], blockNode);
	                this.router.scrollIntoView(blockNode.firstChild);
	            }else{
	                blockNode.insertBefore($pNode[0], firstNode);
	                this.router.scrollIntoView(firstNode.firstChild);
	            }

	            var op = this.$dom.selection.get();

	            return {p : op.p, r : op.r};
	        }
	    }else{


	        //selection으로 0 부터 run index 까지 쪼갠다음에 그 다음 노드를 기준으로 분할한다
	        var selectedNode = this.$dom.selection.setOp({p:[pIndex, pIndex], r:[0, rIndex]}, false, true).selectedSpanNodes;
	        var sel = window.getSelection();
	        var rng = document.createRange();
	        var spanNode = null;

	        if (selectedNode.length == 0){
	            var clNode = selectedNode[0].cloneNode(true);
	            clNode.innerHTML = '&nbsp;';

	            defaultSpanNode = clNode;

	            blockNode.innerHTML = '';
	            blockNode.appendChild(defaultSpanNode);

	            var parentNode = blockNode.parentNode;
	            parentNode.insertBefore($pNode[0], blockNode);
	            this.router.scrollIntoView($pNode[0].firstChild);

	            sel.removeAllRanges();
	            rng.setStart(spanNode, 0);
	            rng.setEnd(spanNode, 0);
	            sel.addRange(rng);
	        }else{

	            var isContainBlockInBlock = false;
	            var targetNode = selectedNode[selectedNode.length - 1];

	            var defaultSpanNode = $(Define.DEFAULT_SPAN_HTML)[0];

	            //div span 등이 섞인 block 노드라면 block 다음에 노드를 삽입하지 않고 노드 자식 중에 하나로 삽입한다
	            while(targetNode){
	                if (targetNode.previousSibling && Util.isBlockNode(targetNode.previousSibling)){
	                    isContainBlockInBlock = true;
	                    break;
	                }

	                targetNode = targetNode.previousSibling;
	            }

	            var lastSelectNode = selectedNode[selectedNode.length - 1];

	            if (lastSelectNode && lastSelectNode.nextSibling){
	                lastSelectNode = lastSelectNode.nextSibling;
	                $pNode.html('');

	                var removeNodes = [];
	                var nextNode = lastSelectNode;
	                while(nextNode){
	                    removeNodes.push(nextNode);
	                    $pNode.append(nextNode.cloneNode(true));
	                    nextNode = nextNode.nextSibling;
	                }

	                for (var i=0,length=removeNodes.length; i<length; i++){
	                    $(removeNodes[i]).remove();
	                }
	            }else{
	                var blockLastSpanNode = $(blockNode).find('span').last()[0];
	                if (blockLastSpanNode){

	                    var clNode = blockLastSpanNode.cloneNode(true);
	                    clNode.innerHTML = '&nbsp;';

	                    defaultSpanNode = clNode;
	                }
	            }

	            if (isContainBlockInBlock){
	                $(blockNode).append($pNode[0]);
	            }else{
	                $(blockNode).after($pNode[0]);
	            }

	            // if (! ($pNode[0].firstChild && $pNode[0].firstChild.firstChild && Util.isTextNode($pNode[0].firstChild.firstChild) && $pNode[0].firstChild.firstChild.nodeValue == Define.NBSP)){
	            //     $pNode.prepend(defaultSpanNode);
	            //     spanNode = defaultSpanNode.firstChild;
	            // }else{
	                spanNode = $pNode.find("span")[0];
	            // }

	            //마지막 레인지 보정
	            this.router.scrollIntoView($pNode[0].firstChild);

	            sel.removeAllRanges();
	            rng.setStart(spanNode, 0);
	            rng.setEnd(spanNode, 0);
	            sel.addRange(rng);
	        }

	        var op = this.$dom.selection.getOp(spanNode, 0);

	        return {p : [op.p, op.p], r :[op.r, op.r]};

	    }
	};

	Text.prototype.update = function () {
	    // console.log("Text Update Method");
	};

	Text.prototype.read = function () {
	    // console.log("Text Read Method");
	};

	Text.prototype.removeEmptyBRNodes = function(target){
	    $(target).find("br").remove();
	};

	module.exports = Text;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	

	function AbstractModule(){}

	AbstractModule.prototype.create = function() {
	    console.log("Must implement the inherited abstract method 'create' ");
	};

	AbstractModule.prototype.update = function() {
	    console.log("Must implement the inherited abstract method 'update' ");
	};

	AbstractModule.prototype.read = function() {
	    console.log("Must implement the inherited abstract method 'read' ");
	};

	AbstractModule.prototype.del = function(op) {
	    if (this.router) {
	        this.router.doDelete(op);
	    }
	    return null;
	};

	module.exports = AbstractModule;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(9);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);

	function Image(editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Image.prototype, new AbstractModule());

	Image.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Image.prototype.setHyperlinkProperty = function (wrapSpanNode, hyperlink) {
	    var $wrapSpanNode = $(wrapSpanNode);

	    $wrapSpanNode[0].setAttribute(Define.ATTR.HREF, hyperlink.url);

	    if (hyperlink.type === 'url') {
	        if (hyperlink.title) {
	            $wrapSpanNode[0].setAttribute(Define.ATTR.TITLE, hyperlink.title);
	        }

	        if (hyperlink.target) {
	            $wrapSpanNode[0].setAttribute(Define.ATTR.TARGET, hyperlink.target);
	        }

	        if (hyperlink.id) {
	            $wrapSpanNode[0].setAttribute(Define.ATTR.ID, hyperlink.id);
	        }

	        if (hyperlink.className) {
	            $wrapSpanNode.addClass(hyperlink.className);
	        }
	    } else if (hyperlink.type === 'bookmark') {
	        $wrapSpanNode[0].removeAttribute(Define.ATTR.TITLE);
	        $wrapSpanNode[0].removeAttribute(Define.ATTR.TARGET);
	        $wrapSpanNode[0].removeAttribute(Define.ATTR.ID);
	        $wrapSpanNode[0].removeAttribute(Define.ATTR.CLASS);
	    }
	};

	Image.prototype.setImageProperty = function (imageNode, srcValues) {
	    var $image = $(imageNode);

	    if (srcValues.imageSrc) {
	        $image.attr('src', srcValues.imageSrc);
	    }

	    if (srcValues.imageTitle) {
	        $image.attr('title', srcValues.imageTitle);
	    }

	    if (srcValues.imageAlt) {
	        $image.attr('alt', srcValues.imageAlt);
	    }

	    if (srcValues.width !== null) {
	        if (srcValues.width === -1) {
	            $image.css('width', '');
	            $image.removeAttr('width');
	        } else {
	            $image.css('width', srcValues.width + 'px');
	            $image.attr('width', srcValues.width);
	        }
	    }

	    if (srcValues.height) {
	        if (srcValues.height === -1) {
	            $image.css('height', '');
	            $image.removeAttr('height');
	        } else {
	            $image.css('height', srcValues.height + 'px');
	            $image.attr('height', srcValues.height);
	        }
	    }

	    if (srcValues.margin) {
	        if (srcValues.margin.left) {
	            $image.css('marginLeft', srcValues.margin.left + 'px');
	        }
	        if (srcValues.margin.right) {
	            $image.css('marginRight', srcValues.margin.right + 'px');
	        }
	        if (srcValues.margin.top) {
	            $image.css('marginTop', srcValues.margin.top + 'px');
	        }
	        if (srcValues.margin.bottom) {
	            $image.css('marginBottom', srcValues.margin.bottom + 'px');
	        }
	    }

	    if (srcValues.align) {
	        $image.css('verticalAlign', srcValues.align);
	    }

	    if (srcValues.borderType) {
	        $image.css({
	            'border-style' : srcValues.borderType
	        });
	    }

	    if (srcValues.borderWidth) {
	        $image.css({
	            'border-width' : srcValues.borderWidth
	        });
	    }

	    if (srcValues.borderColor) {
	        $image.css({
	            'border-color' : srcValues.borderColor
	        });
	    }

	    if (srcValues.id) {
	        $image.attr('id', srcValues.id);
	    }

	    if (srcValues.className) {
	        $image.attr('class', srcValues.className);
	    }

	    return $image;
	};

	Image.prototype.create = function (opData) {
	    var srcValues = opData.value;

	    var insertableNode = this.$dom.selection.getInsertableNode(opData.range.p[0], opData.range.r[0]);

	    if (insertableNode){
	        var $wrapSpanNode = $(insertableNode);
	        var $image = $('<img>');

	        this.setImageProperty($image, srcValues);

	        if (srcValues.hyperlink.type) {
	            var $anchorNode = $('<a/>');

	            this.setHyperlinkProperty($anchorNode, srcValues.hyperlink);
	            $wrapSpanNode.before($anchorNode);
	            $anchorNode.append($wrapSpanNode);
	        }

	        $wrapSpanNode.append($image[0]);

	        var sel = window.getSelection();
	        var rng = document.createRange();
	        sel.removeAllRanges();

	        rng.setStart($wrapSpanNode[0], 1);
	        rng.setEnd($wrapSpanNode[0], 1);

	        sel.addRange(rng);

	        var op = this.$dom.selection.getOp($wrapSpanNode[0], 1);

	        return {
	            p : [op.p, op.p],
	            r : [op.r, op.r]
	        };
	    }

	    return null;

	};

	Image.prototype.update = function (opData) {

	    var image = this.$dom.selection.getModifyTargetNode();

	    if (image.length && image.is('img')) {
	        var srcValues = opData.value;

	        this.setImageProperty(image, srcValues);

	        if (srcValues.hyperlink.type) {

	            var parent = image.parent();

	            if (!parent.is('a')) {
	                image.wrap('<a/>');

	                parent = image.parent();
	            }

	            this.setHyperlinkProperty(parent, srcValues.hyperlink);
	        }
	    }

	    this.$dom.selection.removeModifyTargetNode();
	};

	Image.prototype.read = function () {
	    console.log("Image Read Method");
	};

	module.exports = Image;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(9);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);

	function Video(editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Video.prototype, new AbstractModule());

	Video.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Video.prototype.setVideoProperty = function ($embed, srcValues) {
	    var $embed = $($embed);

	    if (srcValues.videoUrl) {
	        $embed.attr('src', srcValues.videoUrl);
	    }

	    if (srcValues.width) {
	        $embed.css('width', srcValues.width + 'px');
	    }

	    if (srcValues.height) {
	        $embed.css('height', srcValues.height + 'px');
	    }

	    $embed.attr(Define.ATTR.AUTO_START, srcValues.isAutostart ? "1" : "0");
	    $embed[0].setAttribute(Define.ATTR.LOOP, srcValues.isLoop ? "1" : "0");
	    $embed.attr(Define.ATTR.SHOW_TRACKER, srcValues.isShowtracker ? "1" : "0");
	    $embed.attr(Define.ATTR.SHOW_STATUSBAR, srcValues.isShowstatusbar ? "1" : "0");
	    $embed.attr(Define.ATTR.SHOW_CONTROLS, srcValues.isShowcontrols ? "1" : "0");
	    $embed.attr(Define.ATTR.SHOW_AUDIO_CONTROLS, srcValues.isShowaudiocontrols ? "1" : "0");
	    $embed.attr(Define.ATTR.SHOW_DISPLAY, srcValues.isShowdisplay ? "1" : "0");
	    $embed.attr(Define.ATTR.SHOW_POSITION_CONTROLS, srcValues.isShowpositioncontrols ? "1" : "0");
	    $embed.attr(Define.ATTR.PLAY, srcValues.isPlay ? "true" : "false");
	    $embed.attr(Define.ATTR.MENU, srcValues.isMenu ? "true" : "false");
	    $embed.attr(Define.ATTR.ALLOW_FULLSCREEN, srcValues.isAllowfullscreen ? "true" : "false");

	    $embed.attr(Define.ATTR.TYPE, srcValues.isAllowfullscreen ? "true" : "false");

	    return $embed;
	};

	Video.prototype.getVideoData = function (srcValues) {
	    var $embed = $('<embed/>');
	    this.setVideoProperty($embed, srcValues);

	    if (srcValues.videoExt === 'swf') {
	        $embed.attr(Define.ATTR.TYPE, Define.ATTR.KK_FLASH_TYPE);
	        $embed.attr(Define.ATTR.PLUGINSPAGE, Define.ATTR.KK_FLASH_PLUGIN);

	        return $embed;
	    } else if (srcValues.videoExt === 'avi' || srcValues.videoExt === 'wmv' || srcValues.videoExt === 'asf') {
	        $embed[0].setAttribute(Define.ATTR.TYPE, Define.ATTR_VALUE.KK_VIDEO_TYPE);
	        $embed[0].setAttribute(Define.ATTR.PLUGINSPAGE, Define.ATTR_VALUE.KK_VIDEO_PLUGIN);

	        return $embed;
	    } else {
	        var $object = $('<object/>');

	        $object.attr(Define.ATTR.DATA, srcValues.videoUrl);
	        $object.css({
	            width : srcValues.width,
	            height : srcValues.height
	        });

	        $object.append($embed);

	        var $source = $('<source/>');
	        $source.attr(Define.ATTR.SRC, srcValues.videoUrl);
	        $source.attr(Define.ATTR.TYPE, 'video/' + srcValues.videoExt);

	        var $video = $('<video/>');
	        $video.css({
	            width : srcValues.width,
	            height : srcValues.height
	        });
	        $video.attr('controls', 'true');

	        $video.append($source);
	        $video.append($object);

	        return $video;
	    }
	};

	Video.prototype.create = function (opData) {
	    //console.log("Video Create Method");
	    console.log(opData);

	    var $videoImg = $('<img>');
	    $videoImg.attr(Define.ATTR.SRC, this.router.options.playImageURL);

	    var cursorRunOffset = opData.range.r[0];

	    var srcValues = opData.value;

	    var $video = null;

	    if (srcValues.videoType === 'file') {
	        $video = this.getVideoData(srcValues);
	    } else if (srcValues.videoType === 'source') {
	        $video = $(srcValues.videoSource);
	    }

	    $video.attr(Define.ATTR.DATA_VIDEO_TYPE, srcValues.videoType);

	    $videoImg.attr(Define.ATTR.DATA_VIDEO_SOURCE, encodeURIComponent($video[0].outerHTML));
	    $videoImg.attr(Define.ATTR.DATA_VIDEO_TYPE, srcValues.videoType);
	    $videoImg.attr(Define.ATTR.STYLE, $video.attr(Define.ATTR.STYLE));

	    if ($video && $video.length) {
	        this.editorElement.find("." + Define.CLASS.CONTENTS)[0].setAttribute("contenteditable", true);

	        var insertableNode = this.$dom.selection.getInsertableNode(opData.range.p[0], opData.range.r[0]);
	        var $wrapSpanNode = $(insertableNode);
	        $wrapSpanNode.append($videoImg);

	        var sel = window.getSelection();
	        var rng = document.createRange();
	        sel.removeAllRanges();

	        rng.setStart($wrapSpanNode[0], 1);
	        rng.setEnd($wrapSpanNode[0], 1);

	        sel.addRange(rng);

	        var op = this.$dom.selection.getOp($wrapSpanNode[0], 1);

	        return {
	            p : [op.p, op.p],
	            r : [op.r, op.r]
	        };
	    }
	};

	Video.prototype.update = function (opData) {

	    var targetVideoImage = this.$dom.selection.getModifyTargetNode();

	    if (targetVideoImage.length && targetVideoImage.is('img')) {
	        var srcValues = opData.value;

	        var $video = null;

	        if (srcValues.videoType === 'file') {
	            $video = this.getVideoData(srcValues);
	        } else if (srcValues.videoType === 'source') {
	            $video = $(srcValues.videoSource);
	        }
	        $video.attr(Define.ATTR.DATA_VIDEO_TYPE, srcValues.videoType);

	        var $videoImg = $('<img>');
	        $videoImg.attr(Define.ATTR.SRC, this.router.options.playImageURL);

	        $videoImg.attr(Define.ATTR.DATA_VIDEO_SOURCE, encodeURIComponent($video[0].outerHTML));
	        $videoImg.attr(Define.ATTR.DATA_VIDEO_TYPE, srcValues.videoType);
	        $videoImg.attr(Define.ATTR.STYLE, $video.attr(Define.ATTR.STYLE));

	        targetVideoImage.replaceWith($videoImg[0].outerHTML);
	    }

	    this.$dom.selection.removeModifyTargetNode();
	};

	Video.prototype.read = function () {
	    console.log("Video Read Method");
	};

	module.exports = Video;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(9);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);
	var Resource = __webpack_require__(13);

	function Layer(editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Layer.prototype, new AbstractModule());

	Layer.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Layer.prototype.setLayerProperty = function ($div, srcValues) {
	    if (srcValues.width) {
	        $div.css('width', srcValues.width + 'px');
	    }

	    if (srcValues.height) {
	        $div.css('height', srcValues.height + 'px');
	    }

	    if (srcValues.positionX) {
	        $div.css('left', srcValues.positionX + 'px');
	    }

	    if (srcValues.positionY) {
	        $div.css('top', srcValues.positionY + 'px');
	    }

	    if (srcValues.id) {
	        $div.attr('id', srcValues.id);
	    }

	    if (srcValues.className) {
	        $div.attr('class', srcValues.className);
	    }

	    $div.css('position', 'relative');
	    $div.css('border', '1px dashed #000000');
	    $div.css('overflow', 'scroll');

	    $div.attr(Define.ATTR.TYPE, Define.ATTR_VALUE.KK_LAYER);

	    return $div;
	};

	Layer.prototype.create = function (opData) {
	    console.log(opData);

	    var $div = $('<div/>');

	    $div.html(Define.DEFAULT_P_STYLE + '<span>' + Resource.layerDialog.new_layer_msg + '</span></p>');

	    var srcValues = opData.value;

	    $div = this.setLayerProperty($div, srcValues);

	    this.$dom.selection.setOp({p : [opData.range.p[0], opData.range.p[0]], r : [opData.range.r[0], opData.range.r[0]]});

	    var currentRange = this.$dom.selection.getRange();

	    var resultObj = Util.splitParagraphNode(currentRange);

	    if (resultObj.prevNode) {
	        resultObj.prevNode.after($div);
	        $div.after($(Define.DEFAULT_PARAGRAPH_HTML));

	    } else if (resultObj.nextNode) {
	        resultObj.nextNode.before($div);
	        $div.before($(Define.DEFAULT_PARAGRAPH_HTML));
	    }

	    var firstSpanNode = $div.find('span')[0];

	    if (firstSpanNode){
	        this.$dom.selection.setWindowRange(firstSpanNode, 0);
	    }

	    this.router.scrollIntoView($div[0]);
	};

	Layer.prototype.update = function (opData) {

	    var targetLayer = this.$dom.selection.getModifyTargetNode();

	    if (targetLayer.length && targetLayer.attr(Define.ATTR.TYPE) === Define.ATTR_VALUE.KK_LAYER) {
	        var srcValues = opData.value;

	        this.setLayerProperty(targetLayer, srcValues);
	    }

	    this.$dom.selection.removeModifyTargetNode();
	};

	Layer.prototype.read = function () {
	    console.log("Layer Read Method");
	};

	module.exports = Layer;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

	module.exports = {
	    menu: {
	        "bold": "굵기"
	    },
	    pasteMessage: {
	        pasteTypeConfirm: '붙여넣기 유형 선택',
	        imagePasteConfirm: '어느 유형으로 붙여넣습니까?'
	    },
	    dialog: {
	        "okButton": "적용",
	        "cancelButton": "취소"
	    },
	    settingDialog: {
	        "title": "환경설정",
	        "pageTitleLabel": "페이지 타이틀",
	        "encodingLabel": "페이지 인코딩",
	        "encodingTypes": {
	            "utf-8": "유니코드(UTF-8)",
	            "euc-kr": "한국어(EUC)",
	            "ks_c_5601-1987": "한국어(완성형/ANSI)",
	            "IBM437": "OEM 영어(IBM437)",
	            "IBM855": "OEM 카릴 자모(IBM855)",
	            "x-cp20261": "T.61(x-cp20261)",
	            "us-ascii": "US ASCII(us-ascii)",
	            "iso-2022-jp": "일본어(JIS)",
	            "euc-jp": "일본어(EUC)",
	            "shift_jis": "일본어(Shift-JIS)",
	            "GB18030": "중국어 간체(GB18030)",
	            "gb2312": "중국어 간체(GB2312)",
	            "hz-gb-2312": "중국어 간체(HZ)",
	            "big5": "중국어 번체(BIG5)",
	            "asmo-708": "아랍어(ASMO 708)",
	            "dos-720": "아랍어(DOS)",
	            "iso-8859-6": "아랍어(ISO)",
	            "windows-1256": "아랍어(Windows)",
	            "iso-8859-4": "발트어(ISO)",
	            "windows-1257": "발트어(Windows)",
	            "iso-8859-1": "서유럽어(ISO)",
	            "windows-1252": "서유럽어(Windows)",
	            "ibm852": "중앙 유럽어(DOS)",
	            "iso-8859-2": "중앙 유럽어(ISO)",
	            "windows-1250": "중앙 유럽어(Windows)",
	            "cp866": "키릴자모(DOS)",
	            "iso-8859-5": "키릴자모(ISO)",
	            "koi8-r": "키릴자모(KOI8-R)",
	            "koi8-u": "키릴자모(KOI8-u)",
	            "windows-1251": "키릴자모(Windows)",
	            "iso-8859-7": "그리스어(ISO)",
	            "windows-1253": "그리스어(Windows)",
	            "dos-862": "히브리어(DOS)",
	            "iso-8859-8-i": "히브리어(ISO-Logical)",
	            "iso-8859-8": "히브리어(ISO-Visual)",
	            "windows-1255": "히브리어(Windows)",
	            "windows-874": "태국어(Windows)",
	            "iso-8859-9": "터키어(ISO)",
	            "windows-1254": "터키어(Windows)",
	            "windows-1258": "베트남어(Windows)",
	            "user": "사용자 정의"
	        },
	        "languageLabel": "페이지 언어",
	        "languageTypes": {
	            "none": "없음",
	            "af": "남아공 공용어",
	            "ar": "아랍어",
	            "bg": "불가리아어",
	            "bn": "브루나이",
	            "ca": "카탈로니아어",
	            "cs": "체코어",
	            "da": "덴마크어",
	            "de": "독일어",
	            "el": "그리스어",
	            "en": "영어",
	            "en-au": "영어(오스트레일리아)",
	            "en-ca": "영어(캐나다)",
	            "en-gb": "영어(영국)",
	            "en-us": "영어(미국)",
	            "es": "스페인어",
	            "et": "에스토니아어",
	            "eu": "바스크어",
	            "fa": "페르시아어",
	            "fo": "페로스어",
	            "fr": "프랑스어",
	            "fr-ca": "프랑스어(캐나다)",
	            "gl": "갈리시아어",
	            "gu": "구자라트어",
	            "he": "히브리어",
	            "hi": "힌디어",
	            "hr": "크로아티아어",
	            "hu": "헝가리어",
	            "is": "아이슬란드어",
	            "it": "이탈리아어",
	            "ja": "일본어",
	            "ka": "그루지야어",
	            "ko": "한국어",
	            "lt": "리투아니아어",
	            "lv": "라트비아어",
	            "mk": "마케도니아어",
	            "mn": "몽골어",
	            "ms": "말레이어",
	            "nl": "네덜란드어",
	            "no": "노르웨이어",
	            "pl": "폴란드어",
	            "pt": "포르투갈어",
	            "pt-br": "포르투갈어(브라질)",
	            "ro": "루마니아어",
	            "ru": "러시아어",
	            "sk": "슬로바키아어",
	            "sl": "슬로베니아어",
	            "sq": "알바니아어",
	            "sr": "세르비아어",
	            "sr-latn": "세르비아어(세르비아, 라틴 문자)",
	            "sv": "스웨덴어",
	            "th": "태국어",
	            "tr": "터키어",
	            "uk": "우크라이나어",
	            "vi": "베트남어",
	            "zh": "중국어"
	        },

	        "documentTypeLabel": "페이지 유형",
	        "documentTypes": {
	            "default": "기본값",
	            "html5": "HTML 5",                                  // <!DOCTYPE html>
	            "xhtml1.1": "XHTML 1.1",                            // <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3c.org/TR/xhtml11/DTD/xhtml11.dtd">
	            "xhtml1.0transitional": "XHTML 1.0 Transitional",   // <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3c.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
	            "xhtml1.0strict": "XHTML 1.0 Strict",               // <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3c.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
	            "xhtml1.0frameset": "XHTML 1.0 Frameset",           // <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3c.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
	            "html4.01transitional": "HTML 4.01 Transitional",   // <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/xhtml4/loose.dtd">
	            "html4.01strict": "HTML 4.01 Strict",               // <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3c.org/TR/xhtml4/strict.dtd">
	            "html4.01frameset": "HTML 4.01 Frameset",           // <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3c.org/TR/xhtml4/frameset.dtd">
	            "html3.2": "HTML 3.2",                              // <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
	            "html2.0": "HTML 2.0"                               // <!DOCTYPE html PUBLIC "-//IETF//DTD HTML 3.2//EN">
	        },

	        "autoSaveLabel": "자동저장 사용",
	        "autoSaveMinuteLabel": "분",

	        "okButton": "적용",
	        "closeButton": "닫기"
	    },
	    aboutDialog: {
	        "title": "버전정보",
	        "companyName": "회사명",
	        "companyTitle": "Kukudocs",
	        "editorTitle": "Editor",
	        "licenseName": "라이선스",
	        "productkeyName": "제품키",
	        "versionName": "버전",
	        "homepage": "홈페이지",
	        "copyright": "Copyright ⓒ 2016 - 2018 Kukudocs CO. LTD",
	        "reserved": "ALL RIGHT RESERVED",
	        "closeButton": "닫기"
	    },
	    openFileDialog: {
	        "title": "파일 열기",
	        "file_path_label": "파일 경로",
	        "file_input_label": "파일 찾기",
	        "file_valid_info": "지원 가능한 파일 확장자는 html, htm, txt 입니다.",

	        "file_encoding_label": "파일 인코딩"

	    },

	    layoutDialog: {
	        "title": "레이아웃",
	        "subjectLabel": "제목을 입력하세요.",
	        "descLabel": "내용을 입력하세요.",

	        "layoutAcceptConfirm": "편집내용이 삭제됩니다. 계속 진행하시겠습니까?",
	    },

	    autoSaveLoadDialog: {
	        "title": "자동 저장 불러오기",
	        "save_time": "저장 일시",

	        "okButton": "복원",
	        "deleteButton": "삭제",
	        "cancelButton": "닫기",

	        "autoSaveLoadAcceptConfirm": "자동 저장 내용을 적용하시겠습니까?",
	    },

	    templateDialog: {
	        "title": "템플릿",

	        "category_title": "목록",
	        "item_title": "템플릿 선택",

	        "invalidCategory": "정상적으로 템플릿 설정이 되지 않았습니다. \n다시 확인후 진행해 주시기 바랍니다.",
	        "invalidItemType": "템플릿 타입이 올바르지 않습니다.",
	        "invalidURL": "템플릿을 로드하지 못했습니다.",
	        "unknownError": "알 수 없는 에러가 발생되었습니다.",
	        "notSelectedTemplateMsg": "템플릿이 선택되지 않았습니다.",

	        "htmlAcceptConfirm" : "템플릿 적용시 기존 편집내용이 삭제됩니다. \n계속 진행하시겠습니까?",
	    },

	    textPasteDialog: {
	        "title": "텍스트로 붙여넣기",
	        "msg_no_text": "텍스트 내용이 없습니다. "
	    },

	    tableDialog: {
	        "title_insert": "새 표",
	        "title_modify": "표 속성",
	        "tab_common": "일반",
	        "tab_background": "배경 및 제목셀",
	        "tab_template": "템플릿",

	        "row_count": "가로줄",
	        "col_count": "세로줄",
	        "width_count": '너비',
	        "height_count": '높이',

	        "margin_left_count": '들여쓰기',
	        "align_count": '수평정렬',
	        "align_default": '기본값',
	        "align_left": '왼쪽',
	        "align_center": '가운데',
	        "align_right": '오른쪽',

	        "id_label": 'ID',
	        "class_label": 'CLASS',

	        "border_separate": '표 테두리 / 셀 테두리 분리',

	        "border_type": '선 모양',
	        "border_solid_type": '실선',
	        "border_double_type": '이중선',
	        "border_dashed_type": '파선',
	        "border_dotted_type": '점선',
	        "border_none_type": '선없음',

	        "border_color": '선 색상',
	        "border_width": '선 두께',

	        "border_cell_spacing_width": '셀 간격',
	        "border_cell_padding": '셀 안쪽 여백',

	        "border_option": '선 선택',
	        "border_outline": '테두리',
	        "border_inner": '안 쪽',
	        "border_all": '전체',
	        "border_custom": '사용자 정의',

	        "table_caption": '표 제목',
	        "table_summary": '표 설명',

	        "table_background_image": '이미지',
	        "table_background_attachment": '붙임형태',
	        "table_background_position_x": '수평위치',
	        "table_background_position_y": '수직위치',

	        "file_input_label": "이미지 찾기",

	        "attachment_default": '기본값',
	        "attachment_scroll": '스크롤',
	        "attachment_fixed": '고정',

	        "table_background_repeat_label": '반복형태',
	        "table_background_repeat_default": '기본값',
	        "table_background_no_repeat": '반복안함',
	        "table_background_repeat": '반복',
	        "table_background_repeat_x": '가로 방향으로 반복',
	        "table_background_repeat_y": '세로 방향으로 반복',

	        "background_color": '배경 색상',

	        "scope_setting": 'Scope 설정',
	        "header_none": '없음',
	        "header_left": '왼쪽',
	        "header_top": '위쪽',
	        "header_left_top": '모두',
	    },

	    cellDialog: {
	        "title_modify": '셀 속성',

	        "tab_common": "일반",
	        "tab_background": "배경 및 제목셀",

	        "vertical_align_count": '수직정렬',

	        "vertical_align_default": '기본값',
	        "vertical_align_baseline": '기준선',
	        "vertical_align_top": '위쪽',
	        "vertical_align_middle": '가운데',
	        "vertical_align_bottom": '아래쪽',


	        "align_count": '수평정렬',
	        "align_default": '기본값',
	        "align_left": '왼쪽',
	        "align_center": '가운데',
	        "align_right": '오른쪽',

	        "white_space_label": '줄 바꿈 금지',
	        "white_space_default": '기본값',
	        "white_space_normal": '해제',
	        "white_space_nowrap": '설정',


	        "header_label": '제목 셀',
	        "header_default": '기본값',
	        "header_none": '해제',
	        "header_hr": '설정',

	        "scope_label": 'Scope',
	        "scope_default": '기본값',
	        "scope_none": '해제',
	        "scope_row": 'row',
	        "scope_col": 'col',

	        "border_type": '선 모양',
	        "border_solid_type": '실선',
	        "border_double_type": '이중선',
	        "border_dashed_type": '파선',
	        "border_dotted_type": '점선',
	        "border_none_type": '선없음',


	        "border_color": '선 색상',
	        "border_width": '선 두께',

	        "border_option": '선 선택',
	        "border_outline": '테두리',


	        "table_background_image": '이미지',
	        "table_background_attachment": '붙임형태',
	        "table_background_position_x": '수평위치',
	        "table_background_position_y": '수직위치',

	        "file_input_label": "이미지 찾기",

	        "attachment_default": '기본값',
	        "attachment_scroll": '스크롤',
	        "attachment_fixed": '고정',

	        "table_background_repeat_label": '반복형태',
	        "table_background_repeat_default": '기본값',
	        "table_background_no_repeat": '반복안함',
	        "table_background_repeat": '반복',
	        "table_background_repeat_x": '가로 방향으로 반복',
	        "table_background_repeat_y": '세로 방향으로 반복',

	        "background_color": '배경 색상',
	    },


	    hyperlinkDialog: {
	        "title": "하이퍼링크",
	        "linkType": "링크종류",
	        "urlType": "URL",
	        "bookmarkType": "책갈피",

	        "urlLabel": "주소(URL)",
	        "urlText": "텍스트",
	        "urlTitle": "제목",
	        "urlTarget": "대상 프레임",
	        "urlId": "id(option)",
	        "urlClass": "class(option)",

	        "target_none": "없음",
	        "target_blank": "_blank",
	        "target_parent": "_parent",
	        "target_self": "_self",
	        "target_top": "_top",

	        'bookmarkTitle': "표시할 텍스트",
	        'bookmarkList': "책갈피 목록",

	        "linkText": "텍스트",
	        "linkUrl": "링크",
	        "msg_no_text": "텍스트 내용이 없습니다. ",
	        "msg_no_url": "하이퍼링크의 주소를 입력해주세요. ",
	        "msg_invalid_url": "하이퍼링크 주소가 올바르지 않습니다. ",
	        "bookmark_invalid": '선택된 책갈피가 없습니다.'
	    },
	    dateFormatDialog: {
	        "title": "날짜/시간 삽입",
	        "msg_no_text": "텍스트 내용이 없습니다. "
	    },
	    symbolsDialog: {
	        "title": "기호",
	        "selectSymbol": "선택한 기호",
	        "symbols_general": "일반기호",
	        "symbols_number": "숫자/단위",
	        "symbols_regrar": "선",
	        "symbols_circleChar": "원/괄호",
	        "symbols_kor": "한글",
	        "symbols_latini": "그리스/라틴",
	        "symbols_jap": "일본어",
	        "symbols_normal": "기본"
	    },
	    bookmarkDialog: {
	        "title": "책갈피 삽입",
	        "bookmark_edit_label": "책갈피 이름",
	        "bookmark_add": "추가",
	        "bookmark_modify": "수정",
	        "bookmark_delete": "삭제",
	        "bookmark_delete_confirm_message": "책갈피 항목을 삭제하시겠습니까? ",
	        "bookmark_list_label": "책갈피 목록",
	        "bookmark_already_bookmark": "이미 존재하는 책갈피 이름 입니다.",
	        "bookmark_not_use_special_character": "특수문자는 사용할 수 없습니다.",
	        "bookmark_non_text": "책갈피 이름을 입력하세요.",
	        "bookmark_non_only_space": "책갈피 이름에 공백만 삽입할 수 없습니다.",
	        "closeButton": "닫기"
	    },
	    paragraphDialog: {
	        "title": "문단 여백",
	        "margin_left": '좌측 여백',
	        "margin_right": '우측 여백',
	        "margin_top": '상단 여백',
	        "margin_bottom": '하단 여백',
	        "letter_spacing": '글자간격',
	        "word_spacing": '단어간격'
	    },

	    backgroundImageDialog: {
	        "title": "배경이미지 설정",

	        "background_image": '이미지',
	        "background_attachment": '붙임형태',
	        "background_position_x": '수평위치',
	        "background_position_y": '수직위치',

	        "file_input_label": "이미지 찾기",

	        "attachment_default": '기본값',
	        "attachment_scroll": '스크롤',
	        "attachment_fixed": '고정',

	        "background_repeat_label": '반복형태',
	        "background_repeat_default": '기본값',
	        "background_no_repeat": '반복안함',
	        "background_repeat": '반복',
	        "background_repeat_x": '가로 방향으로 반복',
	        "background_repeat_y": '세로 방향으로 반복',

	        "background_color": '배경 색상',
	        "background_clear": '배경 제거',
	    },

	    imageDialog: {
	        "insert_title": "이미지 삽입",
	        "modify_title": "이미지 수정",
	        "tab_common": "일반",
	        "tab_hyperlink": "하이퍼링크",

	        "image_url_path": "이미지 URL",
	        "file_input_label": "이미지 찾기",

	        "image_title": "이미지 제목",
	        "image_alt": "이미지 설명",

	        "image_width": "너비",
	        "image_height": "높이",
	        "image_margin_left": "좌여백",
	        "image_margin_right": "우여백",
	        "image_margin_top": "상여백",
	        "image_margin_bottom": "하여백",
	        "image_id": "ID",
	        "image_class": "Class",

	        "image_align": "정렬",
	        "align_default": "default",
	        "align_left": "Left",
	        "align_top": "Top",
	        "align_middle": "Middle",
	        "align_baseline": "Baseline",
	        "align_bottom": "Bottom",
	        "align_texttop": "Text Top",
	        "align_absmiddle": "absMiddle",
	        "align_absbottom": "absBottom",

	        "image_line_color": "선 색상",
	        "image_line_width": "선 두께",

	        "image_border": "선 모양",
	        "image_border_none": "없음",
	        "image_border_solid": "Solid",
	        "image_border_dotted": "Dotted",
	        "image_border_dashed": "Dashed",
	        "image_border_double": "Double",
	        "image_border_groove": "Groove",
	        "image_border_ridge": "Ridge",
	        "image_border_inset": "Inset",
	        "image_border_outset": "Outset",

	        "image_original_size": "이미지 원본크기 유지",
	        "image_next_insert": "이미지 계속 삽입",

	        "msg_invalid_image": "이미지를 찾을 수 없습니다. 이미지 주소를 확인하여 주세요. ",
	        "msg_invalid_url": "첨부할 이미지의 주소 형식이 올바르지 않습니다. ",
	        "msg_invalid_hyperlink": "하이퍼링크의 주소 형식이 올바르지 않습니다. ",
	        "msg_invalid_bookmark": "책갈피 형식이 올바르지 않습니다. ",
	        "msg_empty_url": "이미지를 선택해 주세요.",
	        "image_upload_error": "이미지 업로드의 문제가 발생되었습니다. \n다시 시도하여 주세요.",

	        "tooltip_status_image_default_size" : "값을 변경하려면 이미지 원본크기 유지 항목을 해제하여 주세요."
	    },

	    videoDialog: {
	        "insert_title": "동영상 삽입",
	        "modify_title": "동영상 수정",
	        "linkType": "동영상 종류",
	        "fileType": "파일선택",
	        "sourceType": "소스입력",

	        "video_url_path": "동영상 URL",
	        "file_input_label": "동영상 찾기",

	        "video_width": "너비",
	        "video_height": "높이",

	        "video_auto_play": "자동 재생",
	        "video_infinity_loop": "무한 반복",
	        "video_show_tracker": "진행바 보기",
	        "video_show_status": "상태바 보기",
	        "video_show_controls": "컨트롤 보기",
	        "video_show_volume": "볼륨조절 보기",
	        "video_show_display": "정보창 보기",
	        "video_show_position": "바로가기 보기",

	        "video_source_type_notice1": "1. 공유하려는 동영상, 마우스 우클릭 또는 공유 버튼 클릭",
	        "video_source_type_notice2": "2. object, embed, video 또는 iframe 소스코드 복사",
	        "video_source_type_notice3": "3. 아래 입력란에 소스코드를 붙여넣기 <br> ( YouTube, Daum, Naver, Pandora 등의 동영상을 공유 )",

	        "video_upload_error": "동영상 업로드 중 문제가 발생되었습니다. ",

	        "msg_invalid_file_url": "첨부할 동영상 주소가 올바르지 않습니다.",
	        "msg_invalid_source": "첨부할 동영상 Source(소스)를 입력하여 주십시오.",

	        "msg_invalid_tpe": "파일 유형을 확인하여 주시기 바랍니다.",
	        "msg_invalid_control_check" : "해당 옵션은 컨트롤 보기 옵션이 함께 적용되어야 합니다."
	    },

	    fileDialog: {
	        "insert_title": "파일 삽입",
	        "modify_title": "파일 수정",

	        "file_url_path": "파일 URL",
	        "file_input_label": "파일 찾기",

	        "file_text": "텍스트",
	        "file_title": "제목",
	        "file_id": "ID",
	        "file_class": "CLASS",

	        "empty_invalid_file_url": "첨부할 파일의 주소를 입력하세요.",
	        "file_invalid_file_url": "첨부할 파일의 주소가 올바르지 않습니다.",
	        "file_upload_error": "파일 업로드 중 문제가 발생되었습니다. ",

	        "msg_invalid_tpe": "파일 유형을 확인하여 주시기 바랍니다."
	    },

	    emoticonDialog: {
	        "insert_title": "이모티콘 삽입",

	        "msg_invalid_tpe": "삽입할 이모티콘을 확인하여 주시기 바랍니다."
	    },

	    upperLowerDialog: {
	        "insert_title": "대/소문자 바꾸기",
	        "upper" : "선택된 내용을 모두 대문자로 변경 <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ex) abc -> ABC",
	        "lower" : "선택된 내용을 모두 소문자로 변경 <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ex) ABC -> abc",
	        "capitalize_first" : "선택된 내용의 단어 첫글자만 대문자로 <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ex) words -> Words"
	    },

	    layerDialog: {
	        "insert_title": "레이어 삽입",
	        "modify_title": "레이어 수정",

	        "width": "너비",
	        "height": "높이",
	        "positionX": "수평위치",
	        "positionY": "수직위치",
	        "id": "ID",
	        "className": "CLASS",

	        "new_layer_msg": "New Layer area..."
	    },

	    blockquoteDialog: {
	        "insert_title": "인용구문"
	    },

	    findReplace: {
	        "title": "찾기/바꾸기",
	        "find": "찾기",
	        "replace": "바꾸기",
	        "replaceAll": "모두 바꾸기",
	        "textCase": "대/소문자 구별",
	        "findRestart": "문서 끝에서 되돌리기",
	        "findWord": "단어 단위",

	        "findDirectionLabel": "검색 방향",
	        "findDirectionUp": "위로",
	        "findDirectionDown": "아래로",

	        "lastPosition" : '마지막 위치 입니다.',
	        "totalReplaceCount": "총 @@count@@ 건 변경 되었습니다.",
	        "close": "닫기"
	    },

	    menuTitle: {
	        //File Group
	        'new': '새로만들기',
	        'file_open': '파일 열기',
	        'save': '저장',
	        'print': '인쇄',
	        'auto_save_load': '자동 저장 불러오기',
	        'layout': '레이아웃',
	        'template': '템플릿',


	        //Edit Group
	        'undo': '되돌리기',
	        'redo': '되살리기',

	        'copy': '복사',
	        'paste': '붙여넣기',
	        'cut': '잘라내기',
	        'text_paste': '텍스트로 붙여넣기',

	        'all_select': '전체선택',
	        'page_break': '페이지 분할',


	        //HEADING
	        'heading': '기본서식',


	        //Font Family
	        'fontFamily': '글꼴',


	        //Font Size
	        'fontSize': '글자크기',


	        //Text Format Group
	        'bold': '굵게',
	        'italic': '기울임',
	        'underline': '밑줄',
	        'strike_through': '취소선',

	        'super': '위첨자',
	        'sub': '아래첨자',

	        'remove_format': '글자서식 제거',

	        'color': '글자색',
	        'background_color': '바탕색',

	        'textFormatCopy': '글자서식 복사',
	        'textFormatPaste': '글자서식 붙여넣기',


	        //Paragraph Format Group
	        'numbered_list': '글머리 번호',
	        'bullet_list': '글머리 기호',
	        'outdent': '내어쓰기',
	        'indent': '들여쓰기',
	        'line_height': '줄간격',

	        'paragraph_margin': '문단 여백',

	        'align_left': '왼쪽 정렬',
	        'align_center': '가운데 정렬',
	        'align_right': '오른쪽 정렬',
	        'align_justify': '양쪽 정렬',

	        'paragraph_remove_format': '문단 서식 제거',
	        'dir_ltr': '글쓰기방향 좌에서 우로',
	        'dir_rtl': '글쓰기방향 우에서 좌로',


	        //Insert Group
	        'link': '하이퍼링크',
	        'unlink': '하이퍼링크 제거',

	        'bookmark': '책갈피 삽입',

	        'horizontal': '수평선 삽입',

	        'date_format': '날짜/시간 삽입',

	        'background_image': '배경이미지',

	        'layer_modify': '레이어 수정',

	        'image': '이미지',
	        'image_modify': '이미지 수정',

	        'video_modify': '동영상 수정',
	        'file': '파일 삽입',

	        'symbol': '특수문자',
	        'emoticon': '이모티콘',
	        'upper_lower': '대/소문자 바꾸기',
	        'blockquote': '인용구문',
	        'layer': '레이어삽입',


	        //Table Group
	        'table': '표 생성',
	        'table_insert_left': '왼쪽 열 삽입',
	        'table_insert_right': '오른쪽 열 삽입',
	        'table_insert_top': '상단 행 삽입',
	        'table_insert_bottom': '하단 행 삽입',

	        'table_remove_col': '열 삭제',
	        'table_remove_row': '행 삭제',
	        'table_remove_table': '테이블 삭제',

	        'table_merge': '병합',
	        'table_split_col': '열 분할',
	        'table_split_row': '행 분할',
	        'table_background_color': '표 바탕색',
	        'table_border_style': '선 스타일',


	        //Tool Group
	        'find_replace': '찾기/바꾸기',


	        //View Group
	        'fullscreen': '전체화면',


	        //Help Group
	        'setting': '환경설정',
	        'help': '도움말',
	        'about': '버전정보'
	    },

	    defaultFontMenuName : '기본글꼴',

	    contextMenuTitle: {
	        addRow: '가로줄 삽입',
	        addCol: '세로줄 삽입',

	        table_style: '표 속성...',
	        cell_style: '셀 속성...',
	        vertical_align: '수직정렬',

	        vertical_align_top: '위쪽 정렬',
	        vertical_align_middle: '가운데 정렬',
	        vertical_align_bottom: '아래쪽 정렬',
	        vertical_align_baseline: '기준선 정렬',

	        cell_size: '셀 크기 조정',
	        cell_horizontal_size: '너비를 같게',
	        cell_vertical_size: '높이를 같게',
	        cell_both_size: '너비/높이를 같게',

	        table_to_text: '표를 텍스트로 변환'
	    },

	    alertMessage : {
	        textModeChangeConfirmMessage : 'TEXT 편집시 스타일, 이미지, 테이블 등의 입력 내용이 사라집니다. \n계속 진행 하시겠습니까?',

	        textDeleteConfirmMessage : '테이블을 삭제하시겠습니까 ?',

	        fileLimitErrorMessage : ' 이하 파일만 사용 가능합니다.',

	        fileTypeErrorMessage : ' 파일만 가능합니다.',

	        invalidFileErrorMessage : '허용가능한 파일이 아닙니다.',

	        uploadUnknownErrorMessage : '업로드 도중 알 수 없는 에러가 발생되었습니다.\n다시 시도하시기 바랍니다.'
	    },

	    paragraphInsert : 'Paragraph Insert',

	    licenseErrorMsg : '\ub77c\uc774\uc120\uc2a4 \uae30\uac04\uc774 \ub9cc\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4\u002e \n\uae30\uac04\uc744 \uc5f0\uc7a5\ud558\ub824\uba74 \ub77c\uc774\uc120\uc2a4 \uad00\ub9ac\uc790\uc5d0\uac8c \ubb38\uc758\ud558\uc138\uc694\u002e'
	};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(9);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);


	function HyperLink(editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(HyperLink.prototype, new AbstractModule());

	HyperLink.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	HyperLink.prototype.create = function (opData) {

	    var $selected = this.editorElement.find("." + Define.CLASS.CONTENTS).find("." + Define.CLASS.SELECTED);

	    var opValue = opData.value;
	    
	    if (!$selected.length){
	        var inserSpanNode = null;
	        var aNode = null;
	        
	        var range = this.$dom.selection.getOpNode(opData.range.p[0], opData.range.r[0]);

	        var $aNode = $(range.container).closest('[href]');
	        
	        if (!$aNode.length) {
	            inserSpanNode = this.$dom.selection.getInsertableNode(opData.range.p[0], opData.range.r[0]);
	            aNode = document.createElement('a');
	        } else {
	            aNode = $aNode[0];
	        }

	        if (opValue.type === 'url') {
	            if (opValue.title) {
	                aNode.setAttribute(Define.ATTR.TITLE, opValue.title);
	            }

	            if (opValue.target) {
	                aNode.setAttribute(Define.ATTR.TARGET, opValue.target);
	            }

	            if (opValue.id) {
	                aNode.setAttribute(Define.ATTR.ID, opValue.id);
	            }

	            if (opValue.className) {
	                $(aNode).addClass(opValue.className);
	            }

	            if (opValue.fileType) {
	                aNode.setAttribute(Define.ATTR.FILE_TYPE, Define.ATTR_VALUE.KK_FILE);
	            }
	        } else {
	            aNode.removeAttribute(Define.ATTR.TITLE);
	            aNode.removeAttribute(Define.ATTR.TARGET);
	            aNode.removeAttribute(Define.ATTR.ID);
	            aNode.removeAttribute(Define.ATTR.CLASS);
	            aNode.removeAttribute(Define.ATTR.FILE_TYPE);
	        }

	        aNode.setAttribute(Define.ATTR.HREF, opValue.url);

	        opValue.url = aNode.href = aNode.href;

	        if (opValue.text.length === 0){
	            aNode.innerHTML = opValue.url; //'<span>' + opValue.url + '</span>';
	        }else{
	            aNode.innerHTML = opValue.text; //'<span>' + opValue.text + '</span>';
	        }

	        if (inserSpanNode) {
	            inserSpanNode.appendChild(aNode);
	        } else {
	            inserSpanNode = aNode;
	        }

	        var sel = window.getSelection();
	        var rng = document.createRange();
	        sel.removeAllRanges();

	        rng.setStart(inserSpanNode, 1);
	        rng.setEnd(inserSpanNode, 1);

	        sel.addRange(rng);

	        var op = this.$dom.selection.getOp(inserSpanNode, 1);

	        return {
	            range : {
	                p : [op.p, op.p],
	                r : [op.r, op.r]
	            }
	        };
	    }else{
	        $selected.each(function(){
	            var $this = $(this);

	            if ($this.is('table')) {
	                return;
	            }

	            var $aNode = $this.find('[href]');

	            if($aNode.length) {
	                $aNode.replaceWith($aNode.html());
	            }

	            var aNode = document.createElement('a');
	            $aNode = $(aNode);

	            aNode.setAttribute(Define.ATTR.HREF, opValue.url);
	            aNode.href = aNode.href;

	            if (opValue.type === 'url') {
	                if (opValue.title) {
	                    aNode.setAttribute(Define.ATTR.TITLE, opValue.title);
	                }

	                if (opValue.target) {
	                    aNode.setAttribute(Define.ATTR.TARGET, opValue.target);
	                }

	                if (opValue.id) {
	                    aNode.setAttribute(Define.ATTR.ID, opValue.id);
	                }

	                if (opValue.className) {
	                    $(aNode).addClass(opValue.className);
	                }

	                if (opValue.fileType) {
	                    aNode.setAttribute(Define.ATTR.FILE_TYPE, Define.ATTR_VALUE.KK_FILE);
	                }
	            } else {
	                aNode.removeAttribute(Define.ATTR.TITLE);
	                aNode.removeAttribute(Define.ATTR.TARGET);
	                aNode.removeAttribute(Define.ATTR.ID);
	                aNode.removeAttribute(Define.ATTR.CLASS);
	                aNode.removeAttribute(Define.ATTR.FILE_TYPE);
	            }

	            $aNode.append(this.childNodes);
	            this.appendChild($aNode[0]);
	        });
	    }
	};

	HyperLink.prototype.update = function (opData) {
	    var selInfo = this.$dom.selection.get();
	    var opValue = opData.value;

	    if (opValue === "remove"){
	        if (selInfo.collapsed){
	            var range = this.$dom.selection.getOpNode(selInfo.p[0], selInfo.r[0]);

	            var aNode = range.container;

	            if (aNode.nodeType == Node.TEXT_NODE || aNode.nodeName != 'A') {
	                aNode = $(range.container).closest('[href]')[0];
	            }

	            if (aNode) {
	                var $aNode = $(aNode);
	                $aNode.before(aNode.childNodes);
	                $aNode.remove();
	            }

	        }else{
	            var $selected = this.editorElement.find("." + Define.CLASS.CONTENTS).find("." + Define.CLASS.SELECTED);

	            $selected.find('a').each(function(){
	                var $aNode = $(this);
	                $aNode.before(this.childNodes);
	                $aNode.remove();
	            });
	        }
	    }
	};

	HyperLink.prototype.read = function () {};

	module.exports = HyperLink;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(9);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);

	function Paragraph (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Paragraph.prototype, new AbstractModule());

	Paragraph.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Paragraph.prototype.update = function (opData) {
	    // console.log('op data === > ', opData);

	    var opRange = opData.range;
	    var collasedOp = opRange.p[0] == opRange.p[1] && opRange.r[0] == opRange.r[1];

	    if (["align_left", "align_center", "align_right", "align_justify", "line_height", "indent", "outdent", "paragraph_remove_format", "heading", "marginLeft", "marginRight", "marginTop", "marginBottom", "letterSpacing", "wordSpacing", "dir_ltr", "dir_rtl", "blockquote"].indexOf(opData.name) > -1){

	        var sameBlockNodes = this.$dom.selection.getSameBlockNode(opRange);

	        if (["marginLeft", "marginRight", "marginTop", "marginBottom", "letterSpacing", "wordSpacing"].indexOf(opData.name) > -1){
	            this.applyParagraphSpacing(sameBlockNodes, opData.name, opData.value);
	        }else if (["indent", "outdent"].indexOf(opData.name) > -1){
	            this.applyParagraphIndentOutdent(sameBlockNodes, opData.name);
	        }else if (opData.name == "heading"){
	            this.applyParagraphHeading(sameBlockNodes, opData.value);
	        }else if (opData.name == "line_height"){
	            this.applyParagraphLineHeight(sameBlockNodes, opData.value);
	        }else if (opData.name == "paragraph_remove_format"){
	            this.applyParagraphRemoveFormat(sameBlockNodes, opData.value);
	        }else if (["dir_ltr", "dir_rtl"].indexOf(opData.name) > -1){
	            this.applyParagraphDir(sameBlockNodes, opData.name.replace("align_", ""));
	        }else if (opData.name == "blockquote"){
	            this.applyBlockQuote(sameBlockNodes, opData.value);
	        }else{
	            this.applyParagraphAlign(sameBlockNodes, opData.name.replace("align_", ""));
	        }

	        if (collasedOp){
	            var $tempRangeNode = $('#' + Define.TEMP);

	            if (this.$dom.selection.getSelectedTd().length > 0){
	                $tempRangeNode.remove();
	                return;
	            }else{
	                $tempRangeNode.removeAttr('id');
	            }

	            if ($tempRangeNode.length) {
	                var rangeNode = null;
	                var rangeOffset = 0;

	                if ($tempRangeNode[0].nextSibling){
	                    rangeNode = $tempRangeNode[0].nextSibling;
	                    rangeOffset = 0;
	                }else if ($tempRangeNode[0].previousSibling){
	                    rangeNode = $tempRangeNode[0].previousSibling;
	                    rangeOffset = 1;
	                }

	                $tempRangeNode.remove();

	                this.$dom.selection.removeSelected();
	                this.$dom.selection.setWindowRange(rangeNode, rangeOffset);
	            }
	        }else{
	            try{
	                if (this.$dom.selection.getSelectedNode().length > 0){
	                    window.getSelection().removeAllRanges();
	                }
	            }catch(e){console.log("remove range error.");}
	        }

	    }else if (opData.name == "textFormatPaste" ){

	        var $selectedNodes = this.$dom.selection.getSelectedNode();

	        this.applyFontStylePaste($selectedNodes, opData.value);

	        // this.editorElement.find("." + Define.CLASS.CONTENTS).find("." + Define.CLASS.SELECTED).attr('style', opData.value);

	    }else if (["marginLeft", "marginRight", "marginTop", "marginBottom", "letterSpacing", "wordSpacing"].indexOf(opData.name) > -1){

	        //TODO :    <추가적으로 Paragraph List에 대한 정보를 가져오는 로직 구현 및 Paragraph로 감싸여 있지 않는 element에 대한 Paragraph 감싸는 로직 필요>

	        
	        // var opObject = this.$dom.selection.setOp(opData.range);
	        //
	        // var $parents = $(opObject.selectedSpanNodes).closest(Define.PARAGRAPH_NODES.join(',')).not('[class^="kk_"]');
	        //
	        // console.log("Paragraph selInfo >>>>>>>>>> ", selInfo, $parents);
	        //
	        // var marginValue = opData.value != 0 ? opData.value + 'px' : '';
	        // $parents.css(opData.name, marginValue);

	    }else if (["fontFamily", "fontSize", "bold", "italic", "underline", "strike_through", "color", "background_color", "super", "sub"].indexOf(opData.name) > -1){
	        var style = {};

	        if (["underline", "strike_through"].indexOf(opData.name) > -1){
	            if (opData.name == "underline"){
	                style["textDecoration"] = {
	                    "underline" : opData.value == "on" ? "underline" : "none"
	                }
	            }else{
	                style["textDecoration"] = {
	                    "line-through" : opData.value == "on" ? "line-through" : "none"
	                }
	            }
	        }else{
	            if (opData.name == "bold"){
	                style["fontWeight"] = opData.value == "on" ? "bold" : "";
	            }else if (opData.name == "italic"){
	                style["fontStyle"] = opData.value == "on" ? "italic" : "";
	            }else if (opData.name == "color"){
	                style["color"] = "#" + opData.value;
	            }else if (opData.name == "background_color"){
	                style["backgroundColor"] = "#" +  opData.value;
	            }else if (opData.name == "fontFamily"){
	                style["fontFamily"] = opData.value;
	            }else if (opData.name == "fontSize"){
	                style["fontSize"] = opData.value;
	            }else if (opData.name == "super") {
	                style["verticalAlign"] = opData.value == "on" ? "super" : "";
	            }else if (opData.name == "sub") {
	                style["verticalAlign"] = opData.value == "on" ? "sub" : "";
	            }
	        }

	        var $inputStyleNode = $('#' + Define.INPUT_STYLE_NODE);
	        if ($inputStyleNode.length > 0){
	            this.$dom.styleParse($inputStyleNode[0]).style.setFontStyle(style);
	            return;
	        }

	        var selInfo = this.$dom.selection.get();

	        this.$dom.selection.setOp({p : selInfo.p, r: selInfo.r}, true);

	        var $selected = this.$dom.selection.getSelectedNode();
	        if ($selected.length > 0){
	            this.$dom.styleParse($selected).style.setFontStyle(style);
	        }else{
	            var insertableNode = this.$dom.selection.getInsertableNode(selInfo.p[0], selInfo.r[0]);
	            var textNode = document.createTextNode('\u200B');
	            insertableNode.appendChild(textNode);
	            insertableNode.setAttribute('id', Define.INPUT_STYLE_NODE);

	            this.$dom.selection.setWindowRange(textNode, 1);
	            this.$dom.styleParse(insertableNode).style.setFontStyle(style);

	        }
	        // selected 상태일때
	        // if (! selInfo.collapsed){
	        //     var $selected = this.$dom.selection.getSelectedNode();
	        //     this.$dom.styleParse($selected).style.setFontStyle(style);
	        // }else{
	        //
	        //     // var $field = this.editorElement.find("." + Define.CLASS.FIELD);
	        //     //
	        //     // if ($field.length == 0){
	        //     //     $field = this.$dom.selection.makeField();
	        //     //     $field.text("\u200B");
	        //     //     $field.addClass(Define.CLASS.FIELD);
	        //     //
	        //     //     this.$dom.styleParse($field).style.setFontStyle(style);
	        //     //
	        //     //     var selOp = Util.cloneObject(this.$dom.selection.getSelectionOp());
	        //     //     selOp.r[0] ++;
	        //     //     selOp.r[1] ++;
	        //     //
	        //     //     return {range : {p : selOp.p, r : selOp.r}};
	        //     // }else{
	        //         this.$dom.styleParse($field).style.setFontStyle(style);
	        //     // }
	        //
	        // }

	    }else if (opData.name == "remove_format"){
	        var $selectedNode = this.$dom.selection.getSelectedNode();
	        $selectedNode.removeAttr('style');
	    }
	    // else if (opData.name == "paragraph_remove_format"){
	    //     // var selInfo = this.$dom.selection.get();
	    //     // var paragraphList = selInfo.paragraphList;
	    //     //
	    //     // $(paragraphList).attr('style', '');
	    // }

	    else if (opData.name == "line_height"){
	        // var selInfo = this.$dom.selection.get();
	        // var paragraphList = selInfo.paragraphList;
	        //
	        // $(paragraphList).css("line-height", opData.value);
	    }
	};

	Paragraph.prototype.applyBlockQuote = function(nodeMap, quoteType){
	    var firstNode = nodeMap[0][0];
	    var lastNode = nodeMap[nodeMap.length - 1][nodeMap[nodeMap.length - 1].length - 1];
	    var isSameParent = firstNode.parentNode == lastNode.parentNode;

	    var blockQuoteNode = document.createElement('blockquote');
	    var commonAncestorNode = Util.getCommonAncestor(firstNode, lastNode);

	    if ($(commonAncestorNode).closest('.' + Define.CLASS.CONTENTS).length == 0){
	        return;
	    }

	    var isContainParentNode = function(node, parentNode){
	        while(node){
	            if (parentNode == node){
	                return true;
	            }

	            node = node.parentNode;
	        }

	        return false;
	    };

	    var findSiblingNode = function(parentNodes, targetNode){

	        for (var i=0, length=parentNodes.length; i<length; i++){
	            var curPNode = parentNodes[i];

	            if (isContainParentNode(targetNode, curPNode)){
	                return curPNode;
	            }
	        }

	        return null;
	    };

	    var style = 'border-left: 3px solid gray; padding: 10px; color: gray;';
	    switch (quoteType){
	        case 'quote1':
	            style = 'border-left: 3px solid gray; padding: 10px; color: gray;';
	            break;
	        case 'quote2':
	            style = 'border: 1px dashed #e9e9e9; padding:10px; color:#e9e9e9;';
	            break;
	        case 'quote3':
	            style = 'border: 1px dashed #6b9ad0; padding:10px; color:#6b9ad0;';
	            break;
	        case 'quote4':
	            style = 'border: 1px dashed #6b9ad0; background-color:#e9e9e9; padding:10px; color:#6b9ad0;';
	            break;
	        case 'quote5':
	            style = 'border: 1px solid gray; padding:10px; color:gray;';
	            break;
	        case 'quote6':
	            style = 'border: 1px solid #6b9ad0; padding:10px; color:#6b9ad0;';
	            break;
	        case 'quote7':
	            style = 'border: 4px solid gray; padding:10px; color:gray;';
	            break;
	        case 'quote8':
	            style = 'border: 4px solid gray; background-color:#e9e9e9; padding:10px; color:gray;';
	            break;
	    }

	    $(blockQuoteNode).attr('style', style);

	    var $closetStartBlockQuoteNode = $(firstNode).closest('blockquote');
	    var $closetEndBlockQuoteNode = $(lastNode).closest('blockquote');
	    if ($closetStartBlockQuoteNode.length > 0 && $closetEndBlockQuoteNode.length > 0 && $closetStartBlockQuoteNode[0] == $closetEndBlockQuoteNode[0]){
	        $closetStartBlockQuoteNode.attr('style', style);
	        return;
	    }

	    if (isSameParent){

	        if (['UL', 'OL'].indexOf(firstNode.parentNode.nodeName) > -1){
	            $(firstNode.parentNode).before(blockQuoteNode);
	            $(blockQuoteNode).append(firstNode.parentNode);
	        }else if(firstNode == lastNode){
	            $(firstNode).before(blockQuoteNode);
	            $(blockQuoteNode).append(firstNode);
	        }else{
	            $(firstNode).before(blockQuoteNode);
	            var wrapNode = blockQuoteNode.parentNode;
	            var childNodes = $(wrapNode).children().toArray();

	            var sIdx = childNodes.indexOf(firstNode);
	            var eIdx = childNodes.indexOf(lastNode);
	            for (var i=sIdx; i<=eIdx; i++){
	                $(blockQuoteNode).append(childNodes[i]);
	            }
	        }
	    }else{

	        var firstParents = $(firstNode.parentNode).children().toArray();
	        var lastParents = $(lastNode.parentNode).children().toArray();

	        if (isContainParentNode(lastNode, firstNode)){
	            $(firstNode).before(blockQuoteNode);
	            $(blockQuoteNode).append(firstNode);
	        }else if(isContainParentNode(firstNode, lastNode)){
	            $(lastNode).before(blockQuoteNode);
	            $(blockQuoteNode).append(lastNode);
	        }else{
	            var lastContainNode = findSiblingNode(firstParents, lastNode);

	            var sNode = null;
	            var eNode = null;
	            if (lastContainNode){
	                sNode = firstNode;
	                eNode = lastContainNode;
	            }else{
	                var firstContainNode = findSiblingNode(lastParents, firstNode);

	                sNode = firstContainNode;
	                eNode = lastNode;
	            }

	            if (! sNode || ! eNode){
	                var $closetTable = $(commonAncestorNode).closest('table');
	                if ($closetTable.length > 0 && $closetTable.closest('.' + Define.CLASS.CONTENTS).length > 0){

	                    $closetTable.before(blockQuoteNode);
	                    $(blockQuoteNode).append($closetTable);
	                }else{
	                    $(commonAncestorNode).before(blockQuoteNode);
	                    $(blockQuoteNode).append(commonAncestorNode);
	                }

	                return;
	            }

	            $(sNode).before(blockQuoteNode);
	            var childNodes = $(sNode.parentNode).children().toArray();
	            var sIdx = childNodes.indexOf(sNode);
	            var eIdx = childNodes.indexOf(eNode);
	            for (var i=sIdx; i<=eIdx; i++){
	                $(blockQuoteNode).append(childNodes[i]);
	            }
	        }
	    }

	    $(blockQuoteNode).before($(Define.DEFAULT_PARAGRAPH_HTML));
	    $(blockQuoteNode).after($(Define.DEFAULT_PARAGRAPH_HTML));
	};

	Paragraph.prototype.applyParagraphDir = function(nodeMap, dir){
	    var direction = dir == 'dir_ltr' ? 'ltr' : 'rtl';
	    for (var i=0,length=nodeMap.length; i<length; i++){
	        var nodes = nodeMap[i];

	        for (var j=0,jLength=nodes.length; j<jLength; j++){
	            var node = nodes[j];
	            $(node).attr("dir", direction);
	        }
	    }
	};

	Paragraph.prototype.applyParagraphAlign = function(nodeMap, align){

	    if (nodeMap.length) {
	        var firstNodeMap = nodeMap[0];

	        if (firstNodeMap[0].nodeName == 'TABLE' && firstNodeMap[0].classList.length > 0 && firstNodeMap[0].classList.contains(Define.CLASS.SELECTED_TABLE)){
	            var lastNodeMap = nodeMap[nodeMap.length - 1];

	            var lastParagraph = lastNodeMap[lastNodeMap.length - 1];

	            var $childParagraph = $(firstNodeMap[0]).find(lastParagraph);

	            if ($childParagraph.length) {
	                if (align == 'justify') {
	                    firstNodeMap[0].removeAttribute('align');
	                } else {
	                    firstNodeMap[0].setAttribute('align',  align);
	                }

	                return;
	            }
	        }
	    }


	    for (var i=0,length=nodeMap.length; i<length; i++){
	        var nodes = nodeMap[i];

	        for (var j=0,jLength=nodes.length; j<jLength; j++){

	            var node = nodes[j];

	            if (node.nodeName != 'TABLE'){
	                $(node).css("text-align", align);
	            } else if (node.nodeName == 'TABLE' && node.classList.length > 0 && node.classList.contains(Define.CLASS.SELECTED_TABLE)) {

	                if (align == 'justify') {
	                    node.removeAttribute('align');
	                } else {
	                    node.setAttribute('align',  align);
	                }

	                break;
	            }
	        }
	    }
	};

	Paragraph.prototype.applyParagraphLineHeight = function(nodeMap, value){
	    for (var i=0,length=nodeMap.length; i<length; i++){
	        var nodes = nodeMap[i];

	        for (var j=0,jLength=nodes.length; j<jLength; j++){

	            var node = nodes[j];

	            $(node).css("line-height", value);
	        }
	    }
	};

	Paragraph.prototype.applyParagraphHeading = function(nodeMap, value){
	    var changeParagraphNodeName = value;
	    if (value == "default") {
	        changeParagraphNodeName = "p";
	    }

	    for (var i = 0, length = nodeMap.length; i < length; i++) {
	        var nodes = nodeMap[i];

	        for (var j = 0, jLength = nodes.length; j < jLength; j++) {
	            var node = nodes[j];

	            if (['DIV', 'P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'].indexOf(node.nodeName) > -1 && ! (node.nodeName == 'P' && changeParagraphNodeName == 'p')){
	                var $node = $(node);
	                $node.replaceWith('<' + changeParagraphNodeName + '>' + $node.html() + '</' + changeParagraphNodeName + '>');
	            }

	        }
	    }
	};

	Paragraph.prototype.applyParagraphSpacing = function(nodeMap, opName, value){

	    for (var i = 0, length = nodeMap.length; i < length; i++) {
	        var nodes = nodeMap[i];

	        for (var j = 0, jLength = nodes.length; j < jLength; j++) {
	            var node = nodes[j];

	            if (opName == 'marginLeft'){
	                if (value > 0){
	                    $(node).css('margin-left', value + 'px');
	                }else{
	                    $(node).css('margin-left', '');
	                }
	            }else if (opName == 'marginRight'){
	                if (value > 0){
	                    $(node).css('margin-right', value + 'px');
	                }else{
	                    $(node).css('margin-right', '');
	                }
	            }else if (opName == 'marginTop'){
	                if (value > 0){
	                    $(node).css('margin-top', value + 'px');
	                }else{
	                    $(node).css('margin-top', '');
	                }
	            }else if (opName == 'marginBottom'){
	                if (value > 0){
	                    $(node).css('margin-bottom', value + 'px');
	                }else{
	                    $(node).css('margin-bottom', '');
	                }
	            }else if (opName == 'letterSpacing'){
	                if (value > 0){
	                    $(node).css('letter-spacing', value + 'px');
	                }else{
	                    $(node).css('letter-spacing', '');
	                }
	            }else if (opName == 'wordSpacing'){
	                if (value > 0){
	                    $(node).css('word-spacing', value + 'px');
	                }else{
	                    $(node).css('word-spacing', '');
	                }
	            }


	        }
	    }
	};

	/*
	 //outdent 왼쪽으로 -20
	 //indent 오른쪽으로 +20
	 var selInfo = this.$dom.selection.get();
	 var paragraphList = selInfo.paragraphList;
	 var value = 20;

	 if (opData.name == "outdent"){
	 value = value * -1;
	 }

	 $(paragraphList).each(function(){
	 var marginLeft = $(this).css("margin-left");
	 marginLeft = marginLeft.replace("px", "") * 1;
	 marginLeft = (marginLeft + value) < 0 ? 0 : (marginLeft + value);

	 $(this).css("margin-left", marginLeft + "px");
	 });

	 */

	Paragraph.prototype.applyParagraphRemoveFormat = function(nodeMap){
	    var applyTableList = [];
	    for (var i=0,length=nodeMap.length; i<length; i++){
	        var nodes = nodeMap[i];

	        var tableNodes = this.$dom.selection.getParentTagNode(nodes[0], ['TABLE']);
	        var lastSelectedTableNode = null;

	        if (tableNodes){
	            for (var j=0, jLength=tableNodes.length; j<jLength; j++){
	                var tableNode = tableNodes[j];

	                if ($(tableNode).hasClass(Define.CLASS.SELECTED_TABLE)){
	                    lastSelectedTableNode = tableNode;
	                }
	            }
	        }

	        if (lastSelectedTableNode && applyTableList.indexOf(lastSelectedTableNode) == -1){
	            $(lastSelectedTableNode).attr('style', '');
	            applyTableList.push(lastSelectedTableNode);
	        }

	        if (lastSelectedTableNode){
	            continue;
	        }

	        for (var j=0,jLength=nodes.length; j<jLength; j++){
	            var node = nodes[j];
	            $(node).attr('style', '');
	        }
	    }

	    this.applyParagraphHeading(nodeMap, 'default');
	};

	Paragraph.prototype.applyParagraphIndentOutdent = function(nodeMap, type){
	    var value = 20;

	    if (type == "outdent"){
	        value = value * -1;
	    }

	    var applyTableList = [];

	    var parentQueryString = '.' + Define.CLASS.CONTENTS + ' ' + Define.PARAGRAPH_NODES.join(', .' + Define.CLASS.CONTENTS + ' ' );

	    for (var i=0,length=nodeMap.length; i<length; i++){
	        var nodes = nodeMap[i];

	        var tableNodes = this.$dom.selection.getParentTagNode(nodes[0], ['TABLE']);
	        var lastSelectedTableNode = null;

	        if (tableNodes){
	            for (var j=0, jLength=tableNodes.length; j<jLength; j++){
	                var tableNode = tableNodes[j];

	                if ($(tableNode).hasClass(Define.CLASS.SELECTED_TABLE)){
	                    lastSelectedTableNode = tableNode;
	                }
	            }
	        }

	        if (lastSelectedTableNode && applyTableList.indexOf(lastSelectedTableNode) == -1){
	            var marginLeft = $(lastSelectedTableNode).css("margin-left");
	            marginLeft = marginLeft.replace("px", "") * 1;
	            marginLeft = (marginLeft + value) < 0 ? 0 : (marginLeft + value);

	            $(lastSelectedTableNode).css("margin-left", marginLeft + "px");

	            applyTableList.push(lastSelectedTableNode);
	        }

	        if (lastSelectedTableNode){
	            continue;
	        }


	        if (nodes.length) {
	            var firstNode = nodes[0];
	            var parents = $(firstNode).parents(parentQueryString);
	            var isNodeLoop = false;

	            if (parents.length && value < 0) {
	                parents = parents.filter(function(){
	                    var $this = $(this);

	                    var parentMarginLeft = $this.css("margin-left");
	                    parentMarginLeft = parentMarginLeft.replace("px", "") * 1;

	                    return parentMarginLeft > 0;
	                });

	                if (parents.length) {
	                    parents = parents.first();

	                    var parentMarginLeft = parents.css("margin-left");
	                    parentMarginLeft = parentMarginLeft.replace("px", "") * 1;

	                    if (parentMarginLeft !== 0) {
	                        var resultParentMarginLeft = parentMarginLeft + value;
	                        parentMarginLeft = resultParentMarginLeft < 0 ? 0 : resultParentMarginLeft;
	                        parents.css("margin-left", parentMarginLeft + "px");
	                    } else {
	                        isNodeLoop = true;
	                    }
	                } else {
	                    isNodeLoop = true;
	                }
	            } else {
	                isNodeLoop = true;
	            }

	            if (isNodeLoop) {
	                for (var j = 0, jLength = nodes.length; j < jLength; j++){
	                    var node = nodes[j];

	                    var marginLeft = $(node).css("margin-left");
	                    marginLeft = marginLeft.replace("px", "") * 1;

	                    var resultMarginLeft = marginLeft + value;
	                    marginLeft = resultMarginLeft < 0 ? 0 : resultMarginLeft;
	                    $(node).css("margin-left", marginLeft + "px");
	                }
	            }
	        }
	    }
	};

	Paragraph.prototype.applyFontStylePaste = function($selectedNodes, props){

	    if (! $selectedNodes || $selectedNodes.length == 0 || ! props){
	        return ;
	    }

	    var fontStyleString = '';

	    for (var key in props){
	        var item = props[key];
	        var key = item.key;
	        var val = item.value;

	        switch(key){
	            case "heading":
	                console.log("heading???");
	                break;
	            case "fontFamily":
	                fontStyleString += 'font-family:' + val + ';';
	                break;

	            case "fontSize":
	                fontStyleString += 'font-size:' + val + ';';
	                break;

	            case "fontWeight":

	                if ($.inArray(val, ['600','700','800','900']) != -1) {
	                    val = "bold";
	                }else if (val == 400){
	                    val = "normal";
	                }

	                fontStyleString += 'font-weight:' + val + ';';
	                break;

	            case "fontStyle":
	                if (val == "normal" || val.length == 0){
	                }else{
	                    fontStyleString += 'font-style:italic;';
	                }
	                break;

	            case "textDecoration":
	                fontStyleString += 'text-decoration:' + val + ';';

	                break;

	            case "verticalAlign":

	                fontStyleString += 'vertical-align:' + val + ';';

	                break;

	            case "color":

	                if (val && val != ''){
	                    fontStyleString += 'color:' + val + ';';
	                }

	                break;

	            case "backgroundColor":

	                if (val && val != ''){
	                    fontStyleString += 'background-color:' + val + ';';
	                }

	                break;

	            default:
	                break;
	        }
	    }

	    $selectedNodes.attr('style', fontStyleString);
	};

	module.exports = Paragraph;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractModule = __webpack_require__(9);
	var Define = __webpack_require__(3);

	function List (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(List.prototype, new AbstractModule());

	List.prototype.TYPE = {
	    NUMBERED : 'numbered',
	    BULLET : 'bullet'
	};

	var NUMBER_LIST_TEMPLATE = ['decimal', 'upper-alpha', 'lower-alpha', 'upper-roman', 'lower-roman', 'lower-greek'];
	var BULLET_LIST_TEMPLATE = ['disc', 'circle', 'square'];

	var SPECIFIC_LIST_TYPE = {
	    numbered_decimal     : 'decimal',
	    numbered_alpha       : 'upper-alpha',
	    numbered_upper_alpha : 'lower-alpha',
	    numbered_roman       : 'upper-roman',
	    numbered_upper_roman : 'lower-roman',
	    numbered_lower_greek : 'lower-greek',

	    bullet_disc          : 'disc',
	    bullet_circle        : 'circle',
	    bullet_square        : 'square'
	};

	List.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	List.prototype.findParentNodes = function(node, selector, stopSelector){
	    if (!node) {
	        return null;
	    }

	    var nodes = [];
	    while (node) {
	        if($(node).hasClass(Define.CLASS.KKEDITOR)){
	            return nodes;
	        }else if ($(node).is(stopSelector)){
	            return nodes;
	        }else if ($(node).is(selector)){
	            nodes.push(node);
	        }

	        node = node.parentNode;
	    }

	    return nodes;
	};

	List.prototype.create = function(opData){
	    var opRange = opData.range;
	    this.$dom.selection.setOp(opRange);
	    var collasedOp = opRange.p[0] == opRange.p[1] && opRange.r[0] == opRange.r[1];

	    var sameBlockNodes = this.$dom.selection.getSameBlockNode(opRange);
	    var specificListType = opData.value;

	    if (opData.value.listType == 'numbered'){
	        specificListType = 'decimal';
	    }else{
	        specificListType = 'disc';
	    }

	    if (opData.value.specificType){
	        specificListType = SPECIFIC_LIST_TYPE[opData.value.specificType];
	    }

	    if (opData && opData.value.isTab){

	        var sameBlockNodes = this.$dom.selection.getSameBlockNode(opRange);

	        this.makeSingleTab(sameBlockNodes);

	    }else if (opData && opData.value.isUnTab){

	        var sameBlockNodes = this.$dom.selection.getSameBlockNode(opRange);

	        this.makeSingleUnTab(sameBlockNodes);

	    }else if (opData && opData.value && opData.value.listType){
	        var listType = opData.value.listType;
	        var status = opData.value.status;

	        var sameBlockNodes = this.$dom.selection.getSameBlockNode(opRange);

	        if (status == 'on'){
	            this.applyList(listType, sameBlockNodes, specificListType);
	        }else{
	            this.removeList(sameBlockNodes);
	        }
	    }

	    var $selectedNode = this.$dom.selection.getSelectedNode();

	    if (collasedOp && $selectedNode.length == 1 && $selectedNode.attr(Define.ATTR.ID) == Define.TEMP){
	        var rangeNode = null;
	        var rangeOffset = 0;

	        if ($selectedNode[0].nextSibling){
	            rangeNode = $selectedNode[0].nextSibling;
	            rangeOffset = 0;
	        }else if ($selectedNode[0].previousSibling){
	            rangeNode = $selectedNode[0].previousSibling;
	            rangeOffset = 1;
	        }

	        this.router.scrollIntoView($selectedNode[0]);

	        $selectedNode.remove();

	        this.$dom.selection.setWindowRange(rangeNode, rangeOffset);
	    }else{
	        this.router.scrollIntoView($selectedNode[0]);

	        this.$dom.selection.applyRangeOfSelectedClass($selectedNode);

	        this.$dom.selection.get();
	    }
	};

	List.prototype.removeList = function(nodeMap){
	    var getBlockList = function(node){
	        var nList = [];

	        for (var i=0,length=node.childNodes.length; i<length; i++){
	            nList.push(node.childNodes[i]);
	        }

	        return nList;
	    };

	    for (var i=0,length=nodeMap.length; i<length; i++){
	        var nodes = nodeMap[i];

	        var isContainListNode = null;
	        for (var j=0,jLength=nodes.length; j<jLength; j++){
	            var node = nodes[j];

	            if (node.nodeName == 'LI'){
	                isContainListNode = true;
	            }
	        }

	        if (isContainListNode){
	            var parentNode = nodes[0].parentNode;


	            var parentPrevNode = parentNode.cloneNode(true);


	            $(parentPrevNode).html('');
	            $(parentNode).before(parentPrevNode);

	            if (nodes[0].previousSibling){
	                while(nodes[0].previousSibling){
	                    $(parentPrevNode).prepend(nodes[0].previousSibling);
	                }
	            }

	            if (parentPrevNode.innerHTML == ''){
	                $(parentPrevNode).remove();
	            }

	            for (var j=0,jLength=nodes.length; j<jLength; j++){
	                if (nodes[j].nodeName == 'LI'){
	                    var newP = document.createElement('p');

	                    if (parentNode && parentNode.parentNode && ['OL', 'UL'].indexOf(parentNode.parentNode.nodeName) > -1){
	                        newP = document.createElement('li');
	                    }

	                    newP.className = nodes[j].className;
	                    $(parentNode).before(newP);

	                    for (var k=0,kLength=nodes[j].childNodes.length; k<kLength; k++){
	                        newP.appendChild(nodes[j].childNodes[k].cloneNode(true));
	                    }
	                }else{
	                    $(parentNode).before(nodes[j].cloneNode(true));
	                }
	            }

	            for (var j=0,jLength=nodes.length; j<jLength; j++){
	                $(nodes[j]).remove();
	            }

	            if (parentNode.innerHTML == ''){
	                $(parentNode).remove();
	            }
	        }

	    }
	};

	List.prototype.applyList = function(listType, nodeMap, specificListType){

	    //리스트의 중간을 잡은 경우에는 부모 노드로 부터 노드를 분할해야할듯
	    //
	    var getBlockList = function(node){
	        var nList = [];

	        for (var i=0,length=node.childNodes.length; i<length; i++){
	            nList.push(node.childNodes[i]);
	        }

	        return nList;
	    };

	    var listTag = listType == this.TYPE.NUMBERED ? 'OL' : 'UL';
	    var listStyle = '';
	    if (specificListType){
	        listStyle = ' style="list-style-type:' + specificListType + '"';
	    }

	    for (var i=0, length=nodeMap.length; i<length; i++){
	        var nodes = nodeMap[i];

	        var isContainListNode = null;
	        for (var j=0,jLength=nodes.length; j<jLength; j++){
	            var node = nodes[j];

	            if (node.nodeName == 'LI'){
	                isContainListNode = true;
	            }
	        }

	        if (! document.body.contains(nodes[0])){
	            var opInfo = this.$dom.selection.get();
	            var sameBlockNodes = this.$dom.selection.getSameBlockNode(opInfo);
	            this.applyList.call(this, listType, sameBlockNodes, specificListType);
	            return;
	        }

	        if (isContainListNode){

	            var parentNode = nodes[0].parentNode;
	            var $listNode = $("<" + listTag + listStyle + ">");

	            if (nodes[0].parentNode.nodeName == listTag){
	                if ($(nodes[0].parentNode).css('list-style-type') != specificListType){
	                    $(nodes[0].parentNode).css('list-style-type', specificListType);
	                }
	                continue;
	            }

	            var parentPrevNode = parentNode.cloneNode(true);
	            $(parentPrevNode).html('');
	            $(parentNode).before(parentPrevNode);

	            if (nodes[0].previousSibling){
	                while(nodes[0].previousSibling){
	                    $(parentPrevNode).prepend(nodes[0].previousSibling);
	                }
	            }

	            var childNodes = getBlockList(parentNode);

	            for (var j=0,jLength=childNodes.length; j<jLength; j++){

	                if (['OL', 'UL', 'LI'].indexOf(childNodes[j].nodeName) == -1){
	                    $(childNodes[j]).replaceWith("<" + listTag + listStyle + ">" + childNodes[j].innerHTML + "</" + listTag + ">")
	                }else{
	                    $listNode.append(childNodes[j].cloneNode(true));
	                }

	                if (nodes[nodes.length - 1] == childNodes[j]){
	                    break;
	                }
	            }

	            $(parentNode).before($listNode);

	            for (var j=0,jLength=nodes.length; j<jLength; j++){
	                $(nodes[j]).remove();
	            }

	            if (parentNode.innerHTML == ''){
	                $(parentNode).remove();
	            }

	            if (parentPrevNode.innerHTML == ''){
	                $(parentPrevNode).remove();
	            }
	        }
	        else{

	            //앞뒤로 둘다 리스트인경우고 같은 타입이면 합친다
	            //뒤만 리스트인경우에는 뒤로 합친다
	            var parentNode = nodes[0].parentNode;
	            var parentPrevNode = nodes[0].previousSibling;
	            var parentNextNode = nodes[0].nextSibling;

	            var $listNode = $("<" + listTag + listStyle + ">");

	            if (length == 1){

	                if (parentPrevNode && parentNextNode && parentPrevNode.nodeType == 1 &&
	                    parentPrevNode.nodeName == listTag && parentNextNode.nodeType == 1 && parentNextNode.nodeName == listTag){

	                    for (var j=0,jLength=nodes.length; j<jLength; j++){
	                        var cloneNode = nodes[j].cloneNode(true);

	                        $(parentPrevNode).append("<li>" + cloneNode.innerHTML + "</li>");
	                    }

	                    for (var j=0,jLength=parentNextNode.childNodes.length; j<jLength; j++){
	                        $(parentPrevNode).append(parentNextNode.childNodes[j].cloneNode(true));
	                    }

	                    $(parentNextNode).remove();

	                    //merge
	                }else if (parentPrevNode && parentPrevNode.nodeType == 1 && parentPrevNode.nodeName == listTag){
	                    $listNode = $(parentPrevNode);

	                    for (var j=0,jLength=nodes.length; j<jLength; j++){
	                        var cloneNode = nodes[j].cloneNode(true);

	                        $listNode.append("<li>" + cloneNode.innerHTML + "</li>");
	                    }

	                }else if (parentNextNode && parentNextNode.nodeType == 1 && parentNextNode.nodeName == listTag){
	                    $listNode = $(parentNextNode);

	                    for (var j=0,jLength=nodes.length; j<jLength; j++){
	                        var cloneNode = nodes[j].cloneNode(true);

	                        $listNode.prepend("<li>" + cloneNode.innerHTML + "</li>");
	                    }
	                }else{
	                    for (var j=0,jLength=nodes.length; j<jLength; j++){
	                        var cloneNode = nodes[j].cloneNode(true);

	                        $listNode.append("<li>" + cloneNode.innerHTML + "</li>");
	                    }

	                    parentNode.insertBefore($listNode[0], nodes[0]);
	                }

	            }else{

	                for (var j=0,jLength=nodes.length; j<jLength; j++){
	                    if (document.body.contains(nodes[j])){
	                        var cloneNode = nodes[j].cloneNode(true);

	                        if (['OL', 'UL'].indexOf(cloneNode.nodeName) > -1){
	                            $listNode.append(cloneNode);
	                        }else if (cloneNode.nodeName == 'TABLE'){
	                            $listNode.append("<li>" + cloneNode.outerHTML + "</li>");
	                        }else{
	                            $listNode.append("<li>" + cloneNode.innerHTML + "</li>");
	                        }

	                    }
	                }

	                $listNode.children().each(function(){
	                    if (this.innerHTML == ''){
	                        $(this).remove();
	                    }
	                });

	                parentNode.insertBefore($listNode[0], nodes[0]);
	            }

	            for (var j=0,jLength=nodes.length; j<jLength; j++){
	                $(nodes[j]).remove();
	            }

	        }
	    }
	};

	List.prototype.makeSingleTab = function(nodeMap){
	    // if (this.$dom.selection.collapseOp()){
	    //
	    //     if (nodeMap[0].length > 0){
	    //         var liNode = nodeMap[0][0];
	    //
	    //         var $ulOlNodes = $(this.findParentNodes(liNode, 'ul, ol', 'table'));
	    //
	    //         var listWrapperNode = null;
	    //         if ($ulOlNodes.is('ul')){
	    //             listWrapperNode = document.createElement('UL');
	    //
	    //             $(liNode).before(listWrapperNode);
	    //             $(listWrapperNode).append(liNode);
	    //
	    //             var listNodes = this.findParentNodes(listWrapperNode, 'ul', 'table');
	    //
	    //             $(listWrapperNode).css('list-style-type', BULLET_LIST_TEMPLATE[listNodes.length % BULLET_LIST_TEMPLATE.length]);
	    //         }else if ($ulOlNodes.is('ol')){
	    //             listWrapperNode = document.createElement('OL');
	    //
	    //             $(liNode).before(listWrapperNode);
	    //             $(listWrapperNode).append(liNode);
	    //
	    //             var listNodes = this.findParentNodes(listWrapperNode, 'ol', 'table');
	    //
	    //             $(listWrapperNode).css('list-style-type', NUMBER_LIST_TEMPLATE[listNodes.length % NUMBER_LIST_TEMPLATE.length]);
	    //         }
	    //     }
	    // }else{
	    //
	        if (nodeMap.length > 0){

	            for (var i=0, length=nodeMap.length; i<length; i++){
	                var nodes = nodeMap[i];

	                if (nodes[0] && nodes[0].nodeType == 1 && nodes[0].nodeName == 'LI'){

	                    var liNode = nodes[0];

	                    var $ulOlNodes = $(this.findParentNodes(liNode, 'ul, ol', 'table'));

	                    var listWrapperNode = null;

	                    var targetTag = 'UL';
	                    if ($ulOlNodes.is('ul')){
	                        listWrapperNode = document.createElement('UL');

	                        $(liNode).before(listWrapperNode);
	                        $(listWrapperNode).append(liNode);

	                        var listNodes = this.findParentNodes(listWrapperNode, 'ul', 'table');

	                        $(listWrapperNode).css('list-style-type', BULLET_LIST_TEMPLATE[listNodes.length % BULLET_LIST_TEMPLATE.length]);
	                    }else if ($ulOlNodes.is('ol')){
	                        targetTag = 'OL';
	                        listWrapperNode = document.createElement('OL');

	                        $(liNode).before(listWrapperNode);
	                        $(listWrapperNode).append(liNode);

	                        var listNodes = this.findParentNodes(listWrapperNode, 'ol', 'table');

	                        $(listWrapperNode).css('list-style-type', NUMBER_LIST_TEMPLATE[listNodes.length % NUMBER_LIST_TEMPLATE.length]);
	                    }

	                    for (var j=1, jLength=nodes.length; j<jLength; j++){
	                        var node = nodes[j];
	                        if ($ulOlNodes.is('ul')){
	                            $(listWrapperNode).append(node);
	                        }else if ($ulOlNodes.is('ol')){
	                            $(listWrapperNode).append(node);
	                        }
	                    }

	                    var prevNode = listWrapperNode.previousSibling;
	                    var nextNode = listWrapperNode.nextSibling;

	                    if (prevNode && nextNode && prevNode.nodeName == targetTag && nextNode.nodeName == targetTag){
	                        $(prevNode).append(listWrapperNode.childNodes);

	                        $(prevNode).append(nextNode.childNodes);
	                        $(nextNode).remove();

	                        $(listWrapperNode).remove();
	                    }else if (prevNode && prevNode.nodeName == targetTag){
	                        $(prevNode).append(listWrapperNode.childNodes);
	                        $(listWrapperNode).remove();
	                    }else if (nextNode && nextNode.nodeName == targetTag){
	                        $(nextNode).append(listWrapperNode.childNodes);
	                        $(listWrapperNode).remove();
	                    }
	                }


	            }
	        }

	    // }
	};

	List.prototype.makeSingleUnTab = function(nodeMap){
	    // if (this.$dom.selection.collapseOp()){

	    //     if (nodeMap[0].length > 0){
	    //         var currentNode = nodeMap[0][0];
	    //
	    //         //table 인 경우 stop
	    //         var $olul = $(currentNode).parents('ul, ol');
	    //
	    //         if ($olul.length > 1){
	    //
	    //             this.removeList(nodeMap);
	    //
	    //             var $tempNode = $('#'+Define.TEMP);
	    //
	    //             currentNode = $tempNode.closest('p')[0];
	    //
	    //             var liNode = document.createElement('LI');
	    //             $(currentNode).before(liNode);
	    //             $(liNode).append(currentNode.childNodes);
	    //             $(currentNode).remove();
	    //
	    //         }else{
	    //             console.log('list is 1depth.');
	    //         }
	    //     }
	    // }else{
	        if (nodeMap.length > 0){

	            var isAllLiNode = function(arr){
	                if (arr.length > 0){
	                    var isAllLi = true;
	                    for (var i=0; i<arr.length; i++){
	                        if (arr[i].nodeName != 'LI'){
	                            isAllLi = false;
	                            break;
	                        }
	                    }

	                    return isAllLi;
	                }
	            };

	            for (var i=nodeMap.length-1; i>=0; i--){
	                var nodes = nodeMap[i];

	                if (nodes[0] && nodes[0].nodeType == 1 && nodes[0].nodeName == 'LI'){
	                    var liNode = nodes[0];

	                    if (! isAllLiNode(nodes)){
	                        continue;
	                    }

	                    var $ulOlNodes = this.findParentNodes(liNode, 'ul, ol', 'table');
	                    if ($ulOlNodes.length > 1){

	                        //노드는 새로 초기화되기 때문에 임시노드를 넣어서 구분지음
	                        $(nodes).addClass('k-class');

	                        var tempMap = [];
	                        tempMap.push(nodes);
	                        this.removeList(tempMap);

	                        var $kClass = $('.k-class');

	                        //리스트가 지워진 노드들은 새롭게 다시 리스트로 생성 시켜주는 로직
	                        $kClass.each(function(){
	                            var newNode = document.createElement('LI');
	                            $(this).before(newNode);
	                            $(newNode).append(this.childNodes);
	                        });

	                        $kClass.remove();
	                    }

	                }

	            }
	        }
	    // }
	};

	List.prototype.getSameParentBlock = function(nodes){

	    var sameBlockNodes = [];
	    var index = 0;

	    var isExistFindDeepMap = function(node, list){
	        var exist = false;

	        for (var i=0, length=list.length; i<length; i++){
	            var item = list[i];

	            for (var j=0, jLength=item.length; j<jLength; j++){
	                var parentNode = item[j].parentNode;

	                if (node.parentNode == parentNode){
	                    exist = true;
	                    break;
	                }
	            }
	        }

	        return exist;
	    };

	    for (var i=0, length=nodes.length; i<length; i++){
	        if (! sameBlockNodes[index]){
	            sameBlockNodes[index] = [];
	            sameBlockNodes[index].push(nodes[i]);

	            continue;
	        }

	        if (isExistFindDeepMap(nodes[i], sameBlockNodes)){
	            sameBlockNodes[index].push(nodes[i]);
	        }else{
	            index ++;
	            sameBlockNodes[index] = [];
	            sameBlockNodes[index].push(nodes[i]);
	        }

	    }

	    return sameBlockNodes;
	};

	List.prototype.update = function(){};

	List.prototype.del = function(opData){ };

	List.prototype.isListNode = function (blockNode) {
	    var LIST_TAG = ['LI'];

	    if (blockNode && blockNode.nodeType == 1 && LIST_TAG.indexOf(blockNode.nodeName) > - 1){
	        return true;
	    }

	    return false;
	};

	List.prototype.hasListItem = function(items){
	    if (! items || items.length == 0){
	        return false;
	    }

	    var has = false;
	    $(items).each(function(i, item){
	        if (item && item.nodeName == "LI"){
	            has = true;
	            return false;
	        }
	    });

	    return has;
	};

	List.prototype.isListGroupItemAllSelected = function(items){
	    if (! items || items.length == 0){
	        return false;
	    }

	    var isAll = true;
	    $(items).each(function(i, item){
	        if (item && item.nodeName != "LI"){
	            isAll = false;
	            return false;
	        }
	    });

	    return isAll;
	};

	List.prototype.makeListItem = function(items, listType){
	    if (items && items.length > 0){

	        //셀렉션으로 여러개의 Paragraph을 선택했을때 OL or UL 하위에 LI 로 묶어줄 group을 선택
	        var getGroups = function(nodes){
	            var group = [];
	            var groupNum = 0;

	            var add = function(n){
	                if (! group[groupNum]){
	                    group[groupNum] = [];
	                }

	                group[groupNum].push(n);
	            };

	            $(nodes).each(function(){
	                var node = this;

	                if (group[groupNum]){
	                    var length = group[groupNum].length;
	                    var prevNode = node.previousSibling;

	                    //p, li 앞에 텍스트 노드가 있을경우 앞으로 이동
	                    if (prevNode && prevNode.nodeType == 3){
	                        prevNode = prevNode.previousSibling;
	                    }

	                    //연속된 순서로 있는 경우에만 리스트로 묶음
	                    if (! (node && prevNode && prevNode == group[groupNum][length-1])){
	                        groupNum ++;
	                    }
	                }

	                add(node);
	            });

	            return group;
	        };

	        var groups = getGroups(items);

	        $(groups).each(function(){
	            var group = this;
	            var firstPNode = group[0];
	            var tagName = listType == "numbered" ? "ol" : "ul";
	            var html = "<" + tagName + ">";

	            $(group).each(function(){
	                var pNode = this;
	                var cloneNode = pNode.cloneNode(true);
	                var $newNode = $("<li>").append($($(pNode).html()));
	                $newNode.attrAll($(cloneNode).attrAll());

	                html += $newNode[0].outerHTML;

	                if (firstPNode != pNode){
	                    $(pNode).remove();
	                }
	            });

	            html += "</" + tagName + ">";

	            $(firstPNode).replaceWith($(html));
	        });
	    }
	};

	List.prototype.deleteListItem = function(items){
	    if (items && items.length > 0){
	        //셀렉션으로 여러개의 Paragraph을 선택했을때 OL or UL 하위에 LI 로 묶어줄 group을 선택
	        var getGroups = function(nodes){
	            var group = [];
	            var groupNum = 0;

	            var add = function(n){
	                if (! group[groupNum]){
	                    group[groupNum] = [];
	                }

	                group[groupNum].push(n);
	            };

	            $(nodes).each(function(){
	                var node = this;

	                if (node.nodeName == "LI"){
	                    if (group[groupNum]){
	                        var length = group[groupNum].length;
	                        var parentNode = node.parentNode;
	                        var prevParentNode = group[groupNum][length-1].parentNode;

	                        //연속된 순서로 있는 경우에만 리스트로 묶음
	                        if (! (node && parentNode && parentNode == prevParentNode)){
	                            groupNum ++;
	                        }
	                    }

	                    add(node);
	                }
	            });

	            return group;
	        };

	        var cloneAppendLiNode = function(listGroupNode, appendLiNodes, funtionName) {
	            var $listGroupNode = $(listGroupNode);
	            var $cloneListGroup = $listGroupNode.clone().html("");
	            $listGroupNode[funtionName]($cloneListGroup);
	            $cloneListGroup.append(appendLiNodes);
	        };

	        var groups = getGroups(items);

	        $(groups).each(function(){
	            var group = this;
	            var firstListNode = group[0].parentNode;
	            var html = "";

	            if (group.length ) {
	                if (group[0].previousSibling) {
	                    var $liNodes = $(group[0]).prevAll();
	                    cloneAppendLiNode(firstListNode, $liNodes, "before");
	                }

	                if (group[group.length - 1].nextSibling) {
	                    var $liNodes = $(group[0]).nextAll();
	                    cloneAppendLiNode(firstListNode, $liNodes, "after");
	                }

	                $(group).each(function(){
	                    var pNode = this;
	                    var cloneNode = pNode.cloneNode(true);
	                    var $newNode = $(Define.DEFAULT_P_STYLE).append($($(pNode).html()));
	                    $newNode.attrAll($(cloneNode).attrAll());

	                    html += $newNode[0].outerHTML;

	                    $(pNode).remove();
	                });

	                $(firstListNode).replaceWith($(html));
	            }
	        });
	    }
	};

	module.exports = List;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(9);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);

	function Table (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Table.prototype, new AbstractModule());

	Table.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Table.prototype.setTableStyle = function (table, tableStyle) {

	    var defaultHeight = 40;

	    if (tableStyle.width !== null) {
	        table.css('width', tableStyle.width + 'px');
	    }

	    if (tableStyle.height !== null) {
	        table.css('height', tableStyle.height + 'px');
	    } else {
	        table.css('height', (defaultHeight * tableStyle.row) + 'px');
	    }

	    if (tableStyle.marginLeft !== null) {
	        table.css('margin-left', tableStyle.marginLeft + 'px');
	    }

	    if (tableStyle.borderSeparate !== null) {

	        var isSeparate = tableStyle.borderSeparate;

	        table.css('border-collapse', isSeparate ? 'separate' : 'collapse');
	        table.css('border-style', isSeparate ? 'solid' : 'none');
	    }

	    if (tableStyle.cellSpacing !== null) {
	        table.attr('cellspacing', tableStyle.cellSpacing);
	    }

	    if (tableStyle.cellPadding !== null) {
	        table.attr('cellpadding', tableStyle.cellPadding);
	    }

	    if (tableStyle.align !== null) {
	        table.attr('align', tableStyle.align);
	    }

	    if (tableStyle.id !== null) {
	        table.attr('id', tableStyle.id);
	    }

	    if (tableStyle.className !== null) {
	        table.attr('class', tableStyle.className);
	    }

	    if (tableStyle.summary !== null) {
	        table.attr('summary', tableStyle.summary);
	    }

	    if (tableStyle.image !== null) {
	        table.css('background-image', 'url(' + tableStyle.image + ')');
	    }

	    if (tableStyle.attachment !== null) {
	        table.css('background-attachment', tableStyle.attachment);
	    }

	    if (tableStyle.repeat !== null) {
	        table.css('background-repeat', tableStyle.repeat);
	    }

	    if (tableStyle.positionX !== null) {
	        table.css('background-position-x', (tableStyle.positionX || 0) + 'px');
	    }

	    if (tableStyle.positionY !== null) {
	        table.css('background-position-y', (tableStyle.positionY || 0) + 'px' );
	    }

	    if (tableStyle.backgroundColor !== null) {
	        table.css('background-color', tableStyle.backgroundColor);
	    }
	};

	Table.prototype.setBorder = function (td, borderPostion, borderStyle) {
	    td.css(borderPostion, borderStyle.width + 'px ' + borderStyle.type + ' ' + borderStyle.color);
	};

	Table.prototype.setTemplate = function ($td, templateType, row, col, i, j) {

	    switch (templateType + "") {
	        case "0" :

	            break;
	        case "1" :
	            var type1_border =  { width : 2, type : 'solid', color : '#0000ff' };
	            var type1_border_none =  { width : 1, type : 'none', color : '#0000ff' };

	            if (i === 0) {
	                this.setBorder($td, 'border-top', type1_border);
	            }

	            if (i === row - 1) {
	                this.setBorder($td, 'border-bottom', type1_border);
	            }

	            if (j === 0) {
	                this.setBorder($td, 'border-left', type1_border_none);
	            }

	            if (j === col - 1) {
	                this.setBorder($td, 'border-right', type1_border_none);
	            }

	            break;
	        case "2" :
	            if (!(i % 2)) {
	                $td.css('background-color', '#eeeeee');
	            }

	            break;
	        case "3" :
	            var type3_border = { width : 1, type : 'dotted', color : '#000000' };

	            if (i === 0) {
	                this.setBorder($td, 'border-top', type3_border);
	            }

	            if (i === row - 1) {
	                this.setBorder($td, 'border-bottom', type3_border);
	            }

	            if (j === 0) {
	                this.setBorder($td, 'border-left', type3_border);
	            }

	            if (j === col - 1) {
	                this.setBorder($td, 'border-right', type3_border);
	            }
	            break;
	        case "4" :
	            var defaultBorder = { width : 1, type : 'solid', color : '#000000' };
	            var type4_border = { width : 1, type : 'dotted', color : '#000000' };

	            this.setBorder($td, 'border', type4_border);

	            if (i === 0) {
	                this.setBorder($td, 'border-top', defaultBorder);
	            }

	            if (i === row - 1) {
	                this.setBorder($td, 'border-bottom', defaultBorder);
	            }

	            if (j === 0) {
	                this.setBorder($td, 'border-left', defaultBorder);
	            }

	            if (j === col - 1) {
	                this.setBorder($td, 'border-right', defaultBorder);
	            }

	            break;
	        case "5" :
	            if (i === 0) {
	                if (j == 0) {
	                    $td.css('background-color', '#eeeeee');
	                    $td.attr('colspan', col);
	                } else {
	                    $td.remove()
	                }
	            }

	            break;
	        case "6" :
	            if (i === 0) {
	                $td.css('background-color', '#eeeeee');
	            }

	            break;
	        case "7" :
	            var defaultBorder = { width : 1, type : 'solid', color : '#000000' };
	            var type7_border = { width : 1, type : 'none', color : '#000000' };

	            this.setBorder($td, 'border', type7_border);

	            if (i === 0) {
	                this.setBorder($td, 'border-top', defaultBorder);
	            }

	            if (i === row - 1) {
	                this.setBorder($td, 'border-bottom', defaultBorder);
	            }

	            if (j === 0) {
	                this.setBorder($td, 'border-left', defaultBorder);
	            }

	            if (j === col - 1) {
	                this.setBorder($td, 'border-right', defaultBorder);
	            }

	            break;
	        case "8" :
	            if (j === 0) {
	                $td.css('background-color', '#a6a4ff');
	            }

	            break;
	        case "9" :
	            if (i === 0) {
	                $td.css('background-color', '#eeeeee');
	            }

	            if (i === row - 1) {
	                $td.css('background-color', '#a6a4ff');
	            }

	            break;
	        case "10" :
	            if (i === 0 && j !== 0) {
	                $td.css('background-color', '#eeeeee');
	            }

	            if (i !== 0 && j === 0) {
	                $td.css('background-color', '#a6a4ff');
	            }

	            break;
	        case "11" :
	            if (j == 0) {
	                if (i == 0) {
	                    $td.css('background-color', '#eeeeee');
	                }
	                $td.attr('colspan', col);
	            } else {
	                $td.remove()
	            }

	            break;
	    }


	    // td.css(borderPostion, borderStyle.width + 'px ' + borderStyle.type + ' ' + borderStyle.color);
	};

	Table.prototype.create = function (opData) {

	    var tableSet = opData.value;

	    var $table = $('<table/>').css({
	        //Default Style
	        'word-break' : 'break-all',
	        'word-wrap' : 'break-word',
	        'border-collapse' : 'collapse',
	        'border' : '1px none #000000',
	    });

	    var isTemplate = !!tableSet.template;

	    this.setTableStyle($table, tableSet);

	    if (tableSet.caption !== null) {
	        $table.append($('<caption>' +  tableSet.caption + '</caption>'));
	    }

	    var width = tableSet.width;

	    var scope = tableSet.scope;
	    var headerType = tableSet.headerType;

	    var row = tableSet.row;
	    var col = tableSet.col;

	    var cellWidth = parseInt(width / col);
	    var border = tableSet.border;

	    var defaultBorder = { width : 1, type : 'solid', color : '#000000' };

	    // var colgroupHTML = '';
	    //
	    // for (var colCount = col; colCount ;colCount--) {
	    //     colgroupHTML += '<col style="width:' + cellWidth + 'px;">';
	    // }
	    //
	    // var $colgroup = $('<colgroup>' + colgroupHTML + '</colgroup>');

	    var $tBody = $('<tbody></tbody>');

	    for(var i = 0; i < row; i++){
	        var $tr = $('<tr></tr>');
	        for (var j = 0; j < col; j++){

	            var cellNodeTag = 'td';

	            if (headerType !== 'none') {
	                if ((headerType == 'left_top' && (i == 0 || j == 0))
	                    || (headerType == 'left' && (j == 0))
	                    || (headerType == 'top' && (i == 0))
	                ) {
	                    cellNodeTag = 'th';
	                }
	            }

	            var $td = $('<' + cellNodeTag + ' style="vertical-align: middle;' + 'width:' + cellWidth + 'px;' + '">' + Define.DEFAULT_PARAGRAPH_HTML + '</' + cellNodeTag + '>');

	            if (i === 0) {
	                this.setBorder($td, 'border-top', border.top || defaultBorder);
	                this.setBorder($td, 'border-bottom', border.middle || defaultBorder);
	            }

	            if (i === row - 1) {
	                this.setBorder($td, 'border-top', border.middle || defaultBorder);
	                this.setBorder($td, 'border-bottom', border.bottom || defaultBorder);
	            }

	            if (i !== 0 && i !== row - 1) {
	                this.setBorder($td, 'border-top', border.middle || defaultBorder);
	                this.setBorder($td, 'border-bottom', border.middle || defaultBorder);
	            }

	            if (j === 0) {
	                this.setBorder($td, 'border-left', border.left || defaultBorder);
	                this.setBorder($td, 'border-right', border.center || defaultBorder);
	            }

	            if (j === col - 1) {
	                this.setBorder($td, 'border-left', border.center || defaultBorder);
	                this.setBorder($td, 'border-right', border.right || defaultBorder);
	            }

	            if (j !== 0 && j !== col - 1) {
	                this.setBorder($td, 'border-left', border.center || defaultBorder);
	                this.setBorder($td, 'border-right', border.center || defaultBorder);
	            }

	            if (cellNodeTag == 'th' && scope) {
	                if (j === 0) {
	                    $td.attr('scope', 'row');
	                } else if (i === 0) {
	                    $td.attr('scope', 'col');
	                }
	            }

	            $tr.append($td);

	            if (isTemplate) {
	                this.setTemplate($td, tableSet.template.type, row, col, i, j);
	            }
	        }
	        $tBody.append($tr);
	    }

	    // $table.append($colgroup);
	    $table.append($tBody);

	    this.$dom.selection.setOp({p : [opData.range.p[0], opData.range.p[0]], r : [opData.range.r[0], opData.range.r[0]]});

	    var currentNodeInfo = this.$dom.selection.getOpNode(opData.range.p[0], opData.range.r[0]);

	    // var currentRange = this.$dom.selection.getRange();

	    // var insertableNode = this.$dom.selection.getInsertableNode(opData.range.p[0], opData.range.r[0]);

	    var resultObj = Util.splitParagraphNode({
	        startContainer : currentNodeInfo.container,
	        startOffset : currentNodeInfo.offset
	    });

	    // $(insertableNode).remove();

	    if (resultObj.prevNode) {
	        resultObj.prevNode.after($table);
	    } else if (resultObj.nextNode) {
	        resultObj.nextNode.before($table);
	    }

	    var firstSpanNode = $table.find('span')[0];

	    if (firstSpanNode){
	        this.$dom.selection.setWindowRange(firstSpanNode, 0);
	    }

	    this.router.scrollIntoView($table[0]);
	};

	Table.prototype.update = function (opData) {

	    var val = opData.value;
	    // var range = this.$dom.selection.get();

	    // console.log('>>>>>>>>>>>>>>>', opData);

	    // if(!range){
	    //     return;
	    // }

	    if (val.isModify) {
	        var $parentTable = Util.getTargetTables(this.$dom.selection);

	        if ($parentTable.length) {
	            this.setTableUpdate($parentTable.first(), val);

	            this.router.scrollIntoView($parentTable[0]);
	        }

	    } else {
	        var type = val.subType;

	        // var table = TableUtil.getTable(range.startContainer);
	        // var tableList = [table];
	        switch(type){
	            case "insertTop":
	                this.insertTop(opData);
	                break;

	            case "insertBottom":
	                this.insertBottom(opData);
	                break;

	            case "insertLeft":
	                this.insertLeft(opData);
	                break;

	            case "insertRight":
	                this.insertRight(opData);
	                break;

	            case "removeRow":
	                this.removeRow(opData);
	                break;

	            case "removeCol":
	                this.removeCol(opData);
	                break;

	            case "removeTable":
	                this.removeTable(opData);
	                break;

	            case "mergeCell":
	                var mergeNode = this.mergeCell(opData);

	                if (mergeNode){
	                    this.$dom.selection.showWindowSelection();
	                    var firstSpanNode = $(mergeNode).find('span')[0];

	                    if (firstSpanNode){
	                        this.$dom.selection.removeSelected();
	                        this.$dom.selection.setWindowRange(firstSpanNode, 0);
	                    }
	                }

	                break;

	            case "splitCol":
	                this.splitCol(opData);
	                break;

	            case "splitRow":
	                this.splitRow(opData);
	                break;

	            case "tableBackgroundColor":
	                this.setBackgroundColor(opData);
	                break;

	            case "tableBorderStyle":
	                this.tableBorderStyle(opData);
	                break;

	            case "vertical_align_top" :
	            case "vertical_align_middle" :
	            case "vertical_align_bottom" :
	            case "vertical_align_baseline" :

	                var verticalAlignType = type.replace('vertical_align_', '');

	                var $tdNodes = this.$dom.selection.getSelectedTd();

	                if (!$tdNodes.length) {
	                    var $selectedNodes = this.$dom.selection.getSelectedNode();

	                    if (!$selectedNodes.length) {
	                        var op = this.$dom.selection.get();

	                        var nodeInfo = this.$dom.selection.getOpNode(op.p, op.r);

	                        if (!nodeInfo) {
	                            $selectedNodes = $(nodeInfo.container);
	                        }
	                    }

	                    $tdNodes = $selectedNodes.closest('.' + Define.CLASS.CONTENTS + ' ' + Define.CELL_TYPE.join(', .' + Define.CLASS.CONTENTS + ' '));
	                }

	                $tdNodes.css('vertical-align', verticalAlignType);

	                break;

	            case "cell_horizontal_size":
	            case "cell_vertical_size":
	            case "cell_both_size":

	                var $tdNodes = this.$dom.selection.getSelectedTd();

	                var $first = $tdNodes.first();
	                var $lastCell = $tdNodes.last();

	                if ($tdNodes.length) {
	                    var $table = $first.closest('TABLE');

	                    var firstPosition = $first.cellPos();
	                    var lastPosition = $lastCell.cellPos();

	                    var width = 0;
	                    var height = 0;

	                    //가로 크기 같게
	                    if (type == "cell_horizontal_size" || type == "cell_both_size") {
	                        var firstTD = $tdNodes.first();

	                        var $nextAllSelectedTD = firstTD.next('.' + Define.CLASS.SELECTED_TD);

	                        var $firstRowTdNodes = firstTD.add($nextAllSelectedTD);

	                        $firstRowTdNodes.each(function(){
	                            width += $(this).width();
	                        });

	                        var firstLeft = firstPosition.left;
	                        var lastLeft = lastPosition.left;

	                        var countLeftTD = lastLeft - firstLeft + 1;

	                        width = parseInt(width / countLeftTD);
	                    }

	                    //세로 크기 같게
	                    if (type == "cell_vertical_size" || type == "cell_both_size") {
	                        var $trNode = $tdNodes.closest('TR');

	                        $trNode.each(function(){
	                            height += $(this).height();
	                        });

	                        var firstTop = firstPosition.top;
	                        var lastTop = lastPosition.top;

	                        var countTopTR = lastTop - firstTop + 1;

	                        height = height / countTopTR;
	                    }

	                    if (width || height) {
	                        var rows = $table[0].rows;

	                        for (var rowIndex = 0, rowLength = rows.length; rowIndex < rowLength; rowIndex++){

	                            var row = rows[rowIndex];

	                            var cols = row.cells;

	                            for (var colIndex = 0, colLength = cols.length; colIndex < colLength; colIndex++){
	                                var cell = cols[colIndex];
	                                var $cell = $(cell);

	                                var cellPosition = $cell.cellPos();

	                                if (width && (cellPosition.left >= firstPosition.left && cellPosition.left <= lastPosition.left)) {
	                                    $cell.css("width" , width + "px");
	                                }

	                                if (height && (cellPosition.top >= firstPosition.top && cellPosition.top <= lastPosition.top)) {
	                                    $cell.css("height" , height + "px");
	                                }
	                            }
	                        }
	                    }
	                }

	                break;

	            case "tableToText" :
	                var $parentTable = Util.getTargetTables(this.$dom.selection);
	                var tableText = $parentTable.text();
	                $parentTable.before($(Define.DEFAULT_P_STYLE + "<span>" + (tableText || Define.DEFAULT_TEXT_HTML) + "</span></p>"));
	                $parentTable.remove();

	                break;

	            case "cellModify" :
	                var $tdNodes = Util.getTargetCells(this.$dom.selection);

	                this.setCellUpdate($tdNodes, val);

	                break;
	        }
	    }

	    var range = this.$dom.selection.get();

	    // var $selectedTdNodes = this.$dom.selection.getSelectedTd();
	    var $selectedNodes = this.$dom.selection.getSelectedNode();

	    if ($selectedNodes.length > 0){
	        this.$dom.selection.setWindowRange($selectedNodes[0], 0);
	        this.$dom.selection.removeSelected();
	    }

	    return {
	        range : {
	            p : [range.p[0], range.p[0]],
	            r : [0, 0]
	        }
	    };
	};

	Table.prototype.setCellUpdate = function(tdNodes, value) {
	    var $cell = $(tdNodes);

	    if (value.align !== null) {
	        $cell.css('textAlign', value.align);
	    }

	    if (value.verticalAlign !== null) {
	        $cell.css('verticalAlign', value.verticalAlign);
	    }

	    if (value.whiteSpace !== null) {
	        var whiteSpace = value.whiteSpace;
	        if (whiteSpace === 'normal') {
	            whiteSpace = '';
	        }
	        $cell.css('whiteSpace', whiteSpace);
	    }

	    if (value.headerType !== null) {
	        $cell = $cell.changeTagName(value.headerType);
	    }

	    if (value.scopeType !== null) {
	        var scopeType = value.scopeType;
	        if (scopeType === 'none') {
	            $cell.removeAttr('scope');
	        } else {
	            $cell.attr('scope', scopeType);
	        }
	    }

	    if (value.border !== null) {
	        if (value.border.top) {
	            var borderString = value.border.top.width + 'px ' + value.border.top.type + ' ' + value.border.top.color;
	            $cell.css('border-top', borderString);
	        }

	        if (value.border.bottom) {
	            var borderString = value.border.bottom.width + 'px ' + value.border.bottom.type + ' ' + value.border.bottom.color;
	            $cell.css('border-bottom', borderString);
	        }

	        if (value.border.left) {
	            var borderString = value.border.left.width + 'px ' + value.border.left.type + ' ' + value.border.left.color;
	            $cell.css('border-left', borderString);
	        }

	        if (value.border.right) {
	            var borderString = value.border.right.width + 'px ' + value.border.right.type + ' ' + value.border.right.color;
	            $cell.css('border-right', borderString);
	        }
	    }

	    if (value.image !== null) {
	        $cell.css('background-image', 'url(' + value.image + ')');
	    }

	    if (value.attachment !== null) {
	        $cell.css('background-attachment', value.attachment);
	    }

	    if (value.repeat !== null) {
	        $cell.css('background-repeat', value.repeat);
	    }

	    if (value.positionX !== null) {
	        $cell.css('background-position-x', (value.positionX || 0) + 'px');
	    }

	    if (value.positionY !== null) {
	        $cell.css('background-position-y', (value.positionY || 0) + 'px' );
	    }

	    if (value.backgroundColor !== null) {
	        $cell.css('background-color', value.backgroundColor);
	    }
	};

	Table.prototype.setTableUpdate = function(table, tableSet){
	    var $table = $(table).css({
	        //Default Style
	        'word-break' : 'break-all',
	        'word-wrap' : 'break-word'
	    });

	    this.setTableStyle($table, tableSet);

	    if (tableSet.caption !== null) {
	        if ($table[0].caption) {
	            $table[0].caption.innerHTML = tableSet.caption;
	        } else {
	            $table.prepend($('<caption>' +  tableSet.caption + '</caption>'));
	        }
	    }

	    var scope = tableSet.scope;
	    var headerType = tableSet.headerType;

	    var row = tableSet.row;
	    var col = tableSet.col;

	    var border = tableSet.border;

	    for(var i = 0; i < row; i++){
	        var $tr = $($table[0].rows[i]);

	        for (var j = 0; j < col; j++){

	            if ($tr[0].cells[j]){
	                var $td = $($tr[0].cells[j]);

	                var cellType = '';

	                if (headerType !== null) {
	                    if ((headerType == 'left_top' && (i == 0 || j == 0))
	                        || (headerType == 'left' && (j == 0))
	                        || (headerType == 'top' && (i == 0))
	                    ) {
	                        cellType = 'th';
	                    } else {
	                        cellType = 'td';
	                    }

	                    if (cellType !== $td[0].nodeName.toLowerCase()) {
	                        $td = $td.changeTagName(cellType);
	                    }
	                }

	                if (i === 0) {
	                    if (border.top) {
	                        this.setBorder($td, 'border-top', border.top);
	                    }

	                    if (border.middle) {
	                        this.setBorder($td, 'border-bottom', border.middle);
	                    }
	                }

	                if (i === row - 1) {
	                    if (border.middle) {
	                        this.setBorder($td, 'border-top', border.middle);
	                    }

	                    if (border.bottom) {
	                        this.setBorder($td, 'border-bottom', border.bottom);
	                    }
	                }

	                if (i !== 0 && i !== row - 1) {
	                    if (border.middle) {
	                        this.setBorder($td, 'border-top', border.middle);
	                    }

	                    if (border.middle) {
	                        this.setBorder($td, 'border-bottom', border.middle);
	                    }
	                }

	                if (j === 0) {
	                    if (border.left) {
	                        this.setBorder($td, 'border-left', border.left);
	                    }

	                    if (border.center) {
	                        this.setBorder($td, 'border-right', border.center);
	                    }
	                }

	                if (j === col - 1) {
	                    if (border.center) {
	                        this.setBorder($td, 'border-left', border.center);
	                    }

	                    if (border.right) {
	                        this.setBorder($td, 'border-right', border.right);
	                    }
	                }

	                if (j !== 0 && j !== col - 1) {
	                    if (border.center) {
	                        this.setBorder($td, 'border-left', border.center);
	                    }

	                    if (border.center) {
	                        this.setBorder($td, 'border-right', border.center);
	                    }
	                }

	                if (scope !== null){
	                    if (cellType === 'th' && scope) {
	                        if (j === 0) {
	                            $td.attr('scope', 'row');
	                        } else if (i === 0) {
	                            $td.attr('scope', 'col');
	                        }
	                    } else {
	                        $td.removeAttr('scope');
	                    }
	                }
	            }
	        }
	    }
	};

	Table.prototype.insertTop = function(opData){

	    var opRange = opData.range;

	    this.$dom.selection.setOp({p:opRange.p, r:opRange.r}, true);
	    var tableMapInfo = this.$dom.selection.getTableMap();

	    if (tableMapInfo){
	        var tableMap = tableMapInfo.tableMap;
	        var trNodes = tableMapInfo.trNodes;
	        var sTr = tableMapInfo.sTr;
	        var eTr = tableMapInfo.eTr;
	        var sTdIndex = tableMapInfo.sTdIndex;
	        var eTdIndex = tableMapInfo.eTdIndex;

	        if (true/*sTr == eTr && sTdIndex == eTdIndex*/){

	            var sTrIndex = trNodes.indexOf(sTr);

	            var trMap = tableMap[sTrIndex];
	            var positionTdInfo = tableMap[sTrIndex][sTdIndex];
	            var parentTr = trNodes[sTrIndex];

	            var cloneTr = parentTr.cloneNode(true);
	            $(cloneTr).html('');

	            $(parentTr).before(cloneTr);

	            var isPositionMergeInsertNode = false;
	            for (var i=0, trMapLength=trMap.length; i<trMapLength; i++){
	                var tdInfo = trMap[i];

	                if (tdInfo.isMergeEmpty && tdInfo.rowspan > 0){
	                    tdInfo.node.setAttribute('rowspan', tdInfo.rowspan + 2 /* 본인 포함 해서 + 1 하나더 추가해서 + 1*/);
	                }else{
	                    var cloneTd = tdInfo.node.cloneNode(true);


	                    if (tdInfo.rowspan > 0){

	                        if (tdInfo.node == positionTdInfo.node){
	                            isPositionMergeInsertNode = true;
	                        }

	                        var cloneTdNode = tdInfo.node.cloneNode(true);
	                        cloneTdNode.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;
	                        cloneTr.appendChild(cloneTdNode);

	                        cloneTdNode.removeAttribute('rowspan');
	                        // cloneTr.removeAttribute('rowspan');
	                        // tdInfo.node.setAttribute('rowspan', tdInfo.rowspan + 1);
	                    }else{
	                        cloneTr.appendChild(cloneTd);
	                        $(cloneTd).html(Define.DEFAULT_PARAGRAPH_HTML);
	                    }

	                    if (tdInfo.colspan > 0){
	                        i += tdInfo.colspan;
	                    }
	                }
	            }

	            // 머지된 셀의 경우에는 셀 추가후에 레인지가 튕겨서 보정해주는 로직 나중엔 op 로 다시 복귀해주는 로직으로 넣자
	            if (isPositionMergeInsertNode){
	                var firstSpanNode = $(positionTdInfo.node).find('span')[0];

	                if (firstSpanNode){
	                    var sel = this.$dom.selection.getSelection();
	                    var rng = document.createRange();
	                    rng.setStart(firstSpanNode, 0);
	                    rng.setEnd(firstSpanNode, 0);

	                    sel.removeAllRanges();
	                    sel.addRange(rng);
	                }
	            }

	        }
	    }
	};

	Table.prototype.insertBottom = function(opData){

	    var opRange = opData.range;

	    this.$dom.selection.setOp({p:opRange.p, r:opRange.r}, true);
	    var tableMapInfo = this.$dom.selection.getTableMap();

	    if (tableMapInfo){
	        var tableMap = tableMapInfo.tableMap;
	        var trNodes = tableMapInfo.trNodes;
	        var sTr = tableMapInfo.sTr;
	        var eTr = tableMapInfo.eTr;
	        var sTdIndex = tableMapInfo.sTdIndex;
	        var eTdIndex = tableMapInfo.eTdIndex;

	        if (true/*sTr == eTr && sTdIndex == eTdIndex*/){

	            var sTrIndex = trNodes.indexOf(eTr) + 1;

	            var isTableBottom = false;
	            if (sTrIndex > trNodes.length - 1){
	                sTrIndex = trNodes.length - 1;
	                isTableBottom = true;
	            }

	            var trMap = tableMap[sTrIndex];
	            var positionTdInfo = tableMap[sTrIndex][sTdIndex];
	            var parentTr = trNodes[sTrIndex];

	            var cloneTr = parentTr.cloneNode(true);
	            $(cloneTr).html('');

	            if (isTableBottom){
	                $(parentTr).after(cloneTr);
	            }else{
	                $(parentTr).before(cloneTr);
	            }

	            var isPositionMergeInsertNode = false;
	            for (var i=0, trMapLength=trMap.length; i<trMapLength; i++){
	                var tdInfo = trMap[i];

	                if (tdInfo.isMergeEmpty && tdInfo.rowspan > 0){
	                    tdInfo.node.setAttribute('rowspan', tdInfo.rowspan + 2 /* 본인 포함 해서 + 1 하나더 추가해서 + 1*/);
	                }else{
	                    var cloneTd = tdInfo.node.cloneNode(true);


	                    if (tdInfo.rowspan > 0){

	                        if (tdInfo.node == positionTdInfo.node){
	                            isPositionMergeInsertNode = true;
	                        }

	                        var cloneTdNode = tdInfo.node.cloneNode(true);
	                        cloneTdNode.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;
	                        cloneTr.appendChild(cloneTdNode);

	                        cloneTdNode.removeAttribute('rowspan');
	                        // cloneTr.removeAttribute('rowspan');
	                        // tdInfo.node.setAttribute('rowspan', tdInfo.rowspan + 1);
	                    }else{
	                        cloneTr.appendChild(cloneTd);
	                        $(cloneTd).html(Define.DEFAULT_PARAGRAPH_HTML);
	                    }

	                    if (tdInfo.colspan > 0){
	                        i += tdInfo.colspan;
	                    }
	                }
	            }

	            // 머지된 셀의 경우에는 셀 추가후에 레인지가 튕겨서 보정해주는 로직 나중엔 op 로 다시 복귀해주는 로직으로 넣자
	            if (isPositionMergeInsertNode){
	                var firstSpanNode = $(positionTdInfo.node).find('span')[0];

	                if (firstSpanNode){
	                    var sel = this.$dom.selection.getSelection();
	                    var rng = document.createRange();
	                    rng.setStart(firstSpanNode, 0);
	                    rng.setEnd(firstSpanNode, 0);

	                    sel.removeAllRanges();
	                    sel.addRange(rng);
	                }
	            }


	        }
	    }
	};

	Table.prototype.insertColumns = function(opData, type) {
	    var opRange = opData.range;

	    this.$dom.selection.setOp({p:opRange.p, r:opRange.r}, true);
	    var range = this.$dom.selection.getRange();
	    var startContainer = null;

	    if (range){
	        startContainer = range.startContainer;
	    }else{
	        startContainer = this.$dom.selection.getSelectedNode()[0];
	    }

	    var startContainer = startContainer;
	    var $currentNode = $(startContainer);

	    if (!$currentNode.is(Define.CELL_TYPE.join(','))) {
	        $currentNode = $currentNode.closest('.' + Define.CLASS.CONTENTS + ' ' + Define.CELL_TYPE.join(', .' + Define.CLASS.CONTENTS + ' '));
	    }

	    if ($currentNode.length) {
	        var insertPositionFnName = (type === 'right' ? 'after' : 'before');

	        var $tableNode = $currentNode.closest('.' + Define.CLASS.CONTENTS + ' TABLE');
	        var rows = $tableNode[0].rows;

	        var cellPos = $currentNode.cellPos(true);

	        var leftPosition = cellPos.left;

	        if (type === 'right') {
	            leftPosition += $currentNode[0].colSpan - 1;
	        }

	        for (var trIdx = 0, trLength = rows.length; trIdx < trLength; trIdx++) {
	            var row = rows[trIdx];

	            var cells = row.cells;

	            for (var cellIdx = 0, cellLength = cells.length; cellIdx < cellLength; cellIdx++) {
	                var targetCell = cells[cellIdx];
	                var $targetCell = $(targetCell);
	                var targetCellPos = $targetCell.cellPos();

	                if (targetCellPos.left == leftPosition || targetCellPos.left + (targetCell.colSpan - 1) == leftPosition) {
	                    if ((type === 'right' && targetCellPos.left == leftPosition && targetCellPos.left + (targetCell.colSpan - 1) > leftPosition)
	                        || (type === 'left' && targetCellPos.left < leftPosition && targetCellPos.left + (targetCell.colSpan - 1) == leftPosition)
	                    ) {
	                        $targetCell.attr('colspan', targetCell.colSpan + 1);
	                    } else {
	                        var $cloneCell = $targetCell.clone();
	                        $cloneCell.html(Define.DEFAULT_PARAGRAPH_HTML).css('width', '66px');
	                        $cloneCell.attr('colspan', '');
	                        $targetCell[insertPositionFnName]($cloneCell);
	                    }

	                    break;
	                } else if (targetCellPos.left < leftPosition && targetCellPos.left + (targetCell.colSpan - 1) > leftPosition) {
	                    $targetCell.attr('colspan', targetCell.colSpan + 1);
	                }
	            }
	        }
	    }
	};

	Table.prototype.insertLeft = function(opData){
	    this.insertColumns(opData, 'left');
	};

	Table.prototype.insertRight = function(opData){
	    this.insertColumns(opData, 'right');
	};

	Table.prototype.removeCol = function(opData){
	    var opRange = opData.range;

	    this.$dom.selection.setOp({p:opRange.p, r:opRange.r}, true);
	    var tableMapInfo = this.$dom.selection.getTableMap();

	    if (tableMapInfo){
	        var tableMap = tableMapInfo.tableMap;
	        var trNodes = tableMapInfo.trNodes;
	        var sTr = tableMapInfo.sTr;
	        var eTr = tableMapInfo.eTr;
	        var sTdIndex = tableMapInfo.sTdIndex;
	        var eTdIndex = tableMapInfo.eTdIndex;

	        if (true/*sTr == eTr && sTdIndex == eTdIndex*/){

	            var tdIndexMap = [];

	            // if (sTdIndex == 0){
	            //     return ;
	            // }else{
	            //     sTdIndex;
	            // }

	            var isTdLengthOne = true;
	            for (var i=0, length=tableMap.length; i<length; i++){
	                if (tableMap[i].length > 1){
	                    isTdLengthOne = false;
	                    break;
	                }
	            }

	            if (isTdLengthOne){
	                console.log('stop reason - col one.');
	                return ;
	            }

	            //table map 에서 해당 td index에 해당하는 셀들의 정보만 가져옴
	            for (var i=0, length=tableMap.length; i<length; i++){
	                tdIndexMap.push(tableMap[i][sTdIndex]);
	            }

	            //colgroup 삭제
	            var tableNode = this.$dom.selection.getParentTagNode(trNodes[0], ['TABLE'])[0];
	            if (tableNode){
	                var colGroup = null;
	                for (var i=0, length=tableNode.childNodes.length; i<length; i++){
	                    var childNode = tableNode.childNodes[i];

	                    if (childNode.nodeType == 1 && childNode.nodeName == 'COLGROUP'){
	                        colGroup = childNode;
	                        break;
	                    }
	                }

	                if (colGroup){
	                    if (colGroup.childNodes[sTdIndex]){
	                        $(colGroup.childNodes[sTdIndex]).remove();
	                    }

	                }
	            }

	            //table map 이 아닌 실제 셀 인덱스 내에 해당 노드가 있는지 없는지를 판단
	            var isInArray = function(tdInMap, target){

	                for (var i=0,length=tdInMap.length; i<length; i++){
	                    if (! tdInMap[i].isMergeEmpty && tdInMap[i].node == target.node){
	                        return true;
	                    }
	                }

	                return false;

	            };

	            for (var i=0, length=tdIndexMap.length; i<length; i++){
	                var tdInfo = tdIndexMap[i];

	                if (tdInfo.isMergeEmpty && tdInfo.colspan > 0 && ! isInArray(tdIndexMap, tdInfo)){
	                    if (tdInfo.colspan == 1){
	                        tdInfo.node.removeAttribute('colspan');
	                    }else{
	                        tdInfo.node.setAttribute('colspan', tdInfo.colspan);
	                    }

	                }else{
	                    if (! tdInfo.isMergeEmpty){
	                        if (tdInfo.colspan > 0){
	                            if (tdInfo.colspan == 1){
	                                tdInfo.node.removeAttribute('colspan');
	                            }else{
	                                tdInfo.node.setAttribute('colspan', tdInfo.colspan);
	                            }
	                        }else{
	                            $(tdIndexMap[i].node).remove();
	                        }

	                    }

	                }
	            }
	        }
	    }
	};

	Table.prototype.removeRow = function(opData){

	    var opRange = opData.range;

	    this.$dom.selection.setOp({p:opRange.p, r:opRange.r}, true);
	    var tableMapInfo = this.$dom.selection.getTableMap();

	    if (tableMapInfo){
	        var tableMap = tableMapInfo.tableMap;
	        var trNodes = tableMapInfo.trNodes;
	        var sTr = tableMapInfo.sTr;
	        var eTr = tableMapInfo.eTr;
	        var sTdIndex = tableMapInfo.sTdIndex;
	        var eTdIndex = tableMapInfo.eTdIndex;

	        if (true/*sTr == eTr && sTdIndex == eTdIndex*/){
	            if (trNodes.length == 1){
	                console.log('stop reason - row one.');
	                return ;
	            }

	            var sTrIndex = trNodes.indexOf(eTr);

	            // if (sTrIndex == trNodes.length - 1){
	            //     return;
	            // }else{
	            //     sTrIndex ++;
	            // }

	            var trMap = tableMap[sTrIndex];
	            var parentTr = trNodes[sTrIndex];

	            var tableNode = $(tableMap[0][0].node).parents('table')[0];

	            //table map 이 아닌 실제 셀 인덱스 내에 해당 노드가 있는지 없는지를 판단
	            var isInArray = function(tdInMap, target){

	                for (var i=0,length=tdInMap.length; i<length; i++){
	                    if (! tdInMap[i].isMergeEmpty && tdInMap[i].node == target.node){
	                        return true;
	                    }
	                }

	                return false;

	            };


	            for (var i=0, trMapLength=trMap.length; i<trMapLength; i++){
	                var tdInfo = trMap[i];

	                if (tdInfo.isMergeEmpty && tdInfo.rowspan > 0 && ! isInArray(trMap[i], tdInfo)){
	                    tdInfo.node.setAttribute('rowspan', tdInfo.rowspan);
	                }else{

	                    if (! tdInfo.isMergeEmpty && tdInfo.rowspan > 0){
	                        var nextTMap = tableMap[sTrIndex + 1];

	                        if (nextTMap){
	                            var prevNode = null;
	                            for (var j=0, jLength=nextTMap.length; j<jLength; j++){
	                                if (nextTMap[j].node == tdInfo.node){
	                                    break;
	                                }

	                                prevNode = nextTMap[j].node;
	                            }

	                            if (prevNode){
	                                tdInfo.node.setAttribute('rowspan', tdInfo.rowspan);
	                                $(prevNode).after(tdInfo.node.cloneNode(true));
	                            }
	                        }
	                    }
	                }
	            }

	            $(parentTr).remove();


	            var nextRangeTrIndex = sTrIndex;
	            if (sTrIndex > 0){
	                nextRangeTrIndex --;
	            }else{
	                nextRangeTrIndex ++;
	            }

	            var prevTdNode = null;
	            var firstSpanNode = null;
	            if (tableMap[nextRangeTrIndex]){
	                prevTdNode = tableMap[nextRangeTrIndex][sTdIndex].node;
	            }

	            if (prevTdNode && prevTdNode.parentNode){
	                firstSpanNode = $(prevTdNode).find('span')[0];
	            }else {
	                firstSpanNode = $($(tableNode).find('td')[0]).find('span')[0];
	            }

	            this.$dom.selection.setWindowRange(firstSpanNode, 0);
	        }
	    }
	};

	Table.prototype.removeTable = function(opData){
	    var opRange = opData.range;

	    this.$dom.selection.setOp({p:opRange.p, r:opRange.r}, true);
	    var tableMapInfo = this.$dom.selection.getTableMap();

	    if (tableMapInfo){
	        var sTr = tableMapInfo.sTr;
	        var table = this.$dom.selection.getParentTagNode(sTr, ['TABLE'])[0];

	        if (table){
	            var $rangeBookmark = $('<span id="range_bookmark1">\u200B</span>');

	            $(table).before($rangeBookmark[0]);
	            $(table).remove();

	            try{
	                var rangeNode = null;
	                var rangeOffset = 0;
	                if ($rangeBookmark.length > 0){
	                    if ($rangeBookmark[0].nextSibling){
	                        rangeNode = Util.findRecursiveFirstNode($rangeBookmark[0].nextSibling);
	                    }else if ($rangeBookmark[0].previousSibling){
	                        rangeNode = Util.findRecursiveLastNode($rangeBookmark[0].previousSibling);
	                        rangeOffset = rangeNode.nodeType == 3 ? rangeNode.nodeValue.length : 0;
	                    }
	                }

	                if (! rangeNode){
	                    rangeNode = $(this.$dom.selection.getEditableRootNode()).find("span")[0];
	                    rangeOffset = 0;
	                }

	                this.$dom.selection.setWindowRange(rangeNode, rangeOffset);

	                var op = this.$dom.selection.getOp(rangeNode, rangeOffset);
	                this.$dom.selection.set(op);

	                return {
	                    p : [op.p, op.p],
	                    r : [op.r, op.r]
	                };

	            }catch(e){
	                console.log('delete error : ', e);
	            }finally {
	                $rangeBookmark.remove();
	            }

	        }
	    }
	};

	Table.prototype.splitRow = function(opData){
	    var opRange = opData.range;

	    this.$dom.selection.setOp({p:opRange.p, r:opRange.r}, true);
	    var tableMapInfo = this.$dom.selection.getTableMap();

	    if (tableMapInfo){
	        var tableMap = tableMapInfo.tableMap;
	        var trNodes = tableMapInfo.trNodes;
	        var sTr = tableMapInfo.sTr;
	        var eTr = tableMapInfo.eTr;
	        var sTdIndex = tableMapInfo.sTdIndex;
	        var eTdIndex = tableMapInfo.eTdIndex;

	        var sTrIndex = trNodes.indexOf(sTr);

	        var positionTdInfo = tableMap[sTrIndex][sTdIndex];
	        var trMap = tableMap[sTrIndex];
	        var parentTr = trNodes[sTrIndex];

	        var cloneTdNode = positionTdInfo.node.cloneNode(true);
	        cloneTdNode.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;
	        cloneTdNode.removeAttribute('rowspan');

	        //현재 rowspan 이 있는 경우에는 머지 된 경우이므로 해당 노드 밑으로 rowspan - 1 개수만큼 만들어준다
	        if (positionTdInfo.rowspan > 0) {
	            positionTdInfo.node.removeAttribute('rowspan');
	            if (positionTdInfo.rowspan > 1) {
	                cloneTdNode.setAttribute('rowspan', positionTdInfo.rowspan);
	            }

	            var curTdIndex = 0;
	            var nextTrMap = tableMap[sTrIndex + 1];
	            var lastTdNode = null;
	            for (var i = 0, trMapLength = nextTrMap.length; i < trMapLength; i++) {
	                var tdInfo = nextTrMap[i];

	                if (curTdIndex >= sTdIndex) {
	                    break;
	                }

	                if (tdInfo.colspan) {
	                    curTdIndex += tdInfo.colspan;
	                } else {
	                    curTdIndex++;
	                }

	                if (!tdInfo.isMergeEmpty) {
	                    lastTdNode = tdInfo.node;
	                }
	            }

	            if (lastTdNode) {
	                $(lastTdNode).after(cloneTdNode);
	            } else {
	                $(parentTr.nextSibling).prepend(cloneTdNode);
	            }
	        } else {
	            var cloneTr = parentTr.cloneNode(true);
	            $(cloneTr).html('');
	            $(parentTr).after(cloneTr);

	            var splitRowNodes = [];
	            for (var i = 0, trMapLength = trMap.length; i < trMapLength; i++) {
	                var tdInfo = trMap[i];

	                if (splitRowNodes.indexOf(tdInfo.node) > -1) {
	                    continue;
	                }

	                if (tdInfo.node != positionTdInfo.node) {
	                    if (tdInfo.rowspan > 0) {
	                        tdInfo.node.setAttribute('rowspan', tdInfo.rowspan + 2);
	                    } else {
	                        tdInfo.node.setAttribute('rowspan', 2);
	                    }
	                } else {
	                    var cloneTd = tdInfo.node.cloneNode(true);
	                    cloneTd.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;
	                    cloneTr.appendChild(cloneTd);
	                }

	                splitRowNodes.push(tdInfo.node);
	            }
	        }
	    }
	};

	Table.prototype.splitCol = function (opData) {

	    var opRange = opData.range;

	    this.$dom.selection.setOp({p: opRange.p, r: opRange.r}, true);
	    var tableMapInfo = this.$dom.selection.getTableMap();

	    if (tableMapInfo) {
	        var tableMap = tableMapInfo.tableMap;
	        var trNodes = tableMapInfo.trNodes;
	        var sTr = tableMapInfo.sTr;
	        var eTr = tableMapInfo.eTr;
	        var sTdIndex = tableMapInfo.sTdIndex;
	        var eTdIndex = tableMapInfo.eTdIndex;

	        var sTrIndex = trNodes.indexOf(sTr);
	        var positionTdInfo = tableMap[sTrIndex][sTdIndex];

	        var tdIndexMap = [];

	        //table map 에서 해당 td index에 해당하는 셀들의 정보만 가져옴
	        for (var i = 0, length = tableMap.length; i < length; i++) {
	            tdIndexMap.push(tableMap[i][sTdIndex]);
	        }

	        //colgroup 이 있다면 colgroup 추가해주는 로직 필요
	        var tableNode = this.$dom.selection.getParentTagNode(trNodes[0], ['TABLE'])[0];

	        if (tableNode) {

	            var colGroup = null;
	            for (var i = 0, length = tableNode.childNodes.length; i < length; i++) {
	                var childNode = tableNode.childNodes[i];

	                if (childNode.nodeType == 1 && childNode.nodeName == 'COLGROUP') {
	                    colGroup = childNode;
	                    break;
	                }
	            }

	            if (colGroup) {
	                if (colGroup.childNodes[sTdIndex]) {
	                    var cloneNode = colGroup.childNodes[sTdIndex].cloneNode(true);
	                    $(colGroup.childNodes[sTdIndex]).after(cloneNode);
	                }

	            }
	        }

	        //현재 cell 의 colspan 값이 있다면 colspan 값을 -1 감소 시키고 뒤에 셀을 하나 추가시켜줌
	        var cloneTdNode = positionTdInfo.node.cloneNode(true);
	        cloneTdNode.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;
	        cloneTdNode.removeAttribute('colspan');

	        $(positionTdInfo.node).after(cloneTdNode);

	        if (positionTdInfo.colspan > 0) {
	            positionTdInfo.node.removeAttribute('colspan');
	            if (positionTdInfo.colspan > 1) {

	                //colspan 이 여러개일 경우에는 맨 앞에 있는 걸 colspan 없애고 뒤에 colspan을 줌
	                cloneTdNode.setAttribute('colspan', positionTdInfo.colspan);
	            }
	        } else {

	            //현재 셀이 colspan 되어 있지 않을 경우에는 현재 cell 을 기준으로 위 아래 colspan 값을 변경해준다
	            var splitColNodes = [];
	            for (var i = 0, length = tdIndexMap.length; i < length; i++) {
	                var tdInfo = tdIndexMap[i];

	                if (splitColNodes.indexOf(tdInfo.node) > -1) {
	                    continue;
	                }

	                if (tdInfo.node != positionTdInfo.node) {
	                    if (tdInfo.colspan > 0) {
	                        tdInfo.node.setAttribute('colspan', tdInfo.colspan + 2);
	                    } else {
	                        tdInfo.node.setAttribute('colspan', 2);
	                    }
	                }

	                splitColNodes.push(tdInfo.node);
	            }
	        }


	    }
	};

	Table.prototype.mergeCell = function(opData){

	    var opRange = opData.range;

	    this.$dom.selection.setOp({p:opRange.p, r:opRange.r}, true);

	    var $selectedTdNodes = this.$dom.selection.getSelectedTd();

	    if ($selectedTdNodes.length) {
	        var childNodesHTML = '';

	        var startLeft = 0;
	        var startTop = 0;
	        var maxLeft = 0;
	        var maxTop = 0;

	        for (var tdIdx = 0, tdLength = $selectedTdNodes.length; tdIdx < tdLength; tdIdx++){
	            var $tdNode = $selectedTdNodes.eq(tdIdx);

	            var tdCellPos = null;

	            if (tdIdx == 0) {
	                tdCellPos = $tdNode.cellPos(true);
	                maxLeft = startLeft = tdCellPos.left;
	                maxTop = startTop = tdCellPos.top;
	            } else {
	                tdCellPos = $tdNode.cellPos();
	            }

	            var cellPositionLeft = tdCellPos.left + $tdNode[0].colSpan - 1;
	            var cellPositionTop = tdCellPos.top + $tdNode[0].rowSpan - 1;

	            if (cellPositionLeft > maxLeft) {
	                maxLeft = cellPositionLeft;
	            }

	            if (cellPositionTop > maxTop) {
	                maxTop = cellPositionTop;
	            }

	            if ($tdNode[0].childNodes.length == 1) {
	                var firstChild = $tdNode[0].childNodes[0];

	                if (Util.isCheckParagraphEmpty(firstChild)) {
	                    continue;
	                }
	            }

	            childNodesHTML += $tdNode.html();
	        }

	        var colspan = maxLeft - startLeft + 1;
	        var rowspan = maxTop - startTop + 1;

	        var $firstTd = $selectedTdNodes.first();
	        var nextSiblingNode = $firstTd.nextAll('.' + Define.CLASS.SELECTED_TD);

	        var width = $firstTd.width();
	        nextSiblingNode.each(function(){
	            width += $(this).width();
	        });

	        $firstTd.width(width);
	        var $table = $firstTd.closest('.' + Define.CLASS.CONTENTS + ' TABLE');
	        $table.css('height', $table.height() + 'px');

	        if (childNodesHTML){
	            $firstTd.html(childNodesHTML);
	        }

	        $firstTd.attr('rowspan', rowspan);
	        $firstTd.attr('colspan', colspan);

	        var $rows = $selectedTdNodes.parent();
	        $selectedTdNodes.not($firstTd).remove();

	        if (startTop == 0 && rowspan == $table[0].rows.length) {
	            $firstTd.attr('colspan', '');
	        }

	        if (startLeft == 0 && !$firstTd.next().length) {
	            $firstTd.attr('rowspan', '');

	            $rows.each(function(){
	                if (this.cells.length == 0) {
	                    $(this).remove();
	                }
	            });
	        }
	    }
	};

	Table.prototype.setBackgroundColor = function(opData){
	    var tableSelectedNodes = this.$dom.selection.getSelectedTd();
	    var color = opData.value.color;

	    if (tableSelectedNodes.length) {
	        if (color){
	            tableSelectedNodes.css('backgroundColor', '#' + color);
	        }
	    } else {
	        var currentNodeInfo = this.$dom.selection.getOpNode(opData.range.p[0], opData.range.r[0]);

	        if (currentNodeInfo) {
	            var $currentNode = $(currentNodeInfo.container);
	            var $parentCell = $currentNode.closest('.' + Define.CLASS.CONTENTS + ' ' + Define.CELL_TYPE.join(', .' + Define.CLASS.CONTENTS + ' '));

	            if ($parentCell.length) {
	                $parentCell.css('backgroundColor', '#' + color);
	            }
	        }
	    }
	};


	//TODO : Table Border Style Bug
	Table.prototype.tableBorderStyle = function(opData){
	    var opRange = opData.range;

	    var selInfo = this.$dom.selection.setOp({p:opRange.p, r:opRange.r}, true);
	    var tableSelectedNodes = this.$dom.selection.getSelectedTd();
	    var color = opData.value.color;

	    var setStyle = function(targetNode, value){
	        var nodes = targetNode instanceof Node ? [targetNode] : targetNode;

	        var color = value.color;
	        var style = value.style;
	        var width = value.size;
	        var type = value.type;

	        var tableNode = $(nodes[0]).closest('tbody')[0];
	        var allTrNodes = $(tableNode).children('tr').toArray();
	        var allTdNodes = [];

	        var tdPosInfo = {};

	        for (var i=0, length=allTrNodes.length; i<length; i++){
	            var trNode = $(allTrNodes[i]).children().toArray();

	            for (var j=0,jLength=trNode.length; j<jLength; j++){
	                if (trNode[j].nodeName == 'TD'){
	                    allTdNodes.push(trNode[j]);
	                }
	            }
	        }

	        for (var i=0,length=allTdNodes.length; i<length; i++){
	            var pos = $(allTdNodes[i]).cellPos();
	            if (! tdPosInfo[pos.top]){
	                tdPosInfo[pos.top] = {};
	            }

	            tdPosInfo[pos.top][pos.left] = {node : allTdNodes[i]};
	        }

	        for (var i=0,length=nodes.length; i<length; i++){
	            var tdNode = nodes[i];

	            var curPos = $(tdNode).cellPos();
	            var leftNode = null;
	            var rightNode = null;
	            var topNode = null;
	            var bottomNode = null;

	            //left
	            if (tdPosInfo[curPos.top] && tdPosInfo[curPos.top][curPos.left - 1] && tdPosInfo[curPos.top][curPos.left - 1]){
	                leftNode = tdPosInfo[curPos.top][curPos.left - 1].node;
	            }

	            //right
	            if (tdPosInfo[curPos.top] && tdPosInfo[curPos.top][curPos.left + 1] && tdPosInfo[curPos.top][curPos.left + 1]){
	                rightNode = tdPosInfo[curPos.top][curPos.left + 1].node;
	            }

	            //top
	            if (tdPosInfo[curPos.top - 1] && tdPosInfo[curPos.top - 1][curPos.left] && tdPosInfo[curPos.top - 1][curPos.left]){
	                topNode = tdPosInfo[curPos.top - 1][curPos.left].node;
	            }

	            if (tdPosInfo[curPos.top + 1] && tdPosInfo[curPos.top + 1][curPos.left] && tdPosInfo[curPos.top + 1][curPos.left]){
	                bottomNode = tdPosInfo[curPos.top + 1][curPos.left].node;
	            }

	            if (type != 'tb_all' || type != 'tb_in'){
	                $(tdNode).css('border', '');
	                $(tdNode).css('border-top-color', '');
	                $(tdNode).css('border-top-style', '');
	                $(tdNode).css('border-top-width', '');

	                $(tdNode).css('border-left-color', '');
	                $(tdNode).css('border-left-style', '');
	                $(tdNode).css('border-left-width', '');

	                $(tdNode).css('border-right-color', '');
	                $(tdNode).css('border-right-style', '');
	                $(tdNode).css('border-right-width', '');

	                $(tdNode).css('border-bottom-color', '');
	                $(tdNode).css('border-bottom-style', '');
	                $(tdNode).css('border-bottom-width', '');
	            }

	            switch(type){
	                case 'tb_all':
	                case 'tb_in':
	                    break;

	                case 'tb_out':
	                    $(tdNode).css('border-top-color', '#' + color);
	                    $(tdNode).css('border-top-style', style);
	                    $(tdNode).css('border-top-width', width);

	                    $(tdNode).css('border-left-color', '#' + color);
	                    $(tdNode).css('border-left-style', style);
	                    $(tdNode).css('border-left-width', width);

	                    $(tdNode).css('border-right-color', '#' + color);
	                    $(tdNode).css('border-right-style', style);
	                    $(tdNode).css('border-right-width', width);

	                    $(tdNode).css('border-bottom-color', '#' + color);
	                    $(tdNode).css('border-bottom-style', style);
	                    $(tdNode).css('border-bottom-width', width);

	                    //주변에 있는 노드들도 같이 변경
	                    $(topNode).css('border-bottom-color', '#' + color);
	                    $(topNode).css('border-bottom-style', style);
	                    $(topNode).css('border-bottom-width', width);

	                    $(leftNode).css('border-right-color', '#' + color);
	                    $(leftNode).css('border-right-style', style);
	                    $(leftNode).css('border-right-width', width);

	                    $(rightNode).css('border-left-color', '#' + color);
	                    $(rightNode).css('border-left-style', style);
	                    $(rightNode).css('border-left-width', width);

	                    $(bottomNode).css('border-top-color', '#' + color);
	                    $(bottomNode).css('border-top-style', style);
	                    $(bottomNode).css('border-top-width', width);
	                    break;

	                case 'tb_none':
	                    break;

	                case 'tb_top':
	                    $(tdNode).css('border-top-color', '#' + color);
	                    $(tdNode).css('border-top-style', style);
	                    $(tdNode).css('border-top-width', width);

	                    $(topNode).css('border-bottom-color', '#' + color);
	                    $(topNode).css('border-bottom-style', style);
	                    $(topNode).css('border-bottom-width', width);
	                    break;

	                case 'tb_left':
	                    $(tdNode).css('border-left-color', '#' + color);
	                    $(tdNode).css('border-left-style', style);
	                    $(tdNode).css('border-left-width', width);

	                    $(leftNode).css('border-right-color', '#' + color);
	                    $(leftNode).css('border-right-style', style);
	                    $(leftNode).css('border-right-width', width);
	                    break;

	                case 'tb_right':
	                    $(tdNode).css('border-right-color', '#' + color);
	                    $(tdNode).css('border-right-style', style);
	                    $(tdNode).css('border-right-width', width);

	                    $(rightNode).css('border-left-color', '#' + color);
	                    $(rightNode).css('border-left-style', style);
	                    $(rightNode).css('border-left-width', width);
	                    break;

	                case 'tb_bottom':
	                    $(tdNode).css('border-bottom-color', '#' + color);
	                    $(tdNode).css('border-bottom-style', style);
	                    $(tdNode).css('border-bottom-width', width);

	                    $(bottomNode).css('border-top-color', '#' + color);
	                    $(bottomNode).css('border-top-style', style);
	                    $(bottomNode).css('border-top-width', width);
	                    break;
	            }
	        }
	    };

	    if (color){
	        var tableMapInfo = this.$dom.selection.getTableMap();

	        if (tableMapInfo) {
	            var tableMap = tableMapInfo.tableMap;
	            var trNodes = tableMapInfo.trNodes;
	            var sTr = tableMapInfo.sTr;
	            var eTr = tableMapInfo.eTr;
	            var sTdIndex = tableMapInfo.sTdIndex;
	            var eTdIndex = tableMapInfo.eTdIndex;

	            var sTrIndex = trNodes.indexOf(sTr);
	            var positionTdInfo = tableMap[sTrIndex][sTdIndex];

	            if (sTr == eTr && sTdIndex == eTdIndex){
	                setStyle(positionTdInfo.node, opData.value);
	            }else{
	                setStyle(tableSelectedNodes, opData.value);
	            }
	        }


	    }
	};

	Table.prototype.read = function () {
	    console.log("Table Read Method");
	};

	module.exports = Table;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(9);
	var Util = __webpack_require__(6);

	function Symbol (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Symbol.prototype, new AbstractModule());

	Symbol.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Symbol.prototype.create = function (opData) {
	    var insertableNode = this.$dom.selection.getInsertableNode(opData.range.p[0], opData.range.r[0]);

	    if (insertableNode){
	        var textValue = opData.value;
	        var textValueNode = document.createTextNode(textValue);

	        insertableNode.appendChild(textValueNode);

	        var sel = window.getSelection();
	        var rng = document.createRange();
	        sel.removeAllRanges();

	        rng.setStart(textValueNode, textValueNode.length);
	        rng.setEnd(textValueNode, textValueNode.length);

	        sel.addRange(rng);

	        var op = this.$dom.selection.getOp(textValueNode, textValue.length);

	        return {
	            range : {
	                p : [op.p, op.p],
	                r : [op.r, op.r]
	            }
	        };
	    }

	    return null;
	};

	Symbol.prototype.update = function () {};

	Symbol.prototype.read = function () {};

	module.exports = Symbol;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(9);
	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);

	var findOPList = [];
	var lastOP = null;

	function FindReplace(editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(FindReplace.prototype, new AbstractModule());

	FindReplace.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	FindReplace.prototype.create = function () {};

	FindReplace.prototype.update = function () {};

	FindReplace.prototype.read = function () {};

	FindReplace.prototype.execute = function (executeData) {
	    if (executeData.type == "find") {
	        this.doFind(executeData);
	    } else if (executeData.type == "replace") {
	        this.doReplace(executeData);
	    } else if (executeData.type == "replaceAll") {
	        this.doReplaceAll(executeData);
	    }
	};

	FindReplace.prototype.findNextText = function(isReplace, executeData) {
	    if (findOPList.length) {
	        this.editorElement.focus();

	        var selInfo = this.$dom.selection.op;
	        // var selInfo = this.$dom.selection.get();

	        console.log(selInfo);

	        if (!selInfo) {
	            this.$dom.selection.setOp({p:[0,0], r:[0,0]});
	            selInfo = this.$dom.selection.get();
	        }

	        // console.log(selInfo);

	        var pOffset = selInfo.p;
	        var rOffset = selInfo.r;

	        var currentRange = null;

	        if (executeData.value.directionDown) {
	            for (var i = 0, length = findOPList.length; i < length ; i++) {
	                var opData = findOPList[i];

	                if (((pOffset[1] < opData.p[0]) || (pOffset[1] == opData.p[0] && rOffset[1] <= opData.r[0])) || (pOffset[0] == opData.p[0] && pOffset[1] == opData.p[1] && rOffset[0] == opData.r[0] && rOffset[1] == opData.r[1] && isReplace)) {
	                    currentRange = { p : [opData.p[0], opData.p[1]], r : [opData.r[0], opData.r[1]] };
	                    break;
	                }
	            }
	        } else {
	            for (var i = findOPList.length - 1 ; i >= 0; i--) {
	                var opData = findOPList[i];

	                if (((pOffset[0] > opData.p[1]) || (pOffset[0] == opData.p[01] && rOffset[0] >= opData.r[1])) || (pOffset[0] == opData.p[0] && pOffset[1] == opData.p[1] && rOffset[0] == opData.r[0] && rOffset[1] == opData.r[1] && isReplace)) {
	                    currentRange = { p : [opData.p[0], opData.p[1]], r : [opData.r[0], opData.r[1]] };
	                    break;
	                }
	            }
	        }

	        if (!currentRange && executeData.value.isRestart) {
	            if (executeData.value.directionDown) {
	                currentRange = { p : [findOPList[0].p[0], findOPList[0].p[1]], r : [findOPList[0].r[0], findOPList[0].r[1]] };
	            } else {
	                console.log("UP?");
	                currentRange = { p : [findOPList[findOPList.length - 1].p[0], findOPList[findOPList.length - 1].p[1]], r : [findOPList[findOPList.length - 1].r[0], findOPList[findOPList.length - 1].r[1]] };
	            }
	        }

	        if (!currentRange) {
	            this.$dom.selection.setOp(lastOP);
	            this.$dom.selection.set(lastOP);

	            alert(Resource.findReplace.lastPosition);
	            return;
	        }

	        var selection = window.getSelection();
	        selection.removeAllRanges();

	        this.$dom.selection.setOp(currentRange);
	        this.$dom.selection.set(currentRange);

	        lastOP = currentRange;

	        var $selected = this.editorElement.find("." + Define.CLASS.CONTENTS).find("." + Define.CLASS.SELECTED);

	        if ($selected.length) {
	            $selected[0].scrollIntoView();
	        }

	        return currentRange;
	    }

	    return null;
	};

	FindReplace.prototype.findExecute = function(executeData) {
	    var _this = this;

	    console.log(executeData);

	    findOPList = [];

	    var findTarget = this.editorElement.find("." + Define.CLASS.CONTENTS)[0];
	    findTarget.normalize();

	    _this.queryFindText(findTarget, executeData);
	};

	FindReplace.prototype.queryFindText = function(pNode, executeData) {
	    var isCaseSensitive = executeData.value.isCase
	        , isWord = executeData.value.isWord
	        , findText = executeData.value.findText
	        , findTextLength = findText.length
	        , currentIndex = 0
	        , tempStartRange = null
	        , tempEndRange = null;

	    var _this = this;

	    var queryText = function (node) {
	        if (node.nodeType == 3) {
	            var nodeText = node.nodeValue.replace(/\u00a0/g, " ")
	                , nodeTextLength = nodeText.length;

	            for (var i = 0 ; i < nodeTextLength; i++) {

	                var nodeChar = isCaseSensitive ? nodeText[i] : nodeText[i].toLowerCase();
	                var findChar = isCaseSensitive ? findText[currentIndex] : findText[currentIndex].toLowerCase();

	                if (nodeChar != findChar) {
	                    currentIndex = 0;
	                    tempStartRange = tempEndRange = null;
	                } else {
	                    if (currentIndex == 0) {
	                        tempStartRange = { node : node, offset : i };
	                    }

	                    currentIndex++;

	                    if (currentIndex == findTextLength) {
	                        if (isWord) {

	                            var continueTextFind = false;

	                            if (!(nodeText[i - findText.length] == ' ' || !nodeText[i - findText.length]) && !(nodeText[i + 1] == ' ' || !nodeText[i + 1])) {
	                                continueTextFind = true;
	                            } else {

	                                var prevNodeCheck = function(prevNode) {
	                                    if (!prevNode) {
	                                        return false;
	                                    }

	                                    var prevText = (prevNode.nodeValue || prevNode.textContent).replace(/\u00a0/g, " ");
	                                    var prevLastText = prevText[prevText.length - 1];

	                                    return !(prevLastText == ' ' || !prevLastText);
	                                };

	                                var nextNodeCheck = function(nextNode) {
	                                    if (!nextNode) {
	                                        return false;
	                                    }

	                                    var nextText = (nextNode.nodeValue || nextNode.textContent).replace(/\u00a0/g, " ");
	                                    var nextFirstText = nextText[0];

	                                    return !(nextFirstText == ' ' || !nextFirstText);
	                                };

	                                var spanNode = node.parentNode;

	                                if ((i - (findText.length - 1)) == 0) {
	                                    if (node.previousSibling) {
	                                        continueTextFind = prevNodeCheck(node.previousSibling);
	                                    } else {
	                                        if ($.inArray(spanNode.nodeName, Define.CONTENT_NODES) != -1) {
	                                            continueTextFind = prevNodeCheck(spanNode.previousSibling);
	                                        }
	                                    }
	                                } else {
	                                    continueTextFind = !(nodeText[i - findText.length] == ' ');
	                                }

	                                if (!continueTextFind) {
	                                    if (i == (nodeTextLength - 1)) {
	                                        if (node.nextSibling) {
	                                            continueTextFind = nextNodeCheck(node.nextSibling);
	                                        } else {
	                                            if ($.inArray(spanNode.nodeName, Define.CONTENT_NODES) != -1) {
	                                                continueTextFind = nextNodeCheck(spanNode.nextSibling);
	                                            }
	                                        }
	                                    } else {
	                                        continueTextFind = !(nodeText[i + 1] == ' ');
	                                    }
	                                }
	                            }

	                            if (continueTextFind) {
	                                currentIndex = 0;
	                                tempStartRange = tempEndRange = null;

	                                continue;
	                            }
	                        }

	                        currentIndex = 0;

	                        if (tempStartRange) {
	                            tempEndRange = { node : node, offset : i + 1 };

	                            var startOP = _this.$dom.selection.getOp(tempStartRange.node, tempStartRange.offset);
	                            var endOP = _this.$dom.selection.getOp(tempEndRange.node, tempEndRange.offset);

	                            findOPList.push({
	                                p : [startOP.p, endOP.p],
	                                r : [startOP.r, endOP.r]
	                            });

	                            tempStartRange = tempEndRange = null;
	                        }
	                    }
	                }
	            }
	        } else if (node.nodeType == 1 && node.childNodes && !/(script|style)/i.test(node.nodeName)) {
	            for (var i = 0; i < node.childNodes.length; i++) {
	                if ((node.childNodes[i].nodeName === "IMG" || $.inArray(node.childNodes[i].nodeName, Define.BLOCK_NODES) !== -1) && tempStartRange) {
	                    currentIndex = 0;
	                    tempStartRange = null;
	                } else {
	                    queryText(node.childNodes[i]);
	                }
	            }
	        }
	    };

	    queryText(pNode);
	};

	FindReplace.prototype.doFind = function(executeData) {
	    this.findExecute(executeData);

	    if (findOPList.length) {
	        this.$dom.selection.removeSelected();

	        this.findNextText(false, executeData);
	    } else {
	        alert("문자열을 찾을 수 없습니다.");
	    }

	    console.log("The amount of text found : " +  findOPList.length, findOPList);
	};

	FindReplace.prototype.doReplace = function(executeData) {
	    try {
	        this.findExecute(executeData);

	        if (findOPList.length < 1) {
	            return;
	        }

	        var selInfo = lastOP || this.$dom.selection.op;
	        var pOffset = selInfo.p;
	        var rOffset = selInfo.r;

	        var currentOffset = this.findNextText(true, executeData);

	        if (currentOffset.p[0] == pOffset[0] && currentOffset.p[1] == pOffset[1]
	            && currentOffset.r[0] == rOffset[0] && currentOffset.r[1] == rOffset[1]) {

	            var opList = [
	                {
	                    type: "replace",
	                    name: "text",
	                    value: executeData.value.replaceText,
	                    range: {
	                        p: [currentOffset.p[0], currentOffset.p[1]],
	                        r: [currentOffset.r[0], currentOffset.r[1]],
	                        s: "text"
	                    }
	                }];

	            this.router.doOperation(opList);
	            lastOP = opList[0].range;
	        }
	    }catch(e){
	        console.log(e);
	    }

	};

	FindReplace.prototype.doReplaceAll = function(executeData) {
	    try {
	        this.findExecute(executeData);

	        if (findOPList.length < 1) {
	            return;
	        }

	        // var selection = window.getSelection();
	        // selection.removeAllRanges();
	        //
	        // this.$dom.selection.setOp({
	        //     p : [findOPList[0].p[0], findOPList[0].p[1]],
	        //     r : [findOPList[0].r[1], findOPList[0].r[1]]
	        // });

	        var opList = [];
	        for (var i = findOPList.length - 1; i >= 0; i--) {
	            var opSource = {
	                type : "replace",
	                name : "text",
	                value : executeData.value.replaceText,
	                range : {
	                    p : [findOPList[i].p[0], findOPList[i].p[1]],
	                    r : [findOPList[i].r[0], findOPList[i].r[1]],
	                    s : "text"
	                }
	            };

	            opList.push(opSource);
	        }

	        if (opList.length < 1) {
	            return;
	        }

	        this.router.doOperation(opList);

	        var opData = {
	            p : [findOPList[0].p[0], findOPList[0].p[0]],
	            r : [findOPList[0].r[0], findOPList[0].r[0]]
	        };

	        this.$dom.selection.setOp(opData);
	        this.$dom.selection.set(opData);

	        alert(Resource.findReplace.totalReplaceCount.replace('@@count@@', findOPList.length));

	        lastOP = null;
	        findOPList = [];
	    }catch(e){
	        console.log(e);
	    }

	};

	module.exports = FindReplace;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(9);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);

	function Paste (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Paste.prototype, new AbstractModule());

	Paste.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Paste.prototype.create = function (opData) {
	    // console.log(opData);

	    var _this = this;

	    var op = {
	        p : [opData.range.p[0], opData.range.p[0]],
	        r : [opData.range.r[0], opData.range.r[0]]
	    };

	    this.$dom.selection.setOp(op);

	    var insertableNode = null;

	    var setInertTableNode = function() {
	        insertableNode = _this.$dom.selection.getInsertableNode(op.p[0], op.r[0]);

	        if (!insertableNode) {
	            op = {p:[0,0], r:[0,0]};
	            _this.$dom.selection.setOp(op);
	            insertableNode = _this.$dom.selection.getInsertableNode(op.p[0], op.r[0]);
	        }
	    };

	    if (opData.value.pasteType === "html") {
	        var $pasteHTML = $("<div/>");
	        $pasteHTML.html(opData.value.html);

	        var $blockNodes = $pasteHTML.find(Define.BLOCK_NODES.join(','));

	        if ($blockNodes.length){
	            var currentNodeInfo = this.$dom.selection.getOpNode(opData.range.p[0], opData.range.r[0]);

	            var resultObj = Util.splitParagraphNode({
	                startContainer : currentNodeInfo.container,
	                startOffset : currentNodeInfo.offset
	            });

	            var pasteProcess = function() {
	                var pasteDatas = $pasteHTML.children();

	                var $tempRangeNode = $('<span/>');
	                $tempRangeNode[0].setAttribute('id', Define.TEMP);
	                $tempRangeNode[0].setAttribute('class', Define.CLASS.SELECTED);
	                $tempRangeNode[0].appendChild(document.createTextNode(Define.NBSP));

	                pasteDatas.last().append($tempRangeNode);

	                if (resultObj.prevNode) {
	                    resultObj.prevNode.after(pasteDatas);
	                } else if (resultObj.nextNode) {
	                    resultObj.nextNode.before(pasteDatas);
	                }

	                if (resultObj.prevNode) {
	                    var nextNode = resultObj.prevNode.next();
	                    if (nextNode.is(Define.PARAGRAPH_NODES.join(','))) {
	                        resultObj.prevNode.append(nextNode[0].childNodes);
	                        nextNode.remove();
	                    }
	                }

	                if (resultObj.nextNode) {
	                    var prevNode = resultObj.nextNode.prev();
	                    if (prevNode.is(Define.PARAGRAPH_NODES.join(','))) {
	                        resultObj.nextNode.prepend($tempRangeNode);
	                        resultObj.nextNode.prepend(prevNode[0].childNodes);
	                        prevNode.remove();
	                    }
	                }

	                var rangeNode = null;
	                var rangeOffset = 0;

	                if ($tempRangeNode[0].nextSibling){
	                    rangeNode = $tempRangeNode[0].nextSibling;
	                    rangeOffset = 0;
	                }else if ($tempRangeNode[0].previousSibling){
	                    rangeNode = $tempRangeNode[0].previousSibling;
	                    rangeOffset = 1;
	                }

	                $tempRangeNode.remove();
	                _this.$dom.selection.removeSelected();
	                _this.$dom.selection.setWindowRange(rangeNode, rangeOffset);
	            };

	            if ($.browser.msie) {
	                setTimeout(pasteProcess,0);
	            } else {
	                pasteProcess();
	            }
	        } else {
	            setInertTableNode();

	            insertableNode.innerHTML = opData.value.html;
	        }

	    } else {
	        setInertTableNode();

	        if (opData.value.pasteType === "image") {
	            if ($.browser.msie) {
	                var $insertNode = $(insertableNode);
	                var $tempInsert = $(opData.value.html);

	                $insertNode.before($tempInsert);
	                $insertNode.remove();

	                var $imageNode = $tempInsert.find('img');

	                $imageNode.attr('src', '');

	                setTimeout(function(){
	                    $imageNode.attr('src', _this.router.options.loadingImageURL);
	                }, 1);
	            } else {
	                insertableNode.outerHTML = opData.value.html;
	            }
	        } else {
	            insertableNode.innerHTML = opData.value.html;
	        }
	    }
	};

	Paste.prototype.update = function () {
	    console.log("Text Update Method");
	};

	Paste.prototype.read = function () {
	    console.log("Text Read Method");
	};

	module.exports = Paste;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(9);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);

	function PageBreak (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(PageBreak.prototype, new AbstractModule());

	PageBreak.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	PageBreak.prototype.create = function (opData) {
	    var paragraph = $('<p></p>');
	    var span = $('<span></span>');

	    var pageBreak = $('<hr style="page-break-after: always; border: none;" class="' + Define.CLASS.PAGE_BREAK + '"/>');

	    var currentNodeInfo = this.$dom.selection.getOpNode(opData.range.p[0], opData.range.r[0]);
	    var resultObj = Util.splitParagraphNode({
	        startContainer : currentNodeInfo.container,
	        startOffset : currentNodeInfo.offset
	    });

	    // var insertNode = this.$dom.selection.getInsertableNode(opData.range.p[0], opData.range.r[0]);

	    paragraph.append(span[0]);
	    span.append(pageBreak[0]);

	    if (resultObj.prevNode) {
	        resultObj.prevNode.after(paragraph[0]);
	        paragraph.after($(Define.DEFAULT_PARAGRAPH_HTML));

	    } else if (resultObj.nextNode) {
	        resultObj.nextNode.before(paragraph[0]);
	        paragraph.before($(Define.DEFAULT_PARAGRAPH_HTML));
	    }


	    // var pageBreak = $('<hr style="page-break-after: always; border: none;" class="' + Define.CLASS.PAGE_BREAK + '"/>')[0];
	    // var insertNode = this.$dom.selection.getInsertableNode(opData.range.p[0], opData.range.r[0]);
	    //
	    // if (insertNode){
	    //     $(insertNode).append(pageBreak);
	    //
	    //     var sel = window.getSelection();
	    //     var rng = document.createRange();
	    //
	    //     rng.setStart(insertNode, 1);
	    //     rng.setEnd(insertNode, 1);
	    //     sel.removeAllRanges();
	    //     sel.addRange(rng);
	    // }
	    //var nodes = Util.splitParagraphNode(this.$dom.selection.get(true));
	    //var pNode = nodes.spiltPNode[0];
	    //
	    //pNode.parentNode.insertBefore(pageBreak, pNode);
	    //
	    //if(Util.isCheckParagraphEmpty(nodes.destPNode[0])){
	    //    var $destPNode = $(nodes.destPNode[0]);
	    //    $destPNode.empty();
	    //    $destPNode.append($(Define.DEFAULT_SPAN_HTML)[0]);
	    //}
	    //
	    //if(Util.isCheckParagraphEmpty(pNode)){
	    //    var $pNode = $(pNode);
	    //    $pNode.empty();
	    //    $pNode.append($(Define.DEFAULT_SPAN_HTML)[0]);
	    //}
	};

	PageBreak.prototype.update = function (opData) {
	};

	module.exports = PageBreak;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(9);
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);

	function Horizontal (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Horizontal.prototype, new AbstractModule());

	Horizontal.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Horizontal.prototype.create = function (opData) {
	    var insertableNode = this.$dom.selection.getInsertableNode(opData.range.p[0], opData.range.r[0]);

	    if (insertableNode){
	        var hrNode = document.createElement('hr');
	        insertableNode.appendChild(hrNode);

	        var sel = window.getSelection();
	        var rng = document.createRange();
	        sel.removeAllRanges();

	        rng.setStart(insertableNode, 1);
	        rng.setEnd(insertableNode, 1);

	        sel.addRange(rng);

	        var op = this.$dom.selection.getOp(insertableNode, 1);

	        return {
	            range : {
	                p : [op.p, op.p],
	                r : [op.r, op.r]
	            }
	        };
	    }

	    return null;
	};

	Horizontal.prototype.update = function (opData) {
	};

	module.exports = Horizontal;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(9);
	var Util = __webpack_require__(6);
	var Define = __webpack_require__(3);

	function Bookmark (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Bookmark.prototype, new AbstractModule());

	Bookmark.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Bookmark.prototype.create = function (opData) {
	    console.log(opData);

	    var bookmarkId = opData.value;

	    var insertableNode = this.$dom.selection.getInsertableNode(opData.range.p[0], opData.range.r[0]);

	    if (insertableNode){
	        insertableNode.innerHTML = '<hr id="' + bookmarkId + '" ' + Define.ATTR.KK_TYPE + '="' + Define.ATTR_VALUE.KK_TYPE_BOOKMARK + '" ' + 'class="' + Define.CLASS.KK_BOOKMARK_VIEW + '" ' + 'style="display: none;">';

	        var sel = window.getSelection();
	        var rng = document.createRange();
	        sel.removeAllRanges();

	        rng.setStart(insertableNode, 1);
	        rng.setEnd(insertableNode, 1);

	        sel.addRange(rng);

	        var op = this.$dom.selection.getOp(insertableNode, 1);

	        return {
	            range : {
	                p : [op.p, op.p],
	                r : [op.r, op.r]
	            }
	        };
	    }

	    return null;
	};

	Bookmark.prototype.update = function (opData) {
	    
	    var originalBookmarkId = opData.value.originalBookmark;
	    var changeBookmarkId = opData.value.changeBookmark;
	    
	    var $originalBookmark = this.editorElement.find('#' + originalBookmarkId);

	    $originalBookmark[0].id = changeBookmarkId;

	    return null;
	};

	Bookmark.prototype.del = function (opData) {
	    var bookmarkId = opData.value;
	    var $originalBookmark = this.editorElement.find('#' + bookmarkId);
	    $originalBookmark.remove();

	    return null;
	};

	Bookmark.prototype.read = function () {};

	module.exports = Bookmark;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(9);

	function Tab (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(Tab.prototype, new AbstractModule());

	Tab.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	Tab.prototype.create = function (opData) {
	    var insertableNode = this.$dom.selection.getInsertableNode(opData.range.p[0], opData.range.r[0]);

	    if (insertableNode){
	        var s = String.fromCharCode(160);
	        var textValueNode = document.createTextNode(s + s + s + s);

	        insertableNode.appendChild(textValueNode);

	        var sel = window.getSelection();
	        var rng = document.createRange();
	        sel.removeAllRanges();

	        rng.setStart(textValueNode, textValueNode.length);
	        rng.setEnd(textValueNode, textValueNode.length);

	        sel.addRange(rng);

	        var op = this.$dom.selection.getOp(textValueNode, 4);

	        return {
	            range : {
	                p : [op.p, op.p],
	                r : [op.r, op.r]
	            }
	        };
	    }

	    return null;
	};

	Tab.prototype.update = function () {};

	Tab.prototype.read = function () {};

	module.exports = Tab;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	
	var AbstractModule = __webpack_require__(9);
	var Util = __webpack_require__(6);
	var Define = __webpack_require__(3);

	function UpperLower (editorElement, $domObject, router) {
	    this.router = null;
	    this.editorElement = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject, router);
	}

	$.extend(UpperLower.prototype, new AbstractModule());

	UpperLower.prototype.init = function (editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = editorElement;
	    this.router = router;
	};

	UpperLower.prototype.create = function (opData) {

	    var $selectedNode = this.$dom.selection.getSelectedNode();

	    if ($selectedNode.length > 0){
	        var caseValue = opData.value;
	        if (['upper', 'lower'].indexOf(caseValue) > -1){

	            var upperLowerMethod = caseValue == 'upper' ? 'toUpperCase' : 'toLowerCase';
	            $selectedNode.each(function(){
	                var spanNode = this;
	                Util.walkTheDOM(spanNode, function(node){
	                    if (node.nodeType == 3){
	                        node.nodeValue = node.nodeValue[upperLowerMethod]();
	                    }
	                }, true);
	            });

	        }else{
	            var lastSpanNodeParent = $selectedNode[0].parentNode;
	            var firstText = null;
	            var textChange = false;
	            $selectedNode.each(function(){
	                var spanNode = this;
	                var spanNodeParent = spanNode.parentNode;

	                var capitalize = function(t) {
	                    return t.charAt(0).toUpperCase() + t.slice(1);
	                };

	                if (lastSpanNodeParent != spanNodeParent){
	                    textChange = true;
	                }

	                Util.walkTheDOM(spanNode, function(node){
	                    if (node.nodeType == 3){

	                        if (! firstText){
	                            firstText = node;
	                            node.nodeValue = capitalize(node.nodeValue);
	                        }

	                        var nodeValue = node.nodeValue;
	                        if (nodeValue.length > 0){
	                            var splitText = nodeValue.split(' ');

	                            if (splitText.length > 0){
	                                var replaceText = '';
	                                splitText.forEach(function(text, idx){
	                                    var cpText = capitalize(text);

	                                    if (text[0] == ' ' || text[0] == String.fromCharCode(160)){
	                                        if (text.length > 1){

	                                            var noSpaceIndex = -1;
	                                            for (var i=0,length=text.length; i<length; i++){
	                                                var char = text[i];

	                                                if (! (char == ' ' || char == String.fromCharCode(160))){
	                                                    noSpaceIndex = i;
	                                                    break;
	                                                }
	                                            }

	                                            if (noSpaceIndex > -1){
	                                                var prefix = text.substring(0, noSpaceIndex);
	                                                var body = text.substring(noSpaceIndex, noSpaceIndex + 1).toUpperCase();
	                                                var tail = text.substring(noSpaceIndex + 1);

	                                                cpText = prefix + body + tail;
	                                            }
	                                        }

	                                        textChange = true;
	                                    }

	                                    if (idx == 0){
	                                        if (! textChange){
	                                            replaceText += text;
	                                        }else{
	                                            replaceText += cpText;
	                                        }
	                                    }else{
	                                        textChange = false;
	                                        replaceText += ' ' + cpText;
	                                    }
	                                });

	                                node.nodeValue = replaceText;

	                                var lastChar = replaceText[replaceText.length - 1];
	                                if (lastChar == ' ' || lastChar == String.fromCharCode(160)){
	                                    textChange = true;
	                                }
	                            }
	                        }
	                    }else if (node.nodeType == 1 && node.nodeName == 'A'){
	                        Define.WALK_CONTINUE;
	                    }else{
	                        textChange = true;
	                    }
	                }, true);

	                lastSpanNodeParent = spanNodeParent;
	            });
	        }
	    }


	    return null;
	};

	UpperLower.prototype.update = function () {};

	UpperLower.prototype.read = function () {};

	module.exports = UpperLower;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);
	var Resource = __webpack_require__(13);

	function Delete(editorElement, $domObject, options) {
	    this.editorElement = null;
	    this.options = options;
	    this.$dom = null;

	    this.init(editorElement, $domObject, options);
	}

	Delete.prototype.init = function (editorElement, $domObject) {
	    this.editorElement = $(editorElement);
	    this.$dom = $domObject;
	};

	Delete.prototype.execute = function (opData) {
	    this.doDelete(opData);
	};

	//임시 지정, 추후 개선사항 도출 후 적용 예정
	Delete.prototype.doDelete = function (opData) {
	    //현재 Selection되어 있는 영역에 대한 Delete 처리 수행

	    switch (opData.name) {
	        case "text" :
	            //try{
	                this.textDelete(opData);
	            // }catch(e){
	            //     if (e.message != 'table_stop'){
	            //         console.log(e);
	            //     }
	            // }

	            break;
	        default :
	            console.log("Unknown Delete OP", opData);
	            break;
	    }
	};

	Delete.prototype.textDelete = function (opData) {

	    var _this = this;

	    var rangeOp = opData.range;

	    var editableRootNode = this.$dom.selection.getEditableRootNode();

	    // console.log('delete op ==================== > range op ', rangeOp.p, rangeOp.r);
	    if (this.deleteTdContents()){
	        return ;
	    }

	    var $selected = this.$dom.selection.getSelectedNode();
	    if ($selected.length == 0) {

	        var sRange = this.$dom.selection.getOpNode(rangeOp.p[0], rangeOp.r[0]);

	        if (! sRange) {
	            throw new Error('delete range error !! ');
	        }

	        if (editableRootNode.innerHTML == Define.DEFAULT_PARAGRAPH_HTML) {
	            console.log('is first paragraph');

	            this.$dom.selection.setDefault();
	            return;
	        }

	        var selectionWindowRange = null;
	        if (opData.value.keyName == "backspace") {
	            selectionWindowRange = _this.recursivePrevDelete(sRange.container, sRange.offset);
	        }else{
	            selectionWindowRange = _this.recursivePrevDelete(sRange.container, sRange.offset, true);
	        }

	        if (selectionWindowRange && selectionWindowRange.node && selectionWindowRange.offset > -1) {

	            if (selectionWindowRange.node && ! selectionWindowRange.node.parentNode){
	                this.$dom.selection.setDefault();
	            }else{
	                if (Util.isBlockNode(selectionWindowRange.node) && selectionWindowRange.offset == 0){
	                    var firstSpanNode = $(selectionWindowRange.node).find('span')[0];

	                    if (firstSpanNode){
	                        selectionWindowRange.node = firstSpanNode;
	                    }
	                }else if (Util.isTextNode(selectionWindowRange.node) && selectionWindowRange.offset == 1 && selectionWindowRange.node.nodeValue.length == 1 && selectionWindowRange.node.nodeValue[0] == String.fromCharCode(8203)){
	                    var zeroWTextParentNode = selectionWindowRange.node.parentNode;
	                    var prevNode = zeroWTextParentNode.previousSibling;

	                    if (prevNode && Util.isTagName(prevNode, 'SPAN')){
	                        var cloneOpData = Util.cloneObject(opData);
	                        cloneOpData.range = {
	                            p: rangeOp.p,
	                            r: [rangeOp.r[0] - 1, rangeOp.r[0] - 1]
	                        };
	                        return this.textDelete(cloneOpData);
	                    }
	                }else{
	                    if (selectionWindowRange.node && selectionWindowRange.node.nodeType == 1 && ['OL', 'UL'].indexOf(selectionWindowRange.node.nodeName) > -1){
	                        var reRange = _this.getAdjustRange(Util.findRecursiveLastNode(selectionWindowRange.node));
	                        selectionWindowRange.node = reRange.container;
	                        selectionWindowRange.offset = reRange.offset;
	                    }
	                }

	                this.$dom.selection.setWindowRange(selectionWindowRange.node, selectionWindowRange.offset);
	            }
	        }

	    } else {
	        var $selectedTable = _this.$dom.selection.getSelectedTable();

	        var prevLastBlockNode = null;
	        if ($selectedTable.length > 0) {
	            var selectTableNode = $selectedTable[0];
	            var $beforeTempParagraph = $(Define.DEFAULT_PARAGRAPH_HTML);

	            $(selectTableNode).before($beforeTempParagraph);

	            $selectedTable.remove();

	            if (this.$dom.selection.getSelectedNode().length == 0){
	                this.$dom.selection.setWindowRange($beforeTempParagraph[0].firstChild.firstChild, 0);
	                return ;
	            }else{
	                $beforeTempParagraph.remove();
	            }
	        }

	        var $selectedNode = this.$dom.selection.getSelectedNode();
	        var $rangeBookmark = $('<span id="range_bookmark1">\u200B</span>');
	        var $rangeBookmark2 = $('<span id="range_bookmark2">\u200B</span>');
	        $($selectedNode[0]).before($rangeBookmark[0]);
	        $($selectedNode[$selectedNode.length - 1]).after($rangeBookmark2[0]);

	        var defaultSpanNode = $selectedNode[0].cloneNode(true);
	        defaultSpanNode.innerHTML = '&nbsp;';

	        //혼자만 셀렉션 된 경우
	        if ($selectedNode.length == 1) {
	            startParentNode = $selectedNode[0].parentNode;
	            $selectedNode.remove();
	        } else {
	            var startNode = $selectedNode[0];
	            var endNode = $selectedNode[$selectedNode.length - 1];
	            var startParentNode = null;

	            //동일한 레벨에서 셀렉션 된 경우 해당 노드에서만 삭제해준다.
	            if (startNode.parentNode == endNode.parentNode) {
	                var parentNode = $selectedNode[0].parentNode;

	                var boundaryNode = [];
	                var isBoundaryNode = false;
	                for (var i = 0, length = parentNode.childNodes.length; i < length; i++) {
	                    var node = parentNode.childNodes[i];

	                    if (node == startNode) {
	                        isBoundaryNode = true;
	                    }

	                    if (isBoundaryNode) {
	                        boundaryNode.push(node);
	                    }

	                    if (node == endNode) {
	                        break;
	                    }
	                }

	                for (var i = 0, length = boundaryNode.length; i < length; i++) {
	                    var node = boundaryNode[i];
	                    parentNode.removeChild(node);
	                }

	                startParentNode = parentNode;
	            } else {
	                var sParentNode = startNode.parentNode;
	                var eParentNode = endNode.parentNode;

	                var sPrevNode = startNode.previousSibling;
	                var eNextNode = endNode.nextSibling;
	                var boundaryNode = this.$dom.selection.getSelectedBoundaryNode(startNode, endNode);

	                startParentNode = sParentNode;

	                for (var i = 0, length = boundaryNode.length; i < length; i++) {
	                    var node = boundaryNode[i];

	                    if (Util.isTagName(node, 'TD')){
	                        if (node.innerHTML == ''){
	                            node.innerHTMl = Define.DEFAULT_SPAN_HTML;
	                        }
	                        continue;
	                    }

	                    var parentNode = node.parentNode;
	                    parentNode.removeChild(node);
	                }

	                var eParentChildNodes = [];

	                while (eNextNode) {
	                    if (eNextNode.nodeType == 1 && eNextNode.nodeName == 'SPAN') {
	                        eParentChildNodes.push(eNextNode);
	                    } else {
	                        break;
	                    }

	                    eNextNode = eNextNode.nextSibling;
	                }

	                if (sPrevNode) {
	                    if (sPrevNode.nextSibling) {
	                        var nextNode = sPrevNode.nextSibling;
	                        for (var i = 0, length = eParentChildNodes.length; i < length; i++) {
	                            sParentNode.insertBefore(eParentChildNodes[i], nextNode);
	                        }
	                    } else {
	                        for (var i = 0, length = eParentChildNodes.length; i < length; i++) {
	                            sParentNode.appendChild(eParentChildNodes[i]);
	                        }
	                    }
	                } else {
	                    if (sParentNode.firstChild) {
	                        var firstChild = sParentNode.firstChild;
	                        for (var i = 0, length = eParentChildNodes.length; i < length; i++) {
	                            sParentNode.insertBefore(eParentChildNodes[i], firstChild);
	                        }
	                    } else {
	                        for (var i = 0, length = eParentChildNodes.length; i < length; i++) {
	                            sParentNode.appendChild(eParentChildNodes[i]);
	                        }
	                    }
	                }

	                var eParentParentNode = eParentNode.parentNode;

	                // //TODO. 주변과 상위로 불필요한 노드는 삭제해주는 로직이 필요할거 같음
	                if (eParentNode.innerHTML == '') {
	                    eParentParentNode.removeChild(eParentNode);
	                }
	            }

	        }

	        if (startParentNode && startParentNode.parentNode && startParentNode.childNodes.length == 2){
	            if ($rangeBookmark[0].parentNode == startParentNode && $rangeBookmark2[0].parentNode == startParentNode){
	                $(defaultSpanNode).removeClass(Define.CLASS.SELECTED);
	                $rangeBookmark.after(defaultSpanNode);
	            }
	        }

	        this.adjustWindowRangeAfterDelete(startParentNode);
	        this.$dom.selection.removeSelected();
	    }

	    if (_this.checkContentDeleteAll()){
	        _this.$dom.selection.setDefault();
	    }

	};

	//selection 된 delete를 구현할때 시작과 끝값 사이에 bookmark 를 하고 지워서 지워지고 난 후에 range 값을 보정함.
	Delete.prototype.adjustWindowRangeAfterDelete = function(startParentNode){

	    var $rangeBookmark = $('#range_bookmark1');
	    var $rangeBookmark2 = $('#range_bookmark2');

	    try{
	        var rangeNode = null;
	        var rangeOffset = 0;
	        if ($rangeBookmark.length > 0){
	            $rangeBookmark2.remove();
	            if ($rangeBookmark[0].nextSibling){
	                rangeNode = Util.findRecursiveFirstNode($rangeBookmark[0].nextSibling);
	            }else if ($rangeBookmark[0].previousSibling){
	                rangeNode = Util.findRecursiveLastNode($rangeBookmark[0].previousSibling);
	                rangeOffset = rangeNode.nodeType == 3 ? rangeNode.nodeValue.length : 0;
	            }
	        }else if ($rangeBookmark2.length > 0){
	            $rangeBookmark.remove();
	            if ($rangeBookmark2[0].nextSibling){
	                rangeNode = Util.findRecursiveFirstNode($rangeBookmark2[0].nextSibling);
	            }else if ($rangeBookmark2[0].previousSibling){
	                rangeNode = Util.findRecursiveLastNode($rangeBookmark2[0].previousSibling);
	                rangeOffset = rangeNode.nodeType == 3 ? rangeNode.nodeValue.length : 0;
	            }
	        }

	        $rangeBookmark.remove();
	        $rangeBookmark2.remove();

	        if (! rangeNode){

	            if (startParentNode && startParentNode.parentNode && startParentNode.innerHTML == ''){
	                startParentNode.innerHTML = Define.DEFAULT_SPAN_HTML;

	                rangeNode = startParentNode.firstChild.firstChild;
	                rangeOffset = 1; // <span>&nbsp;</span> 에서 뒤자리를 위치
	            }else{
	                rangeNode = $(this.$dom.selection.getEditableRootNode()).find("span")[0];
	                rangeOffset = 0;
	            }
	        }else if (Util.isSingleRunNode(rangeNode)){
	            rangeOffset = this.$dom.selection.nodeIndexOf(rangeNode.parentNode, rangeNode) + 1;
	            rangeNode = rangeNode.parentNode;
	        }

	        var sel = window.getSelection();
	        var rng = document.createRange();

	        rng.setStart(rangeNode, rangeOffset);
	        rng.setEnd(rangeNode, rangeOffset);

	        sel.removeAllRanges();
	        sel.addRange(rng);

	        var op = this.$dom.selection.getOp(rangeNode, rangeOffset);
	        this.$dom.selection.set(op);

	        return {
	            p : [op.p, op.p],
	            r : [op.r, op.r]
	        };

	    }catch(e){
	        console.log('delete error : ', e);
	    }finally {
	        $rangeBookmark.remove();
	        $rangeBookmark2.remove();
	    }
	};

	Delete.prototype.checkDeadBlockNode = function(blockNode){
	    var innerHTML = blockNode.innerHTML;
	    if (innerHTML && innerHTML.length > 100){
	        return false;
	    }

	    var isDeadBlock = true;
	    this.$dom.selection.findRunNode(blockNode, function(node){
	        if (node.nodeType == 3){
	            var nodeValue = node.nodeValue;

	            if (nodeValue && nodeValue.length > 0 && nodeValue.replace(/ /g, '').length > 0){
	                isDeadBlock = false;

	                return Define.WALK_EXIT;
	            }
	        }else{
	            return Define.WALK_EXIT;
	        }
	    });

	    return isDeadBlock;
	};


	Delete.prototype.findPrevNode = function(editableRootNode, node, callback){
	    if (! node || node == editableRootNode){
	        return null;
	    }

	    var findPrevNode = function(_node, isPreviousNode, isParentNode, isChildNode){
	        if (_node == editableRootNode){
	            return;
	        }

	        var backupNode = _node.previousSibling || _node.parentNode;
	        var isPrev = _node.previousSibling ? true : false;

	        var response = callback(_node, isPreviousNode, isParentNode, isChildNode);

	        if (response == Define.WALK_EXIT){
	            return ;
	        }else if (! _node || ! _node.parentNode){
	            _node = backupNode;

	            // console.log('element were delete.');

	            if (isPrev){
	                return findPrevNode(_node, true, false, false);
	            }else{
	                return findPrevNode(_node, false, true, false);
	            }
	        }

	        if (response == Define.WALK_EXIT){
	            return ;
	        }else {
	            if (response != Define.WALK_CONTINUE && ! isParentNode && _node.lastChild){
	                return findPrevNode(_node.lastChild, false, false, true);
	            }else if (_node.previousSibling){
	                return findPrevNode(_node.previousSibling, true, false, false);
	            }else{
	                return findPrevNode(_node.parentNode, false, true, false);
	            }
	        }
	    };

	    findPrevNode(node, false, false, false);
	};

	Delete.prototype.findNextNode = function(editableRootNode, node, callback){
	    if (! node || node == editableRootNode){
	        return null;
	    }

	    var findNextNode = function(_node, isNextNode, isParentNode){
	        if (_node == editableRootNode){
	            return;
	        }

	        var backupNode = _node.nextSibling || _node.parentNode;
	        var isNext = _node.nextSibling ? true : false;

	        var response = callback(_node, isNextNode, isParentNode);

	        if (response == Define.WALK_EXIT){
	            return ;
	        }else if (! _node || ! _node.parentNode){
	            _node = backupNode;

	            // console.log('element were delete.');

	            if (isNext){
	                return findNextNode(_node, true, false, false);
	            }else{
	                return findNextNode(_node, false, true, false);
	            }
	        }

	        if (response == Define.WALK_EXIT){
	            return ;
	        }else {
	            if (response != Define.WALK_CONTINUE && ! isParentNode && _node.firstChild){
	                return findNextNode(_node.firstChild, false, false, true);
	            }else if (_node.nextSibling){
	                return findNextNode(_node.nextSibling, true, false, false);
	            }else{
	                return findNextNode(_node.parentNode, false, true, false);
	            }
	        }
	    };

	    findNextNode(node, false, false, false);
	};



	Delete.prototype.recursivePrevDelete = function (node, offset, isDeleteAction) {
	    var _this = this;
	    var editableRootNode = _this.$dom.selection.getEditableRootNode();

	    var selectionRangeNode = null;
	    var selectionRangeOffset = 0;
	    var isDelete = false;

	    var originalRangeNode = node;
	    var originalRangeOffset = offset;

	    //<span><table><span> 처럼 잡혀있을때 Table 관련 정보가 넘오오면 삭제하는 로직
	    if (Util.isTagName(node, ['TBODY', 'TR', 'TD'])){
	        var tableNode = _this.$dom.selection.getParentTagNode(node, 'TABLE')[0];
	        var $newP = $(Define.DEFAULT_PARAGRAPH_HTML);

	        _this.deleteTable(tableNode);

	        $(tableNode).before($newP);
	        $(tableNode).remove();

	        selectionRangeNode = $newP[0].lastChild.lastChild;
	        selectionRangeOffset = 1;

	        return {
	            node : selectionRangeNode,
	            offset : selectionRangeOffset
	        }
	    }

	    var deepChildNode = this.findDeepChildNode(node, offset);

	    node = deepChildNode.node;
	    offset = deepChildNode.offset;

	    if (isDeleteAction){
	        //첫번째 Paragraph 에서 Delete로 지우는 경우에 공백을 지우고 계속 다시 생성해주기 때문에 위치를 이동시켜줌
	        if (Util.isTextNode(node) && offset == 0 &&
	            node.nodeValue.length == 1 && node.nodeValue == Define.NBSP &&
	            Util.isTagName(node.parentNode, 'SPAN') && ! node.parentNode.nextSibling){

	            // if (node.parentNode && node.parentNode.nextSibling){
	            //     var nextNode = node.parentNode.nextSibling;
	            //
	            //     $(node.parentNode).remove();
	            //
	            //     if (Util.isBlockNode(nextNode)){
	            //         return { node : $(nextNode).find('span')[0], offset : 0};
	            //     }else{
	            //         return { node : nextNode, offset : 0};
	            //     }
	            // }

	            return {
	                node : node,
	                offset : 1
	            }
	        }

	        var nextDeletableNodeInfo = this.getNextDeletableNodeInfo(editableRootNode, node, offset);

	        if (! nextDeletableNodeInfo){
	            // console.log('cannot next deleteable node info ');
	            return null;
	        }

	        node = nextDeletableNodeInfo.nextNode;
	        offset = nextDeletableNodeInfo.nextOffset;

	    }else{
	        if (Util.isTextNode(node) && offset == 1 &&
	            node.nodeValue.length == 1 && node.nodeValue == Define.NBSP &&
	            Util.isTagName(node.parentNode, 'SPAN') && ! node.parentNode.nextSibling){

	            var isOldBrowser = $.browser.msie && $.browser.versionNumber <= 10 && $(node.parentNode).text().length == 1;
	            if (! isOldBrowser){
	                if ($(node.parentNode).text().length == 1){
	                    return {
	                        node : node,
	                        offset : 0
	                    }
	                }
	            }
	        }
	    }

	    this.findPrevNode(editableRootNode, node, function(curNode, isPreviousNode, isParentNode, isChildNode){
	        if (curNode == editableRootNode){
	            return Define.WALK_EXIT;
	        }

	        var isFirstState = ! isPreviousNode && ! isParentNode && ! isChildNode;

	        // console.log('cur node :', curNode, 'prev : ', isPreviousNode, ', parent : ', isParentNode);

	        if (isParentNode){

	            if (curNode.nodeName == 'CAPTION'){

	                if (_this.$dom.selection.getRunIndex(curNode) == 1){
	                    var tableNode = $(curNode).parents('table')[0];

	                    if (curNode.parentNode && curNode.parentNode.nodeName == 'DIV'){
	                        $(curNode.parentNode).remove();
	                    }else{
	                        $(curNode).remove();
	                    }

	                    selectionRangeNode = $(tableNode).find('span')[0];
	                    selectionRangeOffset = 0;
	                }


	                return Define.WALK_EXIT;
	            }else if (curNode.innerHTML == ''){
	                if (Util.isBlockNode(curNode)){

	                    if (curNode.nodeName == 'CAPTION'){
	                        console.log('caption');
	                        var tableNode = $(curNode).parents('table')[0];

	                        $(curNode).remove();
	                        selectionRangeNode = $(tableNode).find('span')[0];
	                        selectionRangeOffset = 0;
	                    }else{
	                        curNode.innerHTML = Define.DEFAULT_SPAN_HTML;

	                        selectionRangeNode = curNode.firstChild.firstChild;
	                        selectionRangeOffset = 0;
	                    }

	                    return Define.WALK_EXIT;
	                }

	                $(curNode).remove();
	                return;
	            }else if (! isDelete && Util.isBlockNode(curNode)){

	                if (curNode.nodeName == 'TD'){
	                    console.log('stop td first. ');
	                    return Define.WALK_EXIT;
	                }else if (Util.isTagName(curNode, ['LI', 'DD', 'DT'])){
	                    if (! curNode.previousSibling){
	                        var listWrapNode = curNode.parentNode;

	                        var listPrevNode = null;
	                        if (listWrapNode.previousSibling){
	                            listPrevNode = listWrapNode.previousSibling;

	                            if (Util.isTagName(listPrevNode, 'TABLE')){
	                                _this.deleteTable(listPrevNode);
	                                $(listPrevNode).remove();
	                                return Define.WALK_EXIT;
	                            }
	                        }

	                        var newPNode = $(Define.DEFAULT_P_STYLE + curNode.innerHTML + '</p>');
	                        $(listWrapNode).before(newPNode);

	                        $(curNode).remove();

	                        if (listWrapNode.innerHTML == ''){
	                            $(listWrapNode).remove();
	                        }

	                        if (listPrevNode && isDeleteAction){
	                            _this.moveBlockChildToPrevBlock(newPNode, listPrevNode);

	                            // selectionRangeNode = rangeInfo.container;
	                            // selectionRangeOffset = rangeInfo.offset;
	                            return Define.WALK_EXIT;
	                        }

	                        selectionRangeNode = $(newPNode).find('span')[0];
	                        selectionRangeOffset = 0;

	                        return Define.WALK_EXIT;
	                    }
	                }

	                var prevNode = curNode.previousSibling;

	                if (prevNode && prevNode.nodeType == 1 && prevNode.nodeName != 'TABLE'){
	                    if (prevNode.nodeType == 1 && prevNode.nodeName == 'SPAN'){
	                        var rangeInfo = _this.moveBlockChildToSpanAfter(curNode, prevNode);
	                        selectionRangeNode = rangeInfo.container;
	                        selectionRangeOffset = rangeInfo.offset;
	                        return Define.WALK_EXIT;
	                    }else{
	                        var rangeInfo = _this.moveBlockChildToPrevBlock(curNode, prevNode);
	                        selectionRangeNode = rangeInfo.container;
	                        selectionRangeOffset = rangeInfo.offset;
	                        return Define.WALK_EXIT;
	                    }
	                }
	            }else{
	                var prevNode = curNode.previousSibling;
	                if (! isDelete && prevNode && prevNode.nodeType == 1 && prevNode.nodeName != 'TABLE' && ! (curNode.nodeName == 'SPAN' && prevNode.nodeName == 'SPAN')) {
	                    var nextNode = prevNode.nextSibling;

	                    if (Util.isTagName(nextNode, 'SPAN')){
	                        $(prevNode).append(nextNode);

	                        while(Util.isTagName(prevNode.nextSibling, 'SPAN')){
	                            $(nextNode).after(prevNode.nextSibling);
	                        }
	                    }

	                    selectionRangeNode = nextNode;
	                    selectionRangeOffset = 0;

	                    return Define.WALK_EXIT;
	                }else if (isDelete){
	                    selectionRangeNode = curNode;
	                    selectionRangeOffset = 0;

	                    return Define.WALK_EXIT;
	                }

	                return ;
	            }
	        }

	        if (isPreviousNode){
	            if (! isDelete && Util.isTagName(curNode, 'TABLE')){
	                _this.deleteTable(curNode);
	                $(curNode).remove();

	                return Define.WALK_EXIT;
	            }

	            if (isDelete){

	                //contents 를 삭제 하고 현재 노드가 테이블일경우 삭제하고 앞에다 공백을 하나 만들어줌
	                if (Util.isTagName(curNode, 'TABLE')){
	                    _this.deleteTable(curNode);
	                    var defaultSpanNode = $(Define.DEFAULT_SPAN_HTML)[0];
	                    $(curNode).before(defaultSpanNode);
	                    $(curNode).remove();
	                    selectionRangeNode = defaultSpanNode.firstChild;
	                    selectionRangeOffset = 1;

	                    return Define.WALK_EXIT;
	                }else if (Util.isBlockNode(curNode) && Util.isBlockNode(curNode.lastChild)){
	                    var defaultSpanNode = $(Define.DEFAULT_SPAN_HTML)[0];
	                    $(curNode.lastChild).after(defaultSpanNode);

	                    selectionRangeNode = defaultSpanNode.firstChild;
	                    selectionRangeOffset = 1;
	                    return Define.WALK_EXIT;
	                }

	                var adjustRange = _this.getAdjustRange(curNode);
	                selectionRangeNode = adjustRange.container;
	                selectionRangeOffset = adjustRange.offset;

	                return Define.WALK_EXIT;
	            }
	        }

	        if (! isDelete) {
	            if (Util.isSingleRunNode(curNode)){
	                if (! isFirstState){
	                    offset = 1;
	                }

	                if (offset > 0){
	                    $(curNode).remove();
	                    isDelete = true;
	                }

	            }else if (Util.isTextNode(curNode)){
	                if (! isFirstState){
	                    offset = curNode.nodeValue.length;
	                }

	                isDelete = _this.deleteText(curNode, offset);

	                if (isDelete && curNode.parentNode){
	                    selectionRangeNode = curNode;
	                    selectionRangeOffset = offset - 1;

	                    if (offset > 0){
	                        return Define.WALK_EXIT;
	                    }
	                }
	            }
	        }else{
	            var adjustRange = _this.getAdjustRange(curNode);
	            selectionRangeNode = adjustRange.container;
	            selectionRangeOffset = adjustRange.offset;

	            return Define.WALK_EXIT;
	        }
	    });

	    if (isDeleteAction){
	        if (originalRangeNode.parentNode){
	            return {
	                node : originalRangeNode,
	                offset : originalRangeOffset
	            }
	        }
	    }

	    return {
	        node : selectionRangeNode,
	        offset : selectionRangeOffset
	    }
	};

	Delete.prototype.getNextDeletableNodeInfo = function(editableRootNode, node, offset){
	    var nextNode = null;
	    var nextOffset = 0;

	    var isTableDeleted = false;
	    var isBlockChanged = false;
	    var isStopTdNode = false;
	    var _this = this;

	    this.findNextNode(editableRootNode, node, function(curNode, isNextNode, isParentNode){
	        if (curNode == editableRootNode){
	            return Define.WALK_EXIT;
	        }

	        // console.log('curNode : ', curNode);
	        // console.log('isNext : ', isNextNode, ', isParent : ', isParentNode);
	        if (Util.isTagName(curNode, 'TD')){
	            isStopTdNode = true;
	            return Define.WALK_EXIT;
	        }else if(Util.isTagName(curNode, 'CAPTION')){
	            isStopTdNode = true;
	            return Define.WALK_EXIT;
	        }

	        if (node == curNode){
	            if (curNode.nodeType == 3){
	                if ((offset + 1) <= curNode.nodeValue.length){
	                    nextNode = curNode;
	                    nextOffset = offset + 1;

	                    return Define.WALK_EXIT;
	                }
	            }else if (Util.isSingleRunNode(curNode)){
	                if (offset == 0){
	                    nextNode = curNode;
	                    nextOffset = 1;

	                    return Define.WALK_EXIT;
	                }
	            }

	            nextOffset = 1;
	            return ;
	        }

	        if (Util.isTextNode(curNode) && curNode.nodeValue.length == 0){
	            curNode.parentNode.removeChild(curNode);

	            return Define.WALK_CONTINUE;
	        }

	        if (curNode.nodeType == 3){
	            nextNode = curNode;

	            if (isBlockChanged){
	                nextOffset = 0;
	            }else{
	                nextOffset = 1;
	            }

	            return Define.WALK_EXIT;

	        }else if (Util.isSingleRunNode(curNode)){
	            nextNode = curNode;

	            if (isBlockChanged){
	                nextOffset = 0;
	            }else{
	                nextOffset = 1;
	            }
	            return Define.WALK_EXIT;

	        }else if (isNextNode){

	            //table 노드의 경우에는 다음 노드를 찾지 않고 삭제하고 종료
	            if (Util.isTagName(curNode, 'TABLE')){
	                _this.deleteTable(curNode);

	                isTableDeleted = true;
	                $(curNode).remove();
	                return Define.WALK_EXIT;

	                //블록노드를 만나면 offset 을 초기화하고 다음 run 노드를 찾아서 리턴
	            }else if (Util.isBlockNode(curNode) && ['BODY', 'UL', 'OL', 'TBODY', 'TR', 'TH', 'TD', 'COLGROUP', 'COL'].indexOf(curNode.nodeName) == -1){
	                isBlockChanged = true;
	                offset = 0;

	                var defaultSpanNode = $(Define.DEFAULT_SPAN_HTML)[0];
	                $(curNode).prepend(defaultSpanNode);
	                nextNode = defaultSpanNode.firstChild;
	                nextOffset = 0;
	                return Define.WALK_EXIT;
	            }

	            //비어 있는 노드의 경우에는 미리 지워줌
	        }else if (isParentNode && Util.isBlockNode(curNode)){
	            isBlockChanged = true;
	            offset = 0;
	        }else if (curNode.nodeType == 1 && curNode.innerHTML == ''){
	            $(curNode).remove();
	        }

	    });

	    if (isTableDeleted || isStopTdNode){
	        return null;
	    }

	    return {
	        nextNode : nextNode,
	        nextOffset : nextOffset
	    }
	};

	Delete.prototype.deleteText = function(curNode, offset){

	    var deleted = false;

	    //텍스트 노드가 한개만 있는 경우
	    if (offset == 1 && curNode.nodeValue.length == 1) {
	        $(curNode).remove();
	        deleted = true;
	    } else if (offset > 0 && curNode.nodeValue.length > 0) {
	        var value = curNode.nodeValue;
	        var prefix = value.substring(0, offset - 1);
	        var tail = value.length > offset ? value.substring(offset) : '';
	        var valueLength = value.length;

	        value = prefix + tail;

	        if (value[0] && value[0] == ' '){
	            value = Define.NBSP + value.substring(1);
	        }

	        if (valueLength > 1 && value[valueLength-1] /*&& valueLength[valueLength-1]*/){
	            value = valueLength.substring(0, valueLength - 2) + Define.NBSP;
	        }

	        curNode.nodeValue = value;

	        deleted = true;
	    }else{
	        if (curNode.nodeValue.length == 0){
	            $(curNode).remove();
	        }
	    }

	    return deleted;
	};

	Delete.prototype.moveBlockChildToSpanAfter = function(curNode, prevNode){
	    var children = $(curNode).children().toArray();
	    var lastChild = null;

	    for (var i=children.length-1; i>=0; i--){
	        lastChild = children[i];
	        $(prevNode).after(lastChild);
	    }

	    $(curNode).remove();

	    var offset = 0;
	    if (! lastChild){
	        lastChild = $(prevNode).find('span').last()[0];
	        offset = 1;
	    }

	    if (lastChild.previousSibling && (lastChild.innerHTML == ' ' || lastChild.innerHTML == Define.DEFAULT_TEXT_HTML)){

	        var prevNode = lastChild.previousSibling;

	        if (Util.isTagName(prevNode, 'TABLE')){
	            var defaultSpanNode = $(Define.DEFAULT_SPAN_HTML)[0];
	            $(prevNode).after(defaultSpanNode);

	            lastChild = defaultSpanNode.firstChild;
	            offset = 1;
	        }else{
	            var adjustRange = this.getAdjustRange(lastChild);
	            offset = adjustRange.offset;

	            $(lastChild).remove();

	            lastChild = prevNode;
	        }
	    }

	    return {
	        container : lastChild,
	        offset : offset
	    };
	    return lastChild;
	};

	Delete.prototype.removeGarbageBrNodeLast = function(targetNode){
	    var prevLastChild = targetNode.lastChild;
	    while(prevLastChild){

	        if (! prevLastChild.lastChild){
	            break;
	        }

	        prevLastChild = prevLastChild.lastChild;
	    }

	    //이전 노드의 마지막에 BR 태그가 있는 경우에 삭제를 해줌
	    if (Util.isTagName(prevLastChild, 'BR')){
	        var parentNode = prevLastChild.parentNode;

	        $(prevLastChild).remove();

	        if (parentNode != targetNode && parentNode.innerHTML == ''){
	            $(parentNode).remove();
	        }
	    }
	};

	Delete.prototype.moveBlockChildToPrevBlock = function(curNode, prevNode){

	    var lastChild = null;
	    this.removeGarbageBrNodeLast(curNode);
	    this.removeGarbageBrNodeLast(prevNode);

	    var children = $(curNode).children().toArray();

	    for (var i=0, length=children.length; i<length; i++){
	        if (i == 0){
	            lastChild = children[i];
	        }

	        $(prevNode).append(children[i]);
	    }

	    $(curNode).remove();

	    var offset = 0;
	    if (! lastChild){
	        lastChild = $(prevNode).find('span').last()[0];
	        offset = 1;
	    }

	    if (lastChild && lastChild.previousSibling && (lastChild.innerHTML == ' ' || lastChild.innerHTML == Define.DEFAULT_TEXT_HTML)){

	        var prevNode = lastChild.previousSibling;

	        if (Util.isTagName(prevNode, 'TABLE')){
	            var defaultSpanNode = $(Define.DEFAULT_SPAN_HTML)[0];
	            $(prevNode).after(defaultSpanNode);

	            lastChild = defaultSpanNode.firstChild;
	            offset = 1;
	        }else{
	            var adjustRange = this.getAdjustRange(lastChild);
	            offset = adjustRange.offset;

	            $(lastChild).remove();

	            lastChild = prevNode;

	            if (Util.isBlockNode(lastChild)){
	                offset = lastChild.childNodes.length;
	            }
	        }
	    }

	    return {
	        container : lastChild,
	        offset : offset
	    };
	};

	Delete.prototype.getAdjustRange = function(curNode){
	    var selectionRangeNode = null;
	    var selectionRangeOffset = 0;
	    if (Util.isSingleRunNode(curNode)){
	        selectionRangeNode = curNode.parentNode;
	        selectionRangeOffset = this.$dom.selection.nodeIndexOf(curNode.parentNode, curNode) + 1;
	    }else if (Util.isTextNode(curNode)){
	        selectionRangeNode = curNode;
	        selectionRangeOffset = curNode.nodeValue.length;
	    }else{
	        if (curNode.lastChild && curNode.lastChild.nodeType == 1){
	            selectionRangeNode = curNode;
	            selectionRangeOffset = this.$dom.selection.nodeIndexOf(curNode, curNode.lastChild) + 1;
	        }else if (curNode.lastChild && curNode.lastChild.nodeType == 3){
	            selectionRangeNode = curNode.lastChild;
	            selectionRangeOffset = curNode.lastChild.nodeValue.length;
	        }
	    }

	    return {
	        container : selectionRangeNode,
	        offset : selectionRangeOffset
	    }
	};

	Delete.prototype.checkContentDeleteAll = function(){
	    var editorRootNode = this.$dom.selection.getEditableRootNode();
	    var blockChildList = this.$dom.selection.getBlockList(editorRootNode);

	    for (var i=0, length=blockChildList.length; i<length; i++){
	        var childNode = blockChildList[i];

	        if (childNode.innerHTML == ''){
	            $(childNode).remove();
	        }
	    }

	    var innerHTML = editorRootNode.innerHTML;
	    if (innerHTML == '' || this.checkDeadBlockNode(editorRootNode)){
	        editorRootNode.innerHTML = Define.DEFAULT_PARAGRAPH_HTML;

	        return true;
	    }

	    return false;
	};

	Delete.prototype.deleteTdContents = function(){

	    var $selectedTd = this.$dom.selection.getSelectedTd();

	    if ($selectedTd.length > 0){

	        $selectedTd.html('');
	        var firstPNode = null;
	        $selectedTd.each(function(_index, _tdNode){
	            if (!firstPNode){
	                firstPNode = $(Define.DEFAULT_PARAGRAPH_HTML)[0];
	                $(_tdNode).append(firstPNode);
	            }else{
	                $(_tdNode).append($(Define.DEFAULT_PARAGRAPH_HTML)[0]);
	            }
	        });

	        this.$dom.selection.removeSelected();

	        var firstSpanNode = $(firstPNode).find('span')[0];
	        if (firstSpanNode){
	            this.$dom.selection.setWindowRange(firstSpanNode,0);
	        }

	        return true;
	    }

	    return false;
	};

	Delete.prototype.findDeepChildNode = function(node, offset){
	    if (node.nodeType == 1 && node.childNodes.length > 0){
	        if (offset == 0){
	            node = node.childNodes[0];

	            if (node.nodeType == 1){
	                while(node.lastChild){
	                    node = node.lastChild;
	                }
	            }
	        }else if (node.childNodes.length > 0){

	            node = node.childNodes[offset - 1];
	            offset = 1;

	            if (node.nodeType == 1){
	                while(node.lastChild){
	                    node = node.lastChild;
	                }
	            }

	            if (node.nodeType == 3){
	                offset = node.nodeValue.length;
	            }
	        }
	    }

	    return {
	        node : node,
	        offset : offset
	    }
	};

	Delete.prototype.deleteTable = function(){

	    if (this.options.useDeleteTableAlert){
	        var resp = confirm(Resource.alertMessage.textDeleteConfirmMessage);
	        if (! resp){ throw new Error('table_stop'); }
	    }

	};

	module.exports = Delete;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);
	var Resource = __webpack_require__(13);

	if (!Object.keys) {
	    Object.keys = function (obj) {
	        var arr = [],
	            key;
	        for (key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                arr.push(key);
	            }
	        }
	        return arr;
	    };
	}

	var fnIntersection = function(){
	    return Array.from(arguments).reduce(function(previous, current){
	        return previous.filter(function(element){
	            return current.indexOf(element) > -1;
	        });
	    });
	};

	function StatusHighlight(editorElement, $domObject) {
	    this.runStyleProp = ['fontFamily', 'fontSize', 'fontWeight', 'fontStyle', 'color', 'backgroundColor', 'textAlign', 'lineHeight', 'textDecoration', 'verticalAlign'];

	    this.editorElement = null;
	    this.toolbarElement = null;
	    this.cache = null;
	    this.$dom = null;

	    this.init(editorElement, $domObject);
	}

	StatusHighlight.prototype.init = function(editorElement, $domObject) {
	    this.$dom = $domObject;

	    this.editorElement = $(editorElement);
	    this.toolbarElement = this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR);

	    this.isShowTableUI = false;

	    this.cache = {
	        $heading : this.toolbarElement.find('div[u-id="heading"]'),
	        $font_family : this.toolbarElement.find('a[u-id="fontFamily"]'),
	        $font_size : this.toolbarElement.find('a[u-id="fontSize"]'),
	        $bold : this.toolbarElement.find('a[u-id="bold"]'),
	        $italic : this.toolbarElement.find('a[u-id="italic"]'),
	        $underline : this.toolbarElement.find('a[u-id="underline"]'),
	        $pageBreak : this.toolbarElement.find('a[u-id="page_break"]'),

	        $super : this.toolbarElement.find('a[u-id="super"]'),
	        $sub : this.toolbarElement.find('a[u-id="sub"]'),

	        $lineHeight : this.toolbarElement.find('a[u-id="line_height"]'),
	        // $lineHeightList : this.toolbarElement.find('a[u-id="line_height"]').find('li'),
	        $lineHeightList : null,

	        $textFormatCopy : this.toolbarElement.find('a[u-id="textFormatCopy"]'),
	        $textFormatPaste : this.toolbarElement.find('a[u-id="textFormatPaste"]'),

	        $strike_through : this.toolbarElement.find('a[u-id="strike_through"]'),

	        $numbered_list : this.toolbarElement.find('a[u-id="numbered_list"]'),
	        $bullet_list : this.toolbarElement.find('a[u-id="bullet_list"]'),

	        $align : {
	            Left : this.toolbarElement.find('a[u-id="align_left"]'),
	            Right : this.toolbarElement.find('a[u-id="align_right"]'),
	            Center : this.toolbarElement.find('a[u-id="align_center"]'),
	            Justify : this.toolbarElement.find('a[u-id="align_justify"]')
	        },

	        $dir : {
	            Ltr : this.toolbarElement.find('a[u-id="dir_ltr"]'),
	            Rtl : this.toolbarElement.find('a[u-id="dir_rtl"]')
	        },

	        $list : {
	            Numbered : this.toolbarElement.find('a[u-id="numbered_list"]'),
	            Bullet : this.toolbarElement.find('a[u-id="bullet_list"]')
	        },

	        $table : [
	            this.toolbarElement.find('a[u-id="table_insert_left"]'),
	            this.toolbarElement.find('a[u-id="table_insert_right"]'),
	            this.toolbarElement.find('a[u-id="table_insert_top"]'),
	            this.toolbarElement.find('a[u-id="table_insert_bottom"]'),

	            this.toolbarElement.find('a[u-id="table_remove_col"]'),
	            this.toolbarElement.find('a[u-id="table_remove_row"]'),
	            this.toolbarElement.find('a[u-id="table_remove_table"]'),

	            this.toolbarElement.find('a[u-id="table_merge"]'),
	            this.toolbarElement.find('a[u-id="table_split_col"]'),
	            this.toolbarElement.find('a[u-id="table_split_row"]'),

	            this.toolbarElement.find('a[u-id="table_background_color"]'),
	            this.toolbarElement.find('a[u-id="table_border_style"]')
	        ],

	        $tableNode : {
	            table : this.toolbarElement.find('a[u-id="table"]'),
	            insertLeft : this.toolbarElement.find('a[u-id="table_insert_left"]'),
	            insertRight : this.toolbarElement.find('a[u-id="table_insert_right"]'),
	            insertTop : this.toolbarElement.find('a[u-id="table_insert_top"]'),
	            insertBottom : this.toolbarElement.find('a[u-id="table_insert_bottom"]'),

	            removeCol : this.toolbarElement.find('a[u-id="table_remove_col"]'),
	            removeRow : this.toolbarElement.find('a[u-id="table_remove_row"]'),
	            removeTable : this.toolbarElement.find('a[u-id="table_remove_table"]'),

	            merge : this.toolbarElement.find('a[u-id="table_merge"]'),
	            spliteCol : this.toolbarElement.find('a[u-id="table_split_col"]'),
	            spliteRow : this.toolbarElement.find('a[u-id="table_split_row"]'),

	            backgroundColor : this.toolbarElement.find('a[u-id="table_background_color"]'),
	            borderStyle : this.toolbarElement.find('a[u-id="table_border_style"]'),
	        }
	    };

	    this.cache.$textFormatPaste.addClass('disabled');

	};

	StatusHighlight.prototype.onChangedListener = function(node, opt){

	    var $field = this.editorElement.find("." + Define.CLASS.FIELD);
	    if ($field.length > 0){
	        node = $field[0];
	    }else{
	        if (! node || (! node instanceof Node && Object.keys(node).length == 0)){
	            var $selected = this.$dom.selection.getSelectedNode();

	            if ($selected.length == 0 && !node){

	                this.cache.$pageBreak.removeClass('disabled');
	                var selInfo = this.$dom.selection.get();

	                node = null;

	                if (selInfo){
	                    try{
	                        var opNode = this.$dom.selection.getOpNode(selInfo.p[0], selInfo.r[0]);
	                        if (opNode) {
	                            node = opNode.container;
	                        }
	                    }catch(e){
	                        return;
	                    }

	                }
	            }else{
	                this.cache.$pageBreak.addClass('disabled');
	                node = $selected[0];
	            }
	        }
	    }

	    if (! node){
	        return ;
	    }

	    var highStyle = this.getHighlightStyle(node);

	    if (! highStyle.runStyles){
	        return ;
	    }

	    this.$dom.selection.setHighlightStyle(highStyle.runStyles);

	    this.changeRunStyleUI(highStyle.runStyles);

	    var blockNode = this.$dom.selection.getParentBlockNode(node);

	    this.cache.$list.Numbered.removeClass('on');
	    this.cache.$list.Bullet.removeClass('on');


	    //line-height
	    // console.log(blockNode);

	    if (blockNode) {
	        var $blockNode = $(blockNode);
	        if ($(blockNode).is('.' + Define.CLASS.CONTENTS + ' ' + Define.PARAGRAPH_NODES.join(', .' + Define.CLASS.CONTENTS + ' '))) {
	            var lineHeight = $blockNode[0].style.lineHeight;

	            if(!this.cache.$lineHeightList) {
	                this.cache.$lineHeightList = this.cache.$lineHeight.find('li');
	            }

	            this.cache.$lineHeightList.removeAttr('selected');

	            var lineHeightItem = this.cache.$lineHeightList.filter('[data-value="' + lineHeight + '"]');

	            lineHeightItem.attr('selected', 'selected');
	        }
	    }



	    var blockDir = blockNode.getAttribute('dir');
	    if (blockNode && blockNode.nodeType == 1 && blockNode.nodeName == 'LI'){
	        var parentNode = blockNode.parentNode;

	        if (parentNode.nodeName == 'OL'){
	            this.cache.$list.Numbered.addClass('on');
	        }else if (parentNode.nodeName == 'UL'){
	            this.cache.$list.Bullet.addClass('on');
	        }
	    }

	    if (blockDir && blockDir == 'rtl'){
	        this.cache.$dir.Ltr.removeClass('on');
	        this.cache.$dir.Rtl.addClass('on');
	    }else{
	        this.cache.$dir.Ltr.addClass('on');
	        this.cache.$dir.Rtl.removeClass('on');
	    }

	    if (this.$dom.selection.collapseOp()){
	        this.cache.$pageBreak.removeClass('disabled');
	    }else{
	        this.cache.$pageBreak.addClass('disabled');
	    }

	    if (highStyle.isTableChildren){
	        this.cache.$pageBreak.addClass('disabled');

	        this.cache.$table.forEach(function(tableUi){
	            $(tableUi).removeClass('disabled');
	        });

	        var $selectedTdNodes = this.$dom.selection.getSelectedTd();
	        if ($selectedTdNodes.length > 0){
	            this.cache.$tableNode.table.addClass('disabled');

	            if (! this.$dom.selection.isTableMergeable()){
	                this.cache.$tableNode.merge.addClass('disabled');
	            }

	            this.cache.$tableNode.table.addClass('disabled');
	            this.cache.$tableNode.insertTop.addClass('disabled');
	            this.cache.$tableNode.insertBottom.addClass('disabled');
	            this.cache.$tableNode.insertLeft.addClass('disabled');
	            this.cache.$tableNode.insertRight.addClass('disabled');

	            this.cache.$tableNode.removeCol.addClass('disabled');
	            this.cache.$tableNode.removeRow.addClass('disabled');

	            this.cache.$tableNode.spliteCol.addClass('disabled');
	            this.cache.$tableNode.spliteRow.addClass('disabled');

	        } else{
	            this.cache.$tableNode.table.removeClass('disabled');
	            this.cache.$tableNode.merge.addClass('disabled');
	        }
	    }else{
	        this.cache.$table.forEach(function(tableUi){
	            $(tableUi).addClass('disabled');
	        });
	        this.cache.$tableNode.table.removeClass('disabled');
	    }
	};

	StatusHighlight.prototype.changeRunStyleUI = function(props){
	    if (! props){
	        return ;
	    }

	    for (var i=0, len=props.length; i<len; i++){
	        var key = props[i].key;
	        var val = props[i].value;

	        switch(key){
	            case "heading":
	                console.log("heading???");
	                break;
	            case "fontFamily":
	                val = val.replace(/'/g, "");
	                val = val.replace(/"/g, "");

	                if (val == "맑은고딕"){ val = "맑은 고딕"; }

	                var split = val.split(",");
	                if (split.length > 1){
	                    $(split).each(function(i){
	                        if (this.length > 1){
	                            val = this + "";
	                            return false;
	                        }
	                    });
	                }

	                val = val.trim();
	                val = val.replace(/"/g, '');

	                if (val == 'MalgunGothic' || val == 'Malgun Gothic'){
	                    val = '맑은 고딕';
	                }else if (val == 'NanumGothic' || val == 'Nanum Gothic'){
	                    val = '나눔 고딕';
	                }else{

	                    var notFoundFont = true;
	                    if (val && val != ''){
	                        var values = val.split(' ');

	                        if (values.length > 0){
	                            val = '';

	                            for (var j=0; j<values.length; j++){
	                                if (val != ''){
	                                    val += ' ';
	                                }

	                                if (values.length > 0 && values[j] && values[j][0] && values[j][0].length > 0){
	                                    val += values[j][0].toUpperCase() + values[j].substring(1);
	                                    notFoundFont = false;
	                                }
	                            }
	                        }
	                    }

	                    if (notFoundFont || ! val){
	                        val = Resource.defaultFontMenuName;
	                    }
	                }

	                this.changeSelectBoxValue(key, this.cache.$font_family, val);

	                break;

	            case "fontSize":
	                if (val.indexOf("pt") > -1){
	                    // val = Util.getPixelToPoint(val);
	                }

	                this.changeSelectBoxValue(key, this.cache.$font_size, val);

	                break;

	            case "fontWeight":

	                if ($.inArray(val, ['600','700','800','900']) != -1) {
	                    val = "bold";
	                }else if (val == 400){
	                    val = "normal";
	                }

	                if (val == "normal" || val.length == 0){
	                    this.cache.$bold.removeClass("on");
	                }else{
	                    this.cache.$bold.addClass("on");
	                }
	                break;

	            case "fontStyle":
	                if (val == "normal" || val.length == 0){
	                    this.cache.$italic.removeClass("on");
	                }else{
	                    this.cache.$italic.addClass("on");
	                }
	                break;

	            case "textAlign":
	                for (var prop in this.cache.$align){
	                    $(this.cache.$align[prop]).removeClass("on");
	                }

	                var name = Util.firstToUpperCase(val);
	                if (name == "Start"){ name = "Left"; }

	                if (['Left', 'Center', 'Right', 'Justify'].indexOf(name) == -1){
	                    name = 'Left';
	                }

	                if (name.length > 0){
	                    this.cache.$align[name].addClass("on");
	                }

	                break;

	            case "textDecoration":

	                this.cache.$underline.removeClass("on");
	                this.cache.$strike_through.removeClass("on");

	                if (val.indexOf("underline") != -1){
	                    this.cache.$underline.addClass("on");
	                }

	                if (val.indexOf("line-through") != -1){
	                    this.cache.$strike_through.addClass("on");
	                }

	                break;

	            case "verticalAlign":

	                this.cache.$super.removeClass("on");
	                this.cache.$sub.removeClass("on");

	                if (val.indexOf("super") != -1){
	                    this.cache.$super.addClass("on");
	                }

	                if (val.indexOf("sub") != -1){
	                    this.cache.$sub.addClass("on");
	                }

	                break;

	            default:
	                break;
	        }
	    }
	};

	StatusHighlight.prototype.changeSelectBoxValue = function(boxType, $node, val){
	    $node.find("li[selected]").removeAttr("selected");
	    $node.find("li[data-value='"+val+"']").attr("selected","selected").text();

	    if (boxType == 'fontSize'){
	        val = val.replace(/px|pt/, '');
	        val = Math.round(val);

	        $node.find("label").text(val + 'px');
	    }else{
	        $node.find("label").text(val);
	    }

	};

	//현재 스타일 정보를 가져옴.
	StatusHighlight.prototype.getCurrentStyle = function(node) {

	    if (!node) {
	        return null;
	    }

	    var idoc = window.document;
	    var styles = this.runStyleProp;
	    var computedObj = null;
	    try {
	        if (window.getComputedStyle){
	            var getComputedStyle = idoc.defaultView.getComputedStyle(node, null);
	            computedObj = getComputedStyle;
	        }else if (node.currentStyle){
	            computedObj = node.currentStyle;
	        }else{
	            computedObj = node.style;
	        }
	    } catch(e) {
	        return null;
	    }

	    if (computedObj){
	        var styleProps = [];
	        for (var i=0; i<styles.length; i++){
	            var value = computedObj[styles[i]];

	            if (styles[i] == "backgroundColor") {
	                value = node.style[styles[i]];
	            }else if (styles[i] == "textDecoration"){
	                var decoration = [];
	                if (value.indexOf("underline") != -1){
	                    decoration.push("underline");
	                }

	                if (value.indexOf("line-through") != -1){
	                    decoration.push("line-through");
	                }

	                if (decoration.length > 0){
	                    value = decoration.join(" ");
	                }else{
	                    value = "";
	                }
	            }else if (styles[i] == "fontFamily"){
	                if (value == "''"){
	                    var parentNodeComputedStyle = idoc.defaultView.getComputedStyle(node.parentNode, null);

	                    value = parentNodeComputedStyle["fontFamily"];
	                }
	            }

	            styleProps.push({key : styles[i], value : value});
	        }

	        return styleProps;
	    }else{
	        return null;
	    }
	};

	StatusHighlight.prototype.getHighlightStyle = function(nodes){
	    var styleNodes = (nodes instanceof Array || nodes instanceof jQuery) ? nodes : [nodes];

	    var runStyles = [];

	    for (var i=0, len=styleNodes.length; i < len; i ++){
	        var styleNode = styleNodes[i];

	        if (styleNode.nodeType == 3){
	            styleNode = styleNode.parentNode;
	        }

	        runStyles.push(this.getCurrentStyle(styleNode));
	    }

	    //TODO : Paragraph Style을 가져오는 로직 추가 필요.

	    var isTableChildren = false;
	    if (styleNodes[0]){
	        isTableChildren = this.$dom.selection.getParentTagNode(styleNodes[0], ['TABLE']).length > 0;
	    }

	    return{ runStyles : this.getCompareRunStyle(runStyles), isTableChildren : isTableChildren/*, paraStyles : newParaStyles, paragraphs : paragraphs*/};
	};

	StatusHighlight.prototype.getCompareRunStyle = function(styleList){
	    var newStyleList = [];
	    var styleProp = this.runStyleProp;

	    for (var i=0, len=styleProp.length; i<len; i++){
	        var style = styleList[0];
	        var equals = true;

	        if ( !style){
	            return ;
	        }

	        for (var j=0, length=styleList.length-1; j<length; j++){
	            var curStyle = styleList[j]
	                , nextStyle = styleList[j+1];

	            if (curStyle[i].value != nextStyle[i].value){

	                var curSplitStyle = curStyle[i].value.split(" ");
	                var nextSplitStyle = nextStyle[i].value.split(" ");
	                var intersection = fnIntersection(curSplitStyle, nextSplitStyle);

	                if (intersection.length > 0){
	                    style[i].value = intersection.join(' ');
	                }else{
	                    equals = false;
	                    break;
	                }
	            }
	        }

	        if (equals){
	            newStyleList.push(style[i]);
	        }else{
	            styleList[0][i].value = "";
	            newStyleList.push(style[i]);
	        }
	    }

	    return newStyleList;
	};

	module.exports = StatusHighlight;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(29);

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var util = __webpack_require__(30);

	function scrollIntoView(elem, container, config) {
	  config = config || {};
	  // document 归一化到 window
	  if (container.nodeType === 9) {
	    container = util.getWindow(container);
	  }

	  var allowHorizontalScroll = config.allowHorizontalScroll;
	  var onlyScrollIfNeeded = config.onlyScrollIfNeeded;
	  var alignWithTop = config.alignWithTop;
	  var alignWithLeft = config.alignWithLeft;
	  var offsetTop = config.offsetTop || 0;
	  var offsetLeft = config.offsetLeft || 0;
	  var offsetBottom = config.offsetBottom || 0;
	  var offsetRight = config.offsetRight || 0;

	  allowHorizontalScroll = allowHorizontalScroll === undefined ? true : allowHorizontalScroll;

	  var isWin = util.isWindow(container);
	  var elemOffset = util.offset(elem);
	  var eh = util.outerHeight(elem);
	  var ew = util.outerWidth(elem);
	  var containerOffset = undefined;
	  var ch = undefined;
	  var cw = undefined;
	  var containerScroll = undefined;
	  var diffTop = undefined;
	  var diffBottom = undefined;
	  var win = undefined;
	  var winScroll = undefined;
	  var ww = undefined;
	  var wh = undefined;

	  if (isWin) {
	    win = container;
	    wh = util.height(win);
	    ww = util.width(win);
	    winScroll = {
	      left: util.scrollLeft(win),
	      top: util.scrollTop(win)
	    };
	    // elem 相对 container 可视视窗的距离
	    diffTop = {
	      left: elemOffset.left - winScroll.left - offsetLeft,
	      top: elemOffset.top - winScroll.top - offsetTop
	    };
	    diffBottom = {
	      left: elemOffset.left + ew - (winScroll.left + ww) + offsetRight,
	      top: elemOffset.top + eh - (winScroll.top + wh) + offsetBottom
	    };
	    containerScroll = winScroll;
	  } else {
	    containerOffset = util.offset(container);
	    ch = container.clientHeight;
	    cw = container.clientWidth;
	    containerScroll = {
	      left: container.scrollLeft,
	      top: container.scrollTop
	    };
	    // elem 相对 container 可视视窗的距离
	    // 注意边框, offset 是边框到根节点
	    diffTop = {
	      left: elemOffset.left - (containerOffset.left + (parseFloat(util.css(container, 'borderLeftWidth')) || 0)) - offsetLeft,
	      top: elemOffset.top - (containerOffset.top + (parseFloat(util.css(container, 'borderTopWidth')) || 0)) - offsetTop
	    };
	    diffBottom = {
	      left: elemOffset.left + ew - (containerOffset.left + cw + (parseFloat(util.css(container, 'borderRightWidth')) || 0)) + offsetRight,
	      top: elemOffset.top + eh - (containerOffset.top + ch + (parseFloat(util.css(container, 'borderBottomWidth')) || 0)) + offsetBottom
	    };
	  }

	  if (diffTop.top < 0 || diffBottom.top > 0) {
	    // 强制向上
	    if (alignWithTop === true) {
	      util.scrollTop(container, containerScroll.top + diffTop.top);
	    } else if (alignWithTop === false) {
	      util.scrollTop(container, containerScroll.top + diffBottom.top);
	    } else {
	      // 自动调整
	      if (diffTop.top < 0) {
	        util.scrollTop(container, containerScroll.top + diffTop.top);
	      } else {
	        util.scrollTop(container, containerScroll.top + diffBottom.top);
	      }
	    }
	  } else {
	    if (!onlyScrollIfNeeded) {
	      alignWithTop = alignWithTop === undefined ? true : !!alignWithTop;
	      if (alignWithTop) {
	        util.scrollTop(container, containerScroll.top + diffTop.top);
	      } else {
	        util.scrollTop(container, containerScroll.top + diffBottom.top);
	      }
	    }
	  }

	  if (allowHorizontalScroll) {
	    if (diffTop.left < 0 || diffBottom.left > 0) {
	      // 强制向上
	      if (alignWithLeft === true) {
	        util.scrollLeft(container, containerScroll.left + diffTop.left);
	      } else if (alignWithLeft === false) {
	        util.scrollLeft(container, containerScroll.left + diffBottom.left);
	      } else {
	        // 自动调整
	        if (diffTop.left < 0) {
	          util.scrollLeft(container, containerScroll.left + diffTop.left);
	        } else {
	          util.scrollLeft(container, containerScroll.left + diffBottom.left);
	        }
	      }
	    } else {
	      if (!onlyScrollIfNeeded) {
	        alignWithLeft = alignWithLeft === undefined ? true : !!alignWithLeft;
	        if (alignWithLeft) {
	          util.scrollLeft(container, containerScroll.left + diffTop.left);
	        } else {
	          util.scrollLeft(container, containerScroll.left + diffBottom.left);
	        }
	      }
	    }
	  }
	}

	module.exports = scrollIntoView;

/***/ }),
/* 30 */
/***/ (function(module, exports) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;

	function getClientPosition(elem) {
	  var box = undefined;
	  var x = undefined;
	  var y = undefined;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
	  box = elem.getBoundingClientRect();

	  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
	  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
	  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

	  x = box.left;
	  y = box.top;

	  // In IE, most of the time, 2 extra pixels are added to the top and left
	  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
	  // IE6 standards mode, this border can be overridden by setting the
	  // document element's border to zero -- thus, we cannot rely on the
	  // offset always being 2 pixels.

	  // In quirks mode, the offset can be determined by querying the body's
	  // clientLeft/clientTop, but in standards mode, it is found by querying
	  // the document element's clientLeft/clientTop.  Since we already called
	  // getClientBoundingRect we have already forced a reflow, so it is not
	  // too expensive just to query them all.

	  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
	  // 窗口边框标准是设 documentElement ,quirks 时设置 body
	  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
	  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
	  // 标准 ie 下 docElem.clientTop 就是 border-top
	  // ie7 html 即窗口边框改变不了。永远为 2
	  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;

	  return {
	    left: x,
	    top: y
	  };
	}

	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}

	function getScrollLeft(w) {
	  return getScroll(w);
	}

	function getScrollTop(w) {
	  return getScroll(w, true);
	}

	function getOffset(el) {
	  var pos = getClientPosition(el);
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScrollLeft(w);
	  pos.top += getScrollTop(w);
	  return pos;
	}
	function _getComputedStyle(elem, name, computedStyle_) {
	  var val = '';
	  var d = elem.ownerDocument;
	  var computedStyle = computedStyle_ || d.defaultView.getComputedStyle(elem, null);

	  // https://github.com/kissyteam/kissy/issues/61
	  if (computedStyle) {
	    val = computedStyle.getPropertyValue(name) || computedStyle[name];
	  }

	  return val;
	}

	var _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');
	var RE_POS = /^(top|right|bottom|left)$/;
	var CURRENT_STYLE = 'currentStyle';
	var RUNTIME_STYLE = 'runtimeStyle';
	var LEFT = 'left';
	var PX = 'px';

	function _getComputedStyleIE(elem, name) {
	  // currentStyle maybe null
	  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
	  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];

	  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
	  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
	  // 在 ie 下不对，需要直接用 offset 方式
	  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了

	  // From the awesome hack by Dean Edwards
	  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	  // If we're not dealing with a regular pixel number
	  // but a number that has a weird ending, we need to convert it to pixels
	  // exclude left right for relativity
	  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
	    // Remember the original values
	    var style = elem.style;
	    var left = style[LEFT];
	    var rsLeft = elem[RUNTIME_STYLE][LEFT];

	    // prevent flashing of content
	    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];

	    // Put in the new values to get a computed value out
	    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
	    ret = style.pixelLeft + PX;

	    // Revert the changed values
	    style[LEFT] = left;

	    elem[RUNTIME_STYLE][LEFT] = rsLeft;
	  }
	  return ret === '' ? 'auto' : ret;
	}

	var getComputedStyleX = undefined;
	if (typeof window !== 'undefined') {
	  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
	}

	function each(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(arr[i]);
	  }
	}

	function isBorderBoxFn(elem) {
	  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
	}

	var BOX_MODELS = ['margin', 'border', 'padding'];
	var CONTENT_INDEX = -1;
	var PADDING_INDEX = 2;
	var BORDER_INDEX = 1;
	var MARGIN_INDEX = 0;

	function swap(elem, options, callback) {
	  var old = {};
	  var style = elem.style;
	  var name = undefined;

	  // Remember the old values, and insert the new ones
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      old[name] = style[name];
	      style[name] = options[name];
	    }
	  }

	  callback.call(elem);

	  // Revert the old values
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      style[name] = old[name];
	    }
	  }
	}

	function getPBMWidth(elem, props, which) {
	  var value = 0;
	  var prop = undefined;
	  var j = undefined;
	  var i = undefined;
	  for (j = 0; j < props.length; j++) {
	    prop = props[j];
	    if (prop) {
	      for (i = 0; i < which.length; i++) {
	        var cssProp = undefined;
	        if (prop === 'border') {
	          cssProp = prop + which[i] + 'Width';
	        } else {
	          cssProp = prop + which[i];
	        }
	        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
	      }
	    }
	  }
	  return value;
	}

	/**
	 * A crude way of determining if an object is a window
	 * @member util
	 */
	function isWindow(obj) {
	  // must use == for ie8
	  /* eslint eqeqeq:0 */
	  return obj != null && obj == obj.window;
	}

	var domUtils = {};

	each(['Width', 'Height'], function (name) {
	  domUtils['doc' + name] = function (refWin) {
	    var d = refWin.document;
	    return Math.max(
	    // firefox chrome documentElement.scrollHeight< body.scrollHeight
	    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
	    d.documentElement['scroll' + name],
	    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
	    d.body['scroll' + name], domUtils['viewport' + name](d));
	  };

	  domUtils['viewport' + name] = function (win) {
	    // pc browser includes scrollbar in window.innerWidth
	    var prop = 'client' + name;
	    var doc = win.document;
	    var body = doc.body;
	    var documentElement = doc.documentElement;
	    var documentElementProp = documentElement[prop];
	    // 标准模式取 documentElement
	    // backcompat 取 body
	    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
	  };
	});

	/*
	 得到元素的大小信息
	 @param elem
	 @param name
	 @param {String} [extra]  'padding' : (css width) + padding
	 'border' : (css width) + padding + border
	 'margin' : (css width) + padding + border + margin
	 */
	function getWH(elem, name, extra) {
	  if (isWindow(elem)) {
	    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
	  } else if (elem.nodeType === 9) {
	    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
	  }
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	  var borderBoxValue = name === 'width' ? elem.offsetWidth : elem.offsetHeight;
	  var computedStyle = getComputedStyleX(elem);
	  var isBorderBox = isBorderBoxFn(elem, computedStyle);
	  var cssBoxValue = 0;
	  if (borderBoxValue == null || borderBoxValue <= 0) {
	    borderBoxValue = undefined;
	    // Fall back to computed then un computed css if necessary
	    cssBoxValue = getComputedStyleX(elem, name);
	    if (cssBoxValue == null || Number(cssBoxValue) < 0) {
	      cssBoxValue = elem.style[name] || 0;
	    }
	    // Normalize '', auto, and prepare for extra
	    cssBoxValue = parseFloat(cssBoxValue) || 0;
	  }
	  if (extra === undefined) {
	    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
	  }
	  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
	  var val = borderBoxValue || cssBoxValue;
	  if (extra === CONTENT_INDEX) {
	    if (borderBoxValueOrIsBorderBox) {
	      return val - getPBMWidth(elem, ['border', 'padding'], which, computedStyle);
	    }
	    return cssBoxValue;
	  }
	  if (borderBoxValueOrIsBorderBox) {
	    var padding = extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which, computedStyle) : getPBMWidth(elem, ['margin'], which, computedStyle);
	    return val + (extra === BORDER_INDEX ? 0 : padding);
	  }
	  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which, computedStyle);
	}

	var cssShow = {
	  position: 'absolute',
	  visibility: 'hidden',
	  display: 'block'
	};

	// fix #119 : https://github.com/kissyteam/kissy/issues/119
	function getWHIgnoreDisplay(elem) {
	  var val = undefined;
	  var args = arguments;
	  // in case elem is window
	  // elem.offsetWidth === undefined
	  if (elem.offsetWidth !== 0) {
	    val = getWH.apply(undefined, args);
	  } else {
	    swap(elem, cssShow, function () {
	      val = getWH.apply(undefined, args);
	    });
	  }
	  return val;
	}

	function css(el, name, v) {
	  var value = v;
	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	    for (var i in name) {
	      if (name.hasOwnProperty(i)) {
	        css(el, i, name[i]);
	      }
	    }
	    return undefined;
	  }
	  if (typeof value !== 'undefined') {
	    if (typeof value === 'number') {
	      value += 'px';
	    }
	    el.style[name] = value;
	    return undefined;
	  }
	  return getComputedStyleX(el, name);
	}

	each(['width', 'height'], function (name) {
	  var first = name.charAt(0).toUpperCase() + name.slice(1);
	  domUtils['outer' + first] = function (el, includeMargin) {
	    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
	  };
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

	  domUtils[name] = function (elem, val) {
	    if (val !== undefined) {
	      if (elem) {
	        var computedStyle = getComputedStyleX(elem);
	        var isBorderBox = isBorderBoxFn(elem);
	        if (isBorderBox) {
	          val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);
	        }
	        return css(elem, name, val);
	      }
	      return undefined;
	    }
	    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
	  };
	});

	// 设置 elem 相对 elem.ownerDocument 的坐标
	function setOffset(elem, offset) {
	  // set position first, in-case top/left are set even on static elem
	  if (css(elem, 'position') === 'static') {
	    elem.style.position = 'relative';
	  }

	  var old = getOffset(elem);
	  var ret = {};
	  var current = undefined;
	  var key = undefined;

	  for (key in offset) {
	    if (offset.hasOwnProperty(key)) {
	      current = parseFloat(css(elem, key)) || 0;
	      ret[key] = current + offset[key] - old[key];
	    }
	  }
	  css(elem, ret);
	}

	module.exports = _extends({
	  getWindow: function getWindow(node) {
	    var doc = node.ownerDocument || node;
	    return doc.defaultView || doc.parentWindow;
	  },
	  offset: function offset(el, value) {
	    if (typeof value !== 'undefined') {
	      setOffset(el, value);
	    } else {
	      return getOffset(el);
	    }
	  },

	  isWindow: isWindow,
	  each: each,
	  css: css,
	  clone: function clone(obj) {
	    var ret = {};
	    for (var i in obj) {
	      if (obj.hasOwnProperty(i)) {
	        ret[i] = obj[i];
	      }
	    }
	    var overflow = obj.overflow;
	    if (overflow) {
	      for (var i in obj) {
	        if (obj.hasOwnProperty(i)) {
	          ret.overflow[i] = obj.overflow[i];
	        }
	      }
	    }
	    return ret;
	  },
	  scrollLeft: function scrollLeft(w, v) {
	    if (isWindow(w)) {
	      if (v === undefined) {
	        return getScrollLeft(w);
	      }
	      window.scrollTo(v, getScrollTop(w));
	    } else {
	      if (v === undefined) {
	        return w.scrollLeft;
	      }
	      w.scrollLeft = v;
	    }
	  },
	  scrollTop: function scrollTop(w, v) {
	    if (isWindow(w)) {
	      if (v === undefined) {
	        return getScrollTop(w);
	      }
	      window.scrollTo(getScrollLeft(w), v);
	    } else {
	      if (v === undefined) {
	        return w.scrollTop;
	      }
	      w.scrollTop = v;
	    }
	  },

	  viewportWidth: 0,
	  viewportHeight: 0
	}, domUtils);

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Range = __webpack_require__(32);
	var Style = __webpack_require__(35);

	function Dom() {
	    this.selection = new Range();
	    this.style = new Style();
	}

	Dom.prototype.styleParse = function(node) {
	    var _this = this;

	    this.node = node;

	    this.style.setNode(node);

	    var attr = function(name, value){

	        if (value){
	            _this.node.setAttribute(name, value);
	        }else{
	            return _this.node.getAttribute(name);
	        }

	        return this;
	    };

	    return {
	        style: this.style,

	        attr: attr
	    }
	};

	module.exports = Dom;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);
	var RangeTable = __webpack_require__(33);
	var RangeParagraph = __webpack_require__(34);

	function Selection(){
	    this.$paragraph = null;

	    this.mode = null;

	    this.op = {

	        /**
	         * p : paragraph
	         * r : run
	         * s : separation ( para, text, table, floating ... )
	         */
	        s : [0, 0],
	        p : [0, 0],
	        r : [0, 0],
	        type : 'text'
	    };

	    this.userSelect = {
	        baseOp : null,
	        moveOp : null,
	        lastOp : null
	    };

	    this.highlightStyle = null;
	    this.holdImageObject = null;
	    this.userSelectBackup = null;

	    this.eventStatus = '';
	}

	Selection.prototype.getSameBlockNode = RangeParagraph.getSameBlockNode;
	Selection.prototype.getSameParentBlock = RangeParagraph.getSameParentBlock;
	Selection.prototype.rangeTable = RangeTable;

	Selection.prototype.setKeyboardEventTime = function(status){
	    this.eventStatus = status;
	};

	Selection.prototype.getKeyboardEventTime = function(){
	    return this.eventStatus;
	};

	Selection.prototype.getHighlightStyle = function(){
	    return this.highlightStyle;
	};

	Selection.prototype.setHighlightStyle = function(highlightStyle){
	    this.highlightStyle = highlightStyle;
	};

	Selection.prototype.getUserSelectBackup = function(){
	    return this.userSelectBackup;
	};

	Selection.prototype.getHoldImageObject = function(){
	    return this.holdImageObject;
	};

	Selection.prototype.setHoldImageObject = function(imageNode){
	    this.holdImageObject = imageNode;
	};

	Selection.prototype.setHoldImageRange = function(){
	    var holdImageObject = this.holdImageObject;

	    if (holdImageObject){
	        var sel = window.getSelection();
	        var rng = document.createRange();

	        sel.removeAllRanges();

	        var parentNode = holdImageObject.parentNode;
	        var imageIndex = 0;

	        for (var i=0, length=parentNode.childNodes.length; i<length; i++){
	            var childNode = parentNode.childNodes[i];

	            if (childNode == holdImageObject){
	                imageIndex = i;
	                break;
	            }
	        }

	        rng.setStart(parentNode, imageIndex);
	        rng.setEnd(parentNode, imageIndex + 1);

	        sel.addRange(rng);
	    }

	    this.holdImageObject = null;
	};


	Selection.prototype.setDefault = function(){
	    var rootNode = this.editorElement;
	    var pIndex = 0;
	    var spanNode = null;

	    walkTheDOM(rootNode, function(node){

	        if (node && node.nodeType == 1 && node.nodeName == 'SPAN'){
	            spanNode = node;
	            return Define.WALK_EXIT;
	        }else if (Define.BLOCK_NODES.indexOf(node.nodeName) > -1) {
	            pIndex ++;
	        }

	    });

	    if (! spanNode){
	        return null;
	    }

	    this.op.p = [pIndex, pIndex];

	    var rangeNode = spanNode;
	    var rangeOffset = 0;

	    if (spanNode.firstChild && spanNode.firstChild.nodeType == 3){
	        rangeNode = spanNode.firstChild;
	        rangeOffset = 0;
	    }

	    var sel = this.getSelection();
	    var rng = document.createRange();

	    rng.setStart(rangeNode, rangeOffset);
	    rng.setEnd(rangeNode, rangeOffset);

	    var _this = this;
	    setTimeout(function(){
	        $(_this.editorElement).focus();
	        sel.removeAllRanges();
	        sel.addRange(rng);

	        if ($.browser.msie){
	            window.scroll(0,0);
	        }
	    }, 20);

	    return rangeNode;
	};

	Selection.prototype.getTableMap = function(){
	    var editorNode = this.editorElement;
	    var pIndex = 0;
	    var sBlockNode = null;
	    var eBlockNode = null;
	    var op = this.op;

	    walkTheDOM(editorNode, function(node){

	        if (Define.BLOCK_NODES.indexOf(node.nodeName) > -1) {
	            if (pIndex == op.p[0]){
	                sBlockNode = node;
	            }

	            if (pIndex == op.p[1]){
	                eBlockNode = node;
	            }

	            if (sBlockNode && eBlockNode){
	                return Define.WALK_EXIT;
	            }

	            pIndex ++;
	        }else if (node.nodeType == 1 && node.nodeName == 'SPAN'){
	            return Define.WALK_CONTINUE;
	        }

	    });

	    if (! sBlockNode || ! eBlockNode){
	        return null;
	    }

	    return RangeTable.getTableMap(this.editorElement, sBlockNode, eBlockNode);
	};

	Selection.prototype.isTableMergeable = function(){
	    return this.getSelectedTd().length > 1;
	};

	var walkTheDOM = function (node, func, noBlock) {

	    if (! noBlock && (! node || Define.BLOCK_NODES.indexOf(node.nodeName) == -1)) {
	        // console.log('you must call block node. ');
	        return false;
	    }

	    var isStop = false;
	    function _walkDOM(_node, _func, _depth) {

	        if (! _node) {
	            return false;
	        }

	        _depth ++;

	        for (var i=0, length=_node.childNodes.length; i<length; i++) {

	            if (isStop || ! _node.childNodes[i]){
	                return false;
	            }

	            var childNode = _node.childNodes[i];
	            var response = _func(childNode,  _depth);
	            if (response === Define.WALK_CONTINUE) {
	                continue;
	            }else if (response === Define.WALK_EXIT) {
	                isStop = true;
	                return false;
	            }else if (response === Define.WALK_REVERSE) {
	                _walkDOM(_node, _func, _depth);
	                return false;
	            }

	            _walkDOM(childNode, _func, _depth);
	        }
	    };

	    var depth = 0;
	    _walkDOM(node, func, depth);
	};

	Selection.prototype.collapseOp = function(){
	    return this.op && this.op.p[0] == this.op.p[1] && this.op.r[0] == this.op.r[1];
	};

	Selection.prototype.getWindowRangeFromPoint = function(left, top){

	    var windowScrollTop = document.body.scrollTop;
	    if (windowScrollTop && windowScrollTop > 0){
	        top -= windowScrollTop;
	    }

	    //커서 위치에 따라서 좌표로 레인지를 잡는 경우 커서노드가 가리는 경우가 있음.
	    var method = "caretPositionFromPoint";
	    var webkit = false;

	    if (! document.caretPositionFromPoint) {
	        method = "caretRangeFromPoint";
	        webkit = true;
	    }

	    //internet explorer...
	    if (! document[method]){
	        if (document.body.createTextRange) {
	            var range = document.body.createTextRange();

	            //ie 의 경우에 텍스트 레인지만을 찾기 때문에 알맞은 위치가 아니면 에러가 발생된다.
	            try{
	                range.moveToPoint(left, top);
	            }catch(e){
	                return null;
	            }

	            range.select();

	            var sel = window.getSelection();
	            var rng = sel.getRangeAt(0);
	            var container = rng.startContainer;
	            var offset = rng.startOffset;
	            sel.removeAllRanges();

	            return {
	                container : container, offset : offset
	            };
	        }
	    }

	    var caret = document[method](left, top);

	    if (! caret){
	        return null;
	    }

	    var node = webkit ? caret.startContainer : caret["offsetNode"];
	    var offset = webkit ? caret.startOffset : caret["offset"];

	    return { container : node, offset : offset }
	};

	Selection.prototype.findTargetBlockNode = function(targetNode){

	    if (targetNode.nodeType == 1 && Define.BLOCK_NODES.indexOf(targetNode.nodeName) > -1){
	        return targetNode;
	    }else{

	        while(targetNode){

	            if (Define.BLOCK_NODES.indexOf(targetNode.nodeName) > -1){
	                return targetNode;
	            }

	            targetNode = targetNode.parentNode;
	        }
	    }
	};

	Selection.prototype.isOpDocumentFirst = function (op) {

	    return op && op.p[0] == 1 && op.r[0] == 0 && op.p[0] == op.p[1] && op.r[0] == op.r[1];
	};

	Selection.prototype.findLastBlock = function(node){
	    var lastBlock = null;
	    walkTheDOM(node, function(_node){
	        if (_node && _node.nodeType == 1 && Define.BLOCK_NODES.indexOf(_node.nodeName) > -1){
	            lastBlock = _node;
	        }
	    });

	    return lastBlock;
	};

	Selection.prototype.containsTagParentsNode = function(node, tags){
	    var rootNode = this.editorElement.firstChild;
	    var curNode = node;

	    while (rootNode != curNode){

	        if (tags.indexOf(curNode.nodeName) > -1){
	            return true;
	        }

	        curNode = curNode.parentNode;
	    }

	    return false;
	};

	Selection.prototype.getParentTagNode = function(node, tags, stopNode){
	    var rootNode = this.editorElement.firstChild;
	    var parentNodes = [];
	    var curNode = node;

	    while (curNode && rootNode != curNode){

	        if (stopNode && stopNode == curNode){
	            break;
	        }

	        if (curNode && tags.indexOf(curNode.nodeName) > -1){
	            parentNodes.push(curNode);
	        }

	        curNode = curNode.parentNode;
	    }

	    return parentNodes;
	};

	var moveTextNode = function(spanNode, spanChildNode, textValue, subIndex){

	    //end op 의 마지막이 텍스트라면 더
	    var newText = textValue.substring(subIndex);
	    if (newText.length == 0 && ! spanChildNode.nextSibling){
	        return;
	    }

	    var cloneNode = spanNode.cloneNode(true);
	    cloneNode.innerHTML = '';

	    cloneNode.appendChild(document.createTextNode(textValue.substring(subIndex)));

	    while(spanChildNode.nextSibling){
	        cloneNode.appendChild(spanChildNode.nextSibling);
	    }

	    var parentNode = spanNode.parentNode;

	    if (spanNode.nextSibling) {
	        parentNode.insertBefore(cloneNode, spanNode.nextSibling);
	    } else {
	        parentNode.appendChild(cloneNode);
	    }

	    spanChildNode.nodeValue = textValue.substring(0, subIndex);

	    if (spanNode.innerHTML == ''){
	        parentNode.removeChild(spanNode);
	    }
	};

	var moveImageNode = function(spanNode, spanChildNode){
	    var cloneNode = spanNode.cloneNode(true);
	    cloneNode.innerHTML = '';

	    while(spanChildNode.nextSibling){
	        cloneNode.appendChild(spanChildNode.nextSibling);
	    }

	    var parentNode = spanNode.parentNode;

	    if (spanNode.nextSibling){
	        parentNode.insertBefore(cloneNode, spanNode.nextSibling);
	    }else{
	        parentNode.appendChild(cloneNode);
	    }

	    if (spanNode.innerHTML == ''){
	        parentNode.removeChild(spanNode);
	    }
	};

	//TODO. 변경 안해도 되는 노드에 대해서 처리 하지 않는 로직 필요.
	var moveALinkNode = function(spanNode, aLinkNode, aLinkChild, subIndex){
	    var cloneNode = spanNode.cloneNode(true);
	    cloneNode.innerHTML = '';

	    var cloneALink = aLinkNode.cloneNode(true);
	    cloneALink.innerHTML = '';
	    cloneNode.appendChild(cloneALink);

	    if (! (aLinkChild.nodeType == 1 && Define.SINGLE_RUN_NODES.indexOf(aLinkChild.nodeName) > -1)){
	        // cloneALink.appendChild(aLinkChild);
	        cloneALink.innerHTML = aLinkChild.nodeValue.substring(subIndex);
	    }

	    while(aLinkChild.nextSibling){
	        cloneALink.appendChild(aLinkChild.nextSibling);
	    }

	    while(aLinkNode.nextSibling){
	        cloneNode.appendChild(aLinkNode.nextSibling);
	    }

	    var parentNode = spanNode.parentNode;

	    if (spanNode.nextSibling) {
	        parentNode.insertBefore(cloneNode, spanNode.nextSibling);
	    } else {
	        parentNode.appendChild(cloneNode);
	    }

	    if (aLinkChild.innerHTML == ''){
	        cloneALink.removeChild(aLinkChild);
	    }

	    if (cloneALink.innerHTML == ''){
	        cloneNode.removeChild(cloneALink);
	    }
	};

	var selectNode = function(blockNode, startRun, endRun, isEndNodeFirst/* 마지막 블록노드를 시작 블록보다 먼저 만난 경우 */){

	    var selectedSpanNodes = [];

	    var isStartNodeSelect = endRun == -1;

	    if (startRun != endRun){
	        var isStartNodeSet = false;
	        var stopped = false;

	        var curRun = 0;

	        //child의 length는 cache 하지 않는다. 노드가 옮겨져 가는 와중에 추가 되어지기 때문에
	        for (var i=0; i<blockNode.childNodes.length; i++){

	            var node = blockNode.childNodes[i];
	            var nodeType = node.nodeType == 1;
	            var nodeName = node.nodeName;

	            if (stopped){
	                break;

	                //블록 노드를 만난경우에는 건너뜀.
	            }else if (nodeType == 1 && Define.BLOCK_NODES.indexOf(nodeName) > -1){
	                if (startRun == curRun){
	                    isStartNodeSet = true;
	                }

	                //<p><span><p> 와 같이 블록과 span이 섞여있을때 offset이 블록에 맞닿아 있을때 중단한다
	                if (isStartNodeSelect && curRun > startRun){
	                    break;
	                }

	                if (! isStartNodeSelect && curRun > endRun){
	                    break;
	                }

	                //<span><p><span> 이렇게 중간에 블록노드가 껴있는 경우에 안에 있는 블록노드의 span을 추가 해줌
	                if (curRun > startRun){
	                    var spanNodes = $(node).find('span').toArray();

	                    if (spanNodes.length > 0){
	                        selectedSpanNodes = [].concat(selectedSpanNodes, spanNodes);
	                    }
	                }

	                curRun ++;

	                if (isEndNodeFirst && curRun == endRun){
	                    var lastSelectedNode = $(node).find('span').last()[0];
	                    if (lastSelectedNode){
	                        selectedSpanNodes.push(lastSelectedNode);
	                    }

	                    break;
	                }

	                continue;
	            }

	            //SPAN 노드를 만난경우에만 진행
	            if (nodeType == 1 && nodeName == 'SPAN'){
	                for (var j=0 ; j<node.childNodes.length; j++){
	                    var childNode = node.childNodes[j];

	                    if (startRun == curRun || isEndNodeFirst){
	                        isStartNodeSet = true;
	                    }

	                    if (isStartNodeSet){
	                        selectedSpanNodes.push(node);
	                    }

	                    if (childNode.nodeType == 3){
	                        var textValue = childNode.nodeValue;
	                        var subIndex = startRun - curRun;
	                        var sumRunTextValue = curRun + textValue.length;

	                        if (! isStartNodeSet && startRun > curRun && startRun <= (sumRunTextValue)) {
	                            moveTextNode(node, childNode, textValue, subIndex);

	                            isStartNodeSet = true;
	                            curRun += subIndex;
	                        }else if (isStartNodeSet && endRun > curRun && endRun <= (sumRunTextValue)){
	                            subIndex = endRun - curRun;

	                            moveTextNode(node, childNode, textValue, subIndex);

	                            stopped = true;
	                            break;
	                        }else{
	                            curRun += textValue.length;
	                        }
	                    }else if (childNode.nodeType == 1 && Define.SINGLE_RUN_NODES.indexOf(childNode.nodeName) > -1){
	                        var subIndex = curRun + 1;
	                        if (! isStartNodeSet && startRun > curRun && startRun <= subIndex){
	                            moveImageNode(node, childNode);

	                            isStartNodeSet = true;
	                        }else if (isStartNodeSet && endRun > curRun && endRun <= subIndex){

	                            moveImageNode(node, childNode);

	                            stopped = true;
	                            break;
	                        }

	                        curRun ++;
	                    }else if (childNode.nodeType == 1 && childNode.nodeName == 'A') {

	                        var aLinkChild = childNode.childNodes;

	                        ///하이퍼링크에서 이미지 같은 경우에는 그냥 옮기면 안되고 클론으로 복사해서 옮겨야한다
	                        for (var k = 0; k < childNode.childNodes.length; k++) {
	                            var linkChild = aLinkChild[k];

	                            var increaseLength = 0;
	                            if (linkChild.nodeType == 1 && linkChild.nodeName && Define.SINGLE_RUN_NODES.indexOf(linkChild.nodeName) > -1){
	                                increaseLength = 1;
	                            }else{
	                                increaseLength = linkChild.nodeValue.length;
	                            }

	                            var subIndex = startRun - curRun;

	                            if (! isStartNodeSet && startRun > curRun && startRun <= (curRun + increaseLength)) {


	                                moveALinkNode(node, childNode, linkChild, subIndex);

	                                if (linkChild.nodeType == 3){
	                                    linkChild.nodeValue = linkChild.nodeValue.substring(0, subIndex);
	                                    curRun += startRun - curRun;
	                                }else{
	                                    curRun ++;
	                                }

	                                isStartNodeSet = true;

	                                break;
	                            } else if (isStartNodeSet && endRun > curRun && endRun <= (curRun + increaseLength)) {

	                                subIndex = endRun - curRun;
	                                moveALinkNode(node, childNode, linkChild, subIndex);

	                                if (linkChild.nodeType == 3){
	                                    linkChild.nodeValue = linkChild.nodeValue.substring(0, subIndex);
	                                    curRun += subIndex;
	                                }else{
	                                    curRun ++;
	                                }

	                                stopped = true;
	                                break;
	                            }

	                            curRun += increaseLength;

	                        }

	                        if (stopped){
	                            break;
	                        }


	                    }
	                }
	            }else if (node.nodeType == 3 || Define.SINGLE_RUN_NODES.indexOf(node.nodeName) > -1){
	                var spanNode = document.createElement('span');
	                $(node).before(spanNode);
	                spanNode.appendChild(node);

	                return selectNode(blockNode, startRun, endRun);
	            }
	        }
	    }else{

	    }

	    return selectedSpanNodes;
	};

	Selection.prototype.getOp = function(node, offset){

	    var rootNode = this.editorElement;
	    var op = {
	        // s : 0,
	        p : 0,
	        r : 0
	    };

	    // normalizeDom(rootNode);

	    //TODO. editor 의 루트가 되는 DOM 을 지정한다.
	    var rangeNode = node;
	    var rangeOffset = offset;

	    //BLOCK 단위의 노드를 제일 먼저 찾는다.
	    var targetBlockNode = this.findTargetBlockNode(rangeNode);

	    if (rangeNode == targetBlockNode){

	        //node 의 짝수인 경우에는 노드의 앞을 가르키고 홀수인경우 노드의 뒤를 가르킴
	        // if (rangeOffset == 0 || rangeOffset % 2 == 0){
	        //     rangeNode = rangeNode.childNodes[rangeOffset];
	        //     rangeOffset = 0;
	        // }else{
	        //     rangeNode = rangeNode.childNodes[rangeOffset - 1];
	        //     rangeOffset = 1;
	        // }

	        if (rangeOffset > 0){
	            rangeNode = node.childNodes[rangeOffset - 1];

	            if (rangeNode && rangeNode.nodeType == 1 && rangeNode.childNodes.length > 0){
	                rangeOffset = rangeNode.childNodes.length;
	            }else{
	                rangeOffset = 1;
	            }
	        }else{
	            rangeNode = node.childNodes[0];
	            rangeOffset = 0;
	        }


	        if (rangeNode && rangeNode.nodeType == 1 && Define.BLOCK_NODES.indexOf(rangeNode.nodeName) > -1){
	            targetBlockNode = rangeNode;
	        }
	    }

	    // ex) div 1,2 사이에 노드가 있다면 블록노드라고 봄
	    var isBlockRange = false;// rangeNode.nodeType == 1 && Define.BLOCK_NODES.indexOf(rangeNode.nodeName) > -1;

	    if (rootNode != targetBlockNode){
	        //s와 p까지의 블록단위의 인덱싱을 한다.
	        walkTheDOM(rootNode, function(node){

	            if (node == targetBlockNode){
	                // if (isBlockRange && rangeOffset == 1){
	                //     op.p ++;
	                // }

	                return Define.WALK_EXIT;
	            }

	            if (Define.BLOCK_NODES.indexOf(node.nodeName) > -1) {
	                op.p ++;
	            }
	        });
	    }

	    if (! isBlockRange){

	        walkTheDOM(targetBlockNode, function(node){

	            var nodeType = node.nodeType == 1;
	            var nodeName = node.nodeName;

	            if (nodeType == 1 && Define.BLOCK_NODES.indexOf(nodeName) > -1) {
	                op.r ++;
	                return Define.WALK_CONTINUE;
	            }

	            //TODO. targetBlockNode 와 node 가 같은 경우
	            if (node == rangeNode){

	                //text node 나 image 노드를 정확하게 가르키지 않는경우에 안에 있는 노드를 찾아 낸다
	                if (nodeType == 1 && node.childNodes && node.childNodes.length > 0 && node == rangeNode){

	                    if (rangeOffset > 0){
	                        rangeNode = node.childNodes[rangeOffset - 1];
	                        rangeOffset = 1;

	                        if (rangeNode.nodeType == 1){
	                            while(rangeNode.lastChild){
	                                rangeNode = rangeNode.lastChild;
	                            }
	                        }

	                        if (rangeNode.nodeType == 3){
	                            rangeOffset = rangeNode.nodeValue.length;
	                        }

	                    }else{
	                        rangeNode = node.childNodes[0];
	                        rangeOffset = 0;
	                    }

	                }else{

	                    op.r += rangeOffset;
	                    return Define.WALK_EXIT;
	                }
	            }else if (node.nodeType == 3){
	                op.r += node.nodeValue.length;
	            }else if (node.nodeType == 1){
	                if (Define.SINGLE_RUN_NODES.indexOf(node.nodeName) > -1){
	                    op.r ++;
	                }

	            }
	        });
	    }

	    return op;
	};

	Selection.prototype.setOp = function(op, selectTable, noSelect){

	    var _this = this;

	    var rootNode = this.editorElement;

	    var paragraphIndex = 0;
	    var blockBoundaryNodes = [];

	    var startSelectNodes = null;
	    var endSelectNodes = null;

	    var isSelectStartNode = false;
	    var selectedSpanNodes = [];

	    var isSameBlockNode = op.p[0] == op.p[1];

	    var parentTableNodes = [];
	    var pTableNextNodes = null;


	    var sBlockNode = null;
	    var eBlockNode = null;

	    // console.log(' op : >>>>', op.p, op.r);
	    // var
	    walkTheDOM(rootNode, function(node){

	        if (pTableNextNodes && pTableNextNodes.length > 0){
	            var pTableIndex = pTableNextNodes.indexOf(node);

	            if (pTableIndex > -1){
	                var tableNode = pTableNextNodes[pTableIndex].previousSibling;

	                $(tableNode).addClass(Define.CLASS.SELECTED_TABLE);                       //=============================> table selected
	                $(tableNode).find('span').addClass(Define.CLASS.SELECTED);
	            }
	        }

	        //시작 블록이 먼저 생기고 끝 블록이 나중에 생기는 경우 depth 가 깊어져서 끝 블록이 child 노드에 child 노드로 있는 경우도 있지만
	        //시작 블록이 child 노드에 child 노드에 있고 끝 블록이 상위 노드의 다음 노드에 위치한다면 찾는게 애매할수 있다
	        if (Define.BLOCK_NODES.indexOf(node.nodeName) > -1) {

	            if (isSelectStartNode && node.nodeType == 1 && node.nodeName == 'TABLE'){     //=============================> table selected
	                $(node).addClass(Define.CLASS.SELECTED_TABLE);
	                $(node).find('span').addClass(Define.CLASS.SELECTED);
	            }

	            //시작 위치값과 동일한 경우
	            if (paragraphIndex == op.p[0]){
	                sBlockNode = node;
	                parentTableNodes = _this.getParentTagNode(node, ['TABLE']);

	                if (parentTableNodes.length > 0){
	                    pTableNextNodes = [];
	                }

	                for (var i=0, length=parentTableNodes.length; i<length; i++) {
	                    var pTableNode = parentTableNodes[i];
	                    var pTableNextNode = pTableNode.nextSibling;

	                    if (pTableNextNode) {
	                        pTableNextNodes.push(pTableNextNode);
	                    }
	                }

	                if (! pTableNextNode || (pTableNextNode && pTableNextNode.length == 0)){
	                    pTableNextNode = null;
	                }

	                blockBoundaryNodes.push(node);

	                if (isSameBlockNode){
	                    startSelectNodes = selectNode(node, op.r[0], op.r[1]);

	                    selectedSpanNodes = startSelectNodes;
	                    return Define.WALK_EXIT;
	                }else{
	                    startSelectNodes = selectNode(node, op.r[0], -1, false);

	                    if (startSelectNodes.length > 0){
	                        startSelectNodes = startSelectNodes[0];
	                    }

	                    if (! startSelectNodes || startSelectNodes.length == 0){
	                        isSelectStartNode = true;

	                        //이 경우는 블록노드의 마지막 인덱스를 가르키는 경우인데 이때는 마지막 노드가 block 노드인지를 체크해보고 블록노드가 아니라면 건너뛰고 블록노드라면 둔다
	                        // if (node.lastChild && node.lastChild.nodeType == 1 && Define.BLOCK_NODES.indexOf(node.lastChild.nodeName) > -1){
	                        //
	                        //     var lastChild = node.lastChild;
	                        //
	                        //     while(lastChild.previousSibling && lastChild.previousSibling.nodeType == 1 && Define.BLOCK_NODES.indexOf(lastChild.previousSibling.nodeName) > -1){
	                        //         lastChild = lastChild.previousSibling;
	                        //     }
	                        //
	                        //     startSelectNodes = $(lastChild).find('span')[0];
	                        //
	                        //     if (startSelectNodes){
	                        //         isSelectStartNode = false;
	                        //     }
	                        // }else{
	                            paragraphIndex ++;
	                            return Define.WALK_CONTINUE;
	                        // }

	                    }
	                }

	                //끝 위치값과 동일한 경우
	            }else if (paragraphIndex == op.p[1]){

	                eBlockNode = node;
	                endSelectNodes = selectNode(node, 0, op.r[1], true);

	                //종료 노드의 위치가 0인데 앞으로 div 가 여러개 있다면 div 노드들을 다 계산해야함
	                if (op.r[1] == 0){
	                    if (node.firstChild && Define.BLOCK_NODES.indexOf(node.firstChild.nodeName) > -1){
	                        var firstChild = node.firstChild;

	                        while(firstChild && Define.BLOCK_NODES.indexOf(firstChild.nodeName) > -1){
	                            firstChild = firstChild.nextSibling;
	                        }

	                        if (firstChild && firstChild.nodeType == 1 && firstChild.nodeName == 'SPAN'){
	                            endSelectNodes = [firstChild];
	                        }
	                    }
	                }
	                if (endSelectNodes.length > 0){
	                    endSelectNodes = endSelectNodes[endSelectNodes.length - 1];
	                }else{
	                    return Define.WALK_EXIT;
	                }

	            }

	            paragraphIndex ++;
	        }

	        if (node.nodeType == 1 && node.nodeName == 'SPAN'){

	            if (node == startSelectNodes){
	                isSelectStartNode = true;
	            }

	            if (node == endSelectNodes){

	                selectedSpanNodes.push(node);
	                return Define.WALK_EXIT;
	            }else if (isSelectStartNode){
	                selectedSpanNodes.push(node);
	            }
	            //SPAN 으로 감싸져있지 않은 노드들은 감쌈 
	        }else if (Util.isTextNode(node) || Util.isSingleRunNode(node) || Util.isTagName(node, 'A')){
	            if (! Util.isTagName(node.parentNode, 'SPAN')){
	                if (! (Util.isTextNode(node) && Util.isTagName(node.parentNode, 'A'))){
	                    var cloneNode = node.cloneNode(false);
	                    var spanNode = document.createElement('span');
	                    spanNode.appendChild(cloneNode);
	                    $(node).before(spanNode);
	                    $(node).remove();

	                    return Define.WALK_REVERSE;
	                }

	            }
	        }
	    });

	    var tableSelectedNodes = [];
	    if (selectedSpanNodes.length > 0){
	        if (selectTable && sBlockNode && eBlockNode){

	            var $selectedTable = this.getSelectedTable();
	            $selectedTable.find('span').addClass(Define.CLASS.SELECTED);

	            var $selectedTdNodes = this.getSelectedTd();

	            if ($selectedTdNodes.length > 0){
	                this.removeSelected(true);

	                var $selectedSpanNode = $selectedTdNodes.find('span');

	                $selectedSpanNode.addClass(Define.CLASS.SELECTED);
	                selectedSpanNodes = $selectedSpanNode.toArray();

	            }else{
	                for (var i=0; i<selectedSpanNodes.length; i++){
	                    $(selectedSpanNodes[i]).addClass(Define.CLASS.SELECTED);
	                }
	            }
	            // tableSelectedNodes = RangeTable.selectTable(this.editorElement, sBlockNode, eBlockNode);

	            // if (tableSelectedNodes && tableSelectedNodes.length > 1){
	            //
	            //     var $tableSelectedNode = this.getSelectedTable();
	            //
	            //     // var $tdSelectedNode = this.getSelectedTd();
	            //     // $tdSelectedNode.find('span').removeClass(Define.CLASS.SELECTED);
	            //     // $tdSelectedNode.removeClass(Define.CLASS.SELECTED_TD);
	            //     $tableSelectedNode.find('span').removeClass(Define.CLASS.SELECTED);
	            //     $tableSelectedNode.removeClass(Define.CLASS.SELECTED_TABLE);
	            //
	            //     for (var i=0,length=tableSelectedNodes.length; i<length; i++){
	            //         var tdNode = tableSelectedNodes[i];
	            //
	            //         $(tdNode).addClass(Define.CLASS.SELECTED_TD);
	            //         $(tdNode).find('span').addClass(Define.CLASS.SELECTED);
	            //     }
	            // }else{
	            //     for (var i=0; i<selectedSpanNodes.length; i++){
	            //         $(selectedSpanNodes[i]).addClass(Define.CLASS.SELECTED);
	            //     }
	            // }
	        }else{
	            for (var i=0; i<selectedSpanNodes.length; i++){
	                $(selectedSpanNodes[i]).addClass(Define.CLASS.SELECTED);
	            }
	        }
	    }

	    if (sBlockNode){
	        var getBlockList = function (node) {
	            var nList = [];

	            for (var i = 0, length = node.childNodes.length; i < length; i++) {
	                nList.push(node.childNodes[i]);
	            }

	            return nList;
	        };

	        var startBlockChildList = getBlockList(sBlockNode);
	        var mergeableNode = function(node){
	            return node && node.nodeType == 1 && (node.nodeName == 'SPAN' || node.nodeName == 'A');
	        };

	        var doMerge = function(blockChildList){
	            for (var i=0,length=blockChildList.length; i<length; i++){
	                var curNode = blockChildList[i];
	                var nextNode = blockChildList[i+1];

	                if (nextNode && mergeableNode(curNode) && mergeableNode(nextNode) &&
	                    curNode.parentNode == nextNode.parentNode && curNode.cloneNode(false).isEqualNode(nextNode.cloneNode(false))){

	                    for (var j=0,jLength=nextNode.childNodes.length; j<jLength; j++){
	                        var firstChild = nextNode.childNodes[j];

	                        curNode.appendChild(firstChild.cloneNode(true));
	                    }

	                    doMerge(getBlockList(curNode));

	                    if (curNode.normalize){
	                        curNode.normalize();
	                    }

	                    $(nextNode).remove();

	                    i++;
	                }else if (curNode.nodeType == 1 && (curNode.nodeName == 'SPAN' || curNode.nodeName == 'A') && curNode.innerHTML == ''){
	                    $(curNode).remove();
	                }
	            }
	        };

	        if (!eBlockNode){
	            eBlockNode = sBlockNode;
	        }

	        if (sBlockNode == eBlockNode){
	            doMerge(startBlockChildList);
	        }else{
	            var endBlockChildList = getBlockList(eBlockNode);

	            doMerge(startBlockChildList);
	            doMerge(endBlockChildList);
	        }

	        selectedSpanNodes = this.getSelectedNode().toArray();
	    }

	    if (noSelect){
	        this.removeSelected();
	    }

	    return {
	        selectedSpanNodes : selectedSpanNodes,
	        tableSelectedNodes : tableSelectedNodes
	    }
	};

	Selection.prototype.findNextNode = function(editableRootNode, node, callback){
	    if (! node || node == editableRootNode){
	        return null;
	    }

	    var findNextNode = function(_node, isNextNode, isParentNode, isChildNode){
	        if (_node == editableRootNode){
	            return;
	        }

	        var backupNode = _node.nextSibling || _node.parentNode;
	        var isNext = _node.nextSibling ? true : false;

	        var response = callback(_node, isNextNode, isParentNode, isChildNode);

	        if (response == Define.WALK_EXIT){
	            return ;
	        }else if (! _node || ! _node.parentNode){
	            _node = backupNode;

	            // console.log('element were delete.');

	            if (isNext){
	                return findNextNode(_node, true, false, false);
	            }else{
	                return findNextNode(_node, false, true, false);
	            }
	        }

	        if (response == Define.WALK_EXIT){
	            return ;
	        }else {
	            if (response != Define.WALK_CONTINUE && ! isParentNode && _node.firstChild){
	                return findNextNode(_node.firstChild, false, false, true);
	            }else if (_node.nextSibling){
	                return findNextNode(_node.nextSibling, true, false, false);
	            }else{
	                return findNextNode(_node.parentNode, false, true, false);
	            }
	        }
	    };

	    findNextNode(node, false, false, false);
	};

	Selection.prototype.setOpTd = function(op, selectTable, noSelect){

	    if (op.p[0] == op.p[1] && op.r[0] == op.r[1]){
	        return;
	    }

	    var sRange = this.getOpNode(op.p[0], op.r[0]);
	    var eRange = this.getOpNode(op.p[1], op.r[1]);

	    if (sRange.container && eRange.container){

	        // console.log(sRange.container, eRange.container);
	        // sRange.container
	        this.findNextNode(this.getEditableRootNode(), sRange.container, function(curNode){
	            // console.log('cur node :', curNode)
	            if (curNode == eRange.container){
	                // console.log('cur node : ', curNode);
	                return Define.WALK_EXIT;
	            }

	            if (Util.isTagName(curNode, 'TABLE')){
	                $(curNode).addClass(Define.CLASS.SELECTED_TABLE);
	                $(curNode).find('span').addClass(Define.CLASS.SELECTED);
	            }
	        });
	    }
	};

	Selection.prototype.getBlockList = function (node) {
	    var nList = [];

	    for (var i = 0, length = node.childNodes.length; i < length; i++) {
	        nList.push(node.childNodes[i]);
	    }

	    return nList;
	};

	Selection.prototype.getSelection = function(){
	    if (window.getSelection){
	        return window.getSelection();
	    }else{
	        return document.selection;
	    }
	};

	Selection.prototype.getRange = function(){
	    var sel = this.getSelection();

	    var rng = null;
	    if (sel.getRangeAt){
	        try{
	            rng = sel.getRangeAt(0);
	        }catch(e){}
	    }

	    return rng;
	};

	Selection.prototype.setRange = function(rng){
	    var sel = this.getSelection();

	    sel.removeAllRanges();
	    sel.addRange(rng);
	};

	Selection.prototype.removeRange = function(){
	    var sel = this.getSelection();

	    if (sel && sel.removeAllRanges){
	        sel.removeAllRanges();
	    }
	};

	Selection.prototype.init = function(){
	    // this.set();


	    // get op

	    // set op

	    // return node
	};

	Selection.prototype.selectAll = function(){
	    var editorNode = this.editorElement;

	    var selectedSpanNodes = [];
	    walkTheDOM(editorNode, function(node){
	        if (node.nodeType == 1 && node.nodeName == 'SPAN'){
	            selectedSpanNodes.push(node);

	            return Define.WALK_CONTINUE;
	        }else if (node.nodeType == 1 && node.nodeName == 'TABLE'){
	            selectedSpanNodes = [].concat(selectedSpanNodes, $(node).find('span').toArray());

	            $(node).addClass(Define.CLASS.SELECTED_TABLE);
	        }else if (Util.isTextNode(node) || Util.isSingleRunNode(node) || Util.isTagName(node, 'A')){
	            if (! Util.isTagName(node.parentNode, 'SPAN')){
	                if (! (Util.isTextNode(node) && Util.isTagName(node.parentNode, 'A'))){
	                    var cloneNode = node.cloneNode(false);
	                    var spanNode = document.createElement('span');
	                    spanNode.appendChild(cloneNode);
	                    $(node).before(spanNode);
	                    $(node).remove();

	                    return Define.WALK_REVERSE;
	                }
	            }
	        }
	    });

	    if (selectedSpanNodes.length > 0){


	        for (var i=0, length=selectedSpanNodes.length; i<length; i++){
	            $(selectedSpanNodes[i]).addClass(Define.CLASS.SELECTED);
	        }

	        var startOp = this.getOp(selectedSpanNodes[0], 0);
	        var endOp = this.getOp(selectedSpanNodes[selectedSpanNodes.length - 1], 1);

	        this.op = {
	            p : [startOp.p, endOp.p],
	            r : [startOp.r, endOp.r]
	        };

	        if (selectedSpanNodes.length == 1) {

	            this.setWindowRange(selectedSpanNodes[0], 0);
	        } else {
	            var firstNode = selectedSpanNodes[0].firstChild;
	            var lastNode = selectedSpanNodes[selectedSpanNodes.length - 1].lastChild;
	            var startOffset = 0;
	            var endOffset = 0;

	            if (!lastNode) {
	                lastNode = selectedSpanNodes[selectedSpanNodes.length - 1];
	            }

	            if (!firstNode) {
	                firstNode = selectedSpanNodes[0];
	            }

	            lastNode = lastNode.nodeType == 3 ? lastNode : lastNode.parentNode;

	            if (lastNode.nodeType == 3) {
	                endOffset = lastNode.nodeValue.length;
	            } else if (lastNode.nodeType == 1) {
	                endOffset = 1;
	            }

	            this.setWindowRange(firstNode, 0);
	        }
	    }
	};

	Selection.prototype.getEditableRootNode = function(){
	    return this.editorElement.firstChild;
	};

	Selection.prototype.get = function(windowRange, noSelectedClass){

	    var $selectedNodes = this.getSelectedNode();
	    var $selectedTdNodes = this.getSelectedTd();
	    var $selectedTableNodes = this.getSelectedTable();

	    if ($selectedTdNodes.length > 0){

	        var selectedRange = this.applyRangeOfSelectedClass($selectedNodes);
	        if (selectedRange && selectedRange.startContainer && selectedRange.endContainer){
	            var newSop = this.getOp(selectedRange.startContainer, selectedRange.startOffset);
	            var newEop = newSop;

	            if (! (selectedRange.startContainer == selectedRange.endContainer && selectedRange.startOffset == selectedRange.endOffset)){
	                newEop = this.getOp(selectedRange.endContainer, selectedRange.endOffset);
	            }

	            this.op = {
	                p : [newSop.p, newEop.p],
	                r : [newSop.r, newEop.r]
	            };

	            var rangeInfo = Util.cloneObject(this.op);
	            rangeInfo.collapsed = this.op.p[0] == this.op.p[1] && this.op.r[0] == this.op.r[1];

	            return rangeInfo;
	        }
	    }

	    var range = windowRange || this.getRange();
	    if (range){

	        if ($(range.startContainer).hasClass(Define.CLASS.IMAGE_RESIZE_HANDLER)){
	            var rangeInfo = Util.cloneObject(this.op);
	            rangeInfo.collapsed = this.op.p[0] == this.op.p[1] && this.op.r[0] == this.op.r[1];

	            return rangeInfo;
	        }

	        try{

	            var sOp = this.getOp(range.startContainer, range.startOffset);
	            var eOp = sOp;

	            if (! (range.startContainer == range.endContainer && range.startOffset == range.endOffset)){
	                eOp = this.getOp(range.endContainer, range.endOffset);
	            }

	            this.op = {
	                p : [sOp.p, eOp.p],
	                r : [sOp.r, eOp.r]
	            };


	        }catch (e){
	            console.log(e);
	        }

	    }

	    var rangeInfo = Util.cloneObject(this.op);
	    rangeInfo.collapsed = this.op.p[0] == this.op.p[1] && this.op.r[0] == this.op.r[1];

	    return rangeInfo;
	};

	Selection.prototype.getOpData = function(){
	    return Util.cloneObject(this.op);
	};

	Selection.prototype.nodeIndexOf = function(node, target){
	    var index = -1;

	    if (! (node instanceof Node) || ! node.childNodes){
	        return index;
	    }

	    for (var i=0, length = node.childNodes.length; i<length; i++){
	        if (target == node.childNodes[i]){

	            index = i;
	            break;
	        }
	    }

	    return index;
	};

	Selection.prototype.getParentBlockNode = function(node){
	    var editorNode = this.editorElement.firstChild;

	    while(node && editorNode != node){
	        if (node && node.nodeType == 1 && Define.BLOCK_NODES.indexOf(node.nodeName) > -1){
	            break;
	        }

	        node = node.parentNode;
	    }


	    return node;
	};

	Selection.prototype.getOpNode = function(p, r){

	    var _this = this;

	    var rootNode = this.editorElement;
	    var distPIndex = p;
	    var distRIndex = r;

	    var curPIndex = 0;
	    var curRIndex = 0;

	    var container = null;
	    var offset = 0;

	    //1. block 노드를 찾음
	    //2. run index에 위치한 span node 를 찾음
	    //3. span node 안에 있는 컨텐트를 찾음

	    var lastChild = null;
	    walkTheDOM(rootNode, function(node){
	        if (Define.BLOCK_NODES.indexOf(node.nodeName) > -1){

	            if (curPIndex == distPIndex){

	                container = node;
	                walkTheDOM(node, function(nodeInBlock){

	                    container = nodeInBlock;
	                    offset = _this.nodeIndexOf(node, nodeInBlock);

	                    if (Define.BLOCK_NODES.indexOf(nodeInBlock.nodeName) > -1){
	                        curRIndex ++;
	                        return Define.WALK_CONTINUE;
	                    }else if (nodeInBlock.nodeType == 1 && nodeInBlock.nodeName == 'SPAN'){

	                        var spanNodeRunIndex = getRunIndex(nodeInBlock);
	                        var sumIndex = (curRIndex + spanNodeRunIndex);
	                        // var overflowIndex = sumIndex - distRIndex;

	                        if (sumIndex >= distRIndex) {
	                            var contentRunIndex = curRIndex;
	                            walkTheDOM(nodeInBlock, function(nodeInSpanNode){

	                                if (nodeInSpanNode.nodeType == 3){

	                                    if ((contentRunIndex + nodeInSpanNode.nodeValue.length) >= distRIndex){
	                                        container = nodeInSpanNode;
	                                        offset = distRIndex - contentRunIndex;

	                                        return Define.WALK_EXIT;
	                                    }

	                                    contentRunIndex += nodeInSpanNode.nodeValue.length;

	                                }else if (Define.SINGLE_RUN_NODES.indexOf(nodeInSpanNode.nodeName) > -1){
	                                    contentRunIndex ++;
	                                    if (contentRunIndex >= distRIndex){

	                                        container = nodeInSpanNode.parentNode;

	                                        if (distRIndex == 0 || curRIndex == distRIndex){
	                                            offset = 0;
	                                        }else{
	                                            offset = _this.nodeIndexOf(nodeInSpanNode.parentNode, nodeInSpanNode);
	                                            if (/*contentRunIndex > */distRIndex > 0){
	                                                offset ++;
	                                            }
	                                        }

	                                        return Define.WALK_EXIT;
	                                    }
	                                }
	                            }, true);

	                            return Define.WALK_EXIT;
	                        }

	                        curRIndex += spanNodeRunIndex;
	                        // return Define.WALK_CONTINUE;
	                    }
	                });

	                return Define.WALK_EXIT;
	            }

	            curPIndex ++;
	        }

	        lastChild = node;
	    });

	    if (! container){
	        if (lastChild){
	            container = lastChild;

	            if (container.nodeType == 3){
	                offset = container.nodeValue.length;
	            }else{
	                offset = this.nodeIndexOf(container.parentNode, container) + 1;
	            }
	        }else{
	            return null;
	        }
	    }else{
	        if (container.nextSibling){
	            var nextNode = container.nextSibling;

	            if (Util.isBlockNode(nextNode)){


	            }
	        }
	    }

	    return {
	        container : container, offset : offset
	    }
	};

	Selection.prototype.getOpNodeInBlock = function(blockNode, r){
	    var _this = this;

	    var distRIndex = r;
	    var curRIndex = 0;

	    //1. block 노드를 찾음
	    //2. run index에 위치한 span node 를 찾음
	    //3. span node 안에 있는 컨텐트를 찾음
	    var foundNode = null;
	    walkTheDOM(blockNode, function(node){

	        if (Define.BLOCK_NODES.indexOf(node.nodeName) > -1){
	            curRIndex ++;
	            return Define.WALK_CONTINUE;
	        }else if (node.nodeType == 1 && node.nodeName == 'SPAN'){
	            var spanNodeRunIndex = _this.getRunIndex(node);
	            var sumIndex = (curRIndex + spanNodeRunIndex);

	            if (sumIndex >= distRIndex) {
	                foundNode = node;
	                return Define.WALK_EXIT;
	            }

	            curRIndex += spanNodeRunIndex;
	        }

	    });

	    return foundNode;
	};



	//selected 된 클래스를 통해서 window range를 설정
	Selection.prototype.applyRangeOfSelectedClass = function($selectedNodes){
	    var sel = this.getSelection();
	    var rng = document.createRange();

	    // sel.removeAllRanges();

	    if ($selectedNodes.length == 0) {
	        return rng;
	    }

	    var selectedTd = this.getSelectedTd().toArray();
	    if (selectedTd.length > 0) {
	        var left = -1;

	        var maxLeftTdNode = null;

	        for (var i = 0, length = selectedTd.length; i < length; i++) {
	            var tdNode = selectedTd[i];
	            var tdOffsetLeft = tdNode.offsetLeft;

	            if (tdOffsetLeft >= left) {
	                left = tdOffsetLeft;
	                maxLeftTdNode = tdNode;
	            }
	        }

	        var lastSelectTdNode = selectedTd[selectedTd.length - 1];
	        var lastTdNodeLeft = lastSelectTdNode.offsetLeft + lastSelectTdNode.offsetWidth;
	        if (lastTdNodeLeft > left){
	            maxLeftTdNode = lastSelectTdNode;
	        }

	        var lastSpanNode = $(maxLeftTdNode).find('span').last()[0];
	        $selectedNodes.push(lastSpanNode);
	    }



	    if ($selectedNodes.length == 1) {

	        rng.setStart($selectedNodes[0], 0);
	        rng.setEnd($selectedNodes[0], 1);

	        try {
	            sel.removeAllRanges();
	            sel.addRange(rng);
	        } catch (exception) {
	            setTimeout(function(){
	                sel.removeAllRanges();
	                sel.addRange(rng);
	            }, 0);
	        }
	    } else {
	        var firstNode = $selectedNodes[0].firstChild;
	        var lastNode = $selectedNodes[$selectedNodes.length - 1].lastChild;
	        var startOffset = 0;
	        var endOffset = 0;

	        if (!lastNode) {
	            lastNode = $selectedNodes[$selectedNodes.length - 1];
	        }

	        if (!firstNode) {
	            firstNode = $selectedNodes[0];
	        }

	        lastNode = lastNode.nodeType == 3 ? lastNode : lastNode.parentNode;

	        if (lastNode.nodeType == 3) {
	            endOffset = lastNode.nodeValue.length;
	        } else if (lastNode.nodeType == 1) {
	            endOffset = 1;
	        }

	        rng.setStart(firstNode, startOffset);
	        rng.setEnd(lastNode, endOffset);

	        try {
	            sel.removeAllRanges();
	            sel.addRange(rng);
	        } catch (exception) {
	            setTimeout(function(){
	                sel.removeAllRanges();
	                sel.addRange(rng);
	            }, 0);
	        }
	    }

	    return rng;
	};

	Selection.prototype.removeModifyTargetNode = function(){
	    $(this.editorElement).find('.' + Define.CLASS.KK_MODIFY_OBJECT).removeClass(Define.CLASS.KK_MODIFY_OBJECT);
	};

	Selection.prototype.setModifyTargetNode = function(node){
	    this.removeModifyTargetNode();

	    if (node) {
	        $(node).addClass(Define.CLASS.KK_MODIFY_OBJECT);
	    }
	};

	Selection.prototype.getModifyTargetNode = function(){
	    return $(this.editorElement).find('.' + Define.CLASS.KK_MODIFY_OBJECT);
	};

	Selection.prototype.getSelectedNode = function(){
	    return $(this.editorElement).find('.' + Define.CLASS.SELECTED);
	};

	Selection.prototype.getSelectedTable = function(){
	    return $(this.editorElement).find('.' + Define.CLASS.SELECTED_TABLE);
	};

	Selection.prototype.getSelectedTd = function(){
	    return $(this.editorElement).find('.' + Define.CLASS.SELECTED_TD);
	};

	Selection.prototype.setWindowRange = function(node, offset, node2, offset2){
	    var sel = window.getSelection();
	    var rng = document.createRange();

	    try{
	        rng.setStart(node, offset);
	        rng.setEnd(node2 || node, offset2 || offset);

	        if ($.browser.msie){
	            try{
	                window.getSelection().removeAllRanges();
	            }catch(e1){
	                var range = document.body.createTextRange();
	                range.moveToElementText(node);
	                range.collapse();
	                range.select();
	            }
	        }else{
	            window.getSelection().removeAllRanges();
	        }

	        sel.addRange(rng);

	    }catch(e){
	        console.log('range error.', e);
	        return true;
	    }
	};

	Selection.prototype.getSelectedBoundaryNode = function(startNode, endNode){

	    if (! startNode || ! endNode || ! startNode instanceof Node || ! endNode instanceof Node){
	        return [];
	    }

	    var boundaryNode = [];
	    var paragraphIndex = 0;
	    var isSelectStartNode = false;
	    var endNodeParent = endNode.parentNode;

	    walkTheDOM(this.getEditableRootNode(), function(node){

	        //시작 블록이 먼저 생기고 끝 블록이 나중에 생기는 경우 depth 가 깊어져서 끝 블록이 child 노드에 child 노드로 있는 경우도 있지만
	        //시작 블록이 child 노드에 child 노드에 있고 끝 블록이 상위 노드의 다음 노드에 위치한다면 찾는게 애매할수 있다
	        if (Define.BLOCK_NODES.indexOf(node.nodeName) > -1) {
	            if (isSelectStartNode && endNodeParent != node){
	                boundaryNode.push(node);
	            }

	            paragraphIndex ++;
	        }else if (node.nodeType == 1 && node.nodeName == 'SPAN'){
	            if (node == endNode){
	                boundaryNode.push(node);
	                return Define.WALK_EXIT;
	            }else{

	                if (isSelectStartNode){
	                    boundaryNode.push(node);
	                }else if (node == startNode){

	                    boundaryNode.push(node);
	                    isSelectStartNode = true;
	                }

	                return Define.WALK_CONTINUE;
	            }
	        }
	    });

	    if (boundaryNode.length > 0){

	        var endParentNodes = [];
	        var rootNode = this.getEditableRootNode();
	        var parentNode = endNodeParent;

	        while(rootNode != parentNode){
	            endParentNodes.push(parentNode);
	            parentNode = parentNode.parentNode;
	        }

	        for (var i=0, length=endParentNodes.length; i<length; i++){
	            var pNode = endParentNodes[i];
	            var index = boundaryNode.indexOf(pNode);
	            if (index > -1){
	                boundaryNode.splice(index, 1);
	            }
	        }
	    }

	    return boundaryNode;
	};

	Selection.prototype.getBlockBoundary = function(op){
	    var blockBoundaryNodes = [];

	    var selectedNodes = this.getSelectedNode();
	    var selectedTdNodes = this.getSelectedTd();

	    if (selectedTdNodes.length > 0){
	        var selectedTableNodes = this.getSelectedTable();

	        if (selectedTableNodes.length) {
	            blockBoundaryNodes = blockBoundaryNodes.concat(selectedTableNodes.toArray());
	        }

	        this.removeSelected(true);
	        var $selectedSpanNodes = selectedTdNodes.find('span');
	        $selectedSpanNodes.addClass(Define.CLASS.SELECTED);

	        selectedNodes = $selectedSpanNodes;
	    }

	    if (selectedNodes.length > 0){
	        selectedNodes = selectedNodes.toArray();

	        var selectedTdNodes = this.getSelectedTd();

	        if (selectedTdNodes.length > 0){

	            this.removeSelected(true);

	            for (var i=0,length=selectedTdNodes.length; i<length; i++){
	                var selectedTdNode = selectedTdNodes[i];

	                selectedNodes = $(selectedTdNode).find('span').toArray();

	                for (var j=0,jLength=selectedNodes.length; j<jLength; j++){
	                    var selectedNode = selectedNodes[j];

	                    $(selectedNode).addClass(Define.CLASS.SELECTED);
	                    if (blockBoundaryNodes.indexOf(selectedNode.parentNode) == -1){
	                        blockBoundaryNodes.push(selectedNode.parentNode);
	                    }
	                }
	            }
	        }else{
	            for (var i=0,length=selectedNodes.length; i<length; i++){
	                var selectedNode = selectedNodes[i];

	                if (blockBoundaryNodes.indexOf(selectedNode.parentNode) == -1){
	                    blockBoundaryNodes.push(selectedNode.parentNode);
	                }
	            }
	        }

	    }else if (op){
	        var targetNode = this.getInsertableNode(op.p[0], op.r[0]);

	        targetNode.setAttribute('id', Define.TEMP);
	        targetNode.setAttribute('class', Define.CLASS.SELECTED);
	        targetNode.appendChild(document.createTextNode(Define.NBSP));

	        blockBoundaryNodes.push(targetNode.parentNode);

	    }

	    return blockBoundaryNodes;
	};

	Selection.prototype.set = function(op/*, noAddRange, isNotRemoveSelected*/){
	    if (op){
	        this.op = op;
	    }

	    // var paragraphs = this.getPByIndex(this.op.p);
	    // var sel = this.getWindowSelection();
	    // var rng = document.createRange();
	    //
	    // sel.removeAllRanges();
	    //
	    // if (!isNotRemoveSelected) {
	    //     this.removeSelected();
	    // }
	    //
	    // var startWindowRange = null;
	    // var endWindowRange = null;
	    //
	    // try{
	    //     startWindowRange = this.getNodeOffsetToRange(paragraphs[0], this.op.r[0]);
	    //     endWindowRange = this.getNodeOffsetToRange(paragraphs[1], this.op.r[1]);
	    // }catch(e){
	    //     console.log(e);
	    //     throw new Error(e);
	    // }
	    //
	    // rng.setStart(startWindowRange.node, startWindowRange.offset);
	    // rng.setEnd(endWindowRange.node, endWindowRange.offset);
	    //
	    // if (!rng.collapsed){
	    //     this.fragmentRunNode(rng);
	    // }
	    //
	    // if (noAddRange && noAddRange === true){
	    //     return rng;
	    // }
	    //
	    // sel.addRange(rng);
	};

	Selection.prototype.removeSelected = function(onlySpan){
	    var $element = $(this.editorElement);

	    $element.find("." + Define.CLASS.SELECTED).removeClass(Define.CLASS.SELECTED);

	    if (!onlySpan){
	        $element.find("." + Define.CLASS.SELECTED_TD).removeClass(Define.CLASS.SELECTED_TD);
	        $element.find("." + Define.CLASS.SELECTED_TABLE).removeClass(Define.CLASS.SELECTED_TABLE);
	    }
	};


	var getRunIndex = function (runNode) {
	    var runIndex = 0;

	    walkTheDOM(runNode, function(node){
	        if (node.nodeType == 3){
	            runIndex += node.nodeValue.length;
	        }else if (node.nodeType == 1 && Define.SINGLE_RUN_NODES.indexOf(node.nodeName) > -1){
	            runIndex ++;
	        }
	    }, true);

	    return runIndex;
	};

	Selection.prototype.getRunIndex = getRunIndex;

	Selection.prototype.findRunNode = function(blockNode, callback){
	    walkTheDOM(blockNode, function(node){
	        if (node.nodeType == 3){
	            callback(node);
	        }else if (node.nodeType == 1 && Define.SINGLE_RUN_NODES.indexOf(node.nodeName) > -1){
	            callback(node);
	        }
	    }, true);
	};

	Selection.prototype.isOpChange = function(op){

	    var rootNode = this.editorElement;
	    var paragraphIndex = 0;

	    var nodeOpChange = false;

	    if (op.p[0] == op.p[1]){
	        return false;
	    }

	    walkTheDOM(rootNode, function(node){

	        if (Define.BLOCK_NODES.indexOf(node.nodeName) > -1) {

	            //시작 위치값과 동일한 경우
	            if (paragraphIndex == op.p[0] || paragraphIndex == op.p[1]){

	                var isStart = paragraphIndex == op.p[0];
	                var targetNode = node;
	                var targetOffset = op.p[0] == paragraphIndex ? op.r[0] : op.r[1];

	                if (targetNode){
	                    var runIndex = 0;
	                    var found = false;

	                    for (var i=0,length = targetNode.childNodes.length; i<length; i++){
	                        var childNode = targetNode.childNodes[i];
	                        if (Define.BLOCK_NODES.indexOf(childNode.nodeName) > -1) {

	                            paragraphIndex ++;

	                            walkTheDOM(childNode, function(_node){
	                                if (Define.BLOCK_NODES.indexOf(_node.nodeName) > -1){
	                                    //바꾸면 안될거 같은데
	                                    if (! isStart && paragraphIndex == op.p[0]){
	                                        found = true;
	                                        return Define.WALK_EXIT;
	                                    }else if (isStart && paragraphIndex == op.p[1]){
	                                        return Define.WALK_EXIT;
	                                    }

	                                    paragraphIndex ++;
	                                }
	                            });

	                            if (! isStart && paragraphIndex == op.p[0]){
	                                if (runIndex != 0 && runIndex >= targetOffset){
	                                    nodeOpChange = true;
	                                }
	                                found = true;
	                                return Define.WALK_EXIT;
	                            }else if (isStart && paragraphIndex == op.p[1]){
	                                nodeOpChange = true;
	                                return Define.WALK_EXIT;
	                            }
	                            if (found){
	                                return Define.WALK_EXIT;
	                            }

	                            //연속으로 div 가 나오는 경우가 있기때문에 div 는 run 인덱스를 따로 계산하지 않기 때문에 넘긴다
	                            continue;
	                        }else if (childNode.nodeType == 1 && childNode.nodeName == 'SPAN'){
	                            runIndex += getRunIndex(childNode);
	                        }

	                        if (runIndex != 0 && runIndex >= targetOffset){
	                            if (! isStart && ! found){
	                                nodeOpChange = true;
	                            }

	                            return Define.WALK_EXIT;
	                        }
	                    }
	                }

	                return Define.WALK_EXIT;
	            }

	            paragraphIndex ++;
	        }
	    });

	    return nodeOpChange;
	};

	//mouse down : baseOp
	//mouse move : moveOp
	//mouse up   : lastOp
	Selection.prototype.setUserSelect = function(){

	    var op = this.get();

	    if (op.p[0] == op.p[1] && op.r[0] == op.r[1]){
	        return;
	    }

	    var sRange = this.getOpNode(op.p[0], op.r[0]);
	    var eRange = this.getOpNode(op.p[1], op.r[1]);

	    if (sRange.container && eRange.container){

	        this.findNextNode(this.getEditableRootNode(), sRange.container, function(curNode){
	            if (curNode == eRange.container){
	                return Define.WALK_EXIT;
	            }

	            if (Util.isTagName(curNode, 'TABLE')){
	                $(curNode).addClass(Define.CLASS.SELECTED_TABLE);
	                $(curNode).find('span').addClass(Define.CLASS.SELECTED);
	            }
	        });
	    }

	};

	Selection.prototype.getInsertableNode = function(p, r){

	    var rootNode = this.editorElement;
	    var pIndex = p;
	    var rIndex = r;

	    var paragraphIndex = 0;

	    var insertableNode = null;

	    walkTheDOM(rootNode, function(node){

	        if (Define.BLOCK_NODES.indexOf(node.nodeName) > -1) {

	            //시작 위치값과 동일한 경우
	            if (paragraphIndex == pIndex){
	                if (rIndex == 0){
	                    var noBlockNode = null;
	                    for (var i=0,length=node.childNodes.length; i<length; i++){
	                        var childNode = node.childNodes[i];

	                        if (Define.BLOCK_NODES.indexOf(childNode.nodeName) == -1){
	                            noBlockNode = childNode;

	                            break;
	                        }
	                    }

	                    if (noBlockNode){
	                        insertableNode = noBlockNode.cloneNode(true);
	                        insertableNode.innerHTML = '';
	                        node.insertBefore(insertableNode, noBlockNode);
	                    }else{
	                        insertableNode = document.createElement('SPAN');
	                        node.appendChild(insertableNode);
	                    }
	                }else{

	                    var selectNodes = selectNode(node, 0, rIndex, true);

	                    if (selectNodes.length > 0){
	                        var lastNode = selectNodes[selectNodes.length - 1];

	                        insertableNode = lastNode.cloneNode(true);
	                        insertableNode.innerHTML = '';

	                        if (lastNode.nextSibling){
	                            node.insertBefore(insertableNode, lastNode.nextSibling);
	                        }else{
	                            node.appendChild(insertableNode);
	                        }
	                    }

	                }

	                return Define.WALK_EXIT;

	            }

	            paragraphIndex ++;
	        }
	    });

	    return insertableNode;
	};

	Selection.prototype.getOffsetLeft = function(node){
	    var offsetLeft = node.offsetLeft;
	    var parentNode = node.offsetParent;
	    var editableNode = this.getEditableRootNode();

	    while (parentNode && parentNode != editableNode) {
	        offsetLeft += parentNode.offsetLeft;
	        parentNode = parentNode.offsetParent;
	    }

	    return offsetLeft;
	};

	Selection.prototype.hideWindowSelection = function(){
	    Util.killCSSRule(Define.SELECTION_COLOR_SELECTOR);
	    Util.addCSSRule(Define.SELECTION_COLOR_STYLE);
	};

	Selection.prototype.showWindowSelection = function(){
	    Util.killCSSRule(Define.SELECTION_COLOR_SELECTOR);
	};

	// Selection.prototype.avoidClosestTableCursor = f
	Selection.prototype.setEditorElement = function(editorElement) {
	    this.editorElement = $(editorElement).find("." + Define.CLASS.CONTENT_VIEW)[0];
	};

	module.exports = Selection;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	module.exports = {

	    getParentTagNode : function(editorNode, node, tags, stopNode){
	        var parentNodes = [];
	        var curNode = node;

	        while (editorNode != curNode){

	            if (stopNode && stopNode == curNode){
	                break;
	            }

	            if (tags.indexOf(curNode.nodeName) > -1){
	                parentNodes.push(curNode);
	            }

	            curNode = curNode.parentNode;
	        }

	        return parentNodes;
	    },

	    getCommonAncestor : function (node1 /*, node2, node3, ... nodeN */) {
	        if (arguments.length < 2)
	            throw new Error("getCommonAncestor: not enough parameters");

	        var i,
	            method = "contains" in node1 ? "contains" : "compareDocumentPosition",
	            test   = method === "contains" ? 1 : 0x0010,
	            nodes  = [].slice.call(arguments, 1);

	        rocking:
	            while (node1 = node1.parentNode) {
	                i = nodes.length;
	                while (i--) {
	                    if ((node1[method](nodes[i]) & test) !== test)
	                        continue rocking;
	                }
	                return node1;
	            }

	        return null;
	    },

	    selectTable : function(editorNode, sBlockNode, eBlockNode){
	        var sTdNodes = this.getParentTagNode(editorNode, sBlockNode, ['TD']);
	        var eTdNodes = this.getParentTagNode(editorNode, eBlockNode, ['TD']);

	        var sTableNodes = this.getParentTagNode(editorNode, sBlockNode, ['TABLE']);
	        var eTableNodes = this.getParentTagNode(editorNode, eBlockNode, ['TABLE']);

	        var sTdNode = null;
	        var eTdNode = null;

	        var tableNode = null;
	        for (var sTIndex=0; sTIndex<sTableNodes.length; sTIndex++){
	            var sTableNode = sTableNodes[sTIndex];
	            var found = false;
	            eTableNodes.forEach(function(eTableNode, eTIndex){
	                if (sTableNode == eTableNode){
	                    tableNode = sTableNode;
	                    sTdNode = sTdNodes[sTIndex];
	                    eTdNode = eTdNodes[eTIndex];
	                    found = true;
	                    return false;
	                }
	            });

	            if (found){break;}
	        }

	        var boundaryNodes = [];

	        if (tableNode && sTdNode && eTdNode) {
	            var commonNode = $(tableNode).find('TBODY')[0];
	            var tableMapInfo = this.getMap(commonNode, [sTdNode], [eTdNode]);

	            var relativeTdNodeInfo = this.getRelativeTdNode(tableMapInfo);
	            boundaryNodes = relativeTdNodeInfo.boundaryNodes;
	        }

	        return boundaryNodes;
	    },

	    getTableMap : function(editorNode, sBlockNode, eBlockNode){

	        var commonNode = this.getCommonAncestor(sBlockNode, eBlockNode);

	        if (commonNode.nodeType == 1 && commonNode.nodeName != 'TBODY'){
	            commonNode = this.getParentTagNode(editorNode, commonNode, ['TBODY'])[0];
	        }

	        if (commonNode){
	            var startTdNodes = this.getParentTagNode(editorNode, sBlockNode, ['TD'], commonNode);
	            var endTdNodes = this.getParentTagNode(editorNode, eBlockNode, ['TD'], commonNode);

	            if (startTdNodes.length == 0 || endTdNodes.length == 0){
	                return null;
	            }

	            var tableMapInfo = this.getMap(commonNode, startTdNodes, endTdNodes);

	            var relativeTdNodeInfo = this.getRelativeTdNode(tableMapInfo);

	            return {
	                tableMap : tableMapInfo.tableMap,
	                trNodes : tableMapInfo.trNodes,
	                sTr : relativeTdNodeInfo.startTr,
	                eTr : relativeTdNodeInfo.endTr,
	                sTdIndex : relativeTdNodeInfo.startTdIndex,
	                eTdIndex : relativeTdNodeInfo.endTdIndex
	            }

	        }

	    },

	    getMap : function(commonNode, startTdNodes, endTdNodes){
	        var startTr = startTdNodes[startTdNodes.length - 1].parentNode;
	        var endTr = endTdNodes[endTdNodes.length - 1].parentNode;

	        var trNodes = $(commonNode).children().toArray();
	        if (trNodes.indexOf(endTr) < trNodes.indexOf(startTr)) {
	            var tempTdNodes = startTdNodes;
	            var tempTrNode = startTr;

	            startTdNodes = endTdNodes;
	            endTdNodes = tempTdNodes;

	            startTr = endTr;
	            endTr = tempTrNode;
	        }


	        var tableMap = [];
	        var trIndex = 0;

	        var startTdIndex = -1;
	        var endTdIndex = -1;

	        var startTdNode = startTdNodes[0];
	        var endTdNode = endTdNodes[endTdNodes.length - 1];

	        var startTrIndex = trNodes.indexOf(startTr);
	        var endTrIndex = trNodes.indexOf(endTr);

	        var maxTrIndex = endTrIndex;
	        for (var i = 0, length = commonNode.childNodes.length; i < length; i++) {
	            if (!tableMap[trIndex]) {
	                tableMap[trIndex] = [];
	            }

	            var trNode = commonNode.childNodes[i];
	            var tdIndex = 0;

	            if (i == maxTrIndex) {
	                endTr = trNode;
	            }

	            for (var j = 0, tdLength = trNode.childNodes.length; j < tdLength; j++) {
	                var tdNode = trNode.childNodes[j];
	                var colspan = tdNode.getAttribute('colspan');
	                var rowspan = tdNode.getAttribute('rowspan');
	                var colIdx = colspan * 1 > 0 ? colspan * 1 : 1;
	                var rowIdx = rowspan * 1 > 0 ? rowspan * 1 : 1;

	                var colLength = tdIndex + colIdx;

	                for (var k = trIndex; k < (trIndex + rowIdx); k++) {
	                    if (!tableMap[k]) {
	                        tableMap[k] = [];
	                    }

	                    for (var l = tdIndex; l < colLength; l++) {
	                        if (tableMap[k][l] && tableMap[k][l].isMergeEmpty) {

	                            if (tableMap[k][l].rowspan > 0) {
	                                tdIndex++;
	                            }

	                            colLength++;
	                            continue;
	                        }

	                        if (k == trIndex && l == tdIndex) {
	                            tableMap[k][l] = {
	                                rowspan: rowIdx - 1,
	                                colspan: colIdx - 1,
	                                node: tdNode
	                            };

	                            if (startTdIndex == -1 && tdNode == startTdNode) {
	                                startTdIndex = l;
	                            }

	                            if (endTdIndex == -1 && tdNode == endTdNode) {
	                                endTdIndex = l;
	                            }

	                        } else {
	                            tableMap[k][l] = {
	                                rowspan: rowIdx - 1,
	                                colspan: colIdx - 1,
	                                node: tdNode,
	                                isMergeEmpty: true,
	                                mergeTrIndex : trIndex,
	                                mergeTdIndex : tdIndex
	                            };
	                        }
	                    }

	                }

	                tdIndex += colIdx;

	            }

	            trIndex++;
	        }

	        return {
	            commonNode   : commonNode,
	            trNodes      : trNodes,
	            tableMap     : tableMap,
	            startTrIndex : startTrIndex,
	            endTrIndex   : endTrIndex,
	            startTdIndex : startTdIndex,
	            endTdIndex   : endTdIndex
	        };
	    },

	    getRelativeTdNode : function(tableMapInfo){

	        var commonNode = tableMapInfo.commonNode,
	            trNodes = tableMapInfo.trNodes,
	            tableMap = tableMapInfo.tableMap,
	            startTrIndex = tableMapInfo.startTrIndex,
	            endTrIndex = tableMapInfo.endTrIndex,
	            startTdIndex = tableMapInfo.startTdIndex,
	            endTdIndex = tableMapInfo.endTdIndex;

	        var isTrBoundary = false;
	        var boundaryNodes = [];
	        var startTrNode = null;
	        var endTrNode = null;

	        if (startTdIndex > endTdIndex){
	            var temp = startTdIndex;
	            startTdIndex = endTdIndex;
	            endTdIndex = temp;
	        }

	        for (var i = 0, length = commonNode.childNodes.length; i < length; i++) {
	            if (i == startTrIndex) {
	                startTrNode = commonNode.childNodes[i];
	                isTrBoundary = true;
	            }

	            if (isTrBoundary) {
	                for (var j = 0, tableMapLength = tableMap[i].length; j < tableMapLength; j++) {
	                    if (j >= startTdIndex && j <= endTdIndex && !tableMap[i][j].isMergeEmpty) {

	                        var colSpanSum = (j + tableMap[i][j].colspan);
	                        var colRowSum = (i + tableMap[i][j].rowspan);

	                        if (tableMap[i][j].colspan > 0 && colSpanSum > endTdIndex) {
	                            endTdIndex = colSpanSum;

	                            i = startTrIndex - 1;
	                            boundaryNodes = [];
	                            break;
	                        }

	                        if (tableMap[i][j].rowspan > 0 && colRowSum > endTrIndex) {
	                            endTrIndex = colRowSum;

	                            i = startTrIndex - 1;
	                            boundaryNodes = [];
	                            break;
	                        }

	                        if (boundaryNodes.indexOf(tableMap[i][j].node) == -1){
	                            boundaryNodes.push(tableMap[i][j].node);
	                        }
	                    }else{

	                        if (j >= startTdIndex && j <= endTdIndex){
	                            var parentTrNode = tableMap[i][j].node.parentNode;

	                            if (startTrIndex > 0 && tableMap[i][j].isMergeEmpty && tableMap[i][j].rowspan && tableMap[i][j].rowspan > 0){
	                                var trIndex = trNodes.indexOf(parentTrNode);

	                                if (trIndex < startTrIndex){
	                                    startTrIndex = trIndex;
	                                    i = startTrIndex - 1;
	                                    isTrBoundary = false;
	                                    break;
	                                }


	                            }

	                            if (startTdIndex > 0 && tableMap[i][j].isMergeEmpty && tableMap[i][j].colspan && tableMap[i][j].colspan > 0){
	                                var nodeInTr = [];
	                                tableMap[i].forEach(function(item){
	                                    nodeInTr.push(item.node);
	                                });

	                                var tdIndex = nodeInTr.indexOf(tableMap[i][j].node);

	                                if (tdIndex < startTdIndex){
	                                    startTdIndex = tdIndex;
	                                    i = startTrIndex - 1;
	                                    break;
	                                }
	                            }
	                        }
	                    }

	                }
	            }

	            if (i == endTrIndex) {
	                endTrNode = commonNode.childNodes[i];
	                break;
	            }
	        }

	        return {
	            startTr : startTrNode,
	            endTr : endTrNode,
	            starTrIndex : startTrIndex,
	            endTrIndex : endTrIndex,
	            startTdIndex : startTdIndex,
	            endTdIndex : endTdIndex,
	            boundaryNodes : boundaryNodes
	        }
	    },

	};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	module.exports = {
	    getSameBlockNode: function (op) {
	        var opRange = op;
	        var sameBlockNodes = [];

	        this.setOp(opRange);

	        var blockNodes = this.getBlockBoundary(opRange);

	        var getBlockList = function (node) {
	            var nList = [];

	            for (var i = 0, length = node.childNodes.length; i < length; i++) {
	                nList.push(node.childNodes[i]);
	            }

	            return nList;
	        };

	        //block노드안의 child 노드가 block 노드 span node 가 섞여 있는 경우
	        var isMixedBlockRunNode = function (node) {
	            var spanNodes = [];
	            var blockNodeList = [];

	            for (var i = 0, length = node.childNodes.length; i < length; i++) {
	                var childNode = node.childNodes[i];

	                if (Define.BLOCK_NODES.indexOf(childNode.nodeName) > -1) {
	                    blockNodeList.push(childNode);
	                } else if (childNode.nodeType == 1 && childNode.nodeName == 'SPAN') {
	                    spanNodes.push(childNode);
	                }
	            }

	            return spanNodes.length > 0 && blockNodeList.length > 0;
	        };

	        var wrapChildNode = function (blockNode, blockList) {

	            var spanNodes = [];
	            var replaceBlockList = [];

	            for (var i = 0, length = blockList.length; i < length; i++) {
	                var childNode = blockList[i];

	                if (childNode.nodeType == 3) {
	                    if (childNode.nodeValue.length == 0) {
	                        blockNode.removeChild(childNode);
	                    } else {
	                        var spanNode = document.createElement('span');
	                        spanNode.appendChild(childNode.cloneNode(true));

	                        blockNode.insertBefore(spanNode, childNode);
	                        blockNode.removeChild(childNode);
	                    }

	                    blockList = [].concat([spanNode], blockList);
	                    i--;
	                } else {

	                    if (Define.BLOCK_NODES.indexOf(childNode.nodeName) > -1) {

	                        if (spanNodes.length > 0) {

	                            var pNode = document.createElement('p');

	                            blockNode.insertBefore(pNode, spanNodes[0]);
	                            spanNodes.forEach(function (_spanNode) {
	                                pNode.appendChild(_spanNode.cloneNode(true));
	                            });

	                            for (var j = 0, jLength = spanNodes.length; j < jLength; j++) {
	                                $(spanNodes[j]).remove();
	                            }

	                            spanNodes = [];

	                            replaceBlockList.push(pNode);

	                        }

	                    } else if (childNode.nodeType == 1 && childNode.nodeName == 'SPAN') {
	                        spanNodes.push(childNode);
	                    }

	                }
	            }

	            if (spanNodes.length > 0) {
	                var pNode = document.createElement('p');

	                blockNode.insertBefore(pNode, spanNodes[0]);
	                spanNodes.forEach(function (_spanNode) {
	                    pNode.appendChild(_spanNode.cloneNode(true));
	                });

	                for (var j = 0, jLength = spanNodes.length; j < jLength; j++) {
	                    $(spanNodes[j]).remove();
	                }

	                replaceBlockList.push(pNode);
	            }

	            return replaceBlockList;

	        };

	        for (var i = 0, length = blockNodes.length; i < length; i++) {
	            var blockNode = blockNodes[i];

	            var blockChild = getBlockList(blockNode);
	            var isMixedNode = isMixedBlockRunNode(blockNode);

	            if (isMixedNode) {
	                var replaceBlockList = wrapChildNode(blockNode, blockChild);

	                // div 블록에서
	                if (replaceBlockList.length > 0) {
	                    i = replaceBlockList.length - 1;
	                    length += replaceBlockList.length - 1;

	                    var blockIndex = blockNodes.indexOf(blockNode);

	                    blockNodes = [].concat(blockNodes.slice(0, blockIndex), replaceBlockList, blockNodes.slice(blockIndex + 1));
	                }
	            }
	        }

	        blockNodes = this.getBlockBoundary();

	        sameBlockNodes = this.getSameParentBlock(blockNodes);

	        return sameBlockNodes;
	    },

	    getSameParentBlock: function (nodes) {

	        var sameBlockNodes = [];
	        var index = 0;

	        var isExistFindDeepMap = function (node, list) {
	            var result = {
	                isExist : false,
	                idx : 0
	            };

	            for (var i = 0, length = list.length; i < length; i++) {
	                var item = list[i];

	                for (var j = 0, jLength = item.length; j < jLength; j++) {
	                    var parentNode = item[j].parentNode;

	                    if (node.parentNode == parentNode) {
	                        result.isExist = true;
	                        result.idx = i;
	                        break;
	                    }
	                }
	            }

	            return result;
	        };

	        for (var i = 0, length = nodes.length; i < length; i++) {
	            if (! sameBlockNodes[index]) {
	                sameBlockNodes[index] = [];
	                sameBlockNodes[index].push(nodes[i]);

	                continue;
	            }

	            var deepMap = isExistFindDeepMap(nodes[i], sameBlockNodes);

	            if (deepMap.isExist) {
	                sameBlockNodes[deepMap.idx].push(nodes[i]);
	            } else {
	                index++;
	                sameBlockNodes[index] = [];
	                sameBlockNodes[index].push(nodes[i]);
	            }
	        }

	        //시작 블록 노드와 끝 블록 노드 사이에 있는 노드를 다시한번 탐색해서 넣는다.
	        for (var i=0, length=sameBlockNodes.length; i<length; i++){
	            var nodes = sameBlockNodes[i];

	            var replaceNodes = [];
	            if (nodes.length > 1){

	                var firstNode = nodes[0];
	                var lastNode = nodes[nodes.length - 1];
	                var nextNode = firstNode.nextSibling;

	                replaceNodes.push(firstNode);

	                while(nextNode){

	                    replaceNodes.push(nextNode);

	                    if (nextNode == lastNode){
	                        break;
	                    }

	                    nextNode = nextNode.nextSibling;
	                }

	                sameBlockNodes[i] = replaceNodes;
	            }
	        }

	        return sameBlockNodes;
	    }
	};

/***/ }),
/* 35 */
/***/ (function(module, exports) {

	if (!Object.keys) {
	    Object.keys = function (obj) {
	        var arr = [],
	            key;
	        for (key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                arr.push(key);
	            }
	        }
	        return arr;
	    };
	}

	function Style(){
	    this.node = null;
	}

	Style.prototype.setNode = function(node){
	    this.node = node;
	};

	Style.prototype.set = function(){
	    var styles = {};

	    if (arguments.length > 1){
	        styles[arguments[0]] = arguments[1];
	    }else{
	        styles = arguments[0];
	    }

	    this.setFontStyle(styles);
	};

	Style.prototype.get = function(){

	};

	Style.prototype.setFontStyle = function(styles) {
	    var nodes = this.node;

	    if (this.node instanceof jQuery) {
	        nodes = this.node;
	    } else if (this.node instanceof Array) {
	        nodes = this.node;
	    } else {
	        nodes = [this.node];
	    }

	    if (!nodes) {
	        return;
	    }

	    for (var i = 0, len = nodes.length; i < len; ++i) {
	        var node = nodes[i];

	        for (var key in styles) {
	            var value = styles[key];

	            if ($.inArray(key, ["textDecoration"]) != -1) {
	                var domStyle = $(node).css(key);
	                var domStyleList = (function (style) {
	                    var list = [];

	                    if (style.indexOf("underline") != -1) {
	                        list.push("underline");
	                    }
	                    if (style.indexOf("line-through") != -1) {
	                        list.push("line-through");
	                    }
	                    if (list.length == 0) {
	                        list.push("none");
	                    }

	                    return list;
	                })(domStyle);
	                var isRemoveStyle = (value["underline"] == "none") || (value["line-through"] == "none");
	                var listSize = domStyleList.length;

	                domStyle = domStyleList.join(" ");
	                value = Object.keys(value)[0];

	                if (listSize == 0 || (listSize == 1 && domStyleList[0] == "none")) {
	                    $(node).css(key, value);
	                } else {
	                    if (isRemoveStyle) {
	                        if (listSize == 1) {
	                            $(node).css(key, "none");
	                        } else {
	                            var s = domStyle.replace(value, "")
	                                .replace("/ /g", "");

	                            $(node).css(key, s);
	                        }
	                    } else if (domStyle.indexOf(value) == -1) {
	                        $(node).css(key, domStyle + " " + value);
	                    }
	                }
	            } else {
	                if (key == "fontSize" && (value + "").indexOf("pt") == -1) {
	                    value = value + "px";
	                }

	                if (key == 'fontWeight' && value == '' && node.parentNode && ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'].indexOf(node.parentNode.nodeName) > -1){
	                    $(node).css(key, 'normal');
	                }else{
	                    $(node).css(key, value);
	                }

	            }
	        }
	    }
	}

	module.exports = Style;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);

	var Event = __webpack_require__(37);

	var Util = __webpack_require__(6);

	var Filter = __webpack_require__(44);

	var HyperlinkDialog = __webpack_require__(55);
	var SymbolsDialog = __webpack_require__(57);
	var ImageDialog = __webpack_require__(59);
	var BackgroundImageDialog = __webpack_require__(61);
	var VideoDialog = __webpack_require__(62);
	var FileDialog = __webpack_require__(63);
	var LayoutDialog = __webpack_require__(64);
	var EmoticonDialog = __webpack_require__(65);
	var TextPasteDialog = __webpack_require__(66);
	var ParagraphDialog = __webpack_require__(67);
	var FileOpenDialog = __webpack_require__(68);
	var AutoSaveLoadDialog = __webpack_require__(69);
	var TemplateDialog = __webpack_require__(70);
	var DateFormatDialog = __webpack_require__(71);
	var BookmarkDialog = __webpack_require__(72);
	var TableDialog = __webpack_require__(73);
	var CellDialog = __webpack_require__(74);
	var SettingDialog = __webpack_require__(75);
	var AboutDialog = __webpack_require__(76);
	var UpperLowerDialog = __webpack_require__(77);
	var BlockQuoteDialog = __webpack_require__(78);
	var LayerDialog = __webpack_require__(79);

	var textFormatCopyObj = null;

	function MenuController(editorElement, $domObject, router, api){
	    this.editorElement = null;
	    this.toolbarElement = null;
	    this.clientFilter = null;

	    this.$dom = null;
	    this.router = null;
	    this.api = null;

	    this.keyboardEvent = null;

	    this.init(editorElement, $domObject, router, api);
	}

	MenuController.prototype.init = function (editorElement, $domObject, router, api){
	    this.$dom = $domObject;

	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.api = api;

	    this.event = new Event(this.editorElement, this.$dom, this.router, this, api);

	    this.keyboardEvent = this.event.getKeyboardEvent();
	    this.mouseEvent = this.event.getMouseEvent();

	    this.clientFilter = new Filter(router.options);

	    this.dialogCache = {
	        hyperlinkDialog : null,
	        symbolDialog : null,
	        imageDialog : null,
	        backgroundImageDialog : null,
	        videoDialog : null,
	        fileDialog : null,
	        layoutDialog : null,
	        upperLowerDialog : null,
	        textPasteDialog : null,
	        paragraphDialog : null,
	        fileOpenDialog : null,
	        emoticonDialog : null,
	        autoSaveLoadDialog : null,
	        templateDialog : null,
	        dateFormatDialog : null,
	        bookmarkDialog : null,
	        layerDialog : null,
	        tableDialog : null,
	        cellDialog : null,
	        settingDialog : null,
	        aboutDialog : null
	    };
	};


	MenuController.prototype.initSelectionInfo = function() {
	    this.$dom.selection.get();
	};

	MenuController.prototype.getCell = function(){
	    var range = this.$dom.selection.get();
	    var cell = range.startContainer;
	    if(cell.nodeName != "TD"){
	        cell = Util.findParentNode(range.startContainer, "td");
	    }
	    return cell;
	};

	MenuController.prototype.menuSwitch = function(menu, options) {
	    if (this.mouseEvent.removeImageResizeEvents) {
	        this.mouseEvent.removeImageResizeEvents();
	    }

	    if (this.mouseEvent.removeTableAllResizeEvents){
	        this.mouseEvent.removeTableAllResizeEvents();
	    }

	    this.mouseEvent.clearImageMovable();

	    var _this = this;

	    this.closeAllToolbarBox();

	    if (menu.id != 'find_replace') {
	        this.initSelectionInfo();
	    }

	    if (options && $(options.node).hasClass("disabled")){
	        return ;
	    }

	    // console.log(menu);

	    if (menu.id != 'find_replace') {
	        var selInfo = this.$dom.selection.get();

	        this.$dom.selection.set({p:selInfo.p, r:selInfo.r});
	    }

	    //console.log(this.$dom.selection.op);

	    switch(menu.id){
	        case "new" :
	            var $contents = this.editorElement.find("." + Define.CLASS.CONTENTS);
	            var $preview = this.editorElement.find("." + Define.CLASS.PRE_VIEW);

	            if ($contents.html() == Define.DEFAULT_PARAGRAPH_HTML){
	                return;
	            } else{
	                var isNew = false;

	                if (Util.isCheckEmpty($contents)) {
	                    isNew = true;
	                } else {
	                    isNew = confirm("현재 입력된 내용들이 제거됩니다.\n계속 진행하시겠습니까?");
	                }

	                if (isNew){
	                    $contents.html(Define.DEFAULT_PARAGRAPH_HTML);

	                    this.router.setClearAllHistories();
	                    this.router.changedUndoRedoButtonEnable();

	                    this.$dom.selection.$paragraph = null;

	                    this.$dom.selection.setDefault();


	                    $contents.css({
	                        'background-image' : '',
	                        'background-repeat' : '',
	                        'background-position-x' : '',
	                        'background-position-y' : '',
	                        'background-attachment' : '',
	                        'background-color' : ''
	                    });

	                    $preview.css({
	                        'background-image' : '',
	                        'background-repeat' : '',
	                        'background-position-x' : '',
	                        'background-position-y' : '',
	                        'background-attachment' : '',
	                        'background-color' : ''
	                    });
	                }

	            }
	            break;
	        case "file_open" :

	            if (!this.dialogCache.fileOpenDialog) {
	                this.dialogCache.fileOpenDialog = new FileOpenDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.fileOpenDialog.openDialog();

	            break;

	        case "auto_save_load" :

	            if (!this.dialogCache.autoSaveLoadDialog) {
	                this.dialogCache.autoSaveLoadDialog = new AutoSaveLoadDialog(this.editorElement, this.$dom, this.router, this.api).initDialog();
	            }

	            this.dialogCache.autoSaveLoadDialog.openDialog();

	            break;

	        case "template" :

	            if (!this.dialogCache.templateDialog) {
	                this.dialogCache.templateDialog = new TemplateDialog(this.editorElement, this.$dom, this.router, this.api).initDialog();
	            }

	            this.dialogCache.templateDialog.openDialog();

	            break;

	        case "layout" :

	            if (!this.dialogCache.layoutDialog) {
	                this.dialogCache.layoutDialog = new LayoutDialog(this.editorElement, this.$dom, this.router, this.api).initDialog();
	            }

	            this.dialogCache.layoutDialog.openDialog();

	            break;
	        case "all_select" :
	            // var $contentsNode = _this.editorElement.find("." + Define.CLASS.CONTENTS);
	            //
	            // var $paragraphs = $contentsNode.find("p, li, h1, h2, h3, h4, h5, h6");
	            // var lastIndex = this.$dom.selection.getRunIndexSize($paragraphs.last()[0]);
	            //
	            // this.$dom.selection.set({
	            //     p: [0, $paragraphs.length - 1],
	            //     r : [0, lastIndex]
	            // });

	            this.$dom.selection.selectAll();

	            break;
	        case "copy" :
	            if ($.browser.msie) {
	                this.keyboardEvent.clipboard.setCopyReady("copy");
	                this.keyboardEvent.clipboard.$clipboardDiv.focus();
	                document.execCommand('Copy');
	            } else {
	                alert("Ctrl + C (Mac : CMD + C) 단축키를 사용하여 주시기 바랍니다.");
	            }
	            break;
	        case "paste" :
	            if ($.browser.msie) {
	                this.keyboardEvent.clipboard.setPasteReady();
	                this.keyboardEvent.clipboard.$clipboardDiv.focus();
	                document.execCommand('Paste');
	            } else {
	                alert("Ctrl + V (Mac : CMD + V) 단축키를 사용하여 주시기 바랍니다.");
	            }
	            break;
	        case "cut" :
	            if ($.browser.msie) {
	                this.keyboardEvent.clipboard.setCopyReady("cut");
	                this.keyboardEvent.clipboard.$clipboardDiv.focus();
	                document.execCommand('cut');
	            } else {
	                alert("Ctrl + X (Mac : CMD + X) 단축키를 사용하여 주시기 바랍니다.");
	            }
	            break;
	        case "text_paste" :

	            if (!this.dialogCache.textPasteDialog) {
	                this.dialogCache.textPasteDialog = new TextPasteDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.textPasteDialog.openDialog();
	            break;
	        case "save" :
	            var htmlString = this.api.GetContentHTMLFile();

	            if ($.browser.msie) {
	                if (window.navigator && window.navigator.msSaveBlob) {
	                    var blobObject = new Blob([htmlString]);
	                    window.navigator.msSaveBlob(blobObject, 'KukudocsEditor_' + (new Date().format('yyyyMMdd-hhmmss')) + '.html'); // The user only has the option of clicking the Save button.
	                } else {
	                    var $iframe = $('<iframe id="' + Define.ID.EXPORT_WRAPPER_IFRAME + '" style="display: none;"/>');

	                    $(document.body).append($iframe);
	                    setTimeout(function(){
	                        var ifd = $iframe[0].contentWindow.document;
	                        ifd.open('text/plain', 'replace');
	                        ifd.write(htmlString);
	                        ifd.close();
	                        ifd.charset="utf-8";
	                        ifd.execCommand('saveas', true, 'KukudocsEditor_' + (new Date().format('yyyyMMdd-hhmmss')));

	                        $iframe.remove();
	                    }, 100);
	                }
	            } else {
	                var $anchor = $('<a />').attr({
	                    download: 'KukudocsEditor_' + (new Date().format('yyyyMMdd-hhmmss')) + '.html',
	                    href: "data:text/html," + htmlString
	                });

	                $anchor[0].click();
	            }

	            break;
	        case "print" :
	            var $contentArea = _this.editorElement.find("." + Define.CLASS.CONTENTS);

	            $contentArea.find("img").each(function(idx, node){
	                var $node = $(node);
	                $node.attr("src", $node[0].src);

	                $node.css({
	                    width : $node.width(),
	                    height : $node.height()
	                })
	            });

	            var newWin= window.open();

	            newWin.document.write('<html><style> html, body{ outline: none; padding-top: 1px; margin-top: -1px; word-break: break-all; word-wrap: break-word; display: inline-block; min-width:100%;}</style>' + $contentArea.html() + '</html>');
	            newWin.location.reload();

	            $(newWin.document.body).css('font-family', Define.DIALOG_FONT);

	            newWin.focus();
	            newWin.print();
	            newWin.close();
	            break;
	        case "page_break" :
	            //var $contents = this.editorElement.find("." + Define.CLASS.CONTENTS);
	            //
	            var opList = [];
	            //
	            //var selectedSpan = $contents.find('.' + Define.CLASS.SELECTED);
	            //
	            //if (selectedSpan.length) {
	            //    opList.push({type:"del", name:"text", value: ""});
	            //}
	            //
	            opList.push({type:"create", name:"page_break", value: ""});

	            _this.$dom.selection.get();
	            if (_this.$dom.selection.collapseOp()){
	                _this.router.doOperation(opList);
	            }

	            break;
	        case "paragraph_margin" :

	            var $selected = this.$dom.selection.getSelectedNode();

	            if (!$selected.length) {
	                var selInfo = this.$dom.selection.get();
	                if (!selInfo) {
	                    this.$dom.selection.set({
	                        p : [0,0],
	                        r : [0,0]
	                    });

	                    selInfo = this.$dom.selection.get();
	                }

	                var currentNode = this.$dom.selection.getOpNode(selInfo.p[0], selInfo.r[0]);
	                $selected = $(currentNode.container);
	            }

	            var paragraphMarginDatas = null;

	            var paragraphList = $selected.closest('.' + Define.CLASS.CONTENTS + ' ' + Define.PARAGRAPH_NODES.join(', .' + Define.CLASS.CONTENTS + ' '));

	            if (paragraphList.length == 1) {
	                var paragraph = paragraphList[0];
	                paragraphMarginDatas = {};

	                var $paragraph = $(paragraph);

	                var marginLeft = parseInt($paragraph.css('marginLeft'));
	                if (!isNaN(marginLeft)) { paragraphMarginDatas.marginLeft = marginLeft; }

	                var marginRight = parseInt($paragraph.css('marginRight'));
	                if (!isNaN(marginRight)) { paragraphMarginDatas.marginRight = marginRight; }

	                var marginTop = parseInt($paragraph.css('marginTop'));
	                if (!isNaN(marginTop)) { paragraphMarginDatas.marginTop = marginTop; }

	                var marginBottom = parseInt($paragraph.css('marginBottom'));
	                if (!isNaN(marginBottom)) { paragraphMarginDatas.marginBottom = marginBottom; }

	                var letterSpacing = parseInt($paragraph.css('letterSpacing'));
	                if (!isNaN(letterSpacing)) { paragraphMarginDatas.letterSpacing = letterSpacing; }

	                var wordSpacing = parseInt($paragraph.css('wordSpacing'));
	                if (!isNaN(wordSpacing)) { paragraphMarginDatas.wordSpacing = wordSpacing; }
	            }

	            if (!this.dialogCache.paragraphDialog) {
	                this.dialogCache.paragraphDialog = new ParagraphDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.paragraphDialog.openDialog(paragraphMarginDatas);

	            break;
	        case "link" :

	            if (!this.dialogCache.hyperlinkDialog) {
	                this.dialogCache.hyperlinkDialog = new HyperlinkDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.hyperlinkDialog.openDialog();
	            break;

	        case "unlink" :
	            _this.router.doOperation({type:"update", name:"hyperlink", value:"remove"});
	            break;

	        case "bookmark" :

	            if (!this.dialogCache.bookmarkDialog) {
	                this.dialogCache.bookmarkDialog = new BookmarkDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.bookmarkDialog.openDialog();
	            break;

	        case "horizontal" :
	            var $contents = this.editorElement.find("." + Define.CLASS.CONTENTS);

	            var opList = [];

	            var selectedSpan = $contents.find('.' + Define.CLASS.SELECTED);

	            if (selectedSpan.length) {
	                opList.push({type:"del", name:"text", value: ""});
	            }

	            opList.push({type:"create", name:"horizontal", value: ""});
	            _this.router.doOperation(opList);
	            break;

	        case "date_format" :

	            if (!this.dialogCache.dateFormatDialog) {
	                this.dialogCache.dateFormatDialog = new DateFormatDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.dateFormatDialog.openDialog();
	            break;
	        case "symbol" :

	            if (!this.dialogCache.symbolDialog) {
	                this.dialogCache.symbolDialog = new SymbolsDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.symbolDialog.openDialog();

	            break;
	        case "emoticon" :

	            if (!this.dialogCache.emoticonDialog) {
	                this.dialogCache.emoticonDialog = new EmoticonDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.emoticonDialog.openDialog();

	            break;
	        case "layer" :
	            if (!this.dialogCache.layerDialog) {
	                this.dialogCache.layerDialog = new LayerDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.layerDialog.openDialog();
	            break;
	        case "layerModifyDialog" :
	            if (!this.dialogCache.layerDialog) {
	                this.dialogCache.layerDialog = new LayerDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.layerDialog.openDialog(menu.value);
	            break;
	        case "image" :
	            if (!this.dialogCache.imageDialog) {
	                this.dialogCache.imageDialog = new ImageDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.imageDialog.openDialog();
	            break;
	        case "imageModifyDialog" :
	            if (!this.dialogCache.imageDialog) {
	                this.dialogCache.imageDialog = new ImageDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.imageDialog.openDialog(menu.value);
	            break;

	        case "background_image" :
	            if (!this.dialogCache.backgroundImageDialog) {
	                this.dialogCache.backgroundImageDialog = new BackgroundImageDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.backgroundImageDialog.openDialog(menu.value);
	            break;

	        case "video" :
	            if (!this.dialogCache.videoDialog) {
	                this.dialogCache.videoDialog = new VideoDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.videoDialog.openDialog();
	            break;

	        case "file" :
	            if (!this.dialogCache.fileDialog) {
	                this.dialogCache.fileDialog = new FileDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.fileDialog.openDialog();
	            break;
	        case "videoModifyDialog" :
	            if (!this.dialogCache.videoDialog) {
	                this.dialogCache.videoDialog = new VideoDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.videoDialog.openDialog(menu.value);
	            break;

	        case "find_replace" :
	            _this.router.throwOperation(menu);

	            break;
	        case "fullscreen" :
	            var toolbarElement = this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR);

	            var $fullScreenButton = toolbarElement.find('[u-id="fullscreen"]');

	            if (this.editorElement.hasClass(Define.CLASS.FULL_SCREEN)){

	                $fullScreenButton.removeClass('on');

	                this.editorElement.removeClass(Define.CLASS.FULL_SCREEN);

	                this.editorElement.width(this.editorElement.attr(Define.ATTR.CURRENT_WIDTH));
	                this.editorElement.height(this.editorElement.attr(Define.ATTR.CURRENT_HEIGHT));

	                this.editorElement.removeAttr(Define.ATTR.CURRENT_WIDTH);
	                this.editorElement.removeAttr(Define.ATTR.CURRENT_HEIGHT);
	            } else {
	                $fullScreenButton.addClass('on');

	                this.editorElement.addClass(Define.CLASS.FULL_SCREEN);

	                var currentWidth = this.editorElement[0].style.width || this.editorElement.css('width');
	                var currentHeight = this.editorElement[0].style.height || this.editorElement.css('height');

	                this.editorElement.attr(Define.ATTR.CURRENT_WIDTH, currentWidth);
	                this.editorElement.attr(Define.ATTR.CURRENT_HEIGHT, currentHeight);
	            }

	            this.api.setResize();

	            break;
	        case "help" :
	            var options = this.router.getOptions();
	            window.open(options.helpURL, '_blank');

	            break;
	        case "setting" :

	            if (!this.dialogCache.settingDialog){
	                this.dialogCache.settingDialog = new SettingDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.settingDialog.openDialog();

	            break;
	        case "about" :

	            if (!this.dialogCache.aboutDialog) {
	                this.dialogCache.aboutDialog = new AboutDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.aboutDialog.openDialog();

	            break;

	        case "upper_lower" :
	            if (!this.dialogCache.upperLowerDialog) {
	                this.dialogCache.upperLowerDialog = new UpperLowerDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.upperLowerDialog.openDialog(menu.value);
	            break;

	        case "blockquote" :
	            if (!this.dialogCache.blockQuoteDialog) {
	                this.dialogCache.blockQuoteDialog = new BlockQuoteDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.blockQuoteDialog.openDialog(menu.value);
	            break;

	        case "textFormatCopy":
	            var highlightStyle = this.$dom.selection.getHighlightStyle();

	            if (highlightStyle){
	                textFormatCopyObj = Util.cloneObject(highlightStyle);
	                this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR).find('a[u-id="textFormatPaste"]').removeClass('disabled');
	            }

	            break;

	        case "textFormatPaste":
	            if (textFormatCopyObj !== null && this.$dom.selection.getSelectedNode().length > 0) {
	                _this.router.doOperation({type:"update", name:menu.id, value:textFormatCopyObj});
	            }
	            break;

	        case "paragraph_remove_format":
	            var selInfo = this.$dom.selection.get();
	            if (!selInfo) {
	                this.$dom.selection.set({
	                    p : [0,0],
	                    r : [0,0]
	                });

	                selInfo = this.$dom.selection.get();
	            }
	        case "heading":
	        case "fontFamily":
	        case "fontSize":
	        case "bold":
	        case "italic":
	        case "underline":
	        case "strike_through":
	        case "super":
	        case "sub":
	        case "remove_format":
	        case "color":
	        case "background_color":
	        case "indent":
	        case "outdent":
	        case "align_left":
	        case "align_center":
	        case "align_right":
	        case "align_justify":
	        case "line_height":

	        case "numbered_list":
	        case "bullet_list":

	        case "dir_ltr":
	        case "dir_rtl":

	            if(menu.color){
	                menu.val = menu.color;
	            }

	            if ($.inArray(menu.id, ["bold", "italic", "underline", "strike_through", "super", "sub"]) > -1){
	                var $menuUI = this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).find('a[u-id="' + menu.id + '"]');

	                if ($menuUI.is(".on")){
	                    _this.router.doOperation({type:"update", name:menu.id, value:"off"});
	                }else{
	                    _this.router.doOperation({type:"update", name:menu.id, value:"on"});
	                }
	            }else if (menu.id == "numbered_list" || menu.id == "bullet_list"){
	                var $menuUI = this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).find('a[u-id="' + menu.id + '"]');

	                var sendOperation = {type:"create", name:"list", value:{listType : menu.id == "numbered_list" ? "numbered" : "bullet", status : 'off'}};

	                if ($menuUI.is(".on")){
	                    sendOperation.value.status = 'off';
	                }else{
	                    sendOperation.value.status = 'on';
	                }

	                if (menu.value && menu.value.specificType){
	                    sendOperation.value.specificType = menu.value.specificType;
	                    sendOperation.value.status = 'on';
	                }

	                _this.router.doOperation(sendOperation);


	            }else{
	                _this.router.doOperation({type:"update", name:menu.id, value:menu.val});
	            }


	            break;
	        case "undo" :
	            _this.keyboardEvent.checkedKeydownInputKey();
	            _this.router.doOperation({type:"update", name:"undo"});
	            break;

	        case "redo" :
	            _this.router.doOperation({type:"update", name:"redo"});
	            break;

	        case "cellModifyDialog":

	            var initData = {
	                type : "modify"
	            };

	            if (menu.value) {
	                initData = $.extend(true, {}, initData, menu.value);
	            }

	            if (!this.dialogCache.cellDialog) {
	                this.dialogCache.cellDialog = new CellDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.cellDialog.openDialog(initData);

	            break;
	        case "tableInsertDialog":
	        case "tableModifyDialog":

	            var initData = {
	                type : "insert"
	            };

	            if (menu.id === "tableModifyDialog") {
	                initData.type = "modify";

	                if (menu.value) {
	                    initData = $.extend(true, {}, initData, menu.value);
	                }
	            }else{
	                var $menuUI = this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).find('a[u-id="table"]');

	                if ($menuUI.hasClass('disabled')){
	                    return;
	                }
	            }

	            if (!this.dialogCache.tableDialog) {
	                this.dialogCache.tableDialog = new TableDialog(this.editorElement, this.$dom, this.router).initDialog();
	            }

	            this.dialogCache.tableDialog.openDialog(initData);

	            break;
	        case "table":
	            //var cell = this.getCell();

	            //if(cell){
	            //    width = $(cell).width();
	            //}
	            var width = 0;

	            var selectionRange = this.$dom.selection.get();

	            var currentNode = this.$dom.selection.getOpNode(selectionRange.p[0], selectionRange.r[0]);

	            var parentBlock = $(currentNode.container).closest('.' + Define.CLASS.CONTENTS + ' ' + Define.BLOCK_NODES.join(', .' + Define.CLASS.CONTENTS + ' '));

	            if (parentBlock.length) {
	                width = parentBlock.width();
	            } else {
	                var $contents = this.editorElement.find("." + Define.CLASS.CONTENTS);
	                width  = $contents.width();
	            }

	            var defaultTableSet = {
	                isModify : false,
	                row : menu.value.row || 3,
	                col : menu.value.col || 3,
	                width : width,
	                height : null,
	                marginLeft : null,
	                align : null,
	                id : null,
	                className : null,
	                borderSeparate : null,
	                border : {
	                     //defaultBorder : { width : 0, type : 'solid', color : '#000000' },
	                     //top : { width : 0, type : 'solid', color : '#000000' },
	                     //middle : { width : 0, type : 'solid', color : '#000000' },
	                     //bottom : { width : 0, type : 'solid', color : '#000000' },
	                     //left : { width : 0, type : 'solid', color : '#000000' },
	                     //center : { width : 0, type : 'solid', color : '#000000' },
	                     //right : { width : 0, type : 'solid', color : '#000000' }
	                },
	                cellSpacing : null,
	                cellPadding : null,
	                caption : null,
	                summary : null,

	                image : null,

	                attachment : null,
	                repeat : null,
	                positionX : null,
	                positionY : null,

	                backgroundColor :null,
	                scope : null,
	                headerType : null
	            };

	            var opList = [];
	            //
	            //var selectedSpan = $contents.find('.' + Define.CLASS.SELECTED);
	            //
	            //if (selectedSpan.length) {
	            //    opList.push({type:"del", name:"text", value: ""});
	            //}

	            opList.push({type:"create", name:"table", value: defaultTableSet});
	            _this.router.doOperation(opList);
	            break;
	        case "table_to_text":
	            _this.router.doOperation({type:"update", name:"table", value: { subType : "tableToText" }});

	            break;

	        case "table_insert_top":
	            var obj = {type:"update", name:"table", value: { subType : "insertTop"}};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            _this.router.doOperation(obj);

	            // var cell = this.getCell();
	            // if(cell){
	            //     var tableList = TableUtil.getTableList(TableUtil.getTable((cell)));
	            //     var index = TableUtil.getRowIndex(tableList, cell, false);
	            //     _this.router.doOperation({type:"update", name:"table", value: {  subType : "insertRow", rowIndex : index }});
	            // }

	            break;

	        case "table_insert_bottom":
	            var obj = {type:"update", name:"table", value: { subType : "insertBottom"}};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            _this.router.doOperation(obj);

	            // var cell = this.getCell();
	            // if(cell){
	            //     var tableList = TableUtil.getTableList(TableUtil.getTable((cell)));
	            //     var index = TableUtil.getRowIndex(tableList, cell, false);
	            //     _this.router.doOperation({type:"update", name:"table", value: { subType : "insertRow", rowIndex : index+1 }});
	            // }
	            break;

	        case "table_insert_left":
	            var obj = {type:"update", name:"table", value: { subType : "insertLeft"}};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            _this.router.doOperation(obj);

	            // var cell = this.getCell();
	            // if(cell){
	            //     var index  = TableUtil.getColIndex(cell,false);
	            //     _this.router.doOperation({type:"update", name:"table", value: { subType : "insertCol",  colIndex : index }});
	            // }
	            break;
	        case "table_insert_right":
	            var obj = {type:"update", name:"table", value: { subType : "insertRight"}};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            _this.router.doOperation(obj);

	            // var cell = this.getCell();
	            // if(cell){
	            //     var index  = TableUtil.getColIndex(cell,false);
	            //     _this.router.doOperation({type:"update", name:"table", value: { subType : "insertCol", colIndex : index+1 }});
	            // }
	            break;

	        case "table_remove_col":

	            var obj = {type:"update", name:"table", value: { subType : "removeCol"}};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            _this.router.doOperation(obj);

	            // var cell = this.getCell();
	            // if(cell){
	            //     var index  = TableUtil.getColIndex(cell,false);
	            //     _this.router.doOperation({type:"update", name:"table", value: { subType : "removeCol", colIndex : index }});
	            // }
	            break;
	        case "table_remove_row":
	            var obj = {type:"update", name:"table", value: { subType : "removeRow"}};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            _this.router.doOperation(obj);

	            // var cell = this.getCell();
	            // if(cell){
	            //     var tableList = TableUtil.getTableList(TableUtil.getTable((cell)));
	            //     var index = TableUtil.getRowIndex(tableList, cell, false);
	            //     _this.router.doOperation({type:"update", name:"table", value: { subType : "removeRow", rowIndex : index }});
	            // }
	            break;
	        case "table_remove_table":

	            var obj = {type:"update", name:"table", value: { subType : "removeTable"}};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            _this.router.doOperation(obj);

	            // var $selectedNodes = _this.editorElement.find("." + Define.CLASS.CONTENTS + " table " + "." + Define.CLASS.SELECTED);
	            // if ($selectedNodes.length) {
	            //     _this.router.doOperation({type:"delete", name:"table", value: { isCollapse : false }});
	            // } else {
	            //     var cell = this.getCell();
	            //     if(cell){
	            //         var index  = TableUtil.getColIndex(cell,false);
	            //         _this.router.doOperation({type:"delete", name:"table", value: { isCollapse : true }});
	            //     }
	            // }

	            break;

	        case "vertical_align_top":
	        case "vertical_align_middle":
	        case "vertical_align_bottom":
	        case "vertical_align_baseline":

	            var obj = {type:"update", name:"table", value: { subType : menu.id }};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            _this.router.doOperation(obj);



	            // var $tdNodes = this.$dom.selection.getSelectedTd();
	            //
	            // if ($tdNodes.length) {
	            //
	            // }
	            //
	            // var tableSelInfo = TableUtil.getTableSelInfo();
	            //
	            // if(tableSelInfo){
	            //     _this.router.doOperation({type:"update", name:"table", value: { subType : menu.id, sRowIndex : tableSelInfo.row.start, eRowIndex : tableSelInfo.row.end, sColIndex : tableSelInfo.col.start, eColIndex : tableSelInfo.col.end }});
	            // } else {
	            //     var cell = this.getCell();
	            //     if(cell){
	            //         var colIndex  = TableUtil.getColIndex(cell,false);
	            //         var tableList = TableUtil.getTableList(TableUtil.getTable((cell)));
	            //         var rowIndex = TableUtil.getRowIndex(tableList, cell, false);
	            //
	            //         _this.router.doOperation({type:"update", name:"table", value: { subType : menu.id, sRowIndex : rowIndex, eRowIndex : rowIndex, sColIndex : colIndex, eColIndex : colIndex }});
	            //     }
	            // }

	            break;

	        case "cell_horizontal_size":
	        case "cell_vertical_size":
	        case "cell_both_size":

	            var obj = {type:"update", name:"table", value: { subType : menu.id }};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            _this.router.doOperation(obj);

	            break;
	        case "table_merge":
	            var obj = {type:"update", name:"table", value: { subType : "mergeCell"}};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            _this.router.doOperation(obj);

	            // var tableSelInfo = TableUtil.getTableSelInfo();
	            // if(tableSelInfo){
	            //     _this.router.doOperation({type:"update", name:"table", value: { subType : "mergeCell"/*, sRowIndex : tableSelInfo.row.start, eRowIndex : tableSelInfo.row.end, sColIndex : tableSelInfo.col.start, eColIndex : tableSelInfo.col.end */}});
	            // }
	            break;
	        case "table_split_col":
	            var obj = {type:"update", name:"table", value: { subType : "splitCol"}};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            _this.router.doOperation(obj);

	            //var cell = this.getCell();
	            //if(cell){
	            //    var colIndex  = TableUtil.getColIndex(cell,false);
	            //    var tableList = TableUtil.getTableList(TableUtil.getTable((cell)));
	            //    var rowIndex = TableUtil.getRowIndex(tableList, cell, false);
	            //    _this.router.doOperation({type:"update", name:"table", value: { subType : "divideCol", colIndex : colIndex, rowIndex : rowIndex }});
	            //}
	            break;
	        case "table_split_row":
	            var obj = {type:"update", name:"table", value: { subType : "splitRow"}};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            _this.router.doOperation(obj);
	            break;
	        case "table_background_color":
	            if(!menu.color){
	                return;
	            }

	            var obj = {type:"update", name:"table", value: { subType : "tableBackgroundColor"}};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            obj.value.color = menu.color;

	            _this.router.doOperation(obj);

	            break;
	        case "table_border_style":
	            console.log(menu);
	            if(!menu.type){
	                return;
	            }

	            var obj = {type:"update", name:"table", value: { subType : "tableBorderStyle"}};

	            if (menu && menu.value && menu.value.range){
	                obj.value.range = menu.value.range;
	            }

	            //type : type, size : menu.size, style : menu.style, color : menu.color
	            obj.value.type = menu.type;
	            obj.value.size = menu.size;
	            obj.value.style = menu.style;
	            obj.value.color = menu.color;

	            _this.router.doOperation(obj);

	            break;

	        default :
	            break;
	    }
	};

	MenuController.prototype.setRouter = function(router) {
	    this.router = router;
	};

	MenuController.prototype.getRouter = function(router) {
	    return this.router;
	};

	MenuController.prototype.closeAllDialog = function() {
	    for (var key in this.dialogCache) {
	        if (this.dialogCache[key]) {
	            this.dialogCache[key].closeDialog();
	        }
	    }

	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_FIND_REPLACE).hide();

	    this.closeAllToolbarBox();
	};

	MenuController.prototype.closeAllToolbarBox = function() {
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_ACTIVE).removeClass(Define.WIDGET_CLASS.UI_ACTIVE);
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_SELECT_LIST).hide();
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_COMBO_BOX).hide();
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_COLOR_PICKER).hide();
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_LIST_PICKER).hide();
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_TABLE_PICKER).hide();
	    this.editorElement.find("." + Define.WIDGET_CLASS.UI_CUSTOM_BOX).hide();
	};

	module.exports = MenuController;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);
	var Resource = __webpack_require__(13);

	var Keyboard = __webpack_require__(38);
	var Mouse = __webpack_require__(42);
	var Clipboard = __webpack_require__(43);
	var ContextMenu = __webpack_require__(54);

	var Filter = __webpack_require__(44);

	function Event(editorElement, $domObject, router, menuController, api){
	    this.editorElement = null;
	    this.router = null;
	    this.$dom = null;
	    this.menuController = null;

	    this.keyboardEvent = null;
	    this.mouseEvent = null;
	    this.contextMenu = null;

	    this.clipboard = null;
	    this.clientFilter = null;

	    this.init(editorElement, $domObject, router, menuController, api);
	}

	Event.prototype.init = function(editorElement, $domObject, router, menuController, api) {
	    this.$dom = $domObject;

	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.menuController = menuController;
	    this.api = api;

	    this.clipboard = new Clipboard(this.editorElement, this.$dom, this.router);
	    this.keyboardEvent = new Keyboard(this.editorElement, this.$dom, this.router, this.menuController, this.clipboard, this);
	    this.mouseEvent = new Mouse(this.editorElement, this.$dom, this.router, this.menuController, this.clipboard, this);

	    this.contextMenu = new ContextMenu(this.editorElement, this.$dom, this.router, this.menuController);

	    this.clientFilter = new Filter(router.options);

	    var _this = this;

	    //Keyboard Events
	    var $constentsNode = this.editorElement.find("." + Define.CLASS.CONTENTS);
	    var $constentsViewNode = this.editorElement.find("." + Define.CLASS.CONTENT_VIEW);

	    $(document).on("keydown keyup keypress compositionstart compositionend paste copy cut", $.proxy(this.fireKeyboardEvents, this));

	    if(!($.browser.msie && $.browser.version < 10)) {
	        $constentsNode.on("dragleave", $.proxy(this.clipboard.dragleave, this.clipboard));
	        $constentsNode.on("dragover", $.proxy(this.clipboard.dragover, this.clipboard));
	        $constentsNode.on("drop", $.proxy(this.clipboard.drop, this.clipboard));
	    }

	    function controlselectHandler(evt) {
	        if ($.browser.msie) {
	            var $target = $(evt.target);

	            if (($target[0].nodeName == 'INPUT' && $target.attr('type') == 'text') || $target[0].nodeName == 'HR' || $target.attr(Define.ATTR.TYPE) == Define.ATTR_VALUE.KK_LAYER) {

	                return;
	            }
	        }

	        evt.preventDefault();
	    }

	    if ($.browser.msie){
	        document.body.addEventListener('mscontrolselect', controlselectHandler);
	    }else if ($.browser.mozilla){
	        document.designMode = "off";
	        document.execCommand("enableObjectResizing", false, "false");
	        document.execCommand("enableInlineTableEditing", false, "false");
	    }

	    //Mouse Events
	    $constentsViewNode.scroll(function (e) {
	        _this.mouseEvent.fireEvent(e);
	    });

	    this.editorElement.find("." + Define.CLASS.EDITOR_VIEW).on("mousedown mousemove mouseup click dblclick mouseleave mouseenter", $.proxy(this.fireMouseEvents, this));

	    this.editorElement.on("contextmenu", function(e){
	        if (e.button == 2) {
	            var $target = $(e.target);

	            if (!$target.closest('.' + Define.CLASS.CONTENTS).length) {
	                _this.stop(e);
	                return false;
	            }
	        }
	    });

	    this.editorElement.find("." + Define.CLASS.EDITOR_VIEW).on("contextmenu", function(e){
	        if (e.button == 2) {

	            var $target = $(e.target);

	            if (!$target.closest('.' + Define.CLASS.CONTENTS).length) {
	                return;
	            }

	            if (e.target.nodeType === Node.TEXT_NODE) {
	                $target = e.target.parent();
	            }

	            $target.addClass(Define.CLASS.KK_SELECT_OBJECT);

	            var op = _this.$dom.selection.get();

	            _this.$dom.selection.setOp(op, true);

	            if (_this.$dom.selection.getSelectedNode().length > 0){
	                window.getSelection().removeAllRanges();
	            }

	            var $selectObject = _this.editorElement.find("." + Define.CLASS.EDITOR_VIEW).find('.' + Define.CLASS.KK_SELECT_OBJECT);
	            $selectObject.removeClass(Define.CLASS.KK_SELECT_OBJECT);

	            var param = {
	                pageX : e.pageX,
	                pageY : e.pageY,
	                target : $selectObject
	            };

	            _this.contextMenu.showContextMenu(param);

	            e.preventDefault();

	            return false;
	            // //TODO : 마우스 오른쪽 클릭시 단어별 Selection이 잡힘. 이때 Selected Class 삽입 로직 추가 예정
	            // setTimeout(function(){
	            //     // _this.$dom.selection.fragmentRunNode(_this.$dom.selection.get());
	            //     // _this.contextMenu.showContextMenu(e);
	            //
	            // }, 10);
	        }
	    });

	    this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).on("mousedown", function(e){
	        _this.contextMenu.hideContextMenu();

	        if(e.target.nodeName != "INPUT"){
	            e.preventDefault();
	            return false;
	        }
	    });

	    this.editorElement.find("." + Define.CLASS.DIALOG).on("mousedown", function(e){
	        _this.contextMenu.hideContextMenu();

	        if(e.target.nodeName != "INPUT" && e.target.nodeName != "SELECT" && e.target.nodeName != "TEXTAREA" && e.target.nodeName != "LABEL"){
	            var $target = $(e.target);

	            if ($target.is("." + Define.CLASS.DIALOG)) {
	                _this.$dom.selection.removeModifyTargetNode();
	                $target.find("."+Define.CLASS.DIALOG_DIALOG_MAIN).hide();
	                $target.hide();
	            }

	            e.preventDefault();
	            return false;
	        }
	    });

	    this.editorElement.find("." + Define.CLASS.EDITOR_FOOTER).on("mousedown", function(e){
	        _this.contextMenu.hideContextMenu();

	        var $target = $(e.target);
	        var footerMenu = $target.hasClass(Define.CLASS.EDITOR_FOOTER_MENU)[0];
	        if(!footerMenu){
	            footerMenu = Util.findParentNode($target[0], "."+Define.CLASS.EDITOR_FOOTER_MENU);
	        }

	        if($target.hasClass(Define.CLASS.EDITOR_FOOTER_RESIZE_BAR)){

	            if(_this.actionObj == null){
	                _this.actionObj = {};
	            }
	            _this.actionObj.height = _this.editorElement.find("." + Define.CLASS.CONTENT_VIEW).height();
	            _this.actionObj.y=e.clientY;
	            _this.actionObj.action=true;

	            $(window).attr('unselectable', 'on').on('selectstart', false).css('user-select', 'none').css('UserSelect', 'none').css('MozUserSelect', 'none');
	            e.stopPropagation();

	            if (_this.editorElement.hasClass(Define.CLASS.FULL_SCREEN)){
	                return;
	            }

	            var toolbarElement = _this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR);
	            var footerElement = _this.editorElement.find('.' + Define.CLASS.EDITOR_FOOTER);
	            var $mainViews = _this.editorElement.find('.' + Define.CLASS.MAIN_VIEW);


	            var footerResizeMouseMove = function(e){
	                if(_this.actionObj && _this.actionObj.action == true){
	                    var resizeH = e.clientY - _this.actionObj.y;
	                    var newH = _this.actionObj.height + resizeH;

	                    if (newH > _this.router.options.minHeight) {
	                        var maxHeight = _this.router.options.maxHeight || (window.innerHeight - (toolbarElement.height() + footerElement.height() + Define.EDITOR_HEIGHT_BUFFER_SIZE + Define.FOOTER_BUFFER_SIZE + Define.BORDER_BUFFER_SIZE + 3));

	                        if (newH > maxHeight) {
	                            newH = maxHeight;
	                        }

	                        $mainViews.height(newH);
	                        _this.editorElement.height(toolbarElement.height() + footerElement.height() + newH + Define.EDITOR_HEIGHT_BUFFER_SIZE + Define.FOOTER_BUFFER_SIZE + Define.BORDER_BUFFER_SIZE);
	                    }
	                }

	                _this.stop(e);
	                return false;
	            };

	            var footerResizeMouseUp = function(e){
	                _this.actionObj.action = false;
	                var resizeH = e.clientY - _this.actionObj.y;
	                var newH = _this.actionObj.height + resizeH;

	                if (newH > _this.router.options.minHeight) {
	                    var maxHeight = _this.router.options.maxHeight || (window.innerHeight - (toolbarElement.height() + footerElement.height() + Define.EDITOR_HEIGHT_BUFFER_SIZE + Define.FOOTER_BUFFER_SIZE + Define.BORDER_BUFFER_SIZE + 3));

	                    if (newH > maxHeight) {
	                        newH = maxHeight;
	                    }

	                    $mainViews.height(newH);
	                    _this.editorElement.height(toolbarElement.height() + footerElement.height() + newH + Define.EDITOR_HEIGHT_BUFFER_SIZE + Define.FOOTER_BUFFER_SIZE + Define.BORDER_BUFFER_SIZE);
	                }

	                $(document).off("mousemove", footerResizeMouseMove);
	                $(document).off("mouseup", footerResizeMouseUp);

	                $(window).removeAttr('unselectable').off('selectstart').css('user-select', null).css('UserSelect', null).css('MozUserSelect', null);

	                _this.stop(e);
	                return false;
	            };

	            $(document).on("mousemove", footerResizeMouseMove).on("mouseup", footerResizeMouseUp);
	        }

	        e.preventDefault();
	        return false;
	    });

	    this.editorElement.find("." + Define.CLASS.EDITOR_FOOTER).on("click", function(e){
	        _this.contextMenu.hideContextMenu();

	        var $target = $(e.target);
	        var footerMenu = $target.hasClass(Define.CLASS.EDITOR_FOOTER_MENU)[0];
	        if(!footerMenu){
	            footerMenu = Util.findParentNode($target[0], "."+Define.CLASS.EDITOR_FOOTER_MENU);
	        }

	        if(! $target.hasClass(Define.CLASS.EDITOR_FOOTER_RESIZE_BAR)){
	            _this.setFooterMenu(footerMenu);
	        }

	        e.preventDefault();
	        return false;
	    });
	};

	Event.prototype.fireKeyboardEvents = function(e) {
	    if (this.api.options.Key_event) {
	        if (e.type == "keydown") {
	            this.api.options.Key_event(e);
	        }
	    }

	    this.mouseEvent.showSelectionBackground = false;
	    this.contextMenu.hideContextMenu();

	    if (this.mouseEvent.removeImageResizeEvents) {
	        this.mouseEvent.removeImageResizeEvents();
	    }

	    this.keyboardEvent.fireEvent(e);
	};

	Event.prototype.fireMouseEvents = function(e) {
	    if (this.api.options.Mouse_event) {
	        this.api.options.Mouse_event(e);
	    }

	    this.keyboardEvent.showSelectionBackground = false;
	    var _this = this;

	    switch(e.type){
	        case "mousedown":
	            this.menuController.closeAllToolbarBox();

	            if (e.button == 2) {
	                _this.contextMenu.setContextMenuItems(e);
	                _this.stop(e);
	            }
	        default:
	            if (e.button !== 2) {
	                this.mouseEvent.fireEvent(e);
	            }
	            break;
	    }
	};

	Event.prototype.setFooterMenu = function(footerMenu, isForceChange) {
	    this.menuController.closeAllDialog();
	    this.mouseEvent.allClearMouseAction();

	    var $selectedFooterMenu = $(footerMenu);

	    var $footerMenus = $selectedFooterMenu.closest("." + Define.CLASS.EDITOR_FOOTER_MENUS);
	    var footerMenuActive = $footerMenus.find("." + Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);

	    if (footerMenuActive[0] === $selectedFooterMenu[0]) {
	        return;
	    }

	    footerMenuActive.removeClass(Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);

	    var $contentView = this.editorElement.find("." + Define.CLASS.CONTENT_VIEW);
	    var $htmlView = this.editorElement.find("." + Define.CLASS.HTML_VIEW);
	    var $textView = this.editorElement.find("." + Define.CLASS.TEXT_VIEW);
	    var $preView = this.editorElement.find("." + Define.CLASS.PRE_VIEW);

	    var $contents = $contentView.find('.' + Define.CLASS.CONTENTS);
	    var $htmlContents = $htmlView.find('.' + Define.CLASS.HTML_CONTENTS);
	    var $textContents = $textView.find('.' + Define.CLASS.TEXT_CONTENTS);
	    var $previewContents = $preView.find('.' + Define.CLASS.PREVIEW_CONTENTS);

	    $previewContents.html("");

	    //HTML Mode 선택
	    if ($selectedFooterMenu.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_HTML)) {
	        var prettyHtml = '';
	        var $clipboardDivWrap = $('<div/>');

	        if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_EDITOR) || footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW)) {
	            var $clone = $contents.clone();

	            var videoTypeNode = $clone.find('img[' + Define.ATTR.DATA_VIDEO_SOURCE + ']');

	            if (videoTypeNode.length) {
	                videoTypeNode.replaceWith(function(){
	                    var style = $(this).attr(Define.ATTR.STYLE);
	                    var decodingHTML = decodeURIComponent($(this).attr(Define.ATTR.DATA_VIDEO_SOURCE));
	                    var $decodingHTML = $(decodingHTML);

	                    $decodingHTML.attr(Define.ATTR.STYLE, style);
	                    $decodingHTML.find('object, embed').attr(Define.ATTR.STYLE, style);

	                    if ($decodingHTML.is('embed')) {
	                        $decodingHTML.attr(Define.ATTR.SRC, $decodingHTML[0].src);
	                    } else {
	                        $decodingHTML.find('source, embed').attr(Define.ATTR.SRC, function(){
	                            return this.src;
	                        });

	                        $decodingHTML.find('object').attr(Define.ATTR.DATA, function(){
	                            return this.data;
	                        });
	                    }

	                    return $decodingHTML[0].outerHTML;
	                });
	            }

	            var commonHTML = this.clientFilter.doAdjustCopyDatas($clone[0].childNodes);

	            $clipboardDivWrap.html(commonHTML);

	            // $htmlContents.val($contents.html());
	        } else if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_TEXT)) {
	            var plain = $textContents.val();

	            plain = plain.replace(/\u000a\u000d/gi, "</span></p>" + Define.DEFAULT_PARAGRAPH_HTML + Define.DEFAULT_P_STYLE + "<span>");
	            plain = plain.replace(/\u000a/gi, "</span></p>" + Define.DEFAULT_P_STYLE + "<span>");

	            var plainText = Define.DEFAULT_P_STYLE + "<span>" + plain + "</span></p>";

	            pasteHTML = this.clientFilter.doSimpleTreeChange(plainText);

	            $clipboardDivWrap.html(pasteHTML);
	        }

	        prettyHtml = Util.prettyHtml($clipboardDivWrap[0]);

	        if (prettyHtml){
	            $htmlContents.val(prettyHtml.trim());
	        }else{
	            $htmlContents.val($clipboardDivWrap.html());
	        }

	        $contentView.addClass(Define.CLASS.VIEW_HIDE);
	        $htmlView.removeClass(Define.CLASS.VIEW_HIDE);
	        $textView.addClass(Define.CLASS.VIEW_HIDE);
	        $preView.addClass(Define.CLASS.VIEW_HIDE);

	        this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).addClass(Define.CLASS.DISABLED);

	        this.router.setClearAllHistories();
	        this.router.changedUndoRedoButtonEnable();

	        //Editor Mode 선택
	    } else if ($(footerMenu).hasClass(Define.CLASS.EDITOR_FOOTER_MENU_EDITOR)) {
	        if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_HTML)) {
	            if ($htmlContents.val() == "") {
	                $contents.html(Define.DEFAULT_PARAGRAPH_HTML);

	                this.$dom.selection.$paragraph = null;

	                this.$dom.selection.set({
	                    p : [0, 0],
	                    r : [0, 0]
	                });
	            } else {
	                var htmlContents = this.clientFilter.doSimpleTreeChange("<div>" + $htmlContents.val() + "</div>");

	                var $htmlContent = $(htmlContents);

	                htmlContents = $htmlContent.html();

	                if ($htmlContent[0].childNodes.length === 1 && $.inArray($htmlContent[0].childNodes[0].nodeName, Define.CONTENT_NODES) !== -1) {
	                    htmlContents =  Define.DEFAULT_P_STYLE + htmlContents + '</p>';
	                }

	                if (htmlContents === "") {
	                    htmlContents = Define.DEFAULT_PARAGRAPH_HTML;
	                }

	                // console.log("htmlContents >>>>>>>>>>>> ", htmlContents);

	                $contents.html(htmlContents);

	                $contents.attr('contenteditable', 'true');

	                // $contents.html($htmlContents.val());
	                // $contents.attr('contenteditable', 'true');
	            }
	        } else if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_TEXT)) {
	            var plain = $textContents.val();

	            plain = plain.replace(/\u000a\u000d/gi, "</span></p>" + Define.DEFAULT_PARAGRAPH_HTML + Define.DEFAULT_P_STYLE + "<span>");
	            plain = plain.replace(/\u000a/gi, "</span></p>" + Define.DEFAULT_P_STYLE + "<span>");

	            var plainText = Define.DEFAULT_P_STYLE + "<span>" + plain + "</span></p>";

	            // console.log("plainText >>>>>>>>>>>", plainText);

	            var pasteHTML = this.clientFilter.doSimpleTreeChange(plainText);

	            $contents.html(pasteHTML);
	        }


	        $contentView.removeClass(Define.CLASS.VIEW_HIDE);
	        $htmlView.addClass(Define.CLASS.VIEW_HIDE);
	        $textView.addClass(Define.CLASS.VIEW_HIDE);
	        $preView.addClass(Define.CLASS.VIEW_HIDE);

	        this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).removeClass(Define.CLASS.DISABLED);

	        this.router.setClearAllHistories();
	        this.router.changedUndoRedoButtonEnable();

	        //Text Mode 선택
	    } else  if ($selectedFooterMenu.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_TEXT)) {
	        var useTextEditor = isForceChange || window.confirm(Resource.alertMessage.textModeChangeConfirmMessage);

	        if (useTextEditor) {
	            var $clipboardDivWrap = $('<div/>');
	            var textValue = '';
	            var commonHTML = null;

	            if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_EDITOR) || footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW)) {
	                commonHTML = this.clientFilter.doAdjustCopyDatas($contents.clone()[0].childNodes);

	                $clipboardDivWrap.html(commonHTML);

	            } else if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_HTML)) {
	                var contents = $htmlContents.val().replace(/>\s*</gi, "><");
	                $clipboardDivWrap.html(contents);
	                commonHTML = this.clientFilter.doAdjustCopyDatas($clipboardDivWrap[0].childNodes);
	                $clipboardDivWrap.html(commonHTML);
	            }

	            var $paragraphs = $clipboardDivWrap.find(Define.PARAGRAPH_NODES.join(','));

	            if ($paragraphs.length) {
	                $paragraphs.each(function(){
	                    textValue += this.textContent + '\n';
	                });
	            } else if ($clipboardDivWrap.text()){
	                textValue = $clipboardDivWrap.text();
	            }

	            $textContents.val(textValue);

	            this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).addClass(Define.CLASS.DISABLED);

	            $contentView.addClass(Define.CLASS.VIEW_HIDE);
	            $htmlView.addClass(Define.CLASS.VIEW_HIDE);
	            $textView.removeClass(Define.CLASS.VIEW_HIDE);
	            $preView.addClass(Define.CLASS.VIEW_HIDE);

	            this.router.setClearAllHistories();
	            this.router.changedUndoRedoButtonEnable();
	        } else {
	            footerMenuActive.addClass(Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);
	            return;
	        }
	        //Preview Mode 선택
	    } else  if ($selectedFooterMenu.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW)) {
	        if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_EDITOR)) {

	        } else if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_HTML)) {

	            if ($htmlContents.val() == "") {
	                $contents.html(Define.DEFAULT_PARAGRAPH_HTML);
	            } else {
	                var $clipboardDivWrap = $('<div/>');

	                var htmlContents = $htmlContents.val().replace(/>\s*</gi, "><");

	                $clipboardDivWrap.html(htmlContents);

	                htmlContents = this.clientFilter.doSimpleTreeChange($clipboardDivWrap[0].outerHTML);

	                var $htmlContent = $(htmlContents);

	                htmlContents = $htmlContent.html();

	                if ($htmlContent[0].childNodes.length === 1 && $.inArray($htmlContent[0].childNodes[0].nodeName, Define.CONTENT_NODES) !== -1) {
	                    htmlContents = Define.DEFAULT_P_STYLE + htmlContents + '</p>';
	                }

	                if (htmlContents === "") {
	                    htmlContents = Define.DEFAULT_PARAGRAPH_HTML;
	                }

	                // console.log("htmlContents >>>>>>>>>>>> ", htmlContents);

	                $contents.html(htmlContents);

	            }
	        } else if (footerMenuActive.hasClass(Define.CLASS.EDITOR_FOOTER_MENU_TEXT)) {
	            var plain = $textContents.val();
	            plain = plain.replace(/\u000a\u000d/gi, "</span></p>" + Define.DEFAULT_PARAGRAPH_HTML + Define.DEFAULT_P_STYLE + "<span>");
	            plain = plain.replace(/\u000a/gi, "</span></p>" + Define.DEFAULT_P_STYLE + "<span>");

	            var plainText = Define.DEFAULT_P_STYLE + "<span>" + plain + "</span></p>";

	            var pasteHTML = this.clientFilter.doSimpleTreeChange(plainText);

	            $contents.html(pasteHTML);
	        }

	        var $clone = $contents.clone();

	        var videoTypeNode = $clone.find('img[' + Define.ATTR.DATA_VIDEO_SOURCE + ']');

	        if (videoTypeNode.length) {
	            videoTypeNode.replaceWith(function(){
	                var style = $(this).attr(Define.ATTR.STYLE);
	                var decodingHTML = decodeURIComponent($(this).attr(Define.ATTR.DATA_VIDEO_SOURCE));
	                var $decodingHTML = $(decodingHTML);

	                $decodingHTML.attr(Define.ATTR.STYLE, style);
	                $decodingHTML.find('object, embed').attr(Define.ATTR.STYLE, style);

	                if ($decodingHTML.is('embed')) {
	                    $decodingHTML.attr(Define.ATTR.SRC, $decodingHTML[0].src);
	                } else {
	                    $decodingHTML.find('source, embed').attr(Define.ATTR.SRC, function(){
	                        return this.src;
	                    });

	                    $decodingHTML.find('object').attr(Define.ATTR.DATA, function(){
	                        return this.data;
	                    });
	                }

	                return $decodingHTML[0].outerHTML;
	            });
	        }

	        $previewContents.html($clone.html());

	        //TODO : Filter를 통해 외부로 Export되는 HTML 형식으로 변경 예정

	        $contentView.addClass(Define.CLASS.VIEW_HIDE);
	        $htmlView.addClass(Define.CLASS.VIEW_HIDE);
	        $textView.addClass(Define.CLASS.VIEW_HIDE);
	        $preView.removeClass(Define.CLASS.VIEW_HIDE);

	        this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR).addClass(Define.CLASS.DISABLED);
	    }

	    $selectedFooterMenu.addClass(Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE);
	};

	Event.prototype.getKeyboardEvent = function(e) {
	    return this.keyboardEvent;
	};

	Event.prototype.getMouseEvent = function(e) {
	    return this.mouseEvent;
	};

	Event.prototype.stop = function(e) {
	    if(e.preventDefault) {e.preventDefault();}
	    if(e.stopPropagation) {e.stopPropagation();}

	    e.returnValue = false;
	    e.cancelBubble = true;
	    e.stopped = true;
	};

	module.exports = Event;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	

	var Jwerty = __webpack_require__(39);
	var Util = __webpack_require__(6);
	var Define = __webpack_require__(3);

	var AbstractEvent = __webpack_require__(41);

	function Keyboard(editorElement, $domObject, router, menuController, clipboard, rootEvent){

	    this.$dom = $domObject;

	    this.editorElement = $(editorElement);
	    this.$contentElement = this.editorElement.find("."+Define.CLASS.CONTENTS);
	    this.contentElement = this.$contentElement[0];
	    this.router = router;
	    this.menuController = menuController;

	    this.clipboard = clipboard;
	    this.rootEvent = rootEvent;

	    this.lastKeydownKeycode = null;
	    this.inputKeyCount = 0;
	    this.isInputKeyHistory = false;
	    this.MAX_INPUT_KEY_COUNT = 10;

	    this.isShowWindowSelection = false;
	}

	Keyboard.prototype = new AbstractEvent();


	Keyboard.prototype.fireEvent = function(e){
	    var _this = this;
	    // console.log("Keyboard >>>>>> fireEvent");

	    var $target = $(e.target);

	    if (e.keyCode == 27 && _this.editorElement.find("." + Define.CLASS.DIALOG).is(':visible')){
	        _this.editorElement.find("." + Define.CLASS.DIALOG).hide();
	        return;
	    }else if (e.keyCode == 27 && _this.editorElement.find("." + Define.WIDGET_CLASS.UI_FIND_REPLACE).is(':visible')){
	        _this.editorElement.find("." + Define.WIDGET_CLASS.UI_FIND_REPLACE).hide();
	        return;
	    }else if (Util.isEscapeEvent($target)) {
	        return;
	    }

	    //
	    // //Backspace;
	    // if (e.keyCode == 8) {
	    //     e.preventDefault();
	    //     e.stopPropagation();
	    //     return true;
	    // }
	    //

	    //hyperlink 다이얼로그가 떠 있을때의 상황 관련 내용들 모아서 한번에 정리 필요.
	    // if (this.editorElement.find("." + Define.CLASS.DIALOG_HYPERLINK).is(":visible")){
	    //     this.editorElement.find("."+Define.CLASS.CONTENTS).attr("contenteditable", false);
	    //
	    //     console.log($(e.target));
	    //
	    //     if (! ($(e.target).hasClass(Define.CLASS.DIALOG_HYPERLINK_TEXT) || $(e.target).hasClass(Define.CLASS.DIALOG_HYPERLINK_URL))){
	    //         _this.$dom.selection.removeRange();
	    //     }
	    //
	    //     var jwerty = new Jwerty(this, e);
	    //     jwerty.map("esc", function(combo){
	    //         _this.editorElement.find("." + Define.CLASS.DIALOG).hide();
	    //     });
	    //
	    //     return ;
	    // }else{
	    // }

	    if ($.browser.msie) {
	        if (e.key === 'Control' && (this.$dom.selection.getSelectedTd().length || this.$dom.selection.getSelectedTable().length)) {
	            this.contentElement.setAttribute("contenteditable", false);
	            return;
	        }

	        this.$dom.selection.setKeyboardEventTime(new Date().getTime());
	    }

	    //마우스로 셀렉션 된후 글자를 입력할때 delete등을 수행한 후에 한글 입력 레인지가 튀늰 에러 발생
	    if (! $.browser.msie){
	        this.contentElement.setAttribute("contenteditable", true);
	    }

	    try{
	        switch(e.type){
	            case "keydown" :
	                var $inputStyleNode = $('#' + Define.INPUT_STYLE_NODE);
	                if ($inputStyleNode.length > 0){
	                    if ([37, 38, 39, 40].indexOf(e.keyCode) > -1 && ! e.ctrlKey && ! e.altKey){
	                        $inputStyleNode.remove();
	                    }else{
	                        this.insertableNode = $inputStyleNode[0];
	                        $inputStyleNode[0].removeAttribute('id');
	                    }

	                }else{
	                    this.insertableNode = null;
	                }

	                this.keyDown(e);
	                break;

	            case "keyup" :
	                this.keyUp(e);
	                this.isShowWindowSelection = false;
	                break;

	            case "paste":
					
	            case "cut":
	            case "copy":
	                this.clipboardEvent(e);
	                break;
	            //
	            //case "keypress" :
	            //    this.keyPress(e);
	            //    break;
	            //
	            case "compositionstart" :
	                var rng = this.$dom.selection.getRange();

	                if (rng && rng.collapsed && Util.isTextNode(rng.startContainer)){
	                    var parentNode = rng.startContainer.parentNode;

	                    if (parentNode){
	                        var nextNode = parentNode.nextSibling;

	                        if (nextNode && Util.isTextNode(nextNode) && nextNode.parentNode.nodeName != 'SPAN'){
	                            $(nextNode).remove();
	                        }
	                    }
	                }

	                // this.compositionStart(e);
	               break;
	            //
	            // case "compositionend" :
	            //     console.log("compositionend");
	            //    // this.compositionEnd(e);
	            //    break;

	        }
	    }catch(err){
	        e.preventDefault();
	        e.stopPropagation();
	        console.log('keyboard event error', err);
	    }
	};

	Keyboard.prototype.replaceInputStyleText = function(){
	    if (this.insertableNode && this.insertableNode.parentNode){
	        var firstChild = this.insertableNode.firstChild;
	        if (Util.isTextNode(firstChild)){
	            var nodeValue = firstChild.nodeValue;
	            if (nodeValue && nodeValue.length > 1){
	                nodeValue = nodeValue.replace('\u200B', '');
	                firstChild.nodeValue = nodeValue;

	                this.$dom.selection.setWindowRange(firstChild, firstChild.nodeValue.length);
	            }
	        }
	    }
	};

	Keyboard.prototype.clipboardEvent = function(e) {
	    this.clipboard.fireClipboard(e);
	};

	//Special 기능 (http:// 로 시작하는 텍스트의 경우 하이퍼링크 변경처리)
	Keyboard.prototype.createHyperlinkTypeText = function() {
	    var selection = this.$dom.selection.getSelection();
	    var range = this.$dom.selection.getRange();
	    var textNodeList = [];
	    textNodeList[0] = range.startContainer;

	    var isSuccess = false;

	    var parentAtag = $(textNodeList).closest("a");
	    if (parentAtag.length == 0) {
	        for (var i = 0, len = textNodeList.length; i < len; i++) {
	            var textNode = textNodeList[i];
	            if (textNode && textNode.nodeType == 3) {
	                var link = null;
	                var parentNode = textNode.parentNode;
	                var result, matchedNode, matchedTextLength, matchedText;

	                while (textNode && (result = /http(s?):\/\/($|[^ ]+)/.exec(textNode.data.replace(/\s/g, " ").replace("&nbsp;", " ")))) {
	                    matchedNode = textNode.splitText(result.index);

	                    matchedText = result[0];
	                    matchedTextLength = matchedText.length;
	                    textNode = (matchedNode.length > matchedTextLength) ? matchedNode.splitText(matchedTextLength) : null;

	                    var _node = matchedNode.cloneNode(true);
	                    var url = _node.data;

	                    link = $('<a href="' + url + '/" target="none">' + url + '</a>')[0];
	                    parentNode.insertBefore(link, matchedNode);
	                    if (link) {
	                        range.setEnd(matchedNode, matchedNode.childNodes.length);
	                    }

	                    parentNode.removeChild(matchedNode);

	                    range.collapse(false);
	                    selection.removeAllRanges();
	                    selection.addRange(range);

	                    isSuccess = true;
	                }
	            }
	        }
	    }

	    return isSuccess;
	};

	Keyboard.prototype.keyDown = function(e) {
	    if (! this.isShowWindowSelection){
	        this.$dom.selection.showWindowSelection();

	        this.isShowWindowSelection = true;
	    }

	    this.$dom.selection.setHoldImageRange(null);

	    var _this = this;
	    var jwerty = new Jwerty(this, e);
	    var isStopEvent = false;
	    var isOptionKeyDown = false;

	    var isClipboardCopyCutKeyDown = false;
	    var clipboardCopyCutKeyType = "";
	    var isClipboardPasteKeyDown = false;

	    jwerty.map("⌘+a, ctrl+a", function(combo){
	        // Define.ID.A
	        // this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR).find('a[u-id="all_select"]').click();
	        _this.$dom.selection.selectAll();

	        isStopEvent = true;
	    }).map("⌘+f, ctrl+f", function(combo){
	        _this.menuController.menuSwitch("find");
	        isStopEvent = true;
	    }).map("⌘+shift+f, ctrl+shift+f", function(combo){
	        _this.menuController.menuSwitch("replace");
	        isStopEvent = true;
	    }).map("⌘+p, ctrl+p", function(combo){
	        _this.menuController.menuSwitch({id:'print'});
	        isStopEvent = true;
	    }).map("⌘+z, ctrl+z", function(combo){
	        _this.checkedKeydownInputKey();

	        _this.router.doOperation({type:"update", name:"undo"});
	        isStopEvent = true;
	    }).map("⌘+y, ctrl+y", function(combo){
	        _this.router.doOperation({type:"update", name:"redo"});
	        isStopEvent = true;
	    }).map("shift+tab", function(combo){

	        var selInfo = _this.$dom.selection.get();

	        var node = null;

	        if (selInfo){
	            try{
	                var opNode = _this.$dom.selection.getOpNode(selInfo.p[0], selInfo.r[0]);
	                if (opNode) {
	                    node = opNode.container;
	                }
	            }catch(e){
	                return;
	            }
	        }

	        if (node){
	            var $node = $(node);

	            var $parentParagraph = $node.closest('.' + Define.CLASS.KKEDITOR + ' .' + Define.CLASS.CONTENTS + ' ' + Define.PARAGRAPH_NODES.join(', .' + Define.CLASS.KKEDITOR + ' .' + Define.CLASS.CONTENTS + ' '));

	            if ($parentParagraph.is('li')) {
	                _this.router.doOperation({type:"create", name:"list", value:{isUnTab:true}});

	            } else {

	                //Table내에서의 Tab시 Prev Cell로 포커스 이동 처리 적용
	                var $parentCell = $node.closest('.' + Define.CLASS.CONTENTS + ' ' + Define.CELL_TYPE.join(', .' + Define.CLASS.CONTENTS + ' '));

	                if ($parentCell.length) {

	                    var $prevTd = $parentCell.prev();

	                    if ($prevTd.length) {
	                        _this.$dom.selection.setWindowRange($prevTd[0], $prevTd[0].childNodes.length);

	                    } else {
	                        var $currentTr = $parentCell.parent();

	                        var $prevTrNode = $currentTr.prev();

	                        if ($prevTrNode.length) {
	                            var $prevLastCell = $($prevTrNode[0].cells[$prevTrNode[0].cells.length - 1]);

	                            if ($prevLastCell.length) {
	                                _this.$dom.selection.setWindowRange($prevLastCell[0], $prevLastCell[0].childNodes.length);
	                            }
	                        }
	                    }
	                }
	            }
	        }

	        isStopEvent = true;

	    }).map("tab", function(combo){

	        var selInfo = _this.$dom.selection.get();

	        var node = null;

	        if (selInfo){
	            try{
	                var opNode = _this.$dom.selection.getOpNode(selInfo.p[0], selInfo.r[0]);
	                if (opNode) {
	                    node = opNode.container;
	                }
	            }catch(e){
	                return;
	            }
	        }

	        if (node){
	            var $node = $(node);

	            var $parentParagraph = $node.closest('.' + Define.CLASS.KKEDITOR + ' .' + Define.CLASS.CONTENTS + ' ' + Define.PARAGRAPH_NODES.join(', .' + Define.CLASS.KKEDITOR + ' .' + Define.CLASS.CONTENTS + ' '));
	            if ($parentParagraph.is('li')) {
	                _this.router.doOperation({type:"create", name:"list", value:{isTab:true}});
	            } else {

	                //Table내에서의 Tab시 Next Cell로 포커스 이동 처리 적용
	                var $parentCell = $node.closest('.' + Define.CLASS.CONTENTS + ' ' + Define.CELL_TYPE.join(', .' + Define.CLASS.CONTENTS + ' '));

	                if ($parentCell.length) {

	                    var $nextTd = $parentCell.next();

	                    if ($nextTd.length) {
	                        _this.$dom.selection.setWindowRange($nextTd[0], 0);

	                    } else {
	                        var $currentTr = $parentCell.parent();

	                        var $nextTrNode = $currentTr.next();

	                        if ($nextTrNode.length) {
	                            var $nextFirstCell = $($nextTrNode[0].cells[0]);

	                            if ($nextFirstCell.length) {
	                                _this.$dom.selection.setWindowRange($nextFirstCell[0], 0);
	                            }
	                        }
	                    }

	                } else {

	                    //기본적인 Tab 기능
	                    _this.router.doOperation({type:"create", name:"tab"});

	                    _this.$dom.selection.removeSelected();
	                }
	            }
	        }

	        isStopEvent = true;
	    }).map("delete, backspace", function(combo){

	        if (_this.rootEvent.mouseEvent.removeTableAllResizeEvents) {
	            var tdNodes = _this.$dom.selection.getSelectedTd();
	            $(tdNodes).removeClass(Define.CLASS.SELECTED_TD);
	        }

	        var selInfo = _this.$dom.selection.get();

	        // console.log("keydown ", selInfo.r);
	        _this.$dom.selection.setOp({p:selInfo.p, r:selInfo.r});

	        isStopEvent = true;
	        if (combo == "backspace" || combo == "delete"){
	            var opSource = {
	                type : "delete",
	                name : "text",
	                value : {
	                    keyName : combo == "delete" ? "delete" : "backspace"
	                }
	            };

	            _this.contentsDeleteAdjust(selInfo, opSource);
	        }

	    }).map("⌘+v, ctrl+v", function(combo){
	        isClipboardPasteKeyDown = true;
	        isOptionKeyDown = true;

	    }).map("⌘+c, ctrl+c", function(combo){

	        var selInfo = _this.$dom.selection.get();

	        if (this.$dom.selection.getSelectedNode().length == 0 && this.$dom.selection.getSelectedTd().length == 0){
	            _this.$dom.selection.setOp({p:selInfo.p, r:selInfo.r});
	        }

	        isClipboardCopyCutKeyDown = true;
	        clipboardCopyCutKeyType = "copy";
	        isOptionKeyDown=true;

	    }).map("⌘+x, ctrl+x", function(combo){
	        isClipboardCopyCutKeyDown = true;
	        clipboardCopyCutKeyType = "cut";

	        isOptionKeyDown=true;

	    }).map("⌘+b, ctrl+b, ⌘+i, ctrl+i, ⌘+u, ctrl+u", function(combo){
	        if (this.insertableNode){
	            this.insertableNode.setAttribute('id', Define.INPUT_STYLE_NODE);
	        }

	        if (combo == "ctrl+b" || combo == "⌘+b"){
	            _this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR).find("a[u-id=bold]").trigger("click");
	        }else if (combo == "ctrl+i" || combo == "⌘+i"){
	            _this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR).find("a[u-id=italic]").trigger("click");
	        }else if (combo == "ctrl+u" || combo == "⌘+u"){
	            _this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR).find("a[u-id=underline]").trigger("click");
	        }

	        isStopEvent = true;
	    }).map("⌘+l, ctrl+l, ⌘+e, ctrl+e, ⌘+r, ctrl+r, ⌘+j, ctrl+j", function(combo){
	        if (combo == "⌘+r" || combo == "ctrl+r"){

	        }else{
	            if (combo == "ctrl+l" || combo == "⌘+l"){
	                _this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR).find("a[u-id=align_left]").trigger("click");
	            }else if (combo == "ctrl+e" || combo == "⌘+e"){
	                _this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR).find("a[u-id=align_center]").trigger("click");
	            }else if (combo == "ctrl+r" || combo == "⌘+r"){
	                _this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR).find("a[u-id=align_right]").trigger("click");
	            }else if (combo == "ctrl+j" || combo == "⌘+j"){
	                _this.editorElement.find('.' + Define.CLASS.EDITOR_TOOLBAR).find("a[u-id=align_justify]").trigger("click");
	            }
	            isStopEvent = true;
	        }
	    }).map("shift+↑,shift+↓,shift+←,shift+→"/*"⌘+↓,⌘+↑,⌘+←,⌘+→" */, function(combo){
	    }).map("←,→,↓,↑", function(combo){
	        var $selectedNode = _this.$dom.selection.getSelectedNode();
	        if ($selectedNode.length > 0){
	            setTimeout(function(){
	                _this.$dom.selection.setWindowRange($selectedNode[0], 0);
	            }, 0);
	        }

	        _this.$dom.selection.removeSelected();

	        if ($.browser.chrome) {
	            var selInfo = _this.$dom.selection.get();

	            var node = null;

	            if (selInfo){
	                try{
	                    var opNode = _this.$dom.selection.getOpNode(selInfo.p[0], selInfo.r[0]);
	                    if (opNode) {
	                        node = opNode.container;
	                    }
	                }catch(e){
	                    return;
	                }
	            }

	            if (node){
	                var $node = $(node);

	                var $parentParagraph = $node.closest('.' + Define.CLASS.KKEDITOR + ' .' + Define.CLASS.CONTENTS + ' ' + Define.PARAGRAPH_NODES.join(', .' + Define.CLASS.KKEDITOR + ' .' + Define.CLASS.CONTENTS + ' '));

	                var $parentTD = $node.closest('.' + Define.CLASS.CONTENTS + ' ' + Define.CELL_TYPE.join(', .' + Define.CLASS.CONTENTS + ' '));

	                if ($parentTD.length) {
	                    var $parentTable = $parentTD.closest('.' + Define.CLASS.KKEDITOR + ' .' + Define.CLASS.CONTENTS + ' TABLE');

	                    if ($parentTD.length) {

	                        var tableRows = $parentTable[0].rows;
	                        var rowCount = $parentTable[0].rows.length;

	                        var currentPos = $parentTD.cellPos();

	                        var currentLeft = currentPos.left;
	                        var currentTop = currentPos.top;
	                        var nextTopIndex = currentPos.top + ($parentTD[0].rowSpan ? $parentTD[0].rowSpan : 1);

	                        if (combo == "↓") {
	                            if (!$parentParagraph.next().length) {
	                                var nextNode = null;

	                                if (nextTopIndex < rowCount) {
	                                    //TODO : Next Row의 Cell로 이동

	                                    nextNode = Util.getSearchCell(tableRows, nextTopIndex, currentLeft);

	                                    if (nextNode) {
	                                        var $nextNode = $(nextNode);

	                                        var $paragraphNodes = $nextNode.find(Define.PARAGRAPH_NODES.join(','));

	                                        if (!$paragraphNodes.length) {
	                                            $paragraphNodes = $nextNode.find(Define.CONTENT_NODES.join(','));

	                                            if (!$paragraphNodes.length) {
	                                                $paragraphNodes = $(Define.DEFAULT_PARAGRAPH_HTML);

	                                                $nextNode.prepend($paragraphNodes);
	                                            }
	                                        }

	                                        _this.$dom.selection.setWindowRange($paragraphNodes[0], 0);
	                                    }
	                                } else {
	                                    nextNode = $parentTable.next();

	                                    if (nextNode.length) {
	                                        _this.$dom.selection.setWindowRange(nextNode[0], 0);
	                                    }
	                                }

	                                isStopEvent = true;
	                            }

	                        } else if (combo == "↑") {
	                            if (!$parentParagraph.prev().length) {
	                                var prevNode = null;

	                                if (currentTop != 0) {
	                                    //TODO : Prev Row의 Cell로 이동
	                                    prevNode = Util.getSearchCell(tableRows, currentTop - 1, currentLeft);

	                                    if (prevNode) {
	                                        var $prevNode = $(prevNode);

	                                        var $paragraphNodes = $prevNode.find(Define.PARAGRAPH_NODES.join(','));

	                                        if (!$paragraphNodes.length) {
	                                            $paragraphNodes = $prevNode.find(Define.CONTENT_NODES.join(','));

	                                            if (!$paragraphNodes.length) {
	                                                $paragraphNodes = $(Define.DEFAULT_PARAGRAPH_HTML);

	                                                $prevNode.append($paragraphNodes);
	                                            }
	                                        }

	                                        var lastNode = $paragraphNodes[$paragraphNodes.length - 1];

	                                        _this.$dom.selection.setWindowRange(lastNode, lastNode.childNodes.length);
	                                    }
	                                } else{
	                                    prevNode = $parentTable.prev();

	                                    if (prevNode.length) {
	                                        _this.$dom.selection.setWindowRange(prevNode[0], 0);
	                                    }
	                                }

	                                isStopEvent = true;
	                            }
	                        }
	                    }
	                }
	            }
	        }

	    }).map("shift+enter", function(combo){
	        isStopEvent = true;
	    }).map("space", function(combo){
	        var selInfo = _this.$dom.selection.get();

	        if (selInfo.collapsed){
	            if (_this.createHyperlinkTypeText()) {
	                _this.router.doOperation({
	                    type : "read",
	                    name : "text",
	                    value : {
	                        keyCode : 32
	                    }
	                });
	            }
	        }

	    }).map("enter", function(combo){
	        isStopEvent = true;

	        var selInfo = _this.$dom.selection.get();
	        if (selInfo.collapsed){
	            _this.createHyperlinkTypeText();

	            _this.router.doOperation({
	                type : "create",
	                name : "text",
	                value : {
	                    keyCode : 13
	                }
	            });

	        }else{
	            try{
	                _this.contentsDeleteAdjust(selInfo, {
	                    type : "delete",
	                    name : "text",
	                    value : {
	                        keyName : "backspace"
	                    }
	                });

	                _this.router.doOperation({
	                    type : "create",
	                    name : "text",
	                    value : {
	                        keyCode : 13
	                    }
	                });
	            }catch(e){
	                console.log('is enter error', e);
	            }
	        }
	    });

	    this.rootEvent.mouseEvent.allClearMouseAction();

	    if (!isStopEvent && !isOptionKeyDown && jwerty.isInputKeys()) {
	        var selectedNodes = this.$dom.selection.getSelectedNode();
	        if (selectedNodes.length) {
	            var selInfo = _this.$dom.selection.get();

	            var opSource = {
	                type : "delete",
	                name : "text",
	                value : {
	                    keyName : "backspace"
	                }
	            };

	            _this.contentsDeleteAdjust(selInfo, opSource);
	        } else {
	            if (this.inputKeyCount == 0) {
	                this.isInputKeyHistory = true;
	                this.router.externalSetUndoHistory(true);
	                this.inputKeyCount = this.MAX_INPUT_KEY_COUNT;
	            } else {
	                this.inputKeyCount--;
	            }
	        }
	    }

	    if (!isOptionKeyDown && (jwerty.isCtrl() || jwerty.isAlt() || jwerty.isShift() || jwerty.isSuper())){
	        isOptionKeyDown = true;
	    }

	    if (isStopEvent) {
	        this.stop(e);
	    }else{
	        if (isClipboardCopyCutKeyDown) {
	            console.log("clipboard Copy Ready!");
	            _this.clipboard.setCopyReady(clipboardCopyCutKeyType);

	        } else if (isClipboardPasteKeyDown){
	            console.log("clipboard Paste Ready!");

	            _this.clipboard.setPasteReady();

	        } else if (!isOptionKeyDown){
	            _this.$dom.selection.removeSelected();
	            if (_this.rootEvent.mouseEvent.removeImageResizeEvents) {
	                _this.rootEvent.mouseEvent.removeImageResizeEvents();
	            }

	            if (_this.rootEvent.mouseEvent.removeTableAllResizeEvents) {
	                _this.rootEvent.mouseEvent.removeTableAllResizeEvents();
	            }
	        }
	    }
	};

	Keyboard.prototype.keyUp = function(e){
	    var _this = this;

	    var jwerty = new Jwerty(this, e);

	    jwerty.map("shift+↑,shift+↓,shift+←,shift+→,⌘+↑,⌘+↓,⌘+←,⌘+→", function(combo){
	        _this.router.doStatusHighlight();
	    }).map("←,→,↓,↑", function(combo){
	        var windowRange = _this.$dom.selection.getRange();

	        // if (windowRange){
	        //     if (windowRange.collapsed){
	        //         var startContainer = windowRange.startContainer;
	        //         var startOffset = windowRange.startOffset;
	        //
	        //         if (startContainer.childNodes.length > 0){
	        //
	        //             var targetNode = null;
	        //             var isFirst = false;
	        //             if (startOffset == 0){
	        //                 targetNode = startContainer.childNodes[0];
	        //                 isFirst = true;
	        //             }else{
	        //                 if(startOffset % 2 == 0){
	        //                     targetNode = startContainer.childNodes[startOffset - 1];
	        //                     isFirst = false;
	        //                 }else{
	        //                     targetNode = startContainer.childNodes[startOffset];
	        //                     isFirst = true;
	        //                 }
	        //             }
	        //
	        //             if (isFirst){
	        //                 var firstSpan = $(targetNode).find('span').first()[0];
	        //                 _this.$dom.selection.setWindowRange(firstSpan, 0);
	        //             }else{
	        //
	        //                 if (combo == '→'){
	        //                     var nextNode = targetNode.nextSibling;
	        //
	        //                     if (nextNode){
	        //                         if (nextNode.nodeType == 1 && nextNode.nodeName == 'SPAN'){
	        //                             _this.$dom.selection.setWindowRange(nextNode, 0);
	        //                         }else{
	        //                             var firstSpan = $(nextNode).find('span').first()[0];
	        //                             _this.$dom.selection.setWindowRange(firstSpan, 0);
	        //                         }
	        //
	        //                         return false;
	        //                     }
	        //
	        //                 }
	        //
	        //                 var lastSpan = $(targetNode).find('span').last()[0];
	        //                 _this.$dom.selection.setWindowRange(lastSpan, 1);
	        //             }
	        //         }
	        //
	        //     }
	        // }

	        _this.router.doStatusHighlight();
	    }).map("shift+enter", function(combo){
	        _this.router.doStatusHighlight();
	    }).map("enter", function(combo){
	        _this.router.doStatusHighlight();
	    });

	    if (jwerty.isInputKeys()) {
	        if (this.isInputKeyHistory) {
	            _this.router.setRedoHistory();
	            _this.router.changedUndoRedoButtonEnable();
	            this.isInputKeyHistory = false;
	        }
	    }
	};

	//Contents에 대한 Delete처리시 조정 작업 처리
	Keyboard.prototype.contentsDeleteAdjust = function(selInfo, opSource) {
	    var _this = this;
	    var textDeleteFunction = function(p, r, s, section) {
	        opSource.range = {
	            p : p,
	            r : r,
	            s : s
	        };
	        _this.doDelete(opSource);
	    };

	    if (opSource.name == "text") {
	        if (opSource.value.keyName == "backspace") {

	            textDeleteFunction(selInfo.p, selInfo.r, "text");
	            return true;
	        } else if (opSource.value.keyName == "delete") {
	            textDeleteFunction(selInfo.p, selInfo.r, "text");
	            return true;
	        }
	    } else {
	        textDeleteFunction([selInfo.p[0], selInfo.p[1]], [selInfo.r[0], selInfo.r[1]], "text");
	    }

	    return true;
	};

	//Delete OP 전송
	Keyboard.prototype.doDelete = function(opSoruce) {
	    this.router.doOperation(opSoruce);

	    if (opSoruce.range) {
	        // this.$dom.selection.setOp({
	        //     p : [opSoruce.range.p[0], opSoruce.range.p[0]],
	        //     r : [opSoruce.range.r[0], opSoruce.range.r[0]],
	        //     s : opSoruce.range.s,
	        //     section : opSoruce.range.section
	        // });
	    } else {
	        this.$dom.selection.collapseOp("first");
	    }

	};

	Keyboard.prototype.checkedKeydownInputKey = function() {
	    if (this.inputKeyCount > 0) {
	        this.router.setRedoHistory();
	        this.router.changedUndoRedoButtonEnable();

	        this.setClearInputKeyInfo();
	    }
	};

	Keyboard.prototype.setClearInputKeyInfo = function() {
	    this.inputKeyCount = 0;
	    this.isInputKeyHistory = false;
	};

	module.exports = Keyboard;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * jwerty - Awesome handling of keyboard events
	 *
	 * jwerty is a JS lib which allows you to bind, fire and assert key combination
	 * strings against elements and events. It normalises the poor std api into
	 * something easy to use and clear.
	 *
	 * This code is licensed under the MIT
	 * For the full license see: http://keithamus.mit-license.org/
	 * For more information see: http://keithamus.github.com/jwerty
	 *
	 * @author Keith Cirkel ('keithamus') <jwerty@keithcirkel.co.uk>
	 * @license http://keithamus.mit-license.org/
	 * @copyright Copyright © 2011, Keith Cirkel
	 *
	 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(40)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($) {

	    function realTypeOf(v, s) {
	        return (v === null) ? s === 'null'
	            : (v === undefined) ? s === 'undefined'
	            : (v.is && v instanceof $) ? s === 'element'
	            : Object.prototype.toString.call(v).toLowerCase().indexOf(s) > 7;
	    }

	    // Private
	    var _modProps = { 16: 'shiftKey', 17: 'ctrlKey', 18: 'altKey', 91: 'metaKey' };

	    // Generate key mappings for common keys that are not printable.
	    var _keys = {

	        // MOD aka toggleable keys
	        mods: {
	            // Shift key, ⇧
	            '⇧': 16,
	            shift: 16,
	            // CTRL key, on Mac: ⌃
	            '⌃': 17,
	            ctrl: 17,
	            // ALT key, on Mac: ⌥ (Alt)
	            '⌥': 18,
	            alt: 18,
	            option: 18,
	            // META, on Mac: ⌘ (CMD), on Windows (Win), on Linux (Super)
	            '⌘': 91,
	            meta: 91,
	            cmd: 91,
	            'super': 91,
	            win: 91
	        },

	        // Normal keys
	        keys: {
	            // Backspace key, on Mac: ⌫ (Backspace)
	            '⌫': 8,
	            backspace: 8,
	            // Tab Key, on Mac: ⇥ (Tab), on Windows ⇥⇥
	            '⇥': 9,
	            '⇆': 9,
	            tab: 9,
	            // Return key, ↩
	            '↩': 13,
	            'return': 13,
	            enter: 13,
	            '⌅': 13,
	            // Pause/Break key
	            'pause': 19,
	            'pause-break': 19,
	            // Caps Lock key, ⇪
	            '⇪': 20,
	            caps: 20,
	            'caps-lock': 20,
	            // Escape key, on Mac: ⎋, on Windows: Esc
	            '⎋': 27,
	            escape: 27,
	            esc: 27,
	            // Space key
	            space: 32,
	            // Page-Up key, or pgup, on Mac: ↖
	            '↖': 33,
	            pgup: 33,
	            'page-up': 33,
	            // Page-Down key, or pgdown, on Mac: ↘
	            '↘': 34,
	            pgdown: 34,
	            'page-down': 34,
	            // END key, on Mac: ⇟
	            '⇟': 35,
	            end: 35,
	            // HOME key, on Mac: ⇞
	            '⇞': 36,
	            home: 36,
	            // Insert key, or ins
	            ins: 45,
	            insert: 45,
	            // Delete key, on Mac: ⌫ (Delete)
	            del: 46,
	            'delete': 46,

	            // Left Arrow Key, or ←
	            '←': 37,
	            left: 37,
	            'arrow-left': 37,
	            // Up Arrow Key, or ↑
	            '↑': 38,
	            up: 38,
	            'arrow-up': 38,
	            // Right Arrow Key, or →
	            '→': 39,
	            right: 39,
	            'arrow-right': 39,
	            // Up Arrow Key, or ↓
	            '↓': 40,
	            down: 40,
	            'arrow-down': 40,

	            // odities, printing characters that come out wrong:
	            // Num-Multiply, or *
	            '*': 106,
	            star: 106,
	            asterisk: 106,
	            multiply: 106,
	            // Num-Plus or +
	            '+': 107,
	            'plus': 107,
	            // Num-Subtract, or -
	            '-': 109,
	            subtract: 109,
	            'num-.': 110,
	            'num-period': 110,
	            'num-dot': 110,
	            'num-full-stop': 110,
	            'num-delete': 110,
	            // Semicolon
	            ';': 186,
	            semicolon: 186,
	            // = or equals
	            '=': 187,
	            'equals': 187,
	            // Comma, or ,
	            ',': 188,
	            comma: 188,
	            //'-': 189, //???
	            // Period, or ., or full-stop
	            '.': 190,
	            period: 190,
	            'full-stop': 190,
	            // Slash, or /, or forward-slash
	            '/': 191,
	            slash: 191,
	            'forward-slash': 191,
	            // Tick, or `, or back-quote
	            '`': 192,
	            tick: 192,
	            'back-quote': 192,
	            // Open bracket, or [
	            '[': 219,
	            'open-bracket': 219,
	            // Back slash, or \
	            '\\': 220,
	            'back-slash': 220,
	            // Close backet, or ]
	            ']': 221,
	            'close-bracket': 221,
	            // Apostraphe, or Quote, or '
	            '\'': 222,
	            quote: 222,
	            apostraphe: 222
	        }

	    };

	    // To minimise code bloat, add all of the 0-9 and NUMPAD 0-9 keys in a loop
	    var i = 47,
	        n = 0;
	    while (++i < 106) {
	        _keys.keys[n] = i;
	        _keys.keys['num-' + n] = i + 48;
	        ++n;
	    }

	    // To minimise code bloat, add all of the F1-F25 keys in a loop
	    i = 111,
	    n = 1;
	    while (++i < 136) {
	        _keys.keys['f' + n] = i;
	        ++n;
	    }

	    // To minimise code bloat, add all of the letters of the alphabet in a loop
	    i = 64;
	    while (++i < 91) {
	        _keys.keys[String.fromCharCode(i).toLowerCase()] = i;
	    }

	    function JwertyCode(jwertyCode) {
	        var i,
	            c,
	            n,
	            z,
	            keyCombo,
	            optionals,
	            jwertyCodeFragment,
	            rangeMatches,
	            rangeI;

	        // In-case we get called with an instance of ourselves, just return that.
	        if (jwertyCode instanceof JwertyCode) return jwertyCode;

	        // If jwertyCode isn't an array, cast it as a string and split into array.
	        if (!realTypeOf(jwertyCode, 'array')) {
	            jwertyCode = (String(jwertyCode)).replace(/\s/g, '').toLowerCase()
	                .match(/(?:\+,|[^,])+/g);
	        }

	        // Loop through each key sequence in jwertyCode
	        for (i = 0, c = jwertyCode.length; i < c; ++i) {

	            // If the key combo at this part of the sequence isn't an array,
	            // cast as a string and split into an array.
	            if (!realTypeOf(jwertyCode[i], 'array')) {
	                jwertyCode[i] = String(jwertyCode[i])
	                    .match(/(?:\+\/|[^\/])+/g);
	            }

	            // Parse the key optionals in this sequence
	            optionals = [],
	            n = jwertyCode[i].length;
	            while (n--) {

	                // Begin creating the object for this key combo
	                jwertyCodeFragment = jwertyCode[i][n];

	                keyCombo = {
	                    jwertyCombo: String(jwertyCodeFragment),
	                    shiftKey: false,
	                    ctrlKey: false,
	                    altKey: false,
	                    metaKey: false
	                };

	                // If jwertyCodeFragment isn't an array then cast as a string
	                // and split it into one.
	                if (!realTypeOf(jwertyCodeFragment, 'array')) {
	                    jwertyCodeFragment = String(jwertyCodeFragment).toLowerCase()
	                        .match(/(?:(?:[^\+])+|\+\+|^\+$)/g);
	                }

	                z = jwertyCodeFragment.length;
	                while (z--) {

	                    // Normalise matching errors
	                    if (jwertyCodeFragment[z] === '++') jwertyCodeFragment[z] = '+';

	                    // Inject either keyCode or ctrl/meta/shift/altKey into keyCombo
	                    if (jwertyCodeFragment[z] in _keys.mods) {
	                        keyCombo[_modProps[_keys.mods[jwertyCodeFragment[z]]]] = true;
	                    } else if (jwertyCodeFragment[z] in _keys.keys) {
	                        keyCombo.keyCode = _keys.keys[jwertyCodeFragment[z]];
	                    } else {
	                        rangeMatches = jwertyCodeFragment[z].match(/^\[([^-]+\-?[^-]*)-([^-]+\-?[^-]*)\]$/);
	                    }
	                }
	                if (realTypeOf(keyCombo.keyCode, 'undefined')) {
	                    // If we picked up a range match earlier...
	                    if (rangeMatches && (rangeMatches[1] in _keys.keys) && (rangeMatches[2] in _keys.keys)) {
	                        rangeMatches[2] = _keys.keys[rangeMatches[2]];
	                        rangeMatches[1] = _keys.keys[rangeMatches[1]];

	                        // Go from match 1 and capture all key-comobs up to match 2
	                        for (rangeI = rangeMatches[1]; rangeI < rangeMatches[2]; ++rangeI) {
	                            optionals.push({
	                                altKey: keyCombo.altKey,
	                                shiftKey: keyCombo.shiftKey,
	                                metaKey: keyCombo.metaKey,
	                                ctrlKey: keyCombo.ctrlKey,
	                                keyCode: rangeI,
	                                jwertyCombo: String(jwertyCodeFragment)
	                            });

	                        }
	                        keyCombo.keyCode = rangeI;
	                    // Inject either keyCode or ctrl/meta/shift/altKey into keyCombo
	                    } else {
	                        keyCombo.keyCode = 0;
	                    }
	                }
	                optionals.push(keyCombo);

	            }
	            this[i] = optionals;
	        }
	        this.length = i;
	        return this;
	    }

	    var _jwerty = {

	        /**
	         * jwerty.is
	         *
	         * `jwerty.is` will return a boolean value, based on if `event` matches
	         *  `jwertyCode`. `jwerty.is` is called by `jwerty.event` to check
	         *  whether or not to fire the callback. `event` can be a DOM event, or
	         *  a jQuery/Zepto/Ender manufactured event. The properties of
	         *  `jwertyCode` (speficially ctrlKey, altKey, metaKey, shiftKey and
	         *  keyCode) should match `jwertyCode`'s properties - if they do, then
	         *  `jwerty.is` will return `true`. If they don't, `jwerty.is` will
	         *  return `false`.
	         *
	         *   @param {Mixed} jwertyCode can be an array, or string of key
	         *      combinations, which includes optinals and or sequences
	         *   @param {KeyboardEvent} event is the KeyboardEvent to assert against
	         *   @param {Integer} i (Optional) checks the `i` key in jwertyCode
	         *      sequence
	         *
	         */
	        is: function (jwertyCode, event, i /*? 0*/) {
	            var jwertyCode = new JwertyCode(jwertyCode);
	            // Default `i` to 0
	            i = i || 0;
	            // We are only interested in `i` of jwertyCode;
	            jwertyCode = jwertyCode[i];
	            // jQuery stores the *real* event in `originalEvent`, which we use
	            // because it does annoything stuff to `metaKey`
	            event = event.originalEvent || event;

	            // We'll look at each optional in this jwertyCode sequence...
	            var n = jwertyCode.length,
	                returnValue = false;

	            // Loop through each fragment of jwertyCode
	            while (n--) {
	                returnValue = jwertyCode[n].jwertyCombo;
	                // For each property in the jwertyCode object, compare to `event`
	                for (var p in jwertyCode[n]) {
	                    // ...except for jwertyCode.jwertyCombo...
	                    if (p !== 'jwertyCombo' && event[p] != jwertyCode[n][p]) returnValue = false;
	                }
	                // If this jwertyCode optional wasn't falsey, then we can return early.
	                if (returnValue !== false) return returnValue;
	            }
	            return returnValue;
	        },

	        KEYS: _keys
	    };

	    var Jwerty = function (context, e){

	        return {
	            map : function(keyCodes, callback){
	                var o = new JwertyCode(keyCodes);

	                for (var i=0; i<o.length; i++){
	                    if (_jwerty.is(o[i][0].jwertyCombo, e) !== false){
	                        callback.call(context, o[i][0].jwertyCombo);
	                    }
	                }

	                return this;
	            },

	            isInputKeys : function(){
	                var keyCode = e.keyCode;

	                return !e.ctrlKey && ! e.altKey && ($.inArray(keyCode, [9, 13, 32]) != -1 || (keyCode >= 48 && keyCode <= 90) || (keyCode >= 186 && keyCode <= 222) || (keyCode >= 96 && keyCode <= 111) || keyCode == 229);
	            },

	            is : function(keyCodes){
	                keyCodes = new JwertyCode(keyCodes);

	                for (var i=0; i<keyCodes.length; i++){
	                    if (_jwerty.is(keyCodes[i][0].jwertyCombo, e) !== false){
	                        return true;
	                    }
	                }

	                return false;
	            },

	            isCtrl : function() {
	                return e.ctrlKey && !e.altKey && !e.shiftKey;
	            },

	            isAlt : function() {
	                return !e.ctrlKey && e.altKey && !e.shiftKey;
	            },

	            isShift : function() {
	                return !e.ctrlKey && !e.altKey && e.shiftKey;
	            },

	            isSuper : function() {
	                return (!e.ctrlKey && !e.altKey && !e.shiftKey && e.keyCode == 91);
	            }
	        }

	    };

	    return Jwerty;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.4
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-05-20T17:23Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];

	var document = window.document;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "2.2.4",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},

		isPlainObject: function( obj ) {
			var key;

			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			// Not own constructor property must be Object
			if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
				return false;
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for ( key in obj ) {}

			return key === undefined || hasOwn.call( obj, key );
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {

				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {

					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval

					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {

							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add( function() {

						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	} );


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {

		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		register: function( owner, initial ) {
			var value = initial || {};

			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;

			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key === undefined ) {
				this.register( owner );

			} else {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );

					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;

				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data, camelKey;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||

						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

					if ( data !== undefined ) {
						return data;
					}

					camelKey = jQuery.camelCase( key );

					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {

					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([\w:-]+)/ );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			display = jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var documentElement = document.documentElement;



	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );
		}

		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {

				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

				documentElement.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;

				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		window.clearInterval( timerId );

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {

						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace( rreturn, "" ) :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );

					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );


	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
	}));


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	function AbstractEvent() { }

	AbstractEvent.prototype.stop = function(e) {
	    if(e.preventDefault) {e.preventDefault();}
	    if(e.stopPropagation) {e.stopPropagation();}

	    e.returnValue = false;
	    e.cancelBubble = true;
	    e.stopped = true;
	};

	module.exports = AbstractEvent;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);
	var Resource = __webpack_require__(13);

	var AbstractEvent = __webpack_require__(41);

	function Mouse(editorElement, $domObject, router, menuController, clipboard, rootEvent) {

	    this.$dom = $domObject;

	    this.editorElement = $(editorElement);
	    this.editorView = $(editorElement).find('.' + Define.CLASS.EDITOR_VIEW);
	    this.editorContentView = $(editorElement).find('.' + Define.CLASS.CONTENT_VIEW);
	    this.editorToolbar = $(editorElement).find('.' + Define.CLASS.EDITOR_TOOLBAR);
	    this.contentElement = this.editorContentView.find('.' + Define.CLASS.CONTENTS)[0];

	    this.router = router;
	    this.clipboard = clipboard;
	    this.menuController = menuController;
	    this.rootEvent = rootEvent;

	    this.isMouseDown = false;
	    this.lastMouseUpTime = null;
	    this.startSelectTdNode = null;
	    this.intervalJob = null;

	    this.insertParagraphNode = null;
	    this.cellResizeBarInfo = null;
	    this.cellResizeBarNode = null;

	    this.tableMoveBarNode = null;
	    this.tableDragonDrop = null;

	    this.imageMoveBarNode = null;
	    this.imageDragonDrop = null;
	}

	Mouse.prototype = new AbstractEvent();

	Mouse.prototype.setMouseState = function(mouseIn){
	    this.mouseIn = mouseIn;
	};

	Mouse.prototype.fireEvent = function(e) {
	    var _this = this;

	    if (e.type == 'scroll'){
	        if (/*$.browser.chrome && */this.isMouseDown && this.isMouseMoved){
	            _this.$dom.selection.removeSelected();
	            _this.$dom.selection.setUserSelect();

	            if (_this.$dom.selection.getSelectedTd().length > 0){
	                if (_this.isHideWindowSelection){
	                    _this.$dom.selection.hideWindowSelection();
	                    _this.isHideWindowSelection = false;
	                }
	            }else{

	                this.setOutOfTable();

	                if (! _this.isHideWindowSelection){
	                    _this.$dom.selection.showWindowSelection();
	                    _this.isHideWindowSelection = true;
	                }
	            }
	        }
	        return;
	    }else if ($.browser.chrome && e.type == 'mouseleave'){
	        this.mouseLeave(e);
	    }else if ($.browser.chrome && e.type == 'mouseenter'){
	        this.mouseEnter(e);
	    }else{
	        var $target = $(e.target);

	        if ($.browser.msie) {
	            if ($target[0].nodeName == 'HR' || $target.attr(Define.ATTR.TYPE) == Define.ATTR_VALUE.KK_LAYER) {
	                return;
	            }
	        }

	        if (Util.isEscapeEvent($target)) {
	            return;
	        }

	        // if (this.editorElement.find("." + Define.CLASS.DIALOG_HYPERLINK).is(":visible")){
	        //     this.editorElement.find("." + Define.CLASS.CONTENTS).attr("contenteditable", false);
	        //     return ;
	        // }
	    }

	    var curTime = new Date().getTime();
	    if ($.browser.msie && (curTime - this.$dom.selection.getKeyboardEventTime()) < 50){
	        this.isKeyboardPrevent = true;
	    }else{
	        this.isKeyboardPrevent = false;
	    }

	    switch(e.type){
	        case "mousedown" :
	            // $('#' + Define.INPUT_STYLE_NODE);
	            if ($.browser.chrome && this.intervalJob){
	                clearInterval(this.intervalJob);
	                this.intervalJob = null;
	            }

	            this.mouseDown(e);

	            if ($.browser.msie) {
	                if (!this.clickTime) {
	                    this.clickTime = Date.now();
	                }
	            }
	            break;

	        case "mousemove" :
	            this.mouseMove(e);
	            break;

	        case "mouseup" :
	            this.mouseUp(e);
	            break;

	        case "click" :
	            break;

	        case "dblclick" :
	            this.mouseDblClick(e);
	            break;
	        case "paste":
	        case "cut":
	        case "copy":
	            this.clipboardEvent(e);
	            break;
	    }
	};

	Mouse.prototype.clipboardEvent = function(e) {

	    //TODO : Mouse를 이용한 Copy & Cut & Paste 추후 구현
	    // Mouse의 Clipboard 이벤트시 msie의 경우에는 executeCommand 사용해야함
	    // this.clipboard.fireClipboard(e);
	};

	Mouse.prototype.mouseLeave = function(e){
	    if ($.browser.chrome && this.isMouseDown && this.isMouseMoved && ! this.intervalJob){
	        var _this =this;

	        var range = _this.$dom.selection.getRange();
	        this.intervalJob = setInterval(function(){

	            var curRange = _this.$dom.selection.getRange();

	            if (range != curRange){
	                range = curRange;
	            }else{
	                _this.$dom.selection.removeSelected();
	                _this.$dom.selection.setUserSelect();

	                if (_this.$dom.selection.getSelectedTd().length > 0){
	                    if (_this.isHideWindowSelection){
	                        _this.$dom.selection.hideWindowSelection();
	                        _this.isHideWindowSelection = false;
	                    }
	                }else{
	                    if (! _this.isHideWindowSelection){
	                        _this.$dom.selection.showWindowSelection();
	                        _this.isHideWindowSelection = true;
	                    }
	                }
	            }

	        }, 20);
	    }
	};

	Mouse.prototype.mouseEnter = function(e){
	    if (this.intervalJob){
	        clearInterval(this.intervalJob);
	        this.intervalJob = null;
	    }
	};

	Mouse.prototype.mouseDown = function(e) {
	    if(e.target.nodeType == Node.ELEMENT_NODE && $.inArray(e.target.nodeName, Define.CELL_TYPE) != -1) {
	        var td = e.target;

	        // if (td.getAttribute(this.rootEvent.api.options.cell_lock_name) !== null) {
	        //     td.setAttribute(Define.ATTR.CONTENT_EDIT_ABLE, "false");
	        // }

	        if (td.childNodes.length == 0 || Util.isCheckParagraphEmpty(td)) {
	            var defaultParagraphTypeHTML = Define.DEFAULT_PARAGRAPH_HTML;
	            var childParagraph = $(td).find(Define.PARAGRAPH_NODES.join(','));

	            if (childParagraph.length) {
	                var firstParagraph = childParagraph.first();

	                var defaultSpanTypeHTML = Define.DEFAULT_SPAN_HTML;

	                var $firstSpan = firstParagraph.find('span').first();

	                if ($firstSpan.length) {
	                    defaultSpanTypeHTML = $firstSpan.clone().html('&nbsp;')[0].outerHTML;
	                }

	                defaultParagraphTypeHTML = firstParagraph.clone().html(defaultSpanTypeHTML)[0].outerHTML;
	            }

	            td.innerHTML = defaultParagraphTypeHTML;
	        }
	    } else {
	        // var $parentTD = $(e.target).closest('.' + Define.CLASS.CONTENTS + ' ' + Define.CELL_TYPE.join(', .' + Define.CLASS.CONTENTS + ' '));
	        // if ($parentTD.length && $parentTD[0].getAttribute(this.rootEvent.api.options.cell_lock_name) !== null) {
	        //     $parentTD[0].setAttribute(Define.ATTR.CONTENT_EDIT_ABLE, "false");
	        // }
	    }

	    var isImageMove = ($.browser.msie && (this.imageMoveBarNode && e.target == this.imageMoveBarNode[0]));
	    if (isImageMove) {
	        e.target = this.imageDragonDrop.$targetNode[0];
	        // window.getSelection().removeAllRanges();
	        //
	        // var range = document.createRange();
	        // range.setStart(e.target, 0);
	        // range.setEnd(e.target, 0);
	        // this.$dom.selection.setRange(range);
	        // return;
	    } else {
	        this.clearImageMovable();
	    }

	    this.$dom.selection.removeSelected();

	    var winR = this.$dom.selection.getRange();

	    if (winR){
	        var isSetWindowRange = true;

	        if ($.browser.msie) {
	            if (this.clickTime) {
	                var currentClickTime = Date.now();

	                var compareClickTime = currentClickTime - this.clickTime;

	                if (compareClickTime <= 500) {
	                    isSetWindowRange = false;
	                }

	                this.clickTime = null;
	            }
	        }

	        if (isSetWindowRange) {
	            this.$dom.selection.setWindowRange(winR.startContainer, winR.startOffset);
	        }
	    }

	    if ($.browser.msie) {
	        this.contentElement.setAttribute("contenteditable", true);
	    }

	    this.startSelectTdNode = null;

	    this.$dom.selection.showWindowSelection();

	    // var windowR = this.$dom.selection.getRange();
	    // if (windowR){
	    //     if (! windowR.collapsed){
	    //         try{
	    //             window.getSelection().removeAllRanges();
	    //         }catch(e){
	    //             console.log(e);
	    //         }
	    //     }
	    // }

	    if (this.removeImageResizeEvents){
	        this.removeImageResizeEvents();
	    }

	    if (this.removeTableAllResizeEvents){
	        this.removeTableAllResizeEvents();
	    }

	    if (e.target && e.target.nodeType == 1 && e.target.nodeName == 'IMG'){
	        //IE10일경우 Image를 선택시 Resize Bar가 나타난다
	        if ($.browser.msie && $.browser.version < 11) {
	            window.getSelection().removeAllRanges();
	            e.preventDefault();
	            e.stopPropagation();
	            return;
	        }
	    }

	    this.selectedCaptionNode = this.getCaptionNode(e.target);

	    try{
	        this.setUserSelection(e);
	    }catch(e){
	        console.log(e);
	        return;
	    }

	    if (!isImageMove) {
	        this.isMouseDown = true;
	        this.isMouseMoved = false;
	        this.isContentEditorDisabled = false;
	    }
	};

	Mouse.prototype.mouseMove = function(e) {

	    if (this.isMouseDown){
	        if (! this.isKeyboardPrevent){
	            try{
	                // if (e.type == 'mousemove' && (Util.isTagName(e.target, 'TABLE') || (Util.isBlockNode(e.target) && e.target == this.editorContentView[0]))){
	                //     return;
	                // }
	                this.lostIeTableRange = null;
	                this.$dom.selection.removeSelected();
	                this.setUserSelection(e);

	                var showWindowSelection = false;
	                if (this.$dom.selection.getSelectedTd().length > 0){
	                    if (this.isOutOfTable){
	                        showWindowSelection = true;
	                    }else{
	                        showWindowSelection = false;
	                    }
	                }else{
	                    if (this.startSelectTdNode){
	                        if (this.$dom.selection.getSelectedTable().length > 0 && Util.isTagName(e.target, 'TD')){
	                            showWindowSelection = false;
	                            $(e.target).addClass(Define.CLASS.SELECTED_TD);
	                            this.lostIeTableRange = e.target;
	                        }else{
	                            showWindowSelection = true;
	                        }
	                    }else{
	                        showWindowSelection = true;
	                    }
	                }

	                if (showWindowSelection){
	                    if (this.isHideWindowSelection){
	                        this.$dom.selection.showWindowSelection();
	                        this.isHideWindowSelection = false;
	                    }

	                }else {

	                    if (! this.isHideWindowSelection){
	                        this.$dom.selection.hideWindowSelection();
	                        this.isHideWindowSelection = true;
	                    }
	                }
	            }catch(e){
	                console.log(e);
	                return;
	            }
	        }

	        this.isMouseMoved = true;
	    } else {
	        this.setCellResizeHandler(e);
	    }
	};

	Mouse.prototype.mouseUp = function(e) {
	    var target = e.target;

	    if (target.nodeName == "IMG") {
	        if ($(target).hasClass(Define.CLASS.KK_IMAGE_MOVE_BAR)) {
	            target = e.target = this.imageDragonDrop.$targetNode[0];
	        }
	    }

	    this.clearImageMovable();

	    this.isHideWindowSelection = false;
	    this.isMouseMoved = false;
	    this.isMouseDown = false;

	    this.resetTableResizable();

	    if (!$.browser.msie) {
	        this.contentElement.setAttribute("contenteditable", true);
	    }

	    var range = this.$dom.selection.getRange();

	    if (this.selectedCaptionNode){
	        this.$dom.selection.showWindowSelection();
	        $(this.selectedCaptionNode).css('background-color', '');
	        var selInfo = this.$dom.selection.get();

	        if (selInfo.p[0] != selInfo.p[1]){
	            this.$dom.selection.removeSelected();

	            this.$dom.selection.setWindowRange(this.selectedCaptionNode, 0, this.selectedCaptionNode, this.selectedCaptionNode.childNodes.length);
	            this.selectedCaptionNode = null;
	        }
	    }else if (this.lostIeTableRange){
	        this.$dom.selection.hideWindowSelection();
	        this.$dom.selection.removeSelected();
	        $(this.lostIeTableRange).addClass(Define.CLASS.SELECTED);
	        this.lostIeTableRange = null;
	    }else if (this.isOutOfTable){
	        if (this.$dom.selection.getSelectedTable().length > 0){
	            this.$dom.selection.getSelectedTd().removeClass(Define.CLASS.SELECTED_TD);
	        }

	        this.isOutOfTable = false;
	    }

	    if (this.isKeyboardPrevent){
	        this.$dom.selection.setKeyboardEventTime('');
	        return;
	    }

	    var $selected = this.$dom.selection.getSelectedNode();
	    var $selectedTdNodes = this.$dom.selection.getSelectedTd();

	    var selInfo = null;

	    if (range && ! range.collapsed || $selected.length || $selectedTdNodes.length){

	        //기존 원인은 셀을 선택해서 merge 하려고 할때 셀리 collapsed 된 것처럼 나오는 문제가 있었지만 지금은 이슈가 없음
	        selInfo = this.$dom.selection.get();
	        //if ($selectedTdNodes.length) {
	        //} else {
	        //    selInfo = this.$dom.selection.get(null, true);
	        //}

	        this.$dom.selection.setOp(selInfo, true);

	        $selected = this.$dom.selection.getSelectedNode();
	        $selectedTdNodes = this.$dom.selection.getSelectedTd();
	    }else{
	        selInfo = this.$dom.selection.get();
	    }

	    if ($selected.length > 0 || $selectedTdNodes.length > 0){
	        if ($selectedTdNodes.length > 0){
	            if (!this.removeTableAllResizeEvents) {
	                this.$dom.selection.getSelectedTable().removeClass(Define.CLASS.SELECTED_TABLE);
	                try{
	                    window.getSelection().removeAllRanges();
	                }catch(e){}
	            }
	        }else{
	            // $contents.blur();
	            // $contents.focus();

	            var selectedRange = this.$dom.selection.applyRangeOfSelectedClass($selected);
	            if (selectedRange && selectedRange.startContainer && selectedRange.endContainer){
	                this.$dom.selection.setWindowRange(selectedRange.startContainer, selectedRange.startOffset, selectedRange.endContainer, selectedRange.endOffset);
	            }
	        }

	        this.router.doStatusHighlight($selected[0]);

	    }else{
	        this.$dom.selection.showWindowSelection();
	        this.$dom.selection.removeSelected();

	        // if ($.browser.msie && this.pointRange){
	        //     try{
	        //         this.$dom.selection.setWindowRange(this.pointRange.container, this.pointRange.offset);
	        //     }catch(e){}
	        // }

	        if (target && target.nodeName === "IMG") {
	            this.imageResizeSetting(target);

	            // if (this.imageMoveBarNode) {
	            //     var imageSelectedSpanNode = this.$dom.selection.getSelectedNode();
	            //
	            //     var range = document.createRange();
	            //     range.setStart(imageSelectedSpanNode[0], 0);
	            //     range.setEnd(imageSelectedSpanNode[0], imageSelectedSpanNode[0].childNodes.length);
	            //     this.$dom.selection.setRange(range);
	            //
	            //     console.log(imageSelectedSpanNode, range);
	            // }
	        }

	        //TODO : EMBED TYPE의 경우 셀렉션 처리 임시
	        if (target && target.nodeName === "EMBED") {
	            var parentNode = target.parentNode;
	            var nodeIndex = this.$dom.selection.nodeIndexOf(target.parentNode, target);

	            if (parentNode && nodeIndex > -1){
	                this.$dom.selection.setWindowRange(parentNode, nodeIndex, parentNode, nodeIndex + 1);
	                var selInfo = this.$dom.selection.get();
	                this.$dom.selection.setOp(selInfo);
	                this.$dom.selection.removeRange();
	            }
	        }

	        if (selInfo){
	            var opNode = this.$dom.selection.getOpNode(selInfo.p[0], selInfo.r[0]);

	            if (opNode){
	                this.router.doStatusHighlight(opNode.container);
	            }
	        }
	    }
	};

	Mouse.prototype.mouseDblClick = function(e){
	    // console.log("?");
	    //
	    // var _this = this;
	    //
	    // setTimeout(function(){
	    //
	    //     console.log(window.getSelection().getRangeAt(0).cloneRange());
	    //
	    //     var selInfo = _this.$dom.selection.get();
	    //
	    //     console.log(selInfo);
	    // }, 10);



	    // if (selInfo){
	    //    this.$dom.selection.setOp(selInfo);
	    //    var selectedRange = this.$dom.selection.applyRangeOfSelectedClass(this.$dom.selection.getSelectedNode());
	    //    if (selectedRange && selectedRange.startContainer && selectedRange.endContainer){
	    //        this.$dom.selection.setWindowRange(selectedRange.startContainer, selectedRange.startOffset, selectedRange.endContainer, selectedRange.endOffset);
	    //    }
	    // }
	};

	Mouse.prototype.getTdNodeByMoveTarget = function(moveTargetNode){
	    var target = moveTargetNode;

	    var targetNode = null;
	    if (target) {
	        targetNode = Util.isTagName(target, 'TD') ? target : null;

	        if (! targetNode) {
	            targetNode = target;

	            if (targetNode.nodeType != 1) {
	                targetNode = targetNode.parentNode;
	            }

	            var parentTagNode = this.$dom.selection.getParentTagNode(targetNode, ['TD']);
	            if (parentTagNode.length > 0) {
	                targetNode = parentTagNode;
	            }else{
	                targetNode = null;
	            }
	        }else{
	            targetNode = [].concat([targetNode], this.$dom.selection.getParentTagNode(targetNode, ['TD']));
	        }
	    }

	    return targetNode;
	};

	Mouse.prototype.getCompareStartEndTableIndex = function(sTable, eTable){
	    var sIndex = 0;
	    var eIndex = 0;
	    for (var i=0,length=sTable.length; i<length; i++){
	        var curSTable = sTable[i];

	        var isStop = false;
	        for (var j=0,jLength=eTable.length; j<jLength; j++){
	            var curETable = eTable[j];

	            if (curSTable == curETable){
	                sIndex = i;
	                eIndex = j;
	                isStop = true;
	                break;
	            }
	        }

	        if (isStop){break;}
	    }

	    return {
	        sIndex : sIndex,
	        eIndex : eIndex
	    }
	};

	Mouse.prototype.setUserSelection = function(e){
	    var type = e.type;

	    if (type == "mousedown" || type == "mousemove") {

	        this.isOutOfTable = false;

	        if (this.selectedCaptionNode && type == 'mousemove'){

	            var captionNode = this.getCaptionNode(e.target);

	            if (! captionNode){
	                this.$dom.selection.hideWindowSelection();

	                $(this.selectedCaptionNode).css('background-color', 'skyblue');
	            }else{
	                this.$dom.selection.showWindowSelection();
	                $(this.selectedCaptionNode).css('background-color', '');
	            }

	            return;
	        }

	        var curSelectTdNode = this.getTdNodeByMoveTarget(e.target);

	        if (type == 'mousedown' && curSelectTdNode){
	            this.startSelectTdNode = curSelectTdNode;
	        }

	        if (type != 'mousedown'){

	            //기본 테스트를 포함한 셀렉션을 수행한 후에
	            //TD 셀렉션상태가 될 경우 보정을 한다


	            // if (! curSelectTdNode){
	                this.$dom.selection.setUserSelect();

	                if (! curSelectTdNode && this.startSelectTdNode){
	                    this.setOutOfTable();
	                }
	            // }
	        }

	        if (! curSelectTdNode || type == 'mousedown'){
	            return ;
	        }

	        if (type == 'mousemove' && this.startSelectTdNode && curSelectTdNode) {
	            var sTableList = $(this.startSelectTdNode[0]).parents('table');
	            var eTableList = $(curSelectTdNode[0]).parents('table');

	            if (!sTableList || !eTableList) {
	                this.$dom.selection.setUserSelect();
	                return;
	            }

	            var tableIndex = this.getCompareStartEndTableIndex(sTableList, eTableList);

	            var sTdNode = this.startSelectTdNode[tableIndex.sIndex];
	            var eTdNode = curSelectTdNode[tableIndex.eIndex];

	            if (sTdNode == eTdNode){
	                var $innerTable = $(sTdNode).find('table');
	                if ($innerTable.length > 0 && this.startSelectTdNode[0] != curSelectTdNode[0]){
	                    $innerTable.addClass(Define.CLASS.SELECTED_TABLE);
	                    $innerTable.find('span').addClass(Define.CLASS.SELECTED);
	                    // var tdNodes = this.$dom.selection.rangeTable.selectTable(this.$dom.selection.getEditableRootNode(), $innerTable.find('td')[0], $innerTable.find('td').last()[0]);
	                    //
	                    // $(tdNodes).addClass(Define.CLASS.SELECTED_TD);
	                    // $(tdNodes).find('span').addClass(Define.CLASS.SELECTED);
	                    this.isOutOfTable = true;
	                }else{
	                    this.$dom.selection.setUserSelect();
	                }
	                return ;
	            }

	            this.$dom.selection.removeSelected();
	            var tdNodes = this.$dom.selection.rangeTable.selectTable(this.$dom.selection.getEditableRootNode(), sTdNode, eTdNode);

	            $(tdNodes).addClass(Define.CLASS.SELECTED_TD);
	            $(tdNodes).find('span').addClass(Define.CLASS.SELECTED);
	        }else{
	            this.$dom.selection.setUserSelect();
	        }


	    }
	};

	Mouse.prototype.setOutOfTable = function(){
	    if (this.startSelectTdNode){
	        var $tables = $(this.startSelectTdNode).parents('table');
	        // var tdNodes = this.$dom.selection.rangeTable.selectTable(this.$dom.selection.getEditableRootNode(), $tables.find('td')[0], $tables.find('td').last()[0]);
	        //
	        // $(tdNodes).addClass(Define.CLASS.SELECTED_TD);
	        // $(tdNodes).find('span').addClass(Define.CLASS.SELECTED);

	        $tables.addClass(Define.CLASS.SELECTED_TABLE);
	        $tables.find('span').addClass(Define.CLASS.SELECTED);

	        this.isOutOfTable = true;
	    }
	};

	Mouse.prototype.getCaptionNode = function(target){
	    if (Util.isTagName(target, 'CAPTION') || $(target).parents('CAPTION').length > 0){
	        var captionNode = Util.isTagName(target, 'CAPTION') ? target : null;
	        if (!captionNode){
	            captionNode = $(target).parents('CAPTION')[0];
	        }

	        return captionNode;
	        // this.selectedCaptionNode = captionNode;
	    }

	    return null;
	};

	Mouse.prototype.imageResizeSetting = function(target){

	    if (this.removeImageResizeEvents) {
	        this.removeImageResizeEvents();
	    }

	    if (this.removeTableAllResizeEvents) {
	        this.removeTableAllResizeEvents();
	    }

	    var selection = window.getSelection();
	    var range = null;
	    var _this = this;

	    var getLastChild = function () {
	        var lastChild = _this.contentElement;
	        while (lastChild.lastChild) {
	            lastChild = lastChild.lastChild;
	        }
	        return lastChild;
	    };

	    if (selection.rangeCount > 0) {
	        range = selection.getRangeAt(0);
	    } else {
	        var lastChild = getLastChild();
	        range = document.createRange();
	        range.setStart(lastChild, 0);
	        selection.addRange(range);
	    }

	    if (range && range.collapsed && target.nodeName === "IMG") {

	        var parentNode = target.parentNode;
	        var nodeIndex = this.$dom.selection.nodeIndexOf(target.parentNode, target);

	        if (parentNode && nodeIndex > -1){
	            this.$dom.selection.setWindowRange(parentNode, nodeIndex, parentNode, nodeIndex + 1);
	            var selInfo = this.$dom.selection.get();
	            this.$dom.selection.setOp(selInfo);
	            this.$dom.selection.removeRange();
	        }

	        this.setImageResizeHandler(target);

	        var $image = $(target);
	        this.imageMoveBarNode = $image.clone();
	        this.imageMoveBarNode.addClass(Define.CLASS.KK_IMAGE_MOVE_BAR);

	        var targetPosition = $image.position();

	        var $mainView = this.editorElement.find('.' + Define.CLASS.MAIN_VIEW);
	        var scrollTop = $mainView[0].scrollTop;
	        var scrollLeft = $mainView[0].scrollLeft;

	        this.imageMoveBarNode.css({
	            top : scrollTop + targetPosition.top,
	            left : scrollLeft + targetPosition.left
	        });

	        this.editorContentView.append(this.imageMoveBarNode);

	        this.imageMoveBarNode.on('mousedown', function(e){
	            if (e.button === 2) {
	                _this.editorContentView.trigger($.Event('mousedown', {target : $image[0], pageX : e.pageX, pageY : e.pageY, button : 2, customTarget : e.target}));

	                e.preventDefault();
	                return false;
	            } else {
	                e.stopPropagation();
	            }
	        }).on('contextmenu', function(e){
	            _this.editorContentView.trigger($.Event('contextmenu', {target : $image[0], pageX : e.pageX, pageY : e.pageY, button : 2}));

	            e.preventDefault();
	            return false;
	        });

	        this.imageDragonDrop = this.setDragNDrop({
	            draggables : this.imageMoveBarNode,
	            dropzones : $('.' + Define.CLASS.CONTENTS),
	            targetNode : $image
	        });

	        this.$dom.selection.setHoldImageObject(target);
	    }
	};

	Mouse.prototype.createResizeHandler = function(target){
	    var _this = this;
	    var $document = $(window.document);


	    var $target = $(target);

	    var nodeName = $target[0].nodeName;

	    var className = '';

	    var isTableResize = false;

	    switch (nodeName) {
	        case 'TABLE' :
	            className = Define.CLASS.TABLE_RESIZE_HANDLER;
	            isTableResize = true;
	            break;

	        case 'IMG' :
	        default:
	            className = Define.CLASS.IMAGE_RESIZE_HANDLER;
	            break;
	    }

	    var bufferSize = 0;

	    if (isTableResize) {
	        if ($.browser.msie) {
	            bufferSize = bufferSize + 1;
	        }
	    }


	    var handleTpl = '<div class="' + className + ' ' + Define.CLASS.RESIZE_HANDLER + ' resizable-{d}"></div>';

	    var $contentArea = $(this.contentElement);
	    var controls = null;
	    var _current = null;

	    var contentAreaTop = 0;
	    var contentAreaLeft = 0;

	    var $mainView = this.editorElement.find('.' + Define.CLASS.MAIN_VIEW);

	    var setContentAreaTopLeft = function() {
	        var contentAreaPosition = $contentArea.position();

	        contentAreaTop = contentAreaPosition.top;
	        contentAreaLeft = contentAreaPosition.left;

	        $contentArea.parents().each(function(idx, node){
	            var $node = $(this);

	            var position = $node.css("position");

	            if (position === "relative") {
	                var nodePosition = $node.position();
	                contentAreaTop += nodePosition.top;
	                contentAreaLeft += nodePosition.left;
	            }
	        });

	        contentAreaTop -= 10;
	        contentAreaLeft -= 10;
	    };

	    var resizeHandleNames = ["n", "e", "s", "w", "se", "sw", "ne", "nw"];

	    var tableResizeAdjustRow = function(table, width, height){
	        var $table = $(table);

	        $table.css("height", height);
	        $table.css("width", width);
	        $table.attr("width", width);
	        $table.attr("height", height);

	        var changeHeight = $table.height();

	        if (changeHeight > height) {
	            var differenceHeight = changeHeight - height;

	            var perHeight = parseInt(differenceHeight / $table[0].rows.length);

	            if (perHeight < 1) {
	                perHeight = 1;
	            }

	            var rows = $table[0].rows;

	            var rowSizeList = [];

	            for (var rowIdx = 0, rowLength = rows.length; rowIdx < rowLength; rowIdx++) {
	                var trNode = rows[rowIdx];
	                var cells = trNode.cells;

	                var cellSizeList = [];

	                for (var cellIdx = 0, length = cells.length; cellIdx < length; cellIdx++) {
	                    var changeWidthTargetCell = $(cells[cellIdx]);

	                    cellSizeList.push(changeWidthTargetCell.height() - perHeight);
	                }

	                rowSizeList.push(cellSizeList);
	            }

	            for (var rowIdx = 0, rowLength = rows.length; rowIdx < rowLength; rowIdx++) {
	                var trNode = rows[rowIdx];
	                var cells = trNode.cells;

	                var cellSizeList = rowSizeList[rowIdx];

	                for (var cellIdx = 0, length = cells.length; cellIdx < length; cellIdx++) {
	                    var changeWidthTargetCell = $(cells[cellIdx]);
	                    changeWidthTargetCell[0].style.height = (cellSizeList[cellIdx] + 1) + 'px';
	                }
	            }
	        }
	    };

	    var resizeHandlePosition = function() {
	        if (!controls) {
	            return;
	        }

	        var targetPosition = $target.position();

	        var marginLeft = parseInt($target.css('margin-left'));
	        var marginRight = parseInt($target.css('margin-right'));

	        var marginTop = parseInt($target.css('margin-top'));
	        var marginBottom = parseInt($target.css('margin-bottom'));

	        var scrollTop = $mainView[0].scrollTop;
	        var scrollLeft = $mainView[0].scrollLeft;

	        // console.log(scrollTop, contentAreaTop, targetPosition.top, scrollTop + contentAreaTop + targetPosition.top);

	        var width = ($target.width() + marginLeft + marginRight + parseInt($target.css('border-left-width')) + parseInt($target.css('border-right-width')));
	        var height = ($target.height() + marginTop + marginBottom + parseInt($target.css('border-top-width')) + parseInt($target.css('border-bottom-width')));

	        if (nodeName == 'IMG') {
	            if (_this.imageMoveBarNode) {
	                _this.imageMoveBarNode.css({
	                    top : scrollTop + targetPosition.top,
	                    left : scrollLeft + targetPosition.left
	                })
	            }
	        }

	        controls["n"].css({
	            top : scrollTop + contentAreaTop + targetPosition.top + (isTableResize ? marginTop : 0),
	            left : scrollLeft + contentAreaLeft + targetPosition.left + (width / 2)
	        });

	        controls["e"].css({
	            top : scrollTop + contentAreaTop + targetPosition.top + (height / 2),
	            left : scrollLeft + contentAreaLeft + targetPosition.left + width - (isTableResize ? marginRight : 0)
	        });

	        controls["s"].css({
	            top : scrollTop + contentAreaTop + targetPosition.top + height - (isTableResize ? marginBottom : 0),
	            left : scrollLeft + contentAreaLeft + targetPosition.left + (width / 2)
	        });

	        controls["w"].css({
	            top : scrollTop + contentAreaTop + targetPosition.top + (height / 2),
	            left : scrollLeft + contentAreaLeft + targetPosition.left + (isTableResize ? marginLeft : 0)
	        });

	        controls["nw"].css({
	            top : scrollTop + contentAreaTop + targetPosition.top + (isTableResize ? marginTop : 0),
	            left : scrollLeft + contentAreaLeft + targetPosition.left + (isTableResize ? marginLeft : 0)
	        });

	        controls["ne"].css({
	            top : scrollTop + contentAreaTop + targetPosition.top + (isTableResize ? marginTop : 0),
	            left : scrollLeft + contentAreaLeft + targetPosition.left + width - (isTableResize ? marginRight : 0)
	        });

	        controls["se"].css({
	            top : scrollTop + contentAreaTop + targetPosition.top + height - (isTableResize ? marginBottom : 0),
	            left : scrollLeft + contentAreaLeft + targetPosition.left + width - (isTableResize ? marginRight : 0)
	        });

	        controls["sw"].css({
	            top : scrollTop + contentAreaTop + targetPosition.top + height - (isTableResize ? marginBottom : 0),
	            left : scrollLeft + contentAreaLeft + targetPosition.left + (isTableResize ? marginLeft : 0)
	        });

	        if (isTableResize) {
	            if (_this.tableResizeTooltip) {
	                _this.tableResizeTooltip.css({
	                    top : scrollTop + contentAreaTop + targetPosition.top + height + 10,
	                    left : scrollLeft + contentAreaLeft + targetPosition.left + width + 10
	                }).html($target.width() + " x " + $target.height());
	            }
	        }
	    };

	    var resizeHandles = {
	        n: function (obj) {
	            var width = $target.width() + bufferSize;
	            var height = obj.firstSize.height + obj.firstPosition.y - obj.y;

	            if (height < 5) {
	                return;
	            }

	            if (isTableResize) {
	                tableResizeAdjustRow($target, width, height);
	            } else {
	                $target.css("height", height);
	                $target.css("width", width);
	                $target.attr("width", width);
	                $target.attr("height", height);
	            }

	            resizeHandlePosition();
	        },
	        e: function (obj) {
	            var width = obj.firstSize.width + obj.x - obj.firstPosition.x;
	            var height = $target.height() + bufferSize;

	            if (width < 5) {
	                return;
	            }

	            $target.css("height", height);
	            $target.css("width", width);
	            $target.attr("width", width);
	            $target.attr("height", height);

	            resizeHandlePosition();
	        },
	        s: function (obj) {
	            var width = $target.width() + bufferSize;

	            var height = obj.firstSize.height + obj.y - obj.firstPosition.y;

	            if (height < 5) {
	                return;
	            }

	            if (isTableResize) {
	                tableResizeAdjustRow($target, width, height);
	            } else {
	                $target.css("height", height);
	                $target.css("width", width);
	                $target.attr("width", width);
	                $target.attr("height", height);
	            }

	            resizeHandlePosition();
	        },
	        w: function (obj) {
	            var width = obj.firstSize.width + obj.firstPosition.x - obj.x;
	            var height = $target.height() + bufferSize;

	            if (width < 5) {
	                return;
	            }

	            $target.css("height", height);
	            $target.css("width", width);
	            $target.attr("width", width);
	            $target.attr("height", height);

	            resizeHandlePosition();
	        },
	        se: function (resize) {
	            this.s(resize);
	            this.e(resize);
	        },
	        sw: function (resize) {
	            this.s(resize);
	            this.w(resize);
	        },
	        ne: function (resize) {
	            this.n(resize);
	            this.e(resize);
	        },
	        nw: function (resize) {
	            this.n(resize);
	            this.w(resize);
	        }
	    };

	    var mouseMoveEvent = function (e) {
	        window.getSelection().removeAllRanges();

	        if (!_current) {
	            return true;
	        }

	        // console.log("mouseMove >>>>>>> ", _current.direction);

	        e.preventDefault();
	        e.stopPropagation();

	        if (_current.direction) {
	            if (!_current.firstPosition.x) {
	                _current.firstPosition.x = e.clientX;
	            }

	            if (!_current.firstPosition.y) {
	                _current.firstPosition.y = e.clientY;
	            }

	            _current.x = e.clientX;
	            _current.y = e.clientY;

	            resizeHandles[_current.direction](_current);
	        }
	    };

	    var mouseUpEvent = function (e) {
	        if (!_current) {
	            return true;
	        }

	        e.stopPropagation();

	        if (_current.direction) {
	            _current.direction = null;
	        }
	        _current = null;

	        $document.off('mousemove', mouseMoveEvent);

	        _this.router.setRedoHistory();
	    };

	    var resizeMouseDown = function(e) {

	        if (isTableResize) {
	            _this.router.doOperation({type:"read", name:"table", value: null });
	        } else {
	            _this.router.doOperation({type:"read", name:"image", value: null });
	        }

	        if (e.button === 2) return false;
	        e.stopPropagation();

	        _current = {};
	        _current.target = e.target;
	        _current.direction = e.data.direction;
	        _current.firstPosition = {};
	        _current.firstSize = {
	            height : $target.height(),
	            width : $target.width()
	        };

	        $document.off('mousemove', mouseMoveEvent).on('mousemove', mouseMoveEvent);
	        $document.off('mouseup', mouseUpEvent).on('mouseup', mouseUpEvent);

	        return true;
	    };


	    controls = {};
	    for(var i = 0, length = resizeHandleNames.length ; i < length ; i++) {
	        controls[resizeHandleNames[i]] = $(handleTpl.replace('{d}', resizeHandleNames[i]));
	        controls[resizeHandleNames[i]].on('mousedown', {direction: resizeHandleNames[i]}, resizeMouseDown);

	        this.editorElement.append(controls[resizeHandleNames[i]]);
	    }

	    if (isTableResize) {
	        this.tableResizeTooltip = $('<div class="' + Define.CLASS.TABLE_RESIZE_TOOLTIP + '"></div>');
	        this.editorElement.append(this.tableResizeTooltip);
	    }

	    var scrollToHandlerPosition = function() {
	        // console.log('$contentArea scroll!>>>>>>>>>>.');
	        setContentAreaTopLeft();
	        resizeHandlePosition();
	    };

	    scrollToHandlerPosition();

	    $mainView.on('scroll', scrollToHandlerPosition);
	    $(window).on('resize', scrollToHandlerPosition);

	    var removeResizeEvent = '';

	    switch (nodeName) {
	        case 'TABLE' :
	            removeResizeEvent = 'removeTableAllResizeEvents';
	            break;

	        case 'IMG' :
	        default:
	            removeResizeEvent = 'removeImageResizeEvents';
	            break;
	    }

	    this[removeResizeEvent] = function(){
	        _this.editorElement.find("." + className).remove();
	        $document.off('mouseup', mouseUpEvent);
	        $document.off('mousemove', mouseMoveEvent);
	        $mainView.off('scroll', scrollToHandlerPosition);
	        $(window).on('resize', scrollToHandlerPosition);

	        _this.$dom.selection.setHoldImageObject(null);

	        _this[removeResizeEvent] = null;

	        if (isTableResize) {
	            if (_this.tableResizeTooltip) {
	                _this.tableResizeTooltip.remove();
	            }
	        }
	    };
	};


	Mouse.prototype.setImageResizeHandler = function(target){
	    this.createResizeHandler(target);
	};

	Mouse.prototype.setTableAllResizeHandler = function(target){
	    this.createResizeHandler(target);
	};

	Mouse.prototype.setCellResizeHandler = function(e){
	    if (this.cellResizeBarInfo) {
	        var eventClientY = e.clientY;
	        var eventClientX = e.clientX;

	        var type = this.cellResizeBarInfo.type;

	        // 높이 리사이즈
	        if (type === "row") {
	            var $targetCell = this.cellResizeBarInfo.targetCell;
	            var $siblingNodes = this.cellResizeBarInfo.siblingCells;

	            var changeSizeCellNodes = this.cellResizeBarInfo.changeSizeCellNodes;

	            var $targetTable = this.cellResizeBarInfo.tableNode;

	            var height = this.cellResizeBarInfo.height;
	            var clientY = this.cellResizeBarInfo.clientY;

	            var resizeValue = eventClientY - clientY;
	            var rowHeight = height + resizeValue;

	            // if (rowHeight > 0) {
	                this.cellResizeBarNode.css("top", eventClientY + "px");

	                if (changeSizeCellNodes.length) {
	                    for (var i = 0, length = changeSizeCellNodes.length; i < length; i++ ) {
	                        var siblingNodeInfo = changeSizeCellNodes[i];
	                        siblingNodeInfo[0].css('height', siblingNodeInfo[1] + resizeValue + "px");
	                    }

	                    var tableHeight = this.cellResizeBarInfo.tableHeight + resizeValue;
	                    $targetTable.css('height', tableHeight + "px");
	                }

	                // $targetCell.css('height', rowHeight + "px");
	                // $siblingNodes.css('height', rowHeight + "px");
	                //
	            // }
	        //너비 리사이즈
	        } else if (type === "col") {
	            var $targetCell = this.cellResizeBarInfo.targetCell;
	            var width = this.cellResizeBarInfo.width;
	            var clientX = this.cellResizeBarInfo.clientX;

	            var resizeValue = eventClientX - clientX;
	            var cellWidth = width + resizeValue;

	            if (cellWidth > 0) {
	                this.cellResizeBarNode.css("left", eventClientX + "px");

	                $targetCell.css('width', cellWidth + "px");

	                var siblingNodes = this.cellResizeBarInfo.currentCellNodes;

	                for (var i = 0, length = siblingNodes.length; i < length; i++ ) {
	                    var siblingNodeInfo = siblingNodes[i];
	                    siblingNodeInfo[0].css('width', siblingNodeInfo[1] + resizeValue + "px");
	                }

	                siblingNodes = this.cellResizeBarInfo.nextCellNodes;

	                if (siblingNodes.length) {
	                    for (var i = 0, length = siblingNodes.length; i < length; i++ ) {
	                        var siblingNodeInfo = siblingNodes[i];
	                        siblingNodeInfo[0].css('width', siblingNodeInfo[1] - resizeValue + "px");
	                    }
	                } else {
	                    var $table = this.cellResizeBarInfo.tableInfo[0];
	                    var tableWidth = this.cellResizeBarInfo.tableInfo[1];

	                    $table.css('width', tableWidth + resizeValue + "px");
	                    $table.attr('width', tableWidth + resizeValue);
	                }
	            }
	        }

	        this.stop(e);
	    } else {
	        if (e.target.nodeType === Node.ELEMENT_NODE && ($.inArray(e.target.nodeName, Define.CELL_TYPE) != -1 || $(e.target).closest('.' + Define.CLASS.CONTENTS + ' TABLE').length)) {
	            var _this = this;
	            var $cell = $(e.target);
	            var $table = $cell.closest('.' + Define.CLASS.CONTENTS + ' TABLE');

	            var buffer = 2;
	            var clientY = e.clientY ;
	            var clientX = e.clientX ;

	            var startY = clientY + buffer;
	            var endY = clientY - buffer;

	            var startX = clientX + buffer;
	            var endX = clientX - buffer;

	            var tableOffset = $table.offset();

	            //Table Move를 위한 로직 구현

	            if (!_this.removeTableAllResizeEvents) {
	                if (!this.tableMoveBarNode) {
	                    this.tableMoveBarNode = $('<div class="' + Define.CLASS.KK_TABLE_MOVE_BAR + '"></div>');
	                    $(document.body).append(this.tableMoveBarNode);
	                }

	                if (!this.tableDragonDrop) {
	                    this.tableDragonDrop = this.setDragNDrop({
	                        draggables : this.tableMoveBarNode,
	                        dropzones : $('.' + Define.CLASS.CONTENTS),
	                        targetNode : $table
	                    });
	                }

	                if (this.tableDragonDrop.$targetNode[0] != $table[0]) {
	                    this.tableDragonDrop.$targetNode = $table;
	                    this.tableDragonDrop.$draggables = this.tableMoveBarNode;
	                }

	                var tableClickEvent = function(e){
	                    _this.allClearMouseAction();
	                    _this.$dom.selection.removeSelected();
	                    _this.$dom.selection.removeRange();

	                    var rows = $table[0].rows;
	                    var firstCell = rows[0].cells[0];
	                    var lastCels = rows[rows.length - 1].cells[rows[rows.length - 1].cells.length - 1];

	                    var tdNodes = _this.$dom.selection.rangeTable.selectTable(_this.$dom.selection.getEditableRootNode(), firstCell, lastCels);
	                    $(tdNodes).addClass(Define.CLASS.SELECTED_TD);
	                    $(tdNodes).find('span').addClass(Define.CLASS.SELECTED);
	                    $table.addClass(Define.CLASS.SELECTED_TABLE);

	                    _this.setTableAllResizeHandler($table);
	                };

	                this.tableMoveBarNode.css({
	                    top : tableOffset.top - 9,
	                    left : tableOffset.left - 9
	                }).off('click').on('click', tableClickEvent);
	            }


	            //Table 앞 뒤로 Paragraph 없을때 Paragraph 추가 처리 로직 구현
	            var insertParagraph = null;

	            var $tablePrevNode = $table.prev();
	            var $tableNextNode = $table.next();

	            if (startY >= tableOffset.top && endY <= tableOffset.top) {

	                if (!$tablePrevNode.length || $.inArray($tablePrevNode[0].nodeName, Define.PARAGRAPH_NODES) === -1 || !$tablePrevNode.text().length || $tablePrevNode.attr(Define.ATTR.TYPE) == Define.ATTR_VALUE.KK_LAYER) {
	                    insertParagraph = "before";
	                }

	            } else if (startY >= (tableOffset.top + $table[0].offsetHeight) && endY <= (tableOffset.top + $table[0].offsetHeight)) {
	                if (!$tableNextNode.length || $.inArray($tableNextNode[0].nodeName, Define.PARAGRAPH_NODES) === -1 || !$tableNextNode.text().length || $tableNextNode.attr(Define.ATTR.TYPE) == Define.ATTR_VALUE.KK_LAYER) {
	                    insertParagraph = "after";
	                }
	            }

	            if (insertParagraph) {
	                this.removeInsertParagaphNodeForTable();

	                this.insertParagraphNode = $('<div class="' + Define.CLASS.KK_ADD_PARAGRAPH + '">' + Resource.paragraphInsert + '</div>').css({
	                    width : $table.width(),
	                    top : tableOffset.top + (insertParagraph === "before" ? 0 : $table[0].offsetHeight) - 7 ,
	                    left : tableOffset.left
	                }).on('click', function(){
	                    _this.router.doOperation({type:"read", name:"paragraph", value: null });

	                    $table[insertParagraph]($(Define.DEFAULT_PARAGRAPH_HTML));

	                    _this.router.setRedoHistory();

	                    _this.insertParagraphNode.remove();
	                    _this.insertParagraphNode = null;
	                });

	                $(document.body).append(this.insertParagraphNode);

	                return;
	            }

	            //Cell 크기 조절을 위한 Resize Bar 설정 기능 구현

	            if (e.target.nodeType === Node.ELEMENT_NODE && $.inArray(e.target.nodeName, Define.CELL_TYPE) != -1) {
	                var cellHeight = $cell[0].offsetHeight;
	                var cellWidth = $cell[0].offsetWidth;

	                var cellOffset = $cell.offset();

	                var cellTop = cellOffset.top;
	                var cellLeft = cellOffset.left;

	                //높이 리사이즈
	                if (startY >= (cellTop + cellHeight) && endY <= (cellTop + cellHeight)){
	                    this.resetTableResizable();

	                    this.cellResizeBarNode = $('<div class="' + Define.CLASS.KK_CELL_RESIZE_BAR_Y + '"/>').css({
	                        width : $table.width(),
	                        height : 10,
	                        top : (cellTop + cellHeight) - 5 ,
	                        left : tableOffset.left
	                    }).on("mousedown", function(){

	                        if (_this.removeTableAllResizeEvents) {
	                            _this.removeTableAllResizeEvents();
	                        }

	                        _this.router.doOperation({type:"read", name:"table", value: null });

	                        var rows = $table[0].rows;

	                        var changeSizeCellNodes = [];

	                        var scanCellPos = $cell.cellPos();

	                        var currentRowIndex = scanCellPos.top;
	                        // var nextRowCellIndex = currentRowIndex + ($cell[0].rowSpan ? $cell[0].rowSpan - 1 : 0);
	                        currentRowIndex = currentRowIndex + ($cell[0].rowSpan ? $cell[0].rowSpan - 1 : 0);

	                        var rowSizeList = [];

	                        for (var rowIdx = 0, rowLength = rows.length; rowIdx < rowLength; rowIdx++) {
	                            var trNode = rows[rowIdx];
	                            var cells = trNode.cells;

	                            var cellSizeList = [];

	                            for (var cellIdx = 0, length = cells.length; cellIdx < length; cellIdx++) {
	                                var changeWidthTargetCell = $(cells[cellIdx]);

	                                cellSizeList.push(changeWidthTargetCell.height());
	                            }

	                            rowSizeList.push(cellSizeList);
	                        }

	                        for (var rowIdx = 0, rowLength = rows.length; rowIdx < rowLength; rowIdx++) {
	                            var trNode = rows[rowIdx];
	                            var cells = trNode.cells;

	                            var cellSizeList = rowSizeList[rowIdx];

	                            for (var cellIdx = 0, length = cells.length; cellIdx < length; cellIdx++) {
	                                var changeWidthTargetCell = $(cells[cellIdx]);

	                                var cellHeight = cellSizeList[cellIdx] + 1;

	                                changeWidthTargetCell.css('height', cellHeight + 'px');

	                                var cellPosition = changeWidthTargetCell.cellPos();

	                                var cellRowIndex = cellPosition.top;

	                                if (cellRowIndex == currentRowIndex || (cellRowIndex <= currentRowIndex && cellRowIndex + (cells[cellIdx].rowSpan - 1) >= currentRowIndex)) {
	                                    changeSizeCellNodes.push([changeWidthTargetCell, cellHeight]);
	                                }

	                                // if (cellRowIndex == nextRowCellIndex || (cellRowIndex <= nextRowCellIndex && cellRowIndex + (cells[cellIdx].rowSpan-1) >= nextRowCellIndex)) {
	                                //     changeSizeCellNodes.push([changeWidthTargetCell, cellHeight]);
	                                // }
	                            }
	                        }

	                        var $trNode = $cell.parent();

	                        var $siblingNodes = $cell.siblings();

	                        var $tableNode = $trNode.closest('table');
	                        var tableHeight = $tableNode.height();

	                        var height = $trNode.height();

	                        _this.cellResizeBarInfo = {
	                            targetCell: $cell,
	                            siblingCells: $siblingNodes,
	                            tableNode : $tableNode,
	                            tableHeight : tableHeight,
	                            height: height,
	                            changeSizeCellNodes : changeSizeCellNodes,
	                            clientY : clientY,
	                            type : 'row'
	                        };
	                    }).on('mouseup', function(){
	                        _this.resetTableResizable();
	                    });

	                    $(document.body).append(this.cellResizeBarNode);


	                //너비 리사이즈
	                } else if (startX >= (cellLeft + cellWidth) && endX <= (cellLeft + cellWidth)){
	                    this.resetTableResizable();

	                    this.cellResizeBarNode = $('<div class="' + Define.CLASS.KK_CELL_RESIZE_BAR_X + '"/>').css({
	                        width : 10,
	                        height : $table.height(),
	                        top : tableOffset.top ,
	                        left : (cellLeft + cellWidth) - 5
	                    }).on("mousedown", function(e){
	                        if (_this.removeTableAllResizeEvents) {
	                            _this.removeTableAllResizeEvents();
	                        }

	                        _this.router.doOperation({type:"read", name:"table", value: null });

	                        var width = $cell.width();

	                        var scanCellPos = $cell.cellPos();
	                        var currentIndex = scanCellPos.left;
	                        var nextCellIndex = currentIndex + ($cell[0].colSpan ? $cell[0].colSpan : 1);

	                        var currentCellNodes = [];
	                        var nextCellNodes = [];

	                        var rows = $table[0].rows;

	                        var rowSizeList = [];

	                        for (var rowIdx = 0, rowLength = rows.length; rowIdx < rowLength; rowIdx++) {
	                            var trNode = rows[rowIdx];
	                            var cells = trNode.cells;

	                            var cellSizeList = [];

	                            for (var cellIdx = 0, length = cells.length; cellIdx < length; cellIdx++) {
	                                var changeWidthTargetCell = $(cells[cellIdx]);

	                                cellSizeList.push(changeWidthTargetCell.width());
	                            }

	                            rowSizeList.push(cellSizeList);
	                        }

	                        for (var rowIdx = 0, rowLength = rows.length; rowIdx < rowLength; rowIdx++) {
	                            var trNode = rows[rowIdx];
	                            var cells = trNode.cells;

	                            var cellSizeList = rowSizeList[rowIdx];

	                            for (var cellIdx = 0, length = cells.length; cellIdx < length; cellIdx++) {

	                                var changeWidthTargetCell = $(cells[cellIdx]);

	                                var cellWidth = (cellSizeList[cellIdx] + 1);
	                                changeWidthTargetCell.css('width', cellWidth + 'px');

	                                var cellPosition = changeWidthTargetCell.cellPos();

	                                var cellColIndex = cellPosition.left;

	                                if (cellColIndex == currentIndex || (cellColIndex < currentIndex && cellColIndex + cells[cellIdx].colSpan > currentIndex)) {
	                                    currentCellNodes.push([changeWidthTargetCell, cellWidth]);
	                                }

	                                if (cellColIndex == nextCellIndex || (cellColIndex < nextCellIndex && cellColIndex + cells[cellIdx].colSpan > nextCellIndex)) {
	                                    nextCellNodes.push([changeWidthTargetCell, cellWidth]);
	                                }
	                            }
	                        }

	                        _this.cellResizeBarInfo = {
	                            targetCell: $cell,
	                            width: width,
	                            clientX : e.clientX,
	                            type : 'col',
	                            currentCellNodes : currentCellNodes,
	                            nextCellNodes : nextCellNodes,
	                            tableInfo : [$table, $table.width()]
	                        };

	                    }).on('mouseup', function(){
	                        _this.resetTableResizable();
	                    });

	                    $(document.body).append(this.cellResizeBarNode);
	                }
	            } else {
	                this.removeInsertParagaphNodeForTable();
	                this.resetTableResizable();
	            }
	        } else {
	            this.removeInsertParagaphNodeForTable();
	            this.resetTableResizable();

	            this.clearTableMovable();
	        }
	    }
	};

	Mouse.prototype.removeInsertParagaphNodeForTable = function() {
	    if (this.insertParagraphNode) {
	        this.insertParagraphNode.remove();
	        this.insertParagraphNode = null;
	    }
	};

	Mouse.prototype.resetTableResizable = function() {
	    this.cellResizeBarInfo = null;
	    if (this.cellResizeBarNode) {
	        this.router.setRedoHistory();
	        this.cellResizeBarNode.remove();
	        this.cellResizeBarNode = null;
	    }
	};

	Mouse.prototype.clearTableMovable = function() {
	    if (this.tableMoveBarNode) {
	        this.tableMoveBarNode.remove();
	        this.tableMoveBarNode = null;
	    }

	    if (this.tableDragonDrop) {
	        this.tableDragonDrop.disengage(this.imageDragonDrop);
	        this.tableDragonDrop = null;
	    }
	};

	Mouse.prototype.clearImageMovable = function() {
	    if (this.imageMoveBarNode) {
	        this.imageMoveBarNode.remove();
	        this.imageMoveBarNode = null;

	        if (this.imageDragonDrop) {
	            this.imageDragonDrop.disengage();
	            this.imageDragonDrop = null;
	        }
	    }
	};

	Mouse.prototype.allClearMouseAction = function() {
	    this.clearImageMovable();
	    this.clearTableMovable();
	    this.resetTableResizable();
	    this.removeInsertParagaphNodeForTable();
	    if (this.removeImageResizeEvents) {
	        this.removeImageResizeEvents();
	    }
	    if (this.removeTableAllResizeEvents) {
	        this.removeTableAllResizeEvents();
	    }
	};

	/*

	==== Dragon Drop: a demo of precise DnD
	          in, around, and between
		     multiple contenteditable's.

	=================================
	== MIT Licensed for all to use ==
	=================================
	Copyright (C) 2013 Chase Moskal

	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	============

	*/

	Mouse.prototype.setDragNDrop = function (options) {
	    var _this = this;

	    var DRAGON_DROP = function (o) {
	        var DD = this;

	        // "o" params:
	        DD.$draggables = null;
	        DD.$dropzones = null;
	        DD.$noDrags = null; // optional
	        DD.$targetNode = null; // optional

	        DD.dropLoad = null;

	        DD.engage = function(o){
	            DD.$draggables = $(o.draggables);
	            DD.$dropzones = $(o.dropzones);
	            DD.$draggables.attr('draggable','true');
	            DD.$noDrags = (o.noDrags) ? $(o.noDrags) : $();

	            if (o.targetNode) {
	                DD.$targetNode = $(o.targetNode);
	            }

	            DD.$dropzones.attr('dropzone','copy');
	            DD.bindDraggables();
	            DD.bindDropzones();
	        };

	        DD.bindDraggables = function(){
	            DD.$draggables = DD.$draggables.selector ? $(DD.$draggables.selector) : DD.$draggables; // reselecting
	            DD.$noDrags = DD.$noDrags.selector ? $(DD.$noDrags.selector) : DD.$noDrags;
	            DD.$noDrags.attr('draggable','false');
	            DD.$draggables.off('dragstart').on('dragstart',function(event){
	                var e = event.originalEvent;
	                $(e.target).removeAttr('dragged');

	                var dt = e.dataTransfer;
	                var content = e.target.outerHTML;

	                if (DD.$targetNode) {
	                    content = DD.$targetNode[0].outerHTML;
	                }

	                var is_draggable = DD.$draggables.is(e.target);

	                if (is_draggable) {
	                    dt.effectAllowed = 'copy';

	                    var dataType = $.browser.msie ? 'text' : 'text/plain';

	                    dt.setData(dataType,' ');
	                    DD.dropLoad = content;
	                    $(e.target).attr('dragged','dragged');
	                }
	            });


	            //Below Source Code Customize
	            var offset = _this.editorView.offset();
	            var width = _this.editorView.width();
	            var height = _this.editorView.height();

	            DD.$draggables.off('drag').on('drag',function(event){
	                var clientX = event.originalEvent.clientX;
	                var clientY = event.originalEvent.clientY;

	                if (offset.left + width - 25 < clientX) {
	                    _this.editorContentView.scrollLeft(_this.editorContentView.scrollLeft() + 50);

	                } else if (offset.left + 25 > clientX) {
	                    _this.editorContentView.scrollLeft(_this.editorContentView.scrollLeft() - 50);
	                }

	                if (offset.top + height - 25 < clientY) {
	                    _this.editorContentView.scrollTop(_this.editorContentView.scrollTop() + 50);

	                } else if (offset.top + 25 > clientY) {
	                    _this.editorContentView.scrollTop(_this.editorContentView.scrollTop() - 50);
	                }

	                if (DD.$targetNode && DD.$targetNode[0].nodeName == "TABLE") {
	                    var tableOffset = DD.$targetNode.offset();

	                    DD.$draggables.css({
	                        top : tableOffset.top - 9,
	                        left : tableOffset.left - 9
	                    });
	                }
	            });
	        };

	        DD.bindDropzones = function(){
	            DD.$dropzones = DD.$dropzones.selector ? $(DD.$dropzones.selector) : DD.$dropzones; // reselecting

	            DD.$dropzones.off('dragleave').on('dragleave',function(event){
	                var e = event.originalEvent;

	                var dt = e.dataTransfer;
	                var relatedTarget_is_dropzone = DD.$dropzones.is(e.relatedTarget);
	                var relatedTarget_within_dropzone = DD.$dropzones.has(e.relatedTarget).length>0;
	                var acceptable = relatedTarget_is_dropzone || relatedTarget_within_dropzone;

	                if (!acceptable) {
	                    dt.dropEffect = 'none';
	                    dt.effectAllowed = 'null';
	                }
	            });

	            DD.$dropzones.off('drop').on('drop',function(event){
	                var e = event.originalEvent;

	                if (!DD.dropLoad) return false;

	                var range = null;

	                if (document.caretRangeFromPoint) { // Chrome
	                    range = document.caretRangeFromPoint(e.clientX,e.clientY);

	                } else if (e.rangeParent) { // Firefox
	                    range = document.createRange();
	                    range.setStart(e.rangeParent,e.rangeOffset);
	                }

	                var sel = window.getSelection();

	                if ($.browser.msie) {
	                    range = sel.getRangeAt(0);
	                } else {
	                    sel.removeAllRanges(); sel.addRange(range);
	                }

	                if (DD.$targetNode) {
	                    var selfTarget = DD.$targetNode.find(range.startContainer);

	                    var isContentTarget = range.startContainer == _this.contentElement || range.endContainer == _this.contentElement;

	                    if (selfTarget.length || isContentTarget) {
	                        $(DD.$draggables.selector ? DD.$draggables.selector : DD.$draggables).filter('[dragged]').remove();

	                        DD.dropLoad = null;
	                        DD.bindDraggables();
	                        e.preventDefault();

	                        return;
	                    }
	                }

	                if (!$.browser.msie) {
	                    $(sel.anchorNode).closest(DD.$dropzones.selector ? DD.$dropzones.selector : DD.$dropzones).get(0).focus(); // essential
	                }

	                if (DD.$targetNode && DD.$targetNode[0].nodeName == "TABLE") {

	                    _this.router.doOperation({type:"read", name:"text", value:""});

	                    var resultObj = Util.splitParagraphNode(range);

	                    if (resultObj.prevNode) {
	                        resultObj.prevNode.after(DD.$targetNode);

	                    } else if (resultObj.nextNode) {
	                        resultObj.nextNode.before(DD.$targetNode);
	                    }

	                    setTimeout(function(){
	                        if (DD.$targetNode) {
	                            var tableOffset = DD.$targetNode.offset();

	                            DD.$draggables.css({
	                                top : tableOffset.top - 9,
	                                left : tableOffset.left - 9
	                            });
	                        }
	                    }, 0);

	                    _this.clearImageMovable();

	                    if (_this.removeImageResizeEvents) {
	                        _this.removeImageResizeEvents();
	                    }

	                    _this.router.setRedoHistory();

	                    _this.router.scrollIntoView(DD.$targetNode[0]);

	                } else if (DD.$targetNode && DD.$targetNode[0].nodeName == "IMG") {
	                    _this.router.doOperation({type:"read", name:"text", value:""});

	                    var op = _this.$dom.selection.getOp(range.startContainer, range.startOffset);

	                    var spanNode = _this.$dom.selection.getInsertableNode(op.p, op.r);

	                    spanNode.innerHTML = DD.dropLoad;

	                    _this.router.scrollIntoView(spanNode);

	                    if (_this.removeImageResizeEvents) {
	                        _this.removeImageResizeEvents();
	                    }

	                    if (_this.tableDragonDrop) {
	                        _this.tableDragonDrop.disengage();
	                        _this.tableDragonDrop = null;
	                    }

	                    DD.$targetNode.remove();

	                    _this.router.setRedoHistory();
	                } else {
	                    _this.router.doOperation({type:"read", name:"text", value:""});

	                    document.execCommand('insertHTML',false,'<param name="dragonDropMarker" />' + DD.dropLoad);
	                    sel.removeAllRanges();

	                    // verification with dragonDropMarker
	                    var $DDM = $('param[name="dragonDropMarker"]');

	                    var insertSuccess = $DDM.length>0;

	                    if (insertSuccess) {
	                        _this.router.scrollIntoView($DDM[0]);

	                        $(DD.$draggables.selector ? DD.$draggables.selector : DD.$draggables).filter('[dragged]').remove();

	                        if (DD.$targetNode) {
	                            if (DD.$targetNode[0].nodeName == 'IMG') {
	                                if (_this.removeImageResizeEvents) {
	                                    _this.removeImageResizeEvents();
	                                }

	                                if (_this.tableDragonDrop) {
	                                    _this.tableDragonDrop.disengage();
	                                    _this.tableDragonDrop = null;
	                                }
	                            }

	                            DD.$targetNode.remove();
	                        }

	                        $DDM.remove();
	                    }

	                    _this.router.setRedoHistory();
	                }

	                DD.dropLoad = null;
	                DD.bindDraggables();
	                e.preventDefault();
	            });
	        };

	        DD.disengage = function(isDropNoneClear){
	            DD.$draggables = $( DD.$draggables.selector ? DD.$draggables.selector : DD.$draggables ); // reselections
	            DD.$dropzones = $( DD.$dropzones.selector ? DD.$dropzones.selector : DD.$dropzones);
	            DD.$noDrags = $( DD.$noDrags.selector ? DD.$noDrags.selector : DD.$noDrags );
	            DD.$draggables.removeAttr('draggable').removeAttr('dragged').off('dragstart').off('drag');
	            DD.$noDrags.removeAttr('draggable');

	            DD.$targetNode = null;

	            if (!isDropNoneClear) {
	                DD.$dropzones.removeAttr('droppable').off('dragenter');
	                DD.$dropzones.off('drop');

	                $(_this.contentElement).off('dragleave').off('dragover').off('drop')
	                    .on("dragleave", $.proxy(_this.clipboard.dragleave, _this.clipboard))
	                    .on("dragover", $.proxy(_this.clipboard.dragover, _this.clipboard))
	                    .on("drop", $.proxy(_this.clipboard.drop, _this.clipboard));
	            }
	        };

	        if (o) {
	            DD.engage(o);
	        }
	    };

	    return new DRAGON_DROP(options);
	};

	module.exports = Mouse;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);

	var Resource = __webpack_require__(13);

	var Filter = __webpack_require__(44);

	function Clipboard(editorElement, $domObject, router) {
	    this.$dom = $domObject;

	    this.editorElement = $(editorElement);
	    this.router = router;

	    this.$contentArea = this.editorElement.find("." + Define.CLASS.CONTENTS);
	    this.clientFilter = new Filter(router.options);

	    this.$clipboardDiv = $('#' + Define.ID.KK_MS_CLIPBOARD);
	    this.opDataForMsClipboard = null;
	}

	Clipboard.prototype.fireClipboard = function(e) {
	    console.log("clipboard!");

	    if (Util.isEscapeEvent(e.target)) {
	        return;
	    }

	    var type = e.type;
	    if (type === "paste") {
	        this.doPaste(e);
	    } else if (type === "copy") {
	        this.doCopy(e);
	    } else if (type === "cut") {
	        this.doCut(e);
	    }
	};

	Clipboard.prototype.doDelete = function() {
	    var $selectedNodes = this.editorElement.find("." + Define.CLASS.SELECTED);

	    if ($selectedNodes.length) {
	        var selInfo = this.$dom.selection.get();

	        var opSource = {
	            type : "delete",
	            name : "text",
	            value : {
	                keyName : "backspace"
	            },
	            range : {
	                p : selInfo.p,
	                r : selInfo.r,
	                s : "text"
	            }
	        };

	        this.router.doOperation([opSource]);
	    }
	};

	Clipboard.prototype.doFilePaste = function(file) {
	    var _this = this;

	    var idx = Math.floor(Math.random() * 1000000) + 1;
	    var image = '<span><img src="' + this.router.options.loadingImageURL + '" ' + Define.ATTR.UPLOADING_IMAGE + '="' + idx + '"></span>';

	    this.doDelete();

	    var selInfo = this.$dom.selection.get();

	    var opSource = {
	        type : "create",
	        name : "paste",
	        value : {
	            html : image,
	            pasteType : "image"
	        },
	        range : {
	            p : selInfo.p,
	            r : selInfo.r,
	            s : "text"
	        }
	    };

	    this.router.doOperation(opSource);

	    var formData = new FormData();
	    formData.append(Define.NAME.UPLOAD_IMAGE_TYPE, file);

	    var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        var $img = _this.$contentArea.find('img[' + Define.ATTR.UPLOADING_IMAGE + '="' + idx + '"]');

	        $img[0].src = _this.router.options.errorImageURL;

	        if (data && !data.isError) {
	            $img[0].src = data.url;
	        }

	        $img.removeAttr(Define.ATTR.UPLOADING_IMAGE);
	        _this.router.setRedoHistory();
	    };

	    Util.doUploadData(url, formData, callbackFn, callbackFn);
	};

	Clipboard.prototype.doHTMLPaste = function(pasteHtml, opData) {
	    var _this = this;

	    var simpleTreeObject = this.clientFilter.doSimpleTreeChange(pasteHtml, true);

	    var simpleTreeHTML = simpleTreeObject.simpleTreeHTML;
	    var uploadImages = simpleTreeObject.uploadImages;

	    //Selection Element Delete
	    this.doDelete();

	    //Op Generator
	    var selInfo = this.$dom.selection.get();

	    var opSource = {
	        type : "create",
	        name : "paste",
	        value : {
	            html : simpleTreeHTML,
	            pasteType : "html"
	        }
	    };

	    if (opData){
	        opSource.range = {
	            p : opData.p,
	            r : opData.r,
	            s : "text"
	        };
	    }else{
	        opSource.range = {
	            p : selInfo.p,
	            r : selInfo.r,
	            s : "text"
	        };
	    }

	    this.router.doOperation(opSource);

	    if (uploadImages.length) {
	        setTimeout(function(){
	            var count = 0;
	            var imageLength = uploadImages.length;

	            var sendBase64Image = function(src, id){
	                var $img = _this.$contentArea.find('img[' + Define.ATTR.UPLOADING_IMAGE + '="' + id + '"]');

	                var formData = new FormData();
	                formData.append(Define.NAME.UPLOAD_IMAGE_BASE64_TYPE, src);

	                var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	                var callbackFn = function(data){
	                    $img[0].src = _this.router.options.errorImageURL;

	                    if (data && !data.isError) {
	                        $img[0].src = data.url;
	                    }

	                    $img.removeAttr(Define.ATTR.UPLOADING_IMAGE);

	                    count++;

	                    if (count == imageLength) {
	                        _this.router.setRedoHistory();
	                    }
	                };

	                Util.doUploadData(url, formData, callbackFn, callbackFn);
	            };

	            for (var imageIdx = 0; imageIdx < imageLength; imageIdx ++ ){
	                var imageScrInfo =  uploadImages[imageIdx];
	                var src = imageScrInfo.src;
	                var id = imageScrInfo.id;

	                sendBase64Image(src, id);
	            }
	        }, 10);
	    } else {
	        this.router.setRedoHistory();
	    }
	};

	Clipboard.prototype.doPaste = function(e) {
	    // console.log(e);

	    console.log("PASTE Action~!!!!!!!");
	    var _this = this;

	    if ($.browser.msie) {
	        var isImagePaste = false;

	        var textPasteValue = window.clipboardData.getData("Text");

	        if (window.clipboardData.files && window.clipboardData.files.length) {
	            if (!textPasteValue) {
	                isImagePaste = true;
	            }
	        }

	        var msIEPasteProcess = function() {
	            setTimeout(function() {
	                if (_this.opDataForMsClipboard) {
	                    _this.$clipboardDiv.find(Define.REMOVE_TYPE.join(',')).remove();
	                    var pasteHtml = _this.$clipboardDiv.html();

	                    // _this.$clipboardDiv.blur();

	                    if (_this.opDataForMsClipboard.range) {
	                        _this.$dom.selection.setRange(_this.opDataForMsClipboard.range);
	                    }

	                    _this.$dom.selection.setOp(_this.opDataForMsClipboard.op, true);
	                    // _this.$contentArea.focus();
	                    //
	                    _this.$dom.selection.hideWindowSelection();
	                    _this.opDataForMsClipboard = null;
	                    _this.$clipboardDiv.css({top : '', left : ''});
	                    _this.$clipboardDiv.html('');

	                    _this.doHTMLPaste(pasteHtml);
	                }
	            }, 10);
	        };

	        if (isImagePaste) {
	            if (this.opDataForMsClipboard) {

	                var files = window.clipboardData.files;

	                if (files.length == 1 && files[0].size == 0) {
	                    msIEPasteProcess();

	                } else {
	                    if (_this.opDataForMsClipboard.range) {
	                        _this.$dom.selection.setRange(_this.opDataForMsClipboard.range);
	                    }

	                    this.$dom.selection.setOp(this.opDataForMsClipboard.op, true);
	                    _this.$dom.selection.hideWindowSelection();
	                    _this.opDataForMsClipboard = null;
	                    _this.$clipboardDiv.css({top : '', left : ''});
	                    _this.$clipboardDiv.html('');

	                    for (var i = 0, length = files.length ; i < length ; i++) {
	                        var file = files[i];
	                        if(!file || file.type !== "image/png"){
	                            continue;
	                        }

	                        _this.doFilePaste(file);
	                    }

	                    this.stopEvent(e);
	                }
	            }
	        } else {
	            msIEPasteProcess();

	            return;
	        }
	    } else {
	        var pasteType = e.originalEvent.clipboardData.types;

	        console.log("pasteType >>>>>>>>>> ", pasteType);

	        var isFileType = /Files/.test(pasteType);
	        var isHtmlType = /text\/html/.test(pasteType);
	        var isPlainType = /text\/plain/.test(pasteType);

	        var clipboardData = e.originalEvent.clipboardData;
	        var clipboardItems = clipboardData.items;
	        var pasteHtml = clipboardData.getData("text/html");
	        var plainText = clipboardData.getData("text/plain");

	        var fileItems = [];

	        if(clipboardItems.length > 0){
	            for (var itemIdx = 0 ; itemIdx < clipboardItems.length ; itemIdx++) {

	                var fileItem = clipboardItems[itemIdx].getAsFile();

	                if(fileItem && fileItem.type === "image/png"){
	                    fileItems.push(fileItem);
	                }
	            }
	        }

	        var setFileItems = function() {
	            if ($.browser.webkit) {
	                if(fileItems.length > 0){
	                    for (var itemIdx = 0 ; itemIdx < fileItems.length ; itemIdx++) {

	                        var fileItem = fileItems[itemIdx];

	                        if(fileItem && fileItem.type === "image/png"){
	                            _this.doFilePaste(fileItem);
	                        }
	                    }
	                }
	            }

	            _this.stopEvent(e);
	            return;
	        };


	        var runningHTMLPaste = function() {
	            if (isHtmlType) {
	                console.log("Paste Type html");

	                pasteHtml = $('<div/>').html(pasteHtml).html();

	                _this.doHTMLPaste(pasteHtml);

	            } else if (isPlainType) {
	                console.log("Paste Type PlainText");

	                plainText = plainText.replace(/\u000a\u000d/gi, "</span></p>" + Define.DEFAULT_PARAGRAPH_HTML + Define.DEFAULT_P_STYLE + "<span>");
	                plainText = plainText.replace(/\u000a/gi, "</span></p>" + Define.DEFAULT_P_STYLE + "<span>");
	                plainText = Define.DEFAULT_P_STYLE + "<span>" + plainText + "</span></p>";

	                //console.log("plainText >>>>>>>>>>>", plainText);

	                var pasteHTML = _this.clientFilter.doSimpleTreeChange(plainText);

	                _this.doDelete();

	                var selInfo = _this.$dom.selection.get();

	                var opSource = {
	                    type : "create",
	                    name : "paste",
	                    value : {
	                        html : pasteHTML,
	                        pasteType : "html"
	                    },
	                    range : {
	                        p : selInfo.p,
	                        r : selInfo.r,
	                        s : "text"
	                    }
	                };

	                _this.router.doOperation(opSource);
	                _this.router.setRedoHistory();
	            }

	            _this.stopEvent(e);
	        };

	        if (isFileType) {
	            var isObjectPaste = isFileType && isHtmlType;// && isPlainType;
	            var isImagePasteConfirm = true;

	            if (isObjectPaste) {
	                $.cxDialog({
	                    title : Resource.pasteMessage.pasteTypeConfirm,
	                    info : '<strong>' + Resource.pasteMessage.imagePasteConfirm + '</strong>',
	                    okText : 'HTML',
	                    no : null,
	                    noText : 'Image',
	                    ok : function() {
	                        runningHTMLPaste();
	                    },
	                    no : function() {
	                        setFileItems();
	                    }
	                });

	                this.stopEvent(e);

	                // swal(Resource.pasteMessage.imagePasteConfirm, {
	                //     buttons: {
	                //         cancel: "Cancel",
	                //         image: "Image",
	                //         html: "HTML"
	                //     }
	                // }).then(function(value){
	                //
	                //     switch (value) {
	                //         case "image":
	                //             isImagePasteConfirm = true;
	                //             break;
	                //
	                //         case "html":
	                //             isImagePasteConfirm = false;
	                //             break;
	                //
	                //         default:
	                //             isImagePasteConfirm = null;
	                //             break;
	                //     }
	                //
	                //     if (isImagePasteConfirm === null) {
	                //         _this.stopEvent(e);
	                //         return;
	                //     }
	                //
	                //     if (isImagePasteConfirm) {
	                //         setFileItems();
	                //     } else {
	                //         runningHTMLPaste();
	                //     }
	                // });
	            } else {
	                setFileItems();
	            }
	        } else {
	            runningHTMLPaste();
	            this.stopEvent(e);
	        }
	    }
	};




	/*
	* MSIE 전용 Paste 시에 Paste Area에 Focus
	* */
	Clipboard.prototype.setPasteReady = function() {
	    if($.browser.msie) {
	        this.opDataForMsClipboard = {
	            op : this.$dom.selection.get(),
	            range : this.$dom.selection.getRange().cloneRange()
	        };

	        this.$clipboardDiv.html('').css({top : document.body.clientHeight / 2, left : document.body.clientWidth / 2});

	        var selection = window.getSelection();
	        var range = document.createRange();

	        range.setStart(this.$clipboardDiv[0], 0);
	        range.setEnd(this.$clipboardDiv[0], 0);
	        selection.removeAllRanges();
	        selection.addRange(range);
	        // this.$clipboardDiv.focus();
	    }
	};

	/*
	* MSIE 전용 Copy & Cut 시에 Contents 가공 공간
	* */
	Clipboard.prototype.setCopyReady = function(copyCutKeyType) {
	    if($.browser.msie) {
	        var selectionContents = this.getSelectionContents();

	        var op = this.$dom.selection.get();
	        var range = this.$dom.selection.getRange();

	        this.opDataForMsClipboard = {
	            op : op
	        };

	        if (copyCutKeyType == "copy") {
	            this.opDataForMsClipboard.range = range.cloneRange();
	        } else {
	            if (copyCutKeyType == "cut" && range) {
	                this.opDataForMsClipboard.range = range.cloneRange();
	            } else {
	                this.opDataForMsClipboard.range = null;
	            }

	            selectionContents = '<p/>' + selectionContents + '<p/>';
	        }

	        selectionContents = this.clientFilter.doAdjustCopyDatas(selectionContents);

	        if (selectionContents) {
	            this.$clipboardDiv.css({top : document.body.clientHeight / 2, left : document.body.clientWidth / 2});
	            this.$clipboardDiv.html(selectionContents);

	            var selection = this.$dom.selection.getSelection();
	            var range = document.createRange();

	            range.setStart(this.$clipboardDiv[0].childNodes[0], 0);
	            range.setEnd(this.$clipboardDiv[0].childNodes[this.$clipboardDiv[0].childNodes.length - 1], this.$clipboardDiv[0].childNodes[this.$clipboardDiv[0].childNodes.length - 1].childNodes.length);
	            selection.removeAllRanges();
	            selection.addRange(range);
	            // this.$clipboardDiv.focus();
	        }
	    }
	};

	Clipboard.prototype.executeCopy = function(e, isDoCut) {
	    var _this = this;

	    //Chrome & Safari
	    if (e.originalEvent.clipboardData) {
	        var selectionContentHTML = this.getSelectionContents();

	        var $clipboardDivWrap = $('<div/>');
	        selectionContentHTML = this.clientFilter.doAdjustCopyDatas(selectionContentHTML);
	        $clipboardDivWrap.html(selectionContentHTML);

	        e.originalEvent.clipboardData.setData("text/html", $clipboardDivWrap.html());
	        e.originalEvent.clipboardData.setData("text/plain", $clipboardDivWrap.text());

	        this.stopEvent(e);

	        if (isDoCut) {
	            this.doDelete();
	        }
	    } else if ($.browser.msie) {
	        //MSIE
	        setTimeout(function() {
	            if (_this.opDataForMsClipboard) {
	                // _this.$clipboardDiv.blur();

	                if (_this.opDataForMsClipboard.range) {
	                    _this.$dom.selection.setRange(_this.opDataForMsClipboard.range);
	                }

	                _this.$dom.selection.setOp(_this.opDataForMsClipboard.op, true);
	                // _this.$contentArea.focus();

	                _this.$dom.selection.hideWindowSelection();
	                _this.opDataForMsClipboard = null;
	                _this.$clipboardDiv.css({top : '', left : ''});
	                _this.$clipboardDiv.html('');

	                if (isDoCut) {
	                    _this.doDelete();
	                }
	            }
	        }, 10);
	    }
	};

	Clipboard.prototype.doCopy = function(e) {
	    console.log("copy");

	    this.executeCopy(e);
	};

	Clipboard.prototype.doCut = function(e) {
	    console.log("cut");

	    this.executeCopy(e, true);
	};

	Clipboard.prototype.getSelectionContents = function() {

	    var $selectedNodes = this.$dom.selection.getSelectedNode();

	    var $selectedContents = "";

	    if ($selectedNodes.length) {
	        var $selectionContents = $('');

	        var $selectedTDNodes = this.$dom.selection.getSelectedTd();
	        var $selectedTableNodes = this.$dom.selection.getSelectedTable();

	        if ($selectedTDNodes.length || $selectedTableNodes.length) {
	            var selectedParentTableNodes = $selectedNodes.parents('.' + Define.CLASS.CONTENTS + ' TABLE' );

	            if (selectedParentTableNodes.length) {
	                var $tableInnerSpan = selectedParentTableNodes.find($selectedNodes);
	                $selectedNodes = $selectedNodes.not($tableInnerSpan);

	                var childTable = selectedParentTableNodes.find(selectedParentTableNodes);

	                if (childTable.length) {
	                    selectedParentTableNodes = selectedParentTableNodes.not(childTable);
	                }

	                $selectionContents = $selectionContents.add(selectedParentTableNodes);
	            }
	        }

	        var parentsParagraphNodes = $selectedNodes.closest('.' + Define.CLASS.CONTENTS + ' ' + Define.PARAGRAPH_NODES.join(', .' + Define.CLASS.CONTENTS + ' '));

	        if (parentsParagraphNodes.length) {
	            var $liNodes = parentsParagraphNodes.filter('li');
	            if ($liNodes.length) {
	                var parentListNodes = $liNodes.closest('.' + Define.CLASS.CONTENTS + ' ul'  + ', .' + Define.CLASS.CONTENTS + ' ol');

	                var listInnerSpan = parentListNodes.find($selectedNodes);
	                $selectedNodes = $selectedNodes.not(listInnerSpan);
	                $selectionContents = $selectionContents.add(parentListNodes);

	                var listInnerParagraph = parentListNodes.find(parentsParagraphNodes);
	                parentsParagraphNodes = parentsParagraphNodes.not(listInnerParagraph);
	            }

	            var $nestParentParagraph = parentsParagraphNodes.find(parentsParagraphNodes);

	            if ($nestParentParagraph.length) {
	                parentsParagraphNodes = parentsParagraphNodes.not($nestParentParagraph);
	            }

	            var paragraphInnerSpan = parentsParagraphNodes.find($selectedNodes);
	            $selectedNodes = $selectedNodes.not(paragraphInnerSpan);

	            $selectionContents = $selectionContents.add(parentsParagraphNodes);
	        }

	        if ($selectedNodes.length) {
	            $selectionContents = $selectionContents.add($selectedNodes);
	        }

	        var $nestSelectionContents = $selectionContents.find($selectionContents);

	        if ($nestSelectionContents.length) {
	            $selectionContents = $selectionContents.not($nestSelectionContents);
	        }

	        var cloneObject = $('<div/>').html($selectionContents.clone());

	        var findClass = [Define.CLASS.SELECTED, Define.CLASS.SELECTED_TABLE, Define.CLASS.SELECTED_TD];
	        var removeQueryList = ['span:not(.' + Define.CLASS.SELECTED + ')'
	                            , 'table:not(.' + Define.CLASS.SELECTED_TABLE + ') td:not(.' + Define.CLASS.SELECTED_TD + ')'
	                            , 'table:not(.' + Define.CLASS.SELECTED_TABLE + ') th:not(.' + Define.CLASS.SELECTED_TD + ')'
	        ];

	        cloneObject.find(removeQueryList.join(',')).remove();
	        cloneObject.find('p:empty').remove();
	        cloneObject.find('li:empty').remove();
	        cloneObject.find('ol:empty').remove();
	        cloneObject.find('ul:empty').remove();
	        cloneObject.find('tr:empty').remove();

	        cloneObject.find('table').each(function(idx, node){
	            var $node = $(node);
	            if(node.rows.length === 0) {
	                $node.remove();
	            } else {
	                var width = 0;
	                var cells = node.rows[0].cells;
	                for (var cellIdx = 0, cellLength = cells.length; cellIdx < cellLength; cellIdx++) {
	                    var cell = cells[cellIdx];
	                    width = width + parseInt($(cell).css('width'));
	                }
	                $node.css('width', width || '');
	            }
	        });

	        cloneObject.find('.' + findClass.join(', .')).removeClass(findClass.join(','));

	        $selectedContents = cloneObject.html();
	    }

	    return $selectedContents;
	};

	Clipboard.prototype.isDragStopCheck = function(e) {
	    return e.originalEvent.dataTransfer.types[0] === "Text" || e.originalEvent.dataTransfer.types[0].toLowerCase().indexOf("text") >= 0;
	};

	Clipboard.prototype.dragleave = function(e) {
	    if (e.originalEvent && e.originalEvent.dataTransfer.types.length === 1) {
	        if (this.isDragStopCheck(e)) {
	            return;
	        }

	        this.stopEvent(e);

	        this.$contentArea.removeClass("dragover");
	    }
	};

	Clipboard.prototype.dragover = function(e) {
	    if (e.originalEvent && e.originalEvent.dataTransfer.types.length === 1) {
	        if (this.isDragStopCheck(e)) {
	            return;
	        }

	        this.stopEvent(e);

	        e.originalEvent.dataTransfer.dropEffect = 'copy';
	        this.$contentArea.addClass("dragover");
	    }
	};

	Clipboard.prototype.drop = function(e) {
	    if (e.originalEvent && e.originalEvent.dataTransfer.types.length === 1) {
	        if (this.isDragStopCheck(e)) {
	            return;
	        }

	        this.stopEvent(e);

	        this.$contentArea.removeClass("dragover");

	        var images = "";
	        var loadingObj = [];
	        var files = e.originalEvent.dataTransfer.files;
	        var imageCount = 0;

	        var _this = this;

	        var getServerUploadFunction = function(file) {
	            return {
	                getSource : function(obj) {
	                    var $img = _this.$contentArea.find('img[' + Define.ATTR.UPLOADING_IMAGE + '="' + obj.idx + '"]');

	                    var formData = new FormData();
	                    formData.append(Define.NAME.UPLOAD_IMAGE_TYPE, file);

	                    var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	                    var callbackFn = function(data){
	                        $img[0].src = _this.router.options.errorImageURL;

	                        if (data && !data.isError) {
	                            $img[0].src = data.url;
	                        }

	                        $img.removeAttr(Define.ATTR.UPLOADING_IMAGE);

	                        imageCount--;

	                        if (imageCount == 0) {
	                            _this.router.setRedoHistory();
	                        }
	                    };

	                    Util.doUploadData(url, formData, callbackFn, callbackFn);
	                }
	            };
	        };

	        var getImageLoad = function(file) {
	            var idx = Math.floor(Math.random() * 1000000) + 1;

	            var serverUploadObj = getServerUploadFunction(file);

	            images += '<span><img src="' + _this.router.options.loadingImageURL + '" ' + Define.ATTR.UPLOADING_IMAGE + '="' + idx + '"></span>';

	            imageCount++;
	            return {
	                serverUploadObj : serverUploadObj,
	                idx : idx
	            };
	        };

	        for (var i = 0, f; f = files[i]; i++) {
	            if (!f.type.match('image.*')) {
	                continue;
	            }

	            var obj = getImageLoad(f);
	            loadingObj.push(obj);
	        }

	        if (images) {
	            this.doDelete();

	            var selInfo = this.$dom.selection.get();

	            var opSource = {
	                type : "create",
	                name : "paste",
	                value : {
	                    html : images,
	                    pasteType : "image"
	                },
	                range : {
	                    p : selInfo.p,
	                    r : selInfo.r,
	                    s : "text"
	                }
	            };

	            _this.router.doOperation(opSource);

	            for(var i = 0, obj ; obj = loadingObj[i]; i++) {
	                obj.serverUploadObj.getSource(obj);
	            }
	        }
	    }
	};

	Clipboard.prototype.stopEvent = function(e) {
	    if(e.preventDefault) {e.preventDefault();}
	    if(e.stopPropagation) {e.stopPropagation();}

	    e.returnValue = false;
	    e.cancelBubble = true;
	    e.stopped = true;
	};

	module.exports = Clipboard;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);

	var merge = __webpack_require__(45);

	/*
	 use

	 var json = himalaya.parse(html)
	 fs.writeFileSync('/webpage.html', toHTML(json))

	 */

	var himalaya = __webpack_require__(46);
	var translate = __webpack_require__(51);

	var toHTML = translate.toHTML;

	function Filter(options){
	    this.options = options;
	}

	Filter.prototype.init = function() {};

	Filter.prototype.blockNodeWrapping = function(parent, children){
	    if (parent && parent.attributes && parent.attributes[Define.ATTR.ID] === Define.ID.PASTE_WRAPPER) {
	        var paragraphObject = this.getParagraphTypeCreate({
	            tagName : 'p',
	            type : Define.FILTER_NODE_TYPE.ELEMENT
	        });

	        paragraphObject.children = children;

	        return paragraphObject;
	    }

	    return null;
	};

	Filter.prototype.changeAttributesToStyle = function(tagName, attributes){

	    if (tagName == 'td' || tagName == 'th') {
	        if (attributes[Define.ATTR.VALIIGN]) {
	            var vAlign = attributes[Define.ATTR.VALIIGN];
	            if (!attributes[Define.ATTR.STYLE]) {
	                attributes[Define.ATTR.STYLE] = {};
	            }

	            attributes[Define.ATTR.STYLE]['verticalAlign'] = vAlign;
	            delete attributes[Define.ATTR.VALIIGN];
	        }
	    }

	    return attributes;
	};

	Filter.prototype.getParagraphTypeCreate = function(root){

	    var tagName = root.tagName.toLowerCase();
	    var attributes = root.attributes ? JSON.parse(JSON.stringify(root.attributes)) : {};
	    var type = root.type;

	    attributes = this.changeAttributesToStyle(tagName, attributes);

	    if (tagName === 'w:sdt') {
	        tagName = 'div';
	    }

	    return {
	        attributes : attributes,
	        tagName : tagName,
	        type : type,
	        children : []
	    };
	};

	Filter.prototype.getAdjustChild = function(block) {

	    var createObject = function(type, tagName){
	        return {
	            type : type,
	            tagName : tagName,
	            attributes : {},
	            children : []
	        }
	    };

	    var theadDefault = createObject('Element', 'thead');
	    var tbodyDefault = createObject('Element', 'tbody');
	    var tfootDefault = createObject('Element', 'tfoot');

	    // var colgroupDefault = createObject('Element', 'colgroup');
	    // var colDefault = createObject('Element', 'col');
	    // colDefault.attributes.style = { width : '300px' };

	    var trDefault = createObject('Element', 'tr');
	    var tdDefault = createObject('Element', 'td');
	    var thDefault = createObject('Element', 'th');

	    tdDefault.attributes.style = thDefault.attributes.style = { width : '300px' , border : Define.DEFAULT_CELL_BORDER_STYLE };

	    var olDefault = createObject('Element', 'ol');
	    var ulDefault = createObject('Element', 'ul');
	    var liDefault = createObject('Element', 'li');

	    var dlDefault = createObject('Element', 'dl');
	    var dtDefault = createObject('Element', 'dt');
	    var ddDefault = createObject('Element', 'dd');

	    var captionDefault = createObject('Element', 'caption');
	    var paragraphDefault = createObject('Element', 'p');

	    var spanDefault = createObject('Element', 'span');
	    var brDefault = { type : 'Text', content : Define.DEFAULT_TEXT_HTML};

	    spanDefault.children = [brDefault];
	    paragraphDefault.children = [spanDefault];
	    liDefault.children = [spanDefault];
	    captionDefault.children = [spanDefault];

	    dtDefault.children = [spanDefault];
	    ddDefault.children = [spanDefault];

	    dlDefault.children = [dtDefault, ddDefault];

	    olDefault.children = [liDefault];
	    ulDefault.children = [liDefault];

	    // colgroupDefault.children = [colDefault];

	    thDefault.children = [paragraphDefault];
	    tdDefault.children = [paragraphDefault];
	    trDefault.children = [tdDefault];

	    theadDefault.children = [trDefault];
	    tbodyDefault.children = [trDefault];
	    tfootDefault.children = [trDefault];

	    var children = [];

	    switch (block.tagName) {
	        case 'div' :
	        case 'p' :
	        case 'li' :
	        case 'h1' :
	        case 'h2' :
	        case 'h3' :
	        case 'h4' :
	        case 'h5' :
	        case 'h6' :
	        case 'caption' :
	        case 'dt' :
	        case 'dd' :
	            children.push(spanDefault);
	            break;

	        case 'dl' :
	            children.push(dtDefault);
	            children.push(ddDefault);
	            break;

	        case 'td' :
	        case 'th' :
	            children.push(paragraphDefault);
	            break;

	        case 'ol' :
	        case 'ul' :
	            children.push(liDefault);
	            break;

	        case 'thead' :
	        case 'tbody' :
	        case 'tfoot' :
	            children.push(trDefault);
	            break;

	        case 'table' :
	            // children.push(colgroupDefault);
	            children.push(tbodyDefault);
	            break;

	    }

	    return children;
	};

	Filter.prototype.doSimpleTreeChange = function(htmlString, isUploadImage) {

	    var _this = this;

	    var styleObjects = [];
	    var uploadImages = [];

	    var isStopParsing = false;
	    //console.log("htmlString >>>>>>>>>>>>> ", htmlString);

	    var getSimpleTreeObject = function(root, attributes, parent) {
	        var rootType = root.type;

	        if (isStopParsing) {
	            return;
	        }

	        if (rootType === Define.FILTER_NODE_TYPE.ELEMENT) {

	            var tagName = root.tagName.toUpperCase();
	            var children = root.children;

	            var length = 0;

	            // console.log(root, tagName);
	            if ($.inArray(tagName, Define.BLOCK_NODES) !== -1 || $.inArray(tagName, Define.MS_SPECIAL_BLOCK_NODES) !== -1 ) {
	                //Block Nodes Check

	                var newObject = _this.getParagraphTypeCreate(root);

	                var newChildren = [];
	                length = children.length;

	                var isEndPragment = false;

	                if (length) {
	                    var stackParagraphObject = _this.getParagraphTypeCreate({tagName : 'div', type : 'Element'});

	                    for (var i = 0; i < length; i++) {
	                        var childElement = children[i];

	                        if (newObject.tagName == 'p' && childElement.tagName == 'table') {
	                            newObject.tagName = 'div';
	                        }

	                        var childObject = getSimpleTreeObject(childElement, {}, root);

	                        if (childObject && childObject == "EndFragment") {
	                            isEndPragment = true;
	                            break;
	                        }

	                        if (childObject) {

	                            if (((childElement.tagName && $.inArray(childElement.tagName.toUpperCase(), Define.CONTENT_NODES) != -1) || (childElement.type == Define.FILTER_NODE_TYPE.TEXT && $.inArray(childObject.tagName.toUpperCase(), Define.CONTENT_NODES) != -1)
	                                ) && (!parent || ($.inArray(tagName, Define.PARAGRAPH_NODES) === -1))) {
	                                stackParagraphObject.children = stackParagraphObject.children.concat(childObject);
	                            } else {
	                                if (stackParagraphObject.children.length) {
	                                    if (parent) {
	                                        newChildren = newChildren.concat(stackParagraphObject);
	                                    } else {
	                                        newChildren.push(stackParagraphObject);
	                                    }

	                                    stackParagraphObject = _this.getParagraphTypeCreate({tagName : 'div', type : 'Element'});
	                                }

	                                if (parent) {
	                                    newChildren = newChildren.concat(childObject);
	                                } else {
	                                    newChildren.push(childObject);
	                                }
	                            }
	                        }
	                    }

	                    if (isEndPragment) {
	                        isStopParsing = true;
	                    }

	                    if (stackParagraphObject.children.length) {
	                        if (parent) {
	                            newChildren = newChildren.concat(stackParagraphObject);
	                        } else {
	                            newChildren.push(stackParagraphObject);
	                        }
	                    }

	                    if (length == 1 && newObject.tagName == 'table'){

	                        var emptyTableChild = true;

	                        // console.log(newChildren);

	                        if (newChildren && newChildren.length != 0) {
	                            for (var childIdx = 0, childLength = newChildren.length; childIdx < childLength; childIdx++) {
	                                if (newChildren[childIdx].tagName === 'tr' || newChildren[childIdx].tagName === 'thead' || newChildren[childIdx].tagName === 'tbody' || newChildren[childIdx].tagName === 'tfoot') {
	                                    emptyTableChild = false;
	                                    break;
	                                }
	                            }
	                        }

	                        if (emptyTableChild) {
	                            var tableChildren = _this.getAdjustChild({tagName : 'table'});

	                            newChildren = newChildren.concat(tableChildren);
	                        }
	                    }

	                } else {
	                    newChildren = _this.getAdjustChild(newObject);
	                }

	                if (newObject.tagName == 'table') {
	                    if (!newObject.attributes) {
	                        newObject.attributes = {};
	                    }

	                    if (!newObject.attributes.style) {
	                        newObject.attributes.style = {};
	                    }

	                    if (!newObject.attributes.style.width) {
	                        newObject.attributes.style.width = newObject.attributes.width || '100%';
	                    }
	                } else if (newObject.tagName == 'td' || newObject.tagName == 'th' ) {
	                    if (!newObject.attributes) {
	                        newObject.attributes = {};
	                    }

	                    if (!newObject.attributes.style) {
	                        newObject.attributes.style = {};
	                    }
	                }

	                newObject.children = newChildren;

	                return newObject;

	            } else if ($.inArray(tagName, Define.CONTENT_NODES) !== -1) {
	                //SPAN Nodes Check

	                if (parent && $.inArray(parent.tagName.toUpperCase(), Define.NOT_DIRECT_PARENT_TYPE) !== -1) {
	                    return null;
	                }

	                var copyAttributes = {};
	                var originalAttributes = root.attributes;

	                if (attributes) {
	                    copyAttributes = merge(copyAttributes, attributes);
	                }

	                if (originalAttributes) {
	                    var fontFamily = '';

	                    if (copyAttributes['style'] && copyAttributes['style']['fontFamily']) {
	                        fontFamily = copyAttributes['style']['fontFamily'];
	                    }

	                    copyAttributes = merge(copyAttributes, originalAttributes);

	                    if (fontFamily) {
	                        copyAttributes['style']['fontFamily'] = fontFamily;
	                    }
	                }

	                var styleType = null;

	                switch (tagName) {
	                    case 'U' :
	                    case 'INS' :

	                    case 'STRIKE' :
	                    case 'S' :
	                    case 'DEL' :
	                        styleType = {
	                            'textDecoration': Define.CHANGE_STYLE[tagName] + (copyAttributes && copyAttributes.style && copyAttributes.style.textDecoration ? ' ' + copyAttributes.style.textDecoration : '')
	                        };
	                        break;

	                    case 'I' :
	                    case 'CITE' :
	                    case 'EM' :
	                    case 'VAR' :
	                    case 'ADDRESS' :
	                    case 'DFN' :
	                        styleType = {
	                            'fontStyle': Define.CHANGE_STYLE[tagName]
	                        };
	                        break;

	                    case 'STRONG' :
	                    case 'B' :
	                        styleType = {
	                            'fontWeight': Define.CHANGE_STYLE[tagName]
	                        };
	                        break;
	                    case 'SUP' :
	                        styleType = {
	                            'verticalAlign': Define.CHANGE_STYLE[tagName]
	                        };
	                        break;
	                    case 'SUB' :
	                        styleType = {
	                            'verticalAlign': Define.CHANGE_STYLE[tagName]
	                        };
	                        break;
	                    case 'FONT' :
	                        if (!styleType) {
	                            styleType = {};
	                        }

	                        if (copyAttributes['size']) {
	                            var size = "";

	                            switch (copyAttributes['size'] + "") {
	                                case "1" :
	                                    size = "10";
	                                    break;
	                                case "2" :
	                                    size = "12";
	                                    break;
	                                case "3" :
	                                    size = "16";
	                                    break;
	                                case "4" :
	                                    size = "18";
	                                    break;
	                                case "5" :
	                                    size = "24";
	                                    break;
	                                case "6" :
	                                    size = "32";
	                                    break;
	                                case "7" :
	                                    size = "48";
	                                    break;
	                            }

	                            if (size) {
	                                styleType['fontSize'] = size + "px";
	                            }
	                        }

	                        if (copyAttributes['color']) {
	                            styleType['color'] = copyAttributes['color'];
	                        }

	                        if (copyAttributes['face']) {
	                            styleType['fontFamily'] = copyAttributes['face'];
	                        }

	                        break;
	                }

	                if (styleType) {
	                    copyAttributes = merge({ style: styleType }, copyAttributes);
	                }

	                var isBlock = false;

	                if (copyAttributes['style']) {
	                    if (copyAttributes['style']['display']) {
	                        if (copyAttributes['style']['display'] == 'none') {
	                            copyAttributes['style']['display'] = '';
	                        } else if (copyAttributes['style']['display'] == 'block') {
	                            isBlock = true;
	                        }
	                    }
	                }

	                var spanObjects = [];
	                length = children.length;

	                if (isBlock) {
	                    spanObjects = [_this.getParagraphTypeCreate(root)];
	                }

	                for (var i = 0; i < length; i++) {
	                    var child = getSimpleTreeObject(children[i], isBlock ? {} : copyAttributes, root);

	                    if (child) {
	                        if (isBlock) {
	                            if (child instanceof Array) {
	                                spanObjects[0].children = spanObjects[0].children.concat(child);
	                            } else {
	                                spanObjects[0].children.push(child);
	                            }
	                        } else {
	                            spanObjects = spanObjects.concat(child);
	                        }
	                    }
	                }

	                // return spanObjects.length ? (_this.blockNodeWrapping(parent, spanObjects) || spanObjects) : null;
	                return spanObjects;

	            } else if ($.inArray(tagName, Define.SINGLE_RUN_NODES) !== -1 || $.inArray(tagName, Define.MS_SPECIAL_SINGLE_RUN_NODES) !== -1) {
	                //Single Nodes Check

	                var singleNodeObject = [{
	                    type : Define.FILTER_NODE_TYPE.ELEMENT,
	                    tagName : tagName.toLowerCase(),
	                    attributes: $.extend({}, root.attributes)
	                }];

	                if (tagName === 'IMG') {
	                    var imageObject = singleNodeObject[0];

	                    imageObject.attributes['className'] = imageObject.attributes['className'] || [];

	                    imageObject.attributes['style'] = imageObject.attributes['style'] || {};

	                    if (!imageObject.attributes['src']) {
	                        imageObject.attributes['src'] = _this.options.errorImageURL;
	                    } else {
	                        if (isUploadImage) {
	                            var src = imageObject.attributes['src'];

	                            if (src.indexOf('data:image/png;base64') === 0) {
	                                imageObject.attributes['src'] = _this.options.loadingImageURL;

	                                var tempID = Math.floor(Math.random() * 1000000) + 1;
	                                imageObject.attributes[Define.ATTR.UPLOADING_IMAGE] = tempID;

	                                uploadImages.push({
	                                    src : src,
	                                    id : tempID
	                                });
	                            } else if (src.indexOf('file:///') === 0){
	                                imageObject.attributes['src'] = _this.options.errorImageURL;
	                            }
	                        }
	                    }

	                    if (imageObject.attributes["v:shapes"]) {
	                        delete imageObject.attributes["v:shapes"];
	                    }

	                    if (imageObject.attributes['width']) {
	                        imageObject.attributes['style']['width'] = imageObject.attributes['width'] + 'px';
	                    }

	                    if (imageObject.attributes['height']) {
	                        imageObject.attributes['style']['height'] = imageObject.attributes['height'] + 'px';
	                    }
	                } else if (tagName === 'W:PTAB'){
	                    var tabDot = singleNodeObject[0];

	                    tabDot.type = Define.FILTER_NODE_TYPE.TEXT;
	                    tabDot.content = "....................................";
	                    tabDot.attributes = null;

	                } else if (tagName === 'VIDEO' || tagName === 'EMBED' ){
	                    var imageObject = {
	                        type : Define.FILTER_NODE_TYPE.ELEMENT,
	                        tagName : 'img',
	                        attributes: {}
	                    };

	                    var videoObject = singleNodeObject[0];

	                    var videoHTML = toHTML(root);

	                    if (!videoObject.attributes) {
	                        videoObject.attributes = {};
	                    }

	                    imageObject.attributes.style = videoObject.attributes.style;
	                    imageObject.attributes[Define.ATTR.SRC] = _this.options.playImageURL;
	                    imageObject.attributes[Define.ATTR.DATA_VIDEO_SOURCE] = encodeURIComponent(videoHTML);
	                    imageObject.attributes[Define.ATTR.DATA_VIDEO_TYPE] = videoObject.attributes[Define.ATTR.DATA_VIDEO_TYPE];

	                    singleNodeObject = [imageObject];
	                }


	                var resultObjects = {
	                    type: Define.FILTER_NODE_TYPE.ELEMENT,
	                    tagName: 'span',
	                    children: singleNodeObject,
	                    attributes: $.extend({}, attributes)
	                };

	                // return _this.blockNodeWrapping(parent, resultObjects) || resultObjects;
	                return resultObjects;

	            } else if ($.inArray(tagName, Define.SPECIAL_NODES) !== -1) {
	                //Special Nodes Check

	                //console.log("Special Nodes >>>>>> ", tagName);

	                if (tagName === 'STYLE') {
	                    var children = root.children[0];
	                    var styleContent = children.content;

	                    styleContent = styleContent.replace('<!--', '').replace('-->','').replace(/(\w+)?(\s*>\s*)?(#\w+)?\s*(\.\w+)?\s*{/gm, function ($a, $b, $c, $d) {
	                        var classSpotOffset = $a.indexOf(".");
	                        if (classSpotOffset !== -1) {
	                            $a = $a.replace(".", "." + Define.CLASS.PREFIX);
	                        }
	                        return $a;
	                    });

	                    if (styleContent) {
	                        styleObjects.push(styleContent);
	                    }
	                }

	                return null;

	            } else {
	                //console.log("UnknownType", root);
	            }
	        } else if (rootType === Define.FILTER_NODE_TYPE.TEXT) {
	            var content = root.content;

	            // content = content.replace(/\u000a\u0020/gi, "").replace(/\u000a/gi, "").replace(/\u000d/gi, "");
	            // content = content.replace(/>\s*</gi, "><");
	            // content = content.replace(/\n/ig, "");
	            // content = content.replace(/\s*/ig, "").replace(/\u000a/gi, "").replace(/\u0000/gi, "");

	            // console.log("content >>>>>>>>>>>>>> ", content);

	            var resultObjects = null;

	            if (parent) {
	                var parentTagName = parent.tagName.toUpperCase();

	                if ( $.inArray(parentTagName, Define.NOT_DIRECT_PARENT_TYPE) !== -1) {
	                    return null;
	                }

	                if (content) {
	                    // if (!(parent.attributes && parent.attributes[Define.ATTR.ID] === Define.ID.PASTE_WRAPPER)) {

	                    var childContents = {
	                        type: Define.FILTER_NODE_TYPE.TEXT,
	                        content: content
	                    };

	                    if (parentTagName === 'A') {
	                        childContents = {
	                            type: Define.FILTER_NODE_TYPE.ELEMENT,
	                            tagName: 'a',
	                            children: [childContents],
	                            attributes: $.extend({}, attributes)
	                        };

	                        attributes = {};
	                    }

	                    resultObjects = {
	                        type: Define.FILTER_NODE_TYPE.ELEMENT,
	                        tagName: 'span',
	                        children: [childContents],
	                        attributes: $.extend({}, attributes)
	                    };


	                    // if (parentTagName === 'TD' || parentTagName === 'TH') {
	                    //     var paragraphPrent = _this.getParagraphTypeCreate({ tagName : 'p', type : Define.FILTER_NODE_TYPE.ELEMENT });
	                    //
	                    //     paragraphPrent.children = [resultObjects];
	                    //     resultObjects = paragraphPrent;
	                    // }
	                    // }
	                }
	            }

	            return resultObjects;
	        } else if (rootType === Define.FILTER_NODE_TYPE.COMMENT) {
	            //Comment Nodes Check
	            var commentContent = root.content;

	            if (commentContent == 'EndFragment') {
	                return commentContent;
	            }

	            //console.log("Comment Nodes >>>>>> ", commentContent);

	            var startStyleStringOffset = commentContent.indexOf("<style>");

	            var resultComment = null;

	            if (startStyleStringOffset === -1) {
	                startStyleStringOffset = commentContent.indexOf("<div>");

	                if (startStyleStringOffset !== -1) {
	                    //TODO : 객체 Paste정보 수정 기능 추가 예정

	                    commentContent = "<!--" + commentContent + "-->";
	                    commentContent = commentContent.replace(/<!--(.*?)>/, "");
	                    commentContent = commentContent.replace(/<!\[endif\]-->/, "");

	                    var $dataPasteNode = $(commentContent);

	                    if ($dataPasteNode.length > 1) {
	                        $dataPasteNode = $dataPasteNode.last();
	                    }

	                    var $div = $dataPasteNode.find("div");

	                    if ($div.length) {
	                        $div[0].id = $dataPasteNode[0].id;

	                        if ($div.text()) {
	                            resultComment = {
	                                attributes : {
	                                    style : {
	                                        width : $dataPasteNode.css("width"),
	                                        height : $dataPasteNode.css("height"),
	                                        border : "1px solid #000000",
	                                        display : "inline-block"
	                                    }
	                                },
	                                tagName : 'div',
	                                type : Define.FILTER_NODE_TYPE.ELEMENT
	                            };
	                        }
	                    }
	                }
	            } else {
	                if (commentContent.indexOf("v\\:*") === -1) {
	                    var endStyleStringOffset = commentContent.indexOf("</style>");

	                    var style = commentContent.substring(startStyleStringOffset + 7, endStyleStringOffset);
	                    style = style.replace(".", "." + Define.CLASS.PREFIX);

	                    styleObjects.push(style);
	                }
	            }

	            return resultComment;
	        }
	    };

	    var $exportIframe = $('#' + Define.ID.KK_EXPORT);

	    var $innerBody = $($exportIframe[0].contentWindow.document.body);
	    $innerBody[0].innerHTML = htmlString;

	    htmlString = $innerBody[0].innerHTML;

	    // var temp = htmlString;
	    htmlString = htmlString.replace(/>\s*</gi, "><");
	    // htmlString = htmlString.replace(/>\u000a\u0020</gi, "><");
	    // htmlString = htmlString.replace(/>\u000a</gi, "><").replace(/\u000d/gi, "><");
	    // console.log('temp >>>>>>>> ', temp);


	    htmlString = this.htmlAttributeRemoveFilter(htmlString);

	    var pasteWrapper = '<div id="' + Define.ID.PASTE_WRAPPER + '">' + htmlString + '</div>';

	    //html parse 시에 재귀로 html Element를 처리할 때 상위에 아래 key와 동일한 element가 존재하면 autoClose 코드가 포함되어있음
	    //해당 AutoClose Tag 코드를 Break하기 위한 옵션처리 적용
	    // himalaya.parseDefaults.voidTags  = ['!doctype', 'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];
	    himalaya.parseDefaults.closingTagAncestorBreakers  = {
	        li: ['ul', 'ol', 'menu'],
	        dt: ['dl'],
	        dd: ['dl'],
	        p : ['td', 'th', 'p', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
	        tbody : ['table'],
	        thead : ['table'],
	        tfoot : ['table'],
	        tr : ['tbody', 'thead', 'tfoot', 'table'],
	        th : ['tr', 'table'],
	        td : ['tr', 'table']
	    };



	    var wrapperHTML = pasteWrapper.toString('utf8');

	    var htmlToJSON = himalaya.parse(wrapperHTML);

	    // console.log("htmlToJSON >>>>>>>>>>>>>>>>>>> ", htmlToJSON);

	    var simpleTreeObject = getSimpleTreeObject(htmlToJSON[0], {}, null);

	    // console.log("simpleTreeObject >>>>>>>>>>>>>" , simpleTreeObject);

	    var style = styleObjects.length ? '<style>' + styleObjects.join('') + '</style>' : '';

	    var simpleTreeHTML = toHTML(simpleTreeObject);

	    //console.log("simpleTreeObject >>>>>>>>>>>>>>>>>", simpleTreeObject);

	    $innerBody[0].innerHTML = style + simpleTreeHTML;

	    //console.log("simpleTreeObject 11111 >>>>>> ", simpleTreeHTML);

	    this.htmlStyleNodeConvertFilter($innerBody);

	    $innerBody.find('style').remove();

	    $innerBody.find('td, th').each(function(){
	        if (this.style.border == 'none') {
	            this.style.border = Define.DEFAULT_CELL_BORDER_STYLE;
	        }
	    });

	    var $pasteWrapper = $innerBody.children();

	    var firstChild = $pasteWrapper[0].firstChild;
	    var lastChild = $pasteWrapper[0].lastChild;

	    simpleTreeHTML = $pasteWrapper.html();

	    if (!(firstChild.nodeName === 'P' || firstChild.nodeName === 'DIV')) {
	        simpleTreeHTML = Define.DEFAULT_PARAGRAPH_HTML + simpleTreeHTML;
	    }

	    if (!(lastChild.nodeName === 'P' || lastChild.nodeName === 'DIV')) {
	        simpleTreeHTML += Define.DEFAULT_PARAGRAPH_HTML;
	    }

	    // var $autoBrowserAdjust = $('<div/>').html(simpleTreeHTML);
	    // simpleTreeHTML = $autoBrowserAdjust.html();
	    //
	    // $autoBrowserAdjust.remove();

	    simpleTreeHTML = simpleTreeHTML.replace(/<span[^>]*>\s*<\/span>/gi, "");
	    // simpleTreeHTML = simpleTreeHTML.replace(/<div[^>]*><\/div>/ig, Define.DEFAULT_PARAGRAPH_HTML);
	    simpleTreeHTML = simpleTreeHTML.replace(/<p[^>]*><\/p>/ig, Define.DEFAULT_PARAGRAPH_HTML);
	    simpleTreeHTML = simpleTreeHTML.replace(/<div[^>]*><\/div>/ig, "");
	    // simpleTreeHTML = simpleTreeHTML.replace(/<p[^>]*><\/p>/ig, "");
	    simpleTreeHTML = simpleTreeHTML.replace(/<p[^>]*><br><\/p>/ig, Define.DEFAULT_PARAGRAPH_HTML);
	    simpleTreeHTML = simpleTreeHTML.replace(/<p[^>]*><span[^>]*><br><\/span><\/p>/ig, Define.DEFAULT_PARAGRAPH_HTML);

	    // simpleTreeHTML = this.htmlAttributeRemoveFilter(simpleTreeHTML);

	    // console.log("simpleTreeObject >>>>>> ", simpleTreeObject, styleObjects, simpleTreeHTML);

	    var _this = this;

	    // var split = function(str, type){
	    //     var fragments = _this.splitHtml(str, type);
	    //
	    //     if (fragments.length > 1) {
	    //         var splitString = split(fragments[1], type);
	    //         return fragments[0] + splitString + fragments[1];
	    //     } else {
	    //         return fragments[0];
	    //     }
	    // };
	    //
	    // console.log(split(simpleTreeHTML, 'table'));

	    if (isUploadImage) {
	        return {
	            simpleTreeHTML : simpleTreeHTML,
	            uploadImages : uploadImages
	        }
	    }

	    return simpleTreeHTML;
	};

	Filter.prototype.htmlStyleNodeConvertFilter = function($container) {
	    var $styleNodes = $container.find("style");

	    if ($styleNodes.length) {
	        var selectorList = ['p'];

	        for(var idx = $styleNodes.length - 1; idx >= 0; idx--) {
	            var styleNode = $styleNodes[idx];

	            var cssRules = styleNode.sheet.cssRules;

	            for(var i = cssRules.length - 1; i >= 0; i--) {
	                var cssRule = cssRules[i];

	                if (cssRule.type === CSSRule.STYLE_RULE) {
	                    var selector = cssRule.selectorText;

	                    selector = selector.replace(Define.CLASS.PREFIX, "");

	                    if(selector == "p") {
	                        continue;
	                    }

	                    selectorList.push(selector);

	                    var cssText = cssRule.cssText;

	                    var startOffset = cssText.indexOf("{");
	                    var endOffset = cssText.indexOf("}");

	                    cssText = cssText.substring(startOffset + 1, endOffset);

	                    var $findNodes = $container.find(selector);

	                    $findNodes.attr("style_copy", function(){
	                        var $selectorNode = $(this);

	                        var styleInfo = $selectorNode.attr("style_copy") || "";

	                        var styleString = cssText + ';' + styleInfo + ";" ;

	                        styleString = styleString.replace(' .5pt', ' 1px');
	                        styleString = styleString.replace('0.5pt', '1px');

	                        return styleString;
	                    });
	                }
	            }
	        }

	        $styleNodes.remove();

	        $container.find('[style_copy]').each(function(){
	            var $this = $(this);

	            var styleCopyInfo = $this.attr("style_copy") || "";
	            var styleInfo = $this.attr("style") || "";

	            $this.attr("style", styleCopyInfo + styleInfo).removeAttr('style_copy');
	        });
	        $container.find(selectorList.join(',')).removeAttr("class");
	    }

	    return $container;
	};

	Filter.prototype.doAdjustCopyDatas = function(copyContents) {
	    var $copyContents = $("<div/>").html(copyContents);

	    var $selectedNodes = $copyContents.find('.' + Define.CLASS.SELECTED + ', .' + Define.CLASS.SELECTED_TABLE + ', .' + Define.CLASS.SELECTED_TD + ', .' + Define.CLASS.SELECTED_SYMBOL);
	    $selectedNodes.removeClass(Define.CLASS.SELECTED + ' ' + Define.CLASS.SELECTED_TABLE + ' ' + Define.CLASS.SELECTED_TD + ' ' + Define.CLASS.SELECTED_SYMBOL);

	    var videoTypeNode = $copyContents.find('img[' + Define.ATTR.DATA_VIDEO_SOURCE + ']');

	    if (videoTypeNode.length) {
	        videoTypeNode.replaceWith(function(){
	            var style = $(this).attr(Define.ATTR.STYLE);
	            var decodingHTML = decodeURIComponent($(this).attr(Define.ATTR.DATA_VIDEO_SOURCE));
	            var $decodingHTML = $(decodingHTML);

	            $decodingHTML.attr(Define.ATTR.STYLE, style);
	            $decodingHTML.find('object, embed').attr(Define.ATTR.STYLE, style);

	            if ($decodingHTML.is('embed')) {
	                $decodingHTML.attr(Define.ATTR.SRC, $decodingHTML[0].src);
	            } else {
	                $decodingHTML.find('source, embed').attr(Define.ATTR.SRC, function(){
	                    return this.src;
	                });

	                $decodingHTML.find('object').attr(Define.ATTR.DATA, function(){
	                    return this.data;
	                });
	            }

	            return $decodingHTML[0].outerHTML;
	        });
	    }

	    $copyContents.find("img").attr("src", function(){
	        return this.src;
	    });

	    return $copyContents.children();
	};

	Filter.prototype.changeKukudocsTable = function(table, pageWidthSize) {
	    var $table = $(table)
	        , $colGroup = $table.children("colgroup")
	        , $tableHeadNode = $table.children("thead")
	        , $tableBodyNode = $table.children("tbody")
	        , $tableFootNode = $table.children("tfoot");

	    if ($colGroup.length) {
	        $colGroup.html("");
	    } else {
	        $colGroup = $("<colgroup/>");
	        $table.prepend($colGroup);
	    }

	    if (!$tableBodyNode.length) {
	        $tableBodyNode = $("<tbody/>");
	        $table.append($tableBodyNode);
	        $tableBodyNode.append($table.children("tr"));
	    } else {
	        var childrenTR = $table.children("tr");
	        if (childrenTR.length) {
	            $tableBodyNode.append($table.children("tr").add($tableBodyNode.children("tr")));
	        }
	    }

	    if ($tableHeadNode.length) {
	        $tableBodyNode.prepend($tableHeadNode[0].childNodes);
	        $tableHeadNode.remove();
	    }

	    if ($tableFootNode.length) {
	        $tableBodyNode.append($tableFootNode[0].childNodes);
	        $tableFootNode.remove();
	    }

	    $table.find("caption").remove();

	    $table.css({
	        "width" : pageWidthSize + "px",
	        "position" : "relative",
	        "word-wrap" : "break-word",
	        "border-collapse" : "collapse",
	        "table-layout" : "fixed"
	    });

	    var colCount = 0
	        , $trNodes = $tableBodyNode.children("tr");

	    $trNodes.children("td").filter(function() {
	        return this.style.display === "none";
	    }).remove();

	    var cols = $trNodes.first().children("td");

	    $trNodes.filter(":even").attr("row_type", "odd");
	    $trNodes.filter(":odd").attr("row_type", "even");
	    $trNodes.first().attr("row_type", "first");
	    $trNodes.last().attr("row_type", "last");

	    for (var i = 0; i < cols.length; i++) {
	        var colSpanSize = cols.eq(i).attr("colspan");
	        colCount += ((colSpanSize && colSpanSize > 1) ? Number(colSpanSize) : 1);
	    }

	    var colWidthSize = (pageWidthSize || 600) / colCount
	        , colgroupChildsString = "";

	    for (var i = 0 ; i < colCount ; i++) {
	        colgroupChildsString += "<col style='width:" + colWidthSize + "px;'/>";
	    }

	    $colGroup.html(colgroupChildsString);

	    var displayNoneTD = "<td style='display:none;'>" + Define.DEFAULT_PARAGRAPH_HTML + "</td>";

	    $.each($trNodes, function(trIndex, trNode) {
	        var childNodes = $(trNode).children("td");
	        $.each(childNodes, function(tdIndex, tdNode) {
	            var colSpan = tdNode.colSpan;

	            if (colSpan > 1) {
	                for (var i = 0; i < colSpan - 1 ; i++ ) {
	                    $(tdNode).after($(displayNoneTD));
	                }
	            }
	        });
	    });

	    var childNodes = $trNodes.first().children("td");
	    $.each(childNodes, function(tdIndex, tdNode) {
	        while(1) {
	            if (!tdNode) {
	                break;
	            }
	            var parentTrNode = tdNode.parentNode;
	            if (tdNode.style.display != "none") {
	                var $tempWrapDivNode = $("<div>")
	                    , $tempWrapPNode = $(Define.DEFAULT_P_STYLE);

	                if (tdNode.childNodes.length > 0) {
	                    $(tdNode.childNodes).each (function(childIndex, childNode) {
	                        var $childNode = $(childNode);

	                        if ($childNode[0].nodeName != "P" && $childNode[0].nodeName != "TABLE" ) {
	                            $tempWrapPNode.append($childNode);
	                        } else {
	                            if ($tempWrapPNode.html() != "") {
	                                $tempWrapDivNode.append($tempWrapPNode);
	                                $tempWrapPNode = $(Define.DEFAULT_P_STYLE);
	                            }
	                            $tempWrapDivNode.append($childNode);
	                        }
	                    });

	                    if ($tempWrapPNode.html() != "") {
	                        $tempWrapDivNode.append($tempWrapPNode);
	                    }

	                    if ($tempWrapDivNode[0].childNodes.length > 0) {
	                        $(tdNode).append($tempWrapDivNode[0].childNodes);
	                    }
	                } else {
	                    $(tdNode).append($(Define.DEFAULT_PARAGRAPH_HTML));
	                }

	                var rowSpan = tdNode.rowSpan;

	                if (rowSpan > 1) {
	                    var colSpan = tdNode.colSpan;
	                    for (var i = 0; i < rowSpan - 1 ; i++ ) {
	                        parentTrNode = parentTrNode.nextSibling;
	                        tdNode = parentTrNode.cells[tdIndex];

	                        for (var colSpanIndex = 0; colSpanIndex < colSpan ; colSpanIndex++ ) {
	                            if (tdNode) {
	                                $(tdNode).before($(displayNoneTD));
	                            } else {
	                                $(parentTrNode).append($(displayNoneTD));
	                            }
	                        }
	                    }
	                }
	            }

	            if (parentTrNode.nextElementSibling) {
	                tdNode = parentTrNode.nextElementSibling.cells[tdIndex];
	            } else {
	                break;
	            }
	        }
	    });
	};

	Filter.prototype.htmlAttributeRemoveFilter = function(contents) {

	    contents = contents.replace(/<\\?\?xml[^>]*>/ig, "").replace(/<script[^>](.*?)<\/script>/ig, "");
	    contents = this.removeAttributeName(contents);

	    contents = contents.replace(/<[^>]+/g, function (match) {
	        return match.replace(/\s*\bmso-(?:&(?:\#\d+|\w+);|[^;('|")&])+;?\s*/g, "");
	    });

	    return contents;
	};

	Filter.prototype.removeAttributeName = function(contents) {

	    var exceptAttributeName = [];
	    var attrList = Define.ATTR;

	    attrList[this.options.cell_lock_name] = this.options.cell_lock_name;

	    for(var key in attrList) {
	        exceptAttributeName.push(attrList[key]);
	    }

	    var equalString = exceptAttributeName.join('=|') + '=';
	    var normalString = exceptAttributeName.join('|');

	    /*
	     <Regexp> example
	     <(\w+)\s*
	     (?:(?:(?:(?!style=|class=|id=|name=)[^>]))*((?:style|class|id|name)=['"][^'"]*['"]\s*)?)
	     (?:(?:(?:(?!style=|class=|id=|name=)[^>]))*((?:style|class|id|name)=['"][^'"]*['"]\s*)?)
	     (?:(?:(?:(?!style=|class=|id=|name=)[^>]))*((?:style|class|id|name)=['"][^'"]*['"]\s*)?)
	     (?:(?:(?:(?!style=|class=|id=|name=)[^>]))*((?:style|class|id|name)=['"][^'"]*['"]\s*)?)
	     [^>]*>

	     //Original
	     <(\w+)\s*
	     (?:(?:(?:(?!style=|class=|id=|name=)[^>]))*((?:id|class|style)=['"][^'"]*['"]\s*)?)
	     (?:(?:(?:(?!style=|class=|id=|name=)[^>]))*((?:id|class|style)=['"][^'"]*['"]\s*)?)
	     (?:(?:(?:(?!style=|class=|id=|name=)[^>]))*((?:id|class|style)=['"][^'"]*['"]\s*)?)
	     [^>]*>
	     */

	    //"<(\\w+(?:(:sdt|)))\\s*(?:(?:(?:(?!face=)[^>]))*((?:face)=(?:['][^']*[']|[\"][^\"]*[\"])\s*)?)[^>]*>";
	    var regexExpression ='<(\\w+(?:(' + Define.MS_ATTRIBUTE.join('|') + '|)))\\s*' ;

	    for(var i = 0, length = exceptAttributeName.length; i < length; i++) {
	        regexExpression += "(?:(?:(?:(?!" + equalString + ")[^>]))*((?:" + normalString + ")=(?:['][^']*[']|[\"][^\"]*[\"])\\s*)?)";
	    }

	    regexExpression += '[^>]*>';

	    var regexp = new RegExp(regexExpression, "ig");

	    contents = contents.replace(regexp, function(){
	        var args = arguments;
	        var changeString = '<' + args[1] + ' ';

	        for (var idx = 3, length = args.length - 2; idx < length; idx++) {
	            var arg = args[idx];

	            if (arg) {
	                if (arg.indexOf('style=') == 0) {
	                    arg = arg.replace(/&quot;/ig, "'");
	                }
	                changeString += arg;
	            }
	        }

	        changeString += '>';

	        return changeString;
	    });

	    return contents;
	};

	Filter.prototype.splitHtml = function(html, splitOn, test) {
	    // In the browser, use actual jQuery in place of Cheerio.
	    // Create a simulated cheerio object.
	    var cheerio = {
	        load: function(html) {
	            var $wrapper = jQuery('<div data-cheerio-root>');
	            var $el = jQuery(html);
	            $wrapper.append($el);
	            function c(s) {
	                if (s[0] === '<') {
	                    return $(s);
	                }
	                return $wrapper.find(s);
	            }
	            c.html = function() {
	                return $wrapper.html();
	            };
	            return c;
	        }
	    };

	    if (!test) {
	        test = function($el) {
	            return true;
	        };
	    }
	    var result = [];
	    var splitAttr = 'data-' + token();
	    var ignoreAttr = 'data-' + token();
	    var $$;
	    var $matches;
	    var i;
	    var $match;
	    var $wrapper;
	    var tag;
	    while (true) {
	        $$ = cheerio.load(html);
	        $matches = $$(splitOn);
	        $match = null;
	        for (i = 0; (i < $matches.length); i++) {
	            $match = $matches.eq(i);
	            if ((!$match.attr(ignoreAttr)) && test($match)) {
	                break;
	            } else {
	                $match.attr(ignoreAttr, '1');
	            }
	            $match = null;
	        }
	        if (!$match) {
	            result.push(html);
	            break;
	        }
	        $match.attr(splitAttr, '1');
	        var markup = $$.html();
	        var splitAt = markup.indexOf(splitAttr);
	        var leftAt = markup.lastIndexOf('<', splitAt);
	        if (leftAt === -1) {
	            result.push(html);
	            break;
	        }
	        var first = markup.substr(0, leftAt);

	        // For the second segment we need to reopen the
	        // open tags from the first segment. Reconstruct that.

	        var reopen = '';
	        $wrapper = cheerio.load('<div></div>')('div').eq(0);
	        var $parents = $match.parents();
	        for (i = 0; (i < $parents.length); i++) {
	            var $original = $parents.eq(i);
	            if ($original.is('[data-cheerio-root]')) {
	                // Simulated cheerio used in browser has
	                // a wrapper element
	                break;
	            }
	            var $parent = $original.clone();
	            $parent.empty();
	            $wrapper.empty();
	            $wrapper.append($parent);
	            var parentMarkup = $wrapper.html();
	            var endTagAt = parentMarkup.indexOf('>');
	            tag = this.tagName($parent);
	            // Cheerio tolerates missing closing tags,
	            // but real jQuery will discard any text
	            // preceding them, so play nice
	            first += '</' + tag + '>';
	            reopen = parentMarkup.substr(0, endTagAt + 1) + reopen;
	        }

	        // We can't just split off the next fragment at
	        // > because the matching tag may be a container.
	        // Move it to a wrapper to get its full markup,
	        // then remove it from the original document. The
	        // remainder of the original document now begins
	        // where the matching tag used to

	        markup = $$.html();

	        $wrapper = cheerio.load('<div></div>')('div').eq(0);
	        $match.removeAttr(splitAttr);
	        $wrapper.append($match);
	        tag = $wrapper.html();
	        $match.remove();
	        markup = $$.html();
	        var second = reopen + markup.substr(leftAt);
	        // Let Cheerio close the open tags in the
	        // first segment for us. Also mop up the attributes
	        // we used to mark elements that matched the selector
	        // but didn't match our test function
	        first = cleanup(first);
	        result.push(first);
	        result.push(tag);
	        html = cleanup(second);
	    }
	    return result;
	    // Use Cheerio to strip out any attributes we used to keep
	    // track of our work, then generate new HTML. This also
	    // closes any tags we opened but did not close.
	    function cleanup(html) {
	        html = cheerio.load(html);
	        html('[' + ignoreAttr + ']').removeAttr(ignoreAttr);
	        html = html.html();
	        return html;
	    }

	    function token() {
	        return Math.floor(Math.random() * 1000000000).toString();
	    }
	};

	Filter.prototype.tagName = function($el) {
	    // Different in DOM and Cheerio. Cheerio
	    // doesn't support prop() either.
	    return $el[0].tagName || $el[0].name;
	};

	module.exports = Filter;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	(function (global, factory) {
		 true ? module.exports = factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(global.deepmerge = factory());
	}(this, (function () { 'use strict';

	var index$2 = function isMergeableObject(value) {
		return isNonNullObject(value) && isNotSpecial(value)
	};

	function isNonNullObject(value) {
		return !!value && typeof value === 'object'
	}

	function isNotSpecial(value) {
		var stringValue = Object.prototype.toString.call(value);

		return stringValue !== '[object RegExp]'
			&& stringValue !== '[object Date]'
	}

	function emptyTarget(val) {
	    return Array.isArray(val) ? [] : {}
	}

	function cloneIfNecessary(value, optionsArgument) {
	    var clone = optionsArgument && optionsArgument.clone === true;
	    return (clone && index$2(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
	}

	function defaultArrayMerge(target, source, optionsArgument) {
	    var destination = target.slice();
	    source.forEach(function(e, i) {
	        if (typeof destination[i] === 'undefined') {
	            destination[i] = cloneIfNecessary(e, optionsArgument);
	        } else if (index$2(e)) {
	            destination[i] = deepmerge(target[i], e, optionsArgument);
	        } else if (target.indexOf(e) === -1) {
	            destination.push(cloneIfNecessary(e, optionsArgument));
	        }
	    });
	    return destination
	}

	function mergeObject(target, source, optionsArgument) {
	    var destination = {};
	    if (index$2(target)) {
	        Object.keys(target).forEach(function(key) {
	            destination[key] = cloneIfNecessary(target[key], optionsArgument);
	        });
	    }
	    Object.keys(source).forEach(function(key) {
	        if (!index$2(source[key]) || !target[key]) {
	            destination[key] = cloneIfNecessary(source[key], optionsArgument);
	        } else {
	            destination[key] = deepmerge(target[key], source[key], optionsArgument);
	        }
	    });
	    return destination
	}

	function deepmerge(target, source, optionsArgument) {
	    var sourceIsArray = Array.isArray(source);
	    var targetIsArray = Array.isArray(target);
	    var options = optionsArgument || { arrayMerge: defaultArrayMerge };
	    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	    if (!sourceAndTargetTypesMatch) {
	        return cloneIfNecessary(source, optionsArgument)
	    } else if (sourceIsArray) {
	        var arrayMerge = options.arrayMerge || defaultArrayMerge;
	        return arrayMerge(target, source, optionsArgument)
	    } else {
	        return mergeObject(target, source, optionsArgument)
	    }
	}

	deepmerge.all = function deepmergeAll(array, optionsArgument) {
	    if (!Array.isArray(array) || array.length < 2) {
	        throw new Error('first argument should be an array with at least two elements')
	    }

	    // we are sure there are at least 2 values, so it is safe to have no initial value
	    return array.reduce(function(prev, next) {
	        return deepmerge(prev, next, optionsArgument)
	    })
	};

	var index = deepmerge;

	return index;

	})));


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.parseDefaults = undefined;
	exports.parse = parse;

	var _lexer = __webpack_require__(47);

	var _lexer2 = _interopRequireDefault(_lexer);

	var _parser = __webpack_require__(49);

	var _parser2 = _interopRequireDefault(_parser);

	var _v = __webpack_require__(50);

	var _v2 = _interopRequireDefault(_v);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/*
	  Tags which contain arbitrary non-parsed content
	  For example: <script> JavaScript should not be parsed
	*/
	var childlessTags = ['style', 'script', 'template'];

	/*
	  Tags which auto-close because they cannot be nested
	  For example: <p>Outer<p>Inner is <p>Outer</p><p>Inner</p>
	*/
	var closingTags = ['html', 'head', 'body', 'p', 'dt', 'dd', 'li', 'option', 'thead', 'th', 'tbody', 'tr', 'td', 'tfoot', 'colgroup'];

	/*
	  Closing tags which have ancestor tags which
	  may exist within them which prevent the
	  closing tag from auto-closing.
	  For example: in <li><ul><li></ul></li>,
	  the top-level <li> should not auto-close.
	*/
	var closingTagAncestorBreakers = {
	  li: ['ul', 'ol', 'menu'],
	  dt: ['dl'],
	  dd: ['dl'],
	  tbody: ['table'],
	  thead: ['table'],
	  tfoot: ['table'],
	  tr: ['table'],
	  td: ['table']
	};

	/*
	  Tags which do not need the closing tag
	  For example: <img> does not need </img>
	*/
	var voidTags = ['!doctype', 'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];

	var parseDefaults = exports.parseDefaults = {
	  voidTags: voidTags,
	  closingTags: closingTags,
	  closingTagAncestorBreakers: closingTagAncestorBreakers,
	  childlessTags: childlessTags,
	  format: _v2.default // transform for v0 spec
	};

	function parse(str) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : parseDefaults;

	  var tokens = (0, _lexer2.default)(str, options);
	  var nodes = (0, _parser2.default)(tokens, options);
	  return (0, _v2.default)(nodes, options);
	}

	exports.default = { parse: parse, parseDefaults: parseDefaults };
	//# sourceMappingURL=index.js.map


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = lexer;
	exports.lex = lex;
	exports.lexText = lexText;
	exports.lexComment = lexComment;
	exports.lexTag = lexTag;
	exports.isWhitespaceChar = isWhitespaceChar;
	exports.lexTagName = lexTagName;
	exports.lexTagAttributes = lexTagAttributes;
	exports.lexSkipTag = lexSkipTag;

	var _compat = __webpack_require__(48);

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function lexer(str, options) {
	  var state = { str: str, options: options, cursor: 0, tokens: [] };
	  lex(state);
	  return state.tokens;
	}

	function lex(state) {
	  var str = state.str;

	  var len = str.length;
	  while (state.cursor < len) {
	    var isText = str.charAt(state.cursor) !== '<';
	    if (isText) {
	      lexText(state);
	      continue;
	    }

	    var isComment = (0, _compat.startsWith)(str, '!--', state.cursor + 1);
	    if (isComment) {
	      lexComment(state);
	      continue;
	    }

	    var tagName = lexTag(state);
	    if (tagName) {
	      var safeTag = tagName.toLowerCase();
	      var childlessTags = state.options.childlessTags;

	      if ((0, _compat.arrayIncludes)(childlessTags, safeTag)) {
	        lexSkipTag(tagName, state);
	      }
	    }
	  }
	}

	function lexText(state) {
	  var str = state.str,
	      cursor = state.cursor;

	  var textEnd = str.indexOf('<', cursor);
	  var type = 'text';
	  if (textEnd === -1) {
	    // there is only text left
	    var _content = str.slice(cursor);
	    state.cursor = str.length;
	    state.tokens.push({ type: type, content: _content });
	    return;
	  }

	  if (textEnd === cursor) return;

	  var content = str.slice(cursor, textEnd);
	  state.cursor = textEnd;
	  state.tokens.push({ type: type, content: content });
	}

	function lexComment(state) {
	  state.cursor += 4; // "<!--".length
	  var str = state.str,
	      cursor = state.cursor;

	  var commentEnd = str.indexOf('-->', cursor);
	  var type = 'comment';
	  if (commentEnd === -1) {
	    // there is only the comment left
	    var _content2 = str.slice(cursor);
	    state.cursor = str.length;
	    state.tokens.push({ type: type, content: _content2 });
	    return;
	  }

	  var content = str.slice(cursor, commentEnd);
	  state.cursor = commentEnd + 3; // "-->".length
	  state.tokens.push({ type: type, content: content });
	}

	function lexTag(state) {
	  var str = state.str;

	  {
	    var secondChar = str.charAt(state.cursor + 1);
	    var close = secondChar === '/';
	    state.tokens.push({ type: 'tag-start', close: close });
	    state.cursor += close ? 2 : 1;
	  }
	  var tagName = lexTagName(state);
	  lexTagAttributes(state);
	  {
	    var firstChar = str.charAt(state.cursor);
	    var _close = firstChar === '/';
	    state.tokens.push({ type: 'tag-end', close: _close });
	    state.cursor += _close ? 2 : 1;
	  }
	  return tagName;
	}

	// There is one regex for whitespace.
	// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#special-white-space
	var whitespace = /\s/;
	function isWhitespaceChar(char) {
	  return whitespace.test(char);
	}

	function lexTagName(state) {
	  var str = state.str,
	      cursor = state.cursor;

	  var len = str.length;
	  var start = cursor;
	  while (start < len) {
	    var char = str.charAt(start);
	    var isTagChar = !(isWhitespaceChar(char) || char === '/' || char === '>');
	    if (isTagChar) break;
	    start++;
	  }

	  var end = start + 1;
	  while (end < len) {
	    var _char = str.charAt(end);
	    var _isTagChar = !(isWhitespaceChar(_char) || _char === '/' || _char === '>');
	    if (!_isTagChar) break;
	    end++;
	  }

	  state.cursor = end;
	  var tagName = str.slice(start, end);
	  state.tokens.push({ type: 'tag', content: tagName });
	  return tagName;
	}

	function lexTagAttributes(state) {
	  var str = state.str,
	      tokens = state.tokens;

	  var cursor = state.cursor;
	  var quote = null; // null, single-, or double-quote
	  var wordBegin = cursor; // index of word start
	  var words = []; // "key", "key=value", "key='value'", etc
	  var len = str.length;
	  while (cursor < len) {
	    var char = str.charAt(cursor);
	    if (quote) {
	      var isQuoteEnd = char === quote;
	      if (isQuoteEnd) {
	        quote = null;
	      }
	      cursor++;
	      continue;
	    }

	    var isTagEnd = char === '/' || char === '>';
	    if (isTagEnd) {
	      if (cursor !== wordBegin) {
	        words.push(str.slice(wordBegin, cursor));
	      }
	      break;
	    }

	    var isWordEnd = isWhitespaceChar(char);
	    if (isWordEnd) {
	      if (cursor !== wordBegin) {
	        words.push(str.slice(wordBegin, cursor));
	      }
	      wordBegin = cursor + 1;
	      cursor++;
	      continue;
	    }

	    var isQuoteStart = char === '\'' || char === '"';
	    if (isQuoteStart) {
	      quote = char;
	      cursor++;
	      continue;
	    }

	    cursor++;
	  }
	  state.cursor = cursor;

	  var wLen = words.length;
	  var type = 'attribute';
	  for (var i = 0; i < wLen; i++) {
	    var word = words[i];
	    if (!(word && word.length)) continue;
	    var isNotPair = word.indexOf('=') === -1;
	    if (isNotPair) {
	      var secondWord = words[i + 1];
	      if (secondWord && (0, _compat.startsWith)(secondWord, '=')) {
	        if (secondWord.length > 1) {
	          var newWord = word + secondWord;
	          tokens.push({ type: type, content: newWord });
	          i += 1;
	          continue;
	        }
	        var thirdWord = words[i + 2];
	        i += 1;
	        if (thirdWord) {
	          var _newWord = word + '=' + thirdWord;
	          tokens.push({ type: type, content: _newWord });
	          i += 1;
	          continue;
	        }
	      }
	    }
	    if ((0, _compat.endsWith)(word, '=')) {
	      var _secondWord = words[i + 1];
	      if (_secondWord && !(0, _compat.stringIncludes)(_secondWord, '=')) {
	        var _newWord3 = word + _secondWord;
	        tokens.push({ type: type, content: _newWord3 });
	        i += 1;
	        continue;
	      }

	      var _newWord2 = word.slice(0, -1);
	      tokens.push({ type: type, content: _newWord2 });
	      continue;
	    }

	    tokens.push({ type: type, content: word });
	  }
	}

	function lexSkipTag(tagName, state) {
	  var str = state.str,
	      cursor = state.cursor,
	      tokens = state.tokens;

	  var len = str.length;
	  var index = cursor;
	  while (index < len) {
	    var nextTag = str.indexOf('</', index);
	    if (nextTag === -1) {
	      lexText(state);
	      break;
	    }

	    var tagState = { str: str, cursor: nextTag + 2, tokens: [] };
	    var name = lexTagName(tagState);
	    var safeTagName = tagName.toLowerCase();
	    if (safeTagName !== name.toLowerCase()) {
	      index = tagState.cursor;
	      continue;
	    }

	    var content = str.slice(cursor, nextTag);
	    tokens.push({ type: 'text', content: content });
	    var openTag = { type: 'tag-start', close: true };
	    var closeTag = { type: 'tag-end', close: false };
	    lexTagAttributes(tagState);
	    tokens.push.apply(tokens, [openTag].concat(_toConsumableArray(tagState.tokens), [closeTag]));
	    state.cursor = tagState.cursor + 1;
	    break;
	  }
	}
	//# sourceMappingURL=lexer.js.map


/***/ }),
/* 48 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.startsWith = startsWith;
	exports.endsWith = endsWith;
	exports.stringIncludes = stringIncludes;
	exports.isRealNaN = isRealNaN;
	exports.arrayIncludes = arrayIncludes;
	/*
	  We don't want to include babel-polyfill in our project.
	    - Library authors should be using babel-runtime for non-global polyfilling
	    - Adding babel-polyfill/-runtime increases bundle size significantly

	  We will include our polyfill instance methods as regular functions.
	*/

	function startsWith(str, searchString, position) {
	  return str.substr(position || 0, searchString.length) === searchString;
	}

	function endsWith(str, searchString, position) {
	  var index = (position || str.length) - searchString.length;
	  var lastIndex = str.lastIndexOf(searchString, index);
	  return lastIndex !== -1 && lastIndex === index;
	}

	function stringIncludes(str, searchString, position) {
	  return str.indexOf(searchString, position || 0) !== -1;
	}

	function isRealNaN(x) {
	  return typeof x === 'number' && isNaN(x);
	}

	function arrayIncludes(array, searchElement, position) {
	  var len = array.length;
	  if (len === 0) return false;

	  var lookupIndex = position | 0;
	  var isNaNElement = isRealNaN(searchElement);
	  var searchIndex = lookupIndex >= 0 ? lookupIndex : len + lookupIndex;
	  while (searchIndex < len) {
	    var element = array[searchIndex++];
	    if (element === searchElement) return true;
	    if (isNaNElement && isRealNaN(element)) return true;
	  }

	  return false;
	}
	//# sourceMappingURL=compat.js.map


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = parser;
	exports.hasTerminalParent = hasTerminalParent;
	exports.parse = parse;

	var _compat = __webpack_require__(48);

	function parser(tokens, options) {
	  var root = { tagName: null, children: [] };
	  var state = { tokens: tokens, options: options, cursor: 0, stack: [root] };
	  parse(state);
	  return root.children;
	}

	function hasTerminalParent(tagName, stack, terminals) {
	  var tagParents = terminals[tagName];
	  if (tagParents) {
	    var currentIndex = stack.length - 1;
	    while (currentIndex >= 0) {
	      var parentTagName = stack[currentIndex].tagName;
	      if (parentTagName === tagName) {
	        break;
	      }
	      if ((0, _compat.arrayIncludes)(tagParents, parentTagName)) {
	        return true;
	      }
	      currentIndex--;
	    }
	  }
	  return false;
	}

	function parse(state) {
	  var tokens = state.tokens,
	      options = state.options;
	  var stack = state.stack;

	  var nodes = stack[stack.length - 1].children;
	  var len = tokens.length;
	  var cursor = state.cursor;

	  while (cursor < len) {
	    var token = tokens[cursor];
	    if (token.type !== 'tag-start') {
	      nodes.push(token);
	      cursor++;
	      continue;
	    }

	    var tagToken = tokens[++cursor];
	    cursor++;
	    var tagName = tagToken.content.toLowerCase();
	    if (token.close) {
	      var item = void 0;
	      while (item = stack.pop()) {
	        if (tagName === item.tagName) break;
	      }
	      while (cursor < len) {
	        var endToken = tokens[cursor];
	        if (endToken.type !== 'tag-end') break;
	        cursor++;
	      }
	      break;
	    }

	    var isClosingTag = (0, _compat.arrayIncludes)(options.closingTags, tagName);
	    var shouldRewindToAutoClose = isClosingTag;
	    if (shouldRewindToAutoClose) {
	      var terminals = options.closingTagAncestorBreakers;

	      shouldRewindToAutoClose = !hasTerminalParent(tagName, stack, terminals);
	    }

	    if (shouldRewindToAutoClose) {
	      // rewind the stack to just above the previous
	      // closing tag of the same name
	      var currentIndex = stack.length - 1;
	      while (currentIndex > 0) {
	        if (tagName === stack[currentIndex].tagName) {
	          stack = stack.slice(0, currentIndex);
	          var previousIndex = currentIndex - 1;
	          nodes = stack[previousIndex].children;
	          break;
	        }
	        currentIndex = currentIndex - 1;
	      }
	    }

	    var attributes = [];
	    var attrToken = void 0;
	    while (cursor < len) {
	      attrToken = tokens[cursor];
	      if (attrToken.type === 'tag-end') break;
	      attributes.push(attrToken.content);
	      cursor++;
	    }

	    cursor++;
	    var children = [];
	    nodes.push({
	      type: 'element',
	      tagName: tagToken.content,
	      attributes: attributes,
	      children: children
	    });

	    var hasChildren = !(attrToken.close || (0, _compat.arrayIncludes)(options.voidTags, tagName));
	    if (hasChildren) {
	      stack.push({ tagName: tagName, children: children });
	      var innerState = { tokens: tokens, options: options, cursor: cursor, stack: stack };
	      parse(innerState);
	      cursor = innerState.cursor;
	    }
	  }
	  state.cursor = cursor;
	}
	//# sourceMappingURL=parser.js.map


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /*
	his format adheres to the v0 ASP spec.
	


	exports.default = format;
	exports.capitalize = capitalize;
	exports.camelCase = camelCase;
	exports.castValue = castValue;
	exports.unquote = unquote;
	exports.splitHead = splitHead;
	exports.formatAttributes = formatAttributes;
	exports.formatStyles = formatStyles;

	var _compat = __webpack_require__(48);

	function format(nodes) {
	  return nodes.map(function (node) {
	    var type = capitalize(node.type);
	    if (type === 'Element') {
	      var tagName = node.tagName.toLowerCase();
	      var attributes = formatAttributes(node.attributes);
	      var children = format(node.children);
	      return { type: type, tagName: tagName, attributes: attributes, children: children };
	    }

	    return { type: type, content: node.content };
	  });
	}

	function capitalize(str) {
	  return str.charAt(0).toUpperCase() + str.slice(1);
	}

	function camelCase(str) {
	  return str.split('-').reduce(function (str, word) {
	    return str + word.charAt(0).toUpperCase() + word.slice(1);
	  });
	}

	function castValue(str) {
	  if (typeof str !== 'string') return str;
	  if (str === '') return str;
	  var num = +str;
	  if (!isNaN(num)) return num;
	  return str;
	}

	function unquote(str) {
	  var car = str.charAt(0);
	  var end = str.length - 1;
	  var isQuoteStart = car === '"' || car === "'";
	  if (isQuoteStart && car === str.charAt(end)) {
	    return str.slice(1, end);
	  }
	  return str;
	}

	function splitHead(str, sep) {
	  var idx = str.indexOf(sep);
	  if (idx === -1) return [str];
	  return [str.slice(0, idx), str.slice(idx + sep.length)];
	}

	function formatAttributes(attributes) {
	  return attributes.reduce(function (attrs, pair) {
	    var _splitHead = splitHead(pair.trim(), '='),
	        _splitHead2 = _slicedToArray(_splitHead, 2),
	        key = _splitHead2[0],
	        value = _splitHead2[1];

	    value = value ? unquote(value) : key;
	    if (key === 'class') {
	      attrs.className = value.split(' ');
	    } else if (key === 'style') {
	      attrs.style = formatStyles(value);
	    } else if ((0, _compat.startsWith)(key, 'data-')) {
	      attrs.dataset = attrs.dataset || {};
	      var prop = camelCase(key.slice(5));
	      attrs.dataset[prop] = castValue(value);
	    } else {
	      attrs[camelCase(key)] = castValue(value);
	    }
	    return attrs;
	  }, {});
	}

	function formatStyles(str) {
	  return str.trim().split(';').map(function (rule) {
	    return splitHead(rule.trim(), ':');
	  }).reduce(function (styles, keyValue) {
	    var _keyValue = _slicedToArray(keyValue, 2),
	        rawKey = _keyValue[0],
	        rawValue = _keyValue[1];

	    if (rawValue) {
	      var key = camelCase(rawKey.trim());
	      var value = castValue(rawValue.trim());
	      styles[key] = value;
	    }
	    return styles;
	  }, {});
	}
	//# sourceMappingURL=v0.js.map


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var isCustom = true;

	var _paul = __webpack_require__(52);

	var _paul2 = _interopRequireDefault(_paul);

	var _compat = __webpack_require__(53);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {default: obj};
	}

	// c/p'd from ../index.js
	var voidTags = ['!doctype', 'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];

	function serializeAttr(attr, value, isXml) {

	    if (isCustom) {
	        var text = value.toString();
	        var quoteEscape = text.indexOf('\'') !== -1;
	        var quote = quoteEscape ? '"' : '\'';
	        return attr + '=' + quote + text + quote;

	    } else {
	        if (!isXml && attr === value) return attr;
	        var text = value.toString();
	        var quoteEscape = text.indexOf('\'') !== -1;
	        var quote = quoteEscape ? '"' : '\'';
	        return attr + '=' + quote + text + quote;
	    }
	}

	// stolen from underscore.string
	function dasherize(str) {
	    return str.trim().replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
	}

	function inlineStyle(style) {
	    return Object.keys(style).reduce(function (css, key) {
	        return css + '; ' + dasherize(key) + ': ' + style[key];
	    }, '').slice(2);
	}

	var htmlDefaults = {};


	function toHTML(tree) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : htmlDefaults;
	    var doctype = options.doctype;

	    var isXml = doctype === 'xml';
	    var html = _paul2.default.walk(tree, function (node, walk) {
	        var type = node.type,
	            tagName = node.tagName,
	            attributes = node.attributes,
	            content = node.content;

	        if (type === 'Text') return content;
	        if (type === 'Comment') return '<!--' + content + '-->';
	        var tag = '<' + tagName;
	        for (var attr in attributes) {
	            var val = attributes[attr];
	            if (attr === 'dataset') {
	                for (var prop in val) {
	                    var key = 'data-' + dasherize(prop);
	                    tag += ' ' + serializeAttr(key, val[prop], isXml);
	                }
	                continue;
	            }

	            if (attr === 'style') {
	                tag += ' ' + serializeAttr(attr, inlineStyle(val));
	                continue;
	            }

	            if (attr === 'className') {
	                tag += ' ' + serializeAttr('class', val.join(' '));
	                continue;
	            }

	            if (isCustom) {
	                tag += ' ' + serializeAttr(attr, val, isXml);
	            } else {
	                tag += ' ' + serializeAttr(dasherize(attr), val, isXml);
	            }
	        }

	        tag += '>';
	        var autoClose = !isXml && (0, _compat.arrayIncludes)(voidTags, tagName.toLowerCase());
	        if (autoClose) return tag;

	        var innerds = walk(node.children || []).join('');
	        return tag + innerds + ('</' + tagName + '>');
	    });
	    if (html.join) return html.join('');
	    return html;
	}

	var newline = '\n';
	var jadeDefaults = {
	    indentation: '  '
	};

	function isWhitespaceNode(node) {
	    return !(node.type === 'Text' && !node.content.trim());
	}

	function toJade(tree) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : jadeDefaults;
	    var doctype = options.doctype;

	    var multi = multilineText(options.indentation);

	    if (tree.filter) tree = tree.filter(isWhitespaceNode);
	    var jade = _paul2.default.walk(tree, function (node, walk, depth) {
	        var type = node.type,
	            tagName = node.tagName,
	            attributes = node.attributes;

	        if (type === 'Text') {
	            return multi(node.content, depth, '| ');
	        }
	        if (type === 'Comment') {
	            var text = node.content;
	            return ~text.indexOf(newline) ? multi('//', depth) + newline + multi(text, depth + 1) : multi('//' + text, depth);
	        }
	        var tag = tagName;
	        var id = attributes.id,
	            className = attributes.className;

	        if (id) tag += '#' + id;
	        if (className) tag += '.' + className.join('.');

	        var redundantDiv = node.tagName === 'div' && tag.length > 3;
	        if (redundantDiv) tag = tag.slice(3);

	        tag = multi(tag, depth);
	        var attrs = node.attributes;
	        var props = Object.keys(attrs).filter(function (key) {
	            return key !== 'className' && key !== 'id';
	        });
	        if (props.length) {
	            var isXml = doctype === 'xml';
	            tag += '(';
	            tag += props.map(function (prop) {
	                var val = attrs[prop];
	                if (prop === 'dataset') {
	                    return Object.keys(val).map(function (attr) {
	                        return serializeAttr('data-' + dasherize(attr), val[attr], isXml);
	                    }).join(', ');
	                }
	                if (prop === 'style') return serializeAttr(prop, inlineStyle(val));
	                return serializeAttr(dasherize(prop), val, isXml);
	            }).join(', ');
	            tag += ')';
	        }
	        var lowTagName = node.tagName.toLowerCase();
	        if ((0, _compat.arrayIncludes)(voidTags, lowTagName)) {
	            if (lowTagName === '!doctype') {
	                if (!doctype) doctype = doctypeShortcut(tag);
	                return multi('doctype ' + doctype, depth);
	            }
	            return tag;
	        }

	        var children = node.children;

	        if (!children.length) return tag;
	        if (children.length === 1 && children[0].type === 'Text') {
	            var _text = children[0].content;
	            return ~_text.indexOf(newline) ? tag + '.' + newline + multi(_text, depth + 1) : tag + ' ' + _text;
	        }

	        return tag + newline + walk(children.filter(isWhitespaceNode), depth + 1).join(newline);
	    }, 0);
	    if (jade.join) return jade.join(newline);
	    return jade;
	}

	function multilineText(indentation) {
	    var format = function format(line) {
	        return line;
	    };
	    var hasTab = (0, _compat.stringIncludes)(indentation, '\t');
	    if (hasTab) {
	        format = function format(line) {
	            return line.replace(/\t/g, indentation);
	        };
	    }

	    function indent(depth, str) {
	        while (depth--) {
	            str = indentation + str;
	        }
	        return str;
	    }

	    return function (str, depth) {
	        var lead = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

	        var lines = str.split(newline).map(format).filter(function (line) {
	            return !!line.trim();
	        });

	        var start = maxSharedIndent(lines);
	        return lines.map(function (line) {
	            return indent(depth, lead + line.slice(start));
	        }).join(newline);
	    };
	}

	function maxSharedIndent(lines) {
	    return lines.reduce(function (num, line) {
	        return Math.min(num, line.length - line.trimLeft().length);
	    }, Infinity);
	}

	// see http://jade-lang.com/reference/doctype/
	function doctypeShortcut(str) {
	    if ((0, _compat.stringIncludes)(str, 'Transitional')) return 'transitional';
	    if ((0, _compat.stringIncludes)(str, 'strict')) return 'strict';
	    if ((0, _compat.stringIncludes)(str, 'Frameset')) return 'frameset';
	    if ((0, _compat.stringIncludes)(str, 'Basic')) return 'basic';
	    if ((0, _compat.stringIncludes)(str, '1.1')) return '1.1';
	    if ((0, _compat.stringIncludes)(str, 'Mobile')) return 'mobile';
	    return 'html';
	}

	module.exports = {
	    toHTML: toHTML,
	    toJade: toJade,
	    toPug: toJade
	};
	//# sourceMappingURL=translate.js.map


/***/ }),
/* 52 */
/***/ (function(module, exports) {

	
	function Paul(walkFn) {
		if(!(this instanceof Paul)) {
			return new Paul(walkFn);
		}
		var walker = this.walker = Paul.walker(walkFn);

		this.map = Paul.map(walker);
		this.filter = Paul.filter(walker);
		this.where = Paul.where(walker);

		var depthIter = this.depthIterator = Paul.depthIterator(walker);
		var breadthIter = this.breadthIterator = Paul.breadthIterator(walker);

		var methods = ['forEach', 'find', 'findWhere', 'reduce', 'parent'];
		for(var i = 0; i < methods.length; i++) {
			var method = methods[i];
			var Method = cap(method);

			this['depth'+Method] = Paul[method](depthIter);
			this['breadth'+Method] = Paul[method](breadthIter);
		}

		this.depthSiblings = Paul.siblings(walker, depthIter);
		this.breadthSiblings = Paul.siblings(walker, breadthIter);
	}

	Paul.walker = function walker(walkFn) {
		var walker = Array.isArray(walkFn) 
			? function(node, walk) {
				for(var i = 0; i < walkFn.length; i++) {
					var key = walkFn[i];
					if(deepHas(node, key)) walk(key);
				}
			}
			: walkFn;

		return function(tree) {
			var steps = []; // [[String key, Node node]]
			walker(tree, function(prop, node) {
				if(node === void 0) {
					steps.push([prop, deepGet(tree, prop)]);
				} else {
					steps.push([prop, node]);
				}
			});
			return steps;
		}
	}

	Paul.map = function map(walker) {
		return function _map(node, func) {
			var steps = walker(node);
			var notKeys = [];
			for(var i = 0; i < steps.length; i++) {
				notKeys.push(steps[i][0]);
			}
			var ret = func(deepCopy(node, notKeys));
			for(var i = 0; i < steps.length; i++) {
				var kid;
				var prop = steps[i][0];
				var child = steps[i][1];
				if(Array.isArray(child)) {
					kid = [];
					for(var j = 0; j < child.length; j++) {
						kid.push(this.map(child[j], func));
					}
				} else {
					kid = this.map(child, func);
				}
				deepSet(ret, prop, kid);
			}
			return ret;
		}
	}

	Paul.filter = function filter(walker) {
		return function _filter(node, func) {
			if(!func(node)) return undefined;
			var steps = walker(node);
			var notKeys = [];
			for(var i = 0; i < steps.length; i++) {
				notKeys.push(steps[i][0]);
			}
			var ret = deepCopy(node, notKeys);
			for(var i = 0; i < steps.length; i++) {
				var kid = null;
				var prop = steps[i][0];
				var child = steps[i][1];
				if(Array.isArray(child)) {
					kid = [];
					for(var j = 0; j < child.length; j++) {
						var son = child[j];
						if(_filter(son, func)) kid.push(son);
					}
				} else if(_filter(child, func)) {
					kid = child;
				}
				deepSet(ret, prop, kid);
			}
			return ret;
		}
	}

	Paul.where = function where(walker) {
		return function _where(node, obj) {
			return Paul.filter(walker)(node, whereFilter(obj));
		}
	}

	function getChildren(walker, node) {
		var children = [];
		var steps = walker(node);
		for(var i = 0; i < steps.length; i++) {
			children = children.concat(steps[i][1]);
		}
		return children;
	}

	Paul.depthIterator = function depthIterator(walker) {
		return function _depthIterator(tree) {
			var levels = [[tree]];
			var sweeps = [0];

			function fromEnd(arr, i) {
				return arr[arr.length - 1 - i];
			}

			return {
				next: function next() {
					if(!sweeps.length) return {done: true};
					var nodes = fromEnd(levels, 0);
					var index = fromEnd(sweeps, 0);
					if(index < nodes.length) {
						sweeps[sweeps.length - 1]++;

						var adults = fromEnd(levels, 1);
						var parent = adults 
							? adults[fromEnd(sweeps, 1) - 1]
							: undefined;

						var children = getChildren(walker, nodes[index]);
						if(children.length) {
							levels.push(children);
							sweeps.push(0);
						}

						return {
							done: false,
							value: nodes[index],
							parent: parent
						};
					} else {
						levels.pop();
						sweeps.pop();
						return next();
					}
				}
			}
		}
	}

	Paul.breadthIterator = function breadthIterator(walker) {
		return function _breadthIterator(tree) {
			var elder = undefined;
			var nodes = [];
			var index = 0;

			var subnodes = [tree];
			var subindex = 0;

			var level = [tree];

			return {
				next: function next() {
					if(subindex < subnodes.length) {
						return {
							done: false, 
							value: subnodes[subindex++],
							parent: elder
						};
					} else if(index < nodes.length) {
						elder = nodes[index++];
						subnodes = getChildren(walker, elder);
						subindex = 0;

						level = level.concat(subnodes);
						return next();
					} else {
						if(!level.length) {
							return {done: true};
						}

						nodes = level;
						index = 0;
						level = [];
						return next();
					}
				}
			};
		}
	}

	Paul.forEach = function forEach(iterator) {
		return function _forEach(tree, func) {
			var iter = iterator(tree);
			var res;
			while(!(res = iter.next()).done) {
				func(res.value, res.parent, tree);
			}
		}
	}

	Paul.find = function find(iterator) {
		return function _find(tree, func) {
			var iter = iterator(tree);
			var res;
			while(!(res = iter.next()).done) {
				if(func(res.value, res.parent, tree)) return res.value;
			}
			return undefined;
		}
	}

	Paul.findWhere = function findWhere(iterator) {
		return function _findWhere(tree, obj) {
			return Paul.find(iterator)(tree, whereFilter(obj));
		}
	}

	Paul.reduce = function reduce(iterator) {
		return function _reduce(tree, func, memo) {
			var iter = iterator(tree);
			var res;
			while(!(res = iter.next()).done) {
				if(memo === void 0) {
					memo = res.value;
				} else {
					memo = func(memo, res.value, res.parent, tree);
				}
			}
			return memo;
		}
	}

	Paul.parent = function parent(iterator) {
		return function _parent(tree, node) {
			if(node !== tree) {
				var iter = iterator(tree);
				var res;
				while(!(res = iter.next()).done) {
					if(res.value === node) {
						return res.parent;
					}
				}
			}
			return undefined;
		}
	}

	Paul.siblings = function siblings(walker, iterator) {
		return function _siblings(tree, node) {
			var parent = Paul.parent(iterator)(tree, node);
			if(parent) {
				var steps = walker(parent);
				for(var i = 0; i < steps.length; i++) {
					var nodes = steps[i][1];
					if(Array.isArray(nodes)) {
						var index = nodes.indexOf(node);
						if(~index) return {
							left: nodes.slice(0, index),
							right: nodes.slice(index + 1)
						};
					}
				}
			}
			return undefined;
		}
	}

	Paul.walk = function walk(node, func) {
		function _walk(node) {
			var rest = Array.prototype.slice.call(arguments, 1);
			if(Array.isArray(node)) {
				var nodes = [];
				for(var i = 0; i < node.length; i++) {
					nodes.push(func.apply(null, [node[i], _walk].concat(rest)));
				}
				return nodes;
			}
			return func.apply(null, [node, _walk].concat(rest));
		}

		if(func === void 0) {
			func = node;
			return _walk;
		}

		var rest = Array.prototype.slice.call(arguments, 2);
		return _walk.apply(null, [node].concat(rest));
	}

	function cap(str) {
		return str.charAt(0).toUpperCase() + str.slice(1);
	}

	function deepCopy(obj, notKeys) {
		var ret = {};
		for(var key in obj) {
			if(obj.hasOwnProperty(key) && !~notKeys.indexOf(key)) {
				var val = obj[key];
				if(typeof val === 'object') {
					var head = key + '.';
					ret[key] = deepCopy(val, notKeys.reduce(function(s,c) {
						if(!c.indexOf(head)) {
							s.push(c.slice(head.length));
						}
						return s;
					}, []));
				} else {
					ret[key] = val;
				}
			}
		}
		return ret;
	}

	function deepHas(obj, prop) {
		var levels = prop.split('.');
		for(var i = 0; i < levels.length; i++) {
			obj = obj[levels[i]];
			if(!obj) return false;
		}
		return true;
	}

	function deepGet(obj, prop) {
		var levels = prop.split('.');
		for(var i = 0; i < levels.length; i++) {
			obj = obj[levels[i]];
		}
		return obj;
	}

	function deepSet(obj, prop, value) {
		var levels = prop.split('.');
		var end = levels.length - 1;
		for(var i = 0; i < end; i++) {
			obj = obj[levels[i]];
		}
		obj[levels[end]] = value;
	}

	function whereFilter(obj) {
		return function(node) {
			for(var key in obj) {
				if(obj.hasOwnProperty(key)) {
					if(obj[key] !== node[key]) return false;
				}
			}
			return true;
		}
	}

	module.exports = Paul;


/***/ }),
/* 53 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.startsWith = startsWith;
	exports.endsWith = endsWith;
	exports.stringIncludes = stringIncludes;
	exports.isRealNaN = isRealNaN;
	exports.arrayIncludes = arrayIncludes;
	/*
	  We don't want to include babel-polyfill in our project.
	    - Library authors should be using babel-runtime for non-global polyfilling
	    - Adding babel-polyfill/-runtime increases bundle size significantly

	  We will include our polyfill instance methods as regular functions.
	*/

	function startsWith(str, searchString, position) {
	  return str.substr(position || 0, searchString.length) === searchString;
	}

	function endsWith(str, searchString, position) {
	  var index = (position || str.length) - searchString.length;
	  var lastIndex = str.lastIndexOf(searchString, index);
	  return lastIndex !== -1 && lastIndex === index;
	}

	function stringIncludes(str, searchString, position) {
	  return str.indexOf(searchString, position || 0) !== -1;
	}

	function isRealNaN(x) {
	  return typeof x === 'number' && isNaN(x);
	}

	function arrayIncludes(array, searchElement, position) {
	  var len = array.length;
	  if (len === 0) return false;

	  var lookupIndex = position | 0;
	  var isNaNElement = isRealNaN(searchElement);
	  var searchIndex = lookupIndex >= 0 ? lookupIndex : len + lookupIndex;
	  while (searchIndex < len) {
	    var element = array[searchIndex++];
	    if (element === searchElement) return true;
	    if (isNaNElement && isRealNaN(element)) return true;
	  }

	  return false;
	}
	//# sourceMappingURL=compat.js.map


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);
	var Util = __webpack_require__(6);

	var triggerName = 'runCallbackSomeMenu';

	function ContextMenu(editorElement, $domObejct, router, menuController) {
	    this.editorElement = null;
	    this.router = null;
	    this.$dom = null;
	    this.menuController = null;
	    this.contextMenuInstance = null;

	    this.init(editorElement, $domObejct, router, menuController);
	}

	ContextMenu.prototype.init = function(editorElement, $domObejct, router, menuController){
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;
	    this.menuController = menuController;

	    this.createContextMenu();
	};

	ContextMenu.prototype.createContextMenu = function() {
	    this.editorElement.contextMenu({
	        selector : '.' + Define.CLASS.CONTENTS,
	        trigger: 'none',
	        build: function($trigger, e) {
	            e.preventDefault();

	            // pull a callback from the trigger
	            return $trigger.data(triggerName)();
	        }
	    });

	    this.contextMenuInstance = this.editorElement.find('.' + Define.CLASS.CONTENTS);
	};

	ContextMenu.prototype.executeMenu = function(key, options, target) {

	    // var userSelect = this.$dom.selection.getUserSelectBackup();
	    // if (userSelect){
	    //     var op = this.$dom.selection.get();
	    //     this.$dom.selection.setOp(op, true);
	        // window.getSelection().removeAllRanges();
	    // }

	    var menuObject = { id:key };

	    if (key == 'table_merge') {
	        menuObject.id = 'table_merge';
	    }else if (key == 'table_style') {
	        menuObject.id = 'tableModifyDialog';

	        var $parentTable = Util.getTargetTables(this.$dom.selection);

	        if ($parentTable && $parentTable.length) {
	            console.log($parentTable);

	            var rowColInfo = Util.getRowColCount($parentTable);

	            var headerType = Util.getHeaderType($parentTable);

	            menuObject.value = {
	                type : 'modify',
	                row : rowColInfo.row,
	                col : rowColInfo.col,
	                width : $parentTable.css('width'),
	                height : $parentTable.css('height'),
	                marginLeft : parseInt($parentTable.css('marginLeft')) || null,
	                align : $parentTable.attr('align') || null,
	                id : $parentTable.attr('id') || null,
	                className : $parentTable.attr('class') || null,
	                borderSeparate : $parentTable.css('border-collapse') === 'separate',
	                cellSpacing : $parentTable.attr('cellspacing') || null,
	                cellPadding : $parentTable.attr('cellpadding') || null,
	                caption : $parentTable[0].caption ? $parentTable[0].caption.textContent : null,
	                summary : $parentTable[0].summary || null,

	                image : $parentTable.css('background-image').slice(4, -1).replace(/"/gi,'') || null,
	                attachment : $parentTable[0].style.backgroundAttachment || null,
	                repeat : $parentTable[0].style.backgroundRepeat || null,
	                positionX : parseInt($parentTable.css('background-position-x')) || null,
	                positionY : parseInt($parentTable.css('background-position-y')) || null,
	                backgroundColor : Util.getRgbToHex($parentTable[0].style.backgroundColor) || null,

	                scope : !!$parentTable[0].rows[0].cells[0].getAttribute('scope'),
	                headerType : headerType === 'none' ? false : headerType
	            }
	        }

	    } else if (key === 'cell_style') {
	        menuObject.id = 'cellModifyDialog';
	        menuObject.value = {};

	        var $tdNodes = Util.getTargetCells(this.$dom.selection);

	        if ($tdNodes.length) {
	            if ($tdNodes.length == 1) {
	                menuObject.value = {
	                    align : $tdNodes[0].style.textAlign || null,
	                    verticalAlign : $tdNodes[0].style.verticalAlign || null,
	                    whiteSpace : $tdNodes[0].style.whiteSpace || null,

	                    headerType : $tdNodes[0].nodeName.toLowerCase(),
	                    scopeType : $tdNodes[0].getAttribute('scope') || null,

	                    border : {
	                        // defaultBorder : { width : 0, type : 'solid', color : '#000000' },
	                        // top : { width : 0, type : 'solid', color : '#000000' },
	                        // bottom : { width : 0, type : 'solid', color : '#000000' },
	                        // left : { width : 0, type : 'solid', color : '#000000' },
	                        // right : { width : 0, type : 'solid', color : '#000000' }
	                    },

	                    image : $tdNodes.css('background-image').slice(4, -1).replace(/"/gi,'') || null,
	                    attachment : $tdNodes[0].style.backgroundAttachment || null,
	                    repeat : $tdNodes[0].style.backgroundRepeat || null,
	                    positionX : parseInt($tdNodes.css('background-position-x')) || null,
	                    positionY : parseInt($tdNodes.css('background-position-y')) || null,
	                    backgroundColor : Util.getRgbToHex($tdNodes[0].style.backgroundColor)
	                };
	            }

	            console.log(menuObject);
	        }
	    } else if (key === 'layer_modify') {
	        menuObject.id = 'layerModifyDialog';

	        var $target = $(target);
	        var $layerNode = null;

	        if ($target.attr(Define.ATTR.TYPE) === Define.ATTR_VALUE.KK_LAYER) {
	            $layerNode = $target;
	        } else if ($target.find('[' + Define.ATTR.TYPE + '="' + Define.ATTR_VALUE.KK_LAYER + '"]').length) {
	            $layerNode = $target.find('[' + Define.ATTR.TYPE + '="' + Define.ATTR_VALUE.KK_LAYER + '"]');
	        } else if ($target.closest('[' + Define.ATTR.TYPE + '="' + Define.ATTR_VALUE.KK_LAYER + '"]').length) {
	            $layerNode = $target.closest('[' + Define.ATTR.TYPE + '="' + Define.ATTR_VALUE.KK_LAYER + '"]');
	        }

	        if ($layerNode) {
	            menuObject.value = {
	                type : 'modify',
	                width : $layerNode.width(),
	                height : $layerNode.height(),
	                positionX : parseInt($layerNode.css('left')),
	                positionY : parseInt($layerNode.css('top')),
	                id : $layerNode.attr(Define.ATTR.ID),
	                className : $layerNode.attr(Define.ATTR.CLASS)
	            };

	            this.$dom.selection.setModifyTargetNode($layerNode);

	        } else {
	            return;
	        }

	    } else if (key === 'image_modify') {
	        menuObject.id = 'imageModifyDialog';

	        var $imageNode = target;

	        if (!$imageNode.is('img')) {
	            if ($imageNode.find('img').length) {
	                $imageNode = $imageNode.find('img');
	            }
	        }

	        if ($imageNode.is('img')) {
	            menuObject.value = {
	                type : 'modify',
	                imageSrc : $imageNode[0].src,
	                imageTitle : $imageNode.attr('title') || null,
	                imageAlt : $imageNode.attr('alt') || null,
	                width : $imageNode[0].width,
	                height : $imageNode[0].height,
	                margin : {
	                    left : parseInt($imageNode.css('marginLeft')) || null,
	                    right : parseInt($imageNode.css('marginRight')) || null,
	                    top : parseInt($imageNode.css('marginTop')) || null,
	                    bottom : parseInt($imageNode.css('marginBottom')) || null
	                },
	                align : $imageNode.css('verticalAlign') || null,
	                borderType : $imageNode[0].style.borderStyle || null,
	                borderWidth : parseInt($imageNode[0].style.borderWidth) || null,
	                borderColor : Util.getRgbToHex($imageNode[0].style.borderColor) || null,
	                id : $imageNode.attr('id') || null,
	                className : $imageNode.attr('class') || null,
	                hyperlink : {}
	            };

	            var $parent = $imageNode.parent();

	            var href = $parent.attr("href");

	            if (href) {
	                if (href.indexOf('#') === 0) {
	                    href = href.slice(1, href.length);

	                    menuObject.value.hyperlink.type = 'bookmark';
	                    menuObject.value.hyperlink.url = href;
	                } else {
	                    menuObject.value.hyperlink.type = 'url';
	                    menuObject.value.hyperlink.url = href;

	                    menuObject.value.hyperlink.title = $parent.attr('title') || null;
	                    menuObject.value.hyperlink.target = $parent.attr('target') || null;
	                    menuObject.value.hyperlink.id = $parent.attr('id') || null;
	                    menuObject.value.hyperlink.className = $parent.attr('class') || null;
	                }
	            }

	            var range = this.$dom.selection.getOp($imageNode[0]);

	            this.$dom.selection.setModifyTargetNode($imageNode);

	            this.$dom.selection.set({
	                p : [range.p, range.p],
	                r : [range.r, range.r]
	            });
	        } else  {
	            return;
	        }

	    } else if (key === 'video_modify') {
	        menuObject.id = 'videoModifyDialog';

	        var $targetNode = target;
	        var $videoNode = null;

	        if ($targetNode.is('[' + Define.ATTR.DATA_VIDEO_TYPE + ']')){
	            $videoNode = $targetNode;
	        } else {
	            return;
	        }

	        var type = $videoNode.attr(Define.ATTR.DATA_VIDEO_TYPE);
	        var embedHTML = decodeURIComponent($videoNode.attr(Define.ATTR.DATA_VIDEO_SOURCE));

	        if (!embedHTML) {
	            return;
	        }

	        var $embed = $(embedHTML);

	        if (type === 'file') {
	            if ($embed.find('embed').length) {
	                $embed = $embed.find('embed');
	            }

	            var urlValue = $embed.attr('src');
	            var _lastDot = urlValue.lastIndexOf('.');
	            var _fileExt = urlValue.substring(_lastDot + 1, urlValue.length).toLowerCase();

	            menuObject.value = {
	                type : 'modify',
	                videoType : type,
	                videoUrl : urlValue,
	                videoExt : _fileExt,

	                width : parseInt($embed.css(Define.ATTR.WIDTH)) || null,
	                height : parseInt($embed.css(Define.ATTR.HEIGHT)) || null,

	                isAutostart : ($embed.attr(Define.ATTR.AUTO_START) !== "0") ,
	                isLoop : ($embed[0].getAttribute(Define.ATTR.LOOP) === "1") ,
	                isShowtracker : $embed.attr(Define.ATTR.SHOW_TRACKER) !== "0" ,
	                isShowstatusbar : $embed.attr(Define.ATTR.SHOW_STATUSBAR) !== "0" ,
	                isShowcontrols : $embed.attr(Define.ATTR.SHOW_CONTROLS) !== "0" ,
	                isShowaudiocontrols : $embed.attr(Define.ATTR.SHOW_AUDIO_CONTROLS) !== "0" ,
	                isShowdisplay : $embed.attr(Define.ATTR.SHOW_DISPLAY) !== "0" ,
	                isShowpositioncontrols : $embed.attr(Define.ATTR.SHOW_POSITION_CONTROLS) !== "0",

	                isPlay : $embed.attr(Define.ATTR.PLAY) !== "false",
	                isMenu : $embed.attr(Define.ATTR.MENU) !== "false",
	                isAllowfullscreen : $embed.attr(Define.ATTR.ALLOW_FULLSCREEN) !== "false"
	            };
	        } else {
	            menuObject.value = {
	                type : 'modify',
	                videoType : type,
	                videoSource : $embed[0].outerHTML
	            };
	        }

	        var $parent = $videoNode.parent();

	        var range = this.$dom.selection.getOp($parent[0]);

	        this.$dom.selection.setModifyTargetNode($videoNode);

	        this.$dom.selection.set({
	            p : [range.p, range.p],
	            r : [range.r, range.r]
	        });
	    }

	    this.menuController.menuSwitch(menuObject);
	};

	ContextMenu.prototype.getContextMenuObject = function() {
	    var _this = this;

	    return {
	        callback: function(key, option) {
	            _this.executeMenu(key, option, _this.target);
	        },
	        className: Define.CLASS.EDITOR_CONTEXT_MENU,
	        zIndex : 100000
	    }
	};

	ContextMenu.prototype.defaultContextMenuItems = function(type) {
	    return {
	        "copy": {name: Resource.menuTitle.copy, icon: "copy"},
	        "cut": {name: Resource.menuTitle.cut, icon: "cut"},
	        "paste": {name: Resource.menuTitle.paste, icon: "paste"},
	        "text_paste": {name: Resource.menuTitle.text_paste, icon: "text_paste"},
	        "sep1": "---------",
	        "all_select": {name: Resource.menuTitle.all_select, icon: "all_select"},
	    };
	};

	ContextMenu.prototype.hyperlinkMenuItems = function(e) {
	    var items = {
	        "sep2": "---------",
	        "link": {name: Resource.menuTitle.link, icon: "link"}
	    };

	    var $target = $(e.target);

	    if ($target.closest('[href]').length) {
	        items.unlink = {name: Resource.menuTitle.unlink, icon: "unlink"}
	    }

	    return items
	};

	ContextMenu.prototype.imageMenuItems = function(e) {
	    var items = {
	        "sep3": "---------",
	        "image": {name: Resource.menuTitle.image, icon: "image"}
	    };

	    var $target = $(e.target);

	    if (!$target.attr(Define.ATTR.DATA_VIDEO_SOURCE)) {
	        var $selected = this.editorElement.find("." + Define.CLASS.SELECTED);

	        if ($selected.find('IMG').length || $target[0].nodeName === 'IMG' || $target.closest('[kk_type="' + Define.ATTR.KK_IMAGE + '"]').length) {
	            items.image_modify = {name: Resource.menuTitle.image_modify, icon: "image_modify"};
	        }
	    }

	    return items;
	};

	ContextMenu.prototype.videoMenuItems = function(e) {
	    var items = { };

	    var $target = $(e.target);

	    var $selected = this.editorElement.find("." + Define.CLASS.SELECTED);

	    if (($selected.find('IMG').length || $target[0].nodeName === 'IMG') && $target.attr(Define.ATTR.DATA_VIDEO_SOURCE)) {
	        items.video_modify = {name: Resource.menuTitle.video_modify, icon: "video_modify"}
	    }

	    return items;
	};

	ContextMenu.prototype.paragraphContextMenuItems = function(type) {
	    return {
	        "sep4": "---------",
	        "align_left": {name: Resource.menuTitle.align_left, icon: "align_left"},
	        "align_center": {name: Resource.menuTitle.align_center, icon: "align_center"},
	        "align_right": {name: Resource.menuTitle.align_right, icon: "align_right"},
	        "align_justify": {name: Resource.menuTitle.align_justify, icon: "align_justify"},
	        "sep5": "---------",
	        "paragraph_margin": {name: Resource.menuTitle.paragraph_margin, icon: "paragraph_margin"},
	        "sep6": "---------",
	        "paragraph_remove_format": {name: Resource.menuTitle.paragraph_remove_format, icon: "paragraph_remove_format"},
	    };
	};

	ContextMenu.prototype.tableContextMenuItems = function($table) {
	    var items = {
	        "sep7": "---------",

	        "addRow": {
	            "name": Resource.contextMenuTitle.addRow,
	            "items": {
	                "table_insert_top": {name: Resource.menuTitle.table_insert_top, icon: "table_insert_top"},
	                "table_insert_bottom": {name: Resource.menuTitle.table_insert_bottom, icon: "table_insert_bottom"}
	            }
	        },
	        "addCol": {
	            "name": Resource.contextMenuTitle.addCol,
	            "items": {
	                "table_insert_left": {name: Resource.menuTitle.table_insert_left, icon: "table_insert_left"},
	                "table_insert_right": {name: Resource.menuTitle.table_insert_right, icon: "table_insert_right"}
	            }
	        },

	        // "sep8": "---------",

	        "vertical_align": {
	            "name": Resource.contextMenuTitle.vertical_align,
	            "items": {
	                "vertical_align_top": {name: Resource.contextMenuTitle.vertical_align_top, icon: "vertical_align_top"},
	                "vertical_align_middle": {name: Resource.contextMenuTitle.vertical_align_middle, icon: "vertical_align_middle"},
	                "vertical_align_bottom": {name: Resource.contextMenuTitle.vertical_align_bottom, icon: "vertical_align_bottom"},
	                "vertical_align_baseline": {name: Resource.contextMenuTitle.vertical_align_baseline, icon: "vertical_align_baseline"}
	            }
	        },

	        "cell_size": {
	            "name": Resource.contextMenuTitle.cell_size,
	            "items": {
	                "cell_horizontal_size": {name: Resource.contextMenuTitle.cell_horizontal_size, icon: ""},
	                "cell_vertical_size": {name: Resource.contextMenuTitle.cell_vertical_size, icon: ""},
	                "cell_both_size": {name: Resource.contextMenuTitle.cell_both_size, icon: ""},
	            }
	        },

	        "sep9": "---------",

	        "table_remove_row": {name: Resource.menuTitle.table_remove_row, icon: "table_remove_row"},
	        "table_remove_col": {name: Resource.menuTitle.table_remove_col, icon: "table_remove_col"},
	        "table_remove_table": {name: Resource.menuTitle.table_remove_table, icon: "table_remove_table"},

	        "sep10": "---------",

	        "table_merge": {name: Resource.menuTitle.table_merge, icon: "table_merge"},
	        "table_split_col": {name: Resource.menuTitle.table_split_col, icon: "table_split_col"},
	        "table_split_row": {name: Resource.menuTitle.table_split_row, icon: "table_split_row"},

	        "sep11": "---------",

	        "table_style": {name: Resource.contextMenuTitle.table_style, icon: "table_style"},
	        "cell_style": {name: Resource.contextMenuTitle.cell_style, icon: "cell_style"},

	        "sep12": "---------",

	        "table_to_text": {name: Resource.contextMenuTitle.table_to_text, icon: "table_to_text"},

	    };

	    var $selectedTd = this.$dom.selection.getSelectedTd();

	    if ($selectedTd.length){
	        delete items['addRow'];
	        delete items['addCol'];
	        delete items['sep9'];

	        delete items['table_remove_row'];
	        delete items['table_remove_col'];

	        if (! this.$dom.selection.isTableMergeable()){
	            delete items['table_merge'];
	        }

	        delete items['sep10'];
	        delete items['table_split_col'];
	        delete items['table_split_row'];
	        delete items['sep11'];
	    }else{
	        delete items['table_merge'];
	        delete items['cell_size'];
	    }

	    return items;
	};

	ContextMenu.prototype.layerMenuItems = function(e) {
	    var items = {};

	    var $target = $(e.target);

	    console.log($target);

	    if (($target.attr(Define.ATTR.TYPE) === Define.ATTR_VALUE.KK_LAYER) || $target.find('[' + Define.ATTR.TYPE + '="' + Define.ATTR_VALUE.KK_LAYER + '"]').length || $target.closest('[' + Define.ATTR.TYPE + '="' + Define.ATTR_VALUE.KK_LAYER + '"]').length) {
	        items = {
	            "sep13": "---------",
	            "layer_modify": {name: Resource.menuTitle.layer_modify, icon: "layer"}
	        };
	    }

	    return items;
	};

	ContextMenu.prototype.setContextMenuItems = function(event) {
	    var _this = this;

	    this.contextMenuInstance.data(triggerName, function() {
	        return _this.getContextMenuType(event);
	    });
	};

	ContextMenu.prototype.getContextMenuType = function(e) {
	    var $target = $(e.target);

	    var contextMenuObject = this.getContextMenuObject();
	    var contextMenuItems = this.defaultContextMenuItems();

	    var hyperlinkMenuItems = this.hyperlinkMenuItems(e);
	    contextMenuItems = $.extend(true, {}, contextMenuItems, hyperlinkMenuItems);

	    var imageMenuItems = this.imageMenuItems(e);
	    contextMenuItems = $.extend(true, {}, contextMenuItems, imageMenuItems);

	    var viedoeMenuItems = this.videoMenuItems(e);
	    contextMenuItems = $.extend(true, {}, contextMenuItems, viedoeMenuItems);

	    var paragraphMenuItems = this.paragraphContextMenuItems();
	    contextMenuItems = $.extend(true, {}, contextMenuItems, paragraphMenuItems);

	    var layerMenuItems = this.layerMenuItems(e);
	    contextMenuItems = $.extend(true, {}, contextMenuItems, layerMenuItems);

	    var $table = $target.closest('.' + Define.CLASS.CONTENTS + ' table');
	    var $tdNodes = this.$dom.selection.getSelectedTd();

	    if ($table.length || $tdNodes.length > 0) {
	        var $selectedNodes = this.$dom.selection.getSelectedNode();

	        if ($tdNodes.length == 0 && $selectedNodes.length == 0){
	            $tdNodes = $target.closest('.' + Define.CLASS.CONTENTS + ' ' + Define.CELL_TYPE.join(', .') + Define.CLASS.CONTENTS + ' ');

	            if ($target.is(Define.CELL_TYPE.join(','))) {
	                $target.find('span').addClass(Define.CLASS.SELECTED);
	            }

	            if ($tdNodes.length > 0){
	                $tdNodes.find('span').addClass(Define.CLASS.SELECTED);
	            }
	        }

	        var tableMenuItems = this.tableContextMenuItems($table);

	        delete contextMenuItems['copy'];
	        delete contextMenuItems['cut'];
	        delete contextMenuItems['paste'];
	        delete contextMenuItems['text_paste'];
	        delete contextMenuItems['sep1'];
	        delete contextMenuItems['all_select'];
	        delete contextMenuItems['sep2'];
	        delete contextMenuItems['link'];
	        delete contextMenuItems['sep3'];
	        // delete contextMenuItems['image'];
	        // delete contextMenuItems['sep4'];

	        contextMenuItems = $.extend(true, {}, contextMenuItems, tableMenuItems);
	    }

	    contextMenuObject.items = contextMenuItems;

	    return contextMenuObject;
	};

	ContextMenu.prototype.showContextMenu = function(e) {
	    if (this.contextMenuInstance) {
	        this.target = e.target;
	        this.contextMenuInstance.contextMenu({x : e.pageX, y: e.pageY});
	    }
	};

	ContextMenu.prototype.hideContextMenu = function() {
	    if (this.contextMenuInstance) {
	        this.contextMenuInstance.contextMenu('hide');
	    }
	};

	ContextMenu.prototype.getContextMenuInstance = function() {
	    return this.contextMenuInstance;
	};

	module.exports = ContextMenu;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);

	function HeperlinkDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;

	    this.dialogContentHTML = this.getDialogContents();

	    this.templateHTML = '' +
	        '<div class="'+Define.CLASS.DIALOG_DIALOG_MAIN+" "+Define.CLASS.DIALOG_HYPERLINK+'">' +
	            '<div class="'+Define.CLASS.DIALOG_HEADER+'">' +
	                '<div class="'+Define.CLASS.DIALOG_TITLE+'">'+Resource.hyperlinkDialog.title+'</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_CONTENTS+'">'
	                + this.dialogContentHTML + '' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_FOOTER+'">' +
	                '<ul class="'+Define.CLASS.DIALOG_BUTTONS+'">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(HeperlinkDialog.prototype, new AbstractDialog());

	HeperlinkDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.initHyperlinkControlButton();

	    this.$linkType.on('change', function(){
	        var linkType = _this.$linkType.val();

	        if (linkType === 'url') {
	            _this.$urlWrap.show();
	            _this.$bookmarkWrap.hide();

	        } else if (linkType === 'bookmark'){
	            _this.$urlWrap.hide();
	            _this.$bookmarkWrap.show();
	        }
	    });

	    this.$dNode.find("."+Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                var linkType = _this.$linkType.val();

	                if (linkType == 'url') {
	                    var textInputValue = _this.$urlTextInput.val();
	                    var urlInputValue = _this.$urlInput.val();
	                    var titleInputValue = _this.$urlTitleInput.val();
	                    var targetSelectValue = _this.$urlTargetSelect.val() || '';
	                    var idInputValue = _this.$urlIdInput.val();
	                    var classInputValue = _this.$urlClassInput.val();

	                    if (!_this.isValidURL(urlInputValue)){
	                        alert(Resource.hyperlinkDialog.msg_invalid_url);
	                    }else{
	                        _this.router.doOperation({
	                            type:"create",
	                            name:"hyperlink",
	                            value: {
	                                type : 'url',
	                                text : textInputValue || urlInputValue,
	                                url : urlInputValue,
	                                title : titleInputValue,
	                                target : targetSelectValue,
	                                id : idInputValue,
	                                className : classInputValue
	                            },
	                            range : _this.selectionRange
	                        });
	                        _this.closeDialog();
	                    }
	                } else {
	                    var bookmarkTextInputValue = _this.$bookmarkTextInput.val();
	                    var bookmarkListSelectValue = _this.$bookmarkListSelect.val() || '';

	                    if (!bookmarkListSelectValue.length) {
	                        alert(Resource.hyperlinkDialog.bookmark_invalid);
	                    } else {
	                        _this.router.doOperation({
	                            type:"create",
	                            name:"hyperlink",
	                            value: {
	                                type : 'bookmark',
	                                text : bookmarkTextInputValue || '#' + bookmarkListSelectValue,
	                                url : '#' + bookmarkListSelectValue
	                            },
	                            range : _this.selectionRange
	                        });
	                        _this.closeDialog();
	                    }
	                }
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	HeperlinkDialog.prototype.getDialogContents = function(){

	    return '' +
	        '<div class="' + Define.CLASS.HYPERLINK_TYPE_WRAP + '">' +
	            '<label class="' + Define.CLASS.HYPERLINK_TYPE_LABEL + '">' + Resource.hyperlinkDialog.linkType + '</label>' +
	            '<select class="' + Define.CLASS.HYPERLINK_TYPE_SELECT + '">' +
	                '<option value="url">' + Resource.hyperlinkDialog.urlType + '</option>' +
	                '<option value="bookmark">' + Resource.hyperlinkDialog.bookmarkType + '</option>' +
	            '</select>' +
	        '</div>' +

	        '<div class="' + Define.CLASS.HYPERLINK_TYPE_URL_WRAP + '">' +
	            '<table>' +
	                '<tbody>' +
	                    '<tr>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_URL_LABEL_WRAP + '">' + '<label class="' + Define.CLASS.HYPERLINK_TYPE_URL_LABEL + '">' + Resource.hyperlinkDialog.urlLabel + '</label>' + '</td>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_URL_INPUT_WRAP + '">' + '<input class="' + Define.CLASS.HYPERLINK_TYPE_URL_INPUT + '" type="text" value=""/></td>' +
	                    '</tr>' +
	                    '<tr>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_URL_LABEL_WRAP + '">' + '<label class="' + Define.CLASS.HYPERLINK_TYPE_URL_TEXT + '">' + Resource.hyperlinkDialog.urlText + '</label>' + '</td>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_URL_INPUT_WRAP + '">' + '<input class="' + Define.CLASS.HYPERLINK_TYPE_URL_TEXT_INPUT + '" type="text" value=""/></td>' +
	                    '</tr>' +
	                    '<tr>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_URL_LABEL_WRAP + '">' + '<label class="' + Define.CLASS.HYPERLINK_TYPE_URL_TITLE + '">' + Resource.hyperlinkDialog.urlTitle + '</label>' + '</td>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_URL_INPUT_WRAP + '">' + '<input class="' + Define.CLASS.HYPERLINK_TYPE_URL_TITLE_INPUT + '" type="text" value=""/></td>' +
	                    '</tr>' +
	                    '<tr>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_URL_LABEL_WRAP + '">' + '<label class="' + Define.CLASS.HYPERLINK_TYPE_URL_TARGET + '">' + Resource.hyperlinkDialog.urlTarget + '</label>' + '</td>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_URL_INPUT_WRAP + '">' +
	                            '<select class="' + Define.CLASS.HYPERLINK_TYPE_URL_TARGET_SELECT + '">' +
	                                '<option value="none">' + Resource.hyperlinkDialog.target_none + '</option>' +
	                                '<option value="_blank">' + Resource.hyperlinkDialog.target_blank + '</option>' +
	                                '<option value="_parent">' + Resource.hyperlinkDialog.target_parent + '</option>' +
	                                '<option value="_self">' + Resource.hyperlinkDialog.target_self + '</option>' +
	                                '<option value="_top">' + Resource.hyperlinkDialog.target_top + '</option>' +
	                            '</select>' +
	                        '</td>' +
	                    '</tr>' +
	                '</tbody>' +
	            '</table>' +
	            '<div class="' + Define.CLASS.HYPERLINK_TYPE_URL_PLUGIN_SEPARATE + '"></div>' +
	            '<table>' +
	                '<tbody>' +
	                    '<tr>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_URL_LABEL_WRAP + '">' + '<label class="' + Define.CLASS.HYPERLINK_TYPE_URL_ID + '">' + Resource.hyperlinkDialog.urlId + '</label>' + '</td>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_URL_INPUT_WRAP + '">' + '<input class="' + Define.CLASS.HYPERLINK_TYPE_URL_ID_INPUT + '" type="text" value=""/></td>' +
	                    '</tr>' +
	                    '<tr>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_URL_LABEL_WRAP + '">' + '<label class="' + Define.CLASS.HYPERLINK_TYPE_URL_CLASS + '">' + Resource.hyperlinkDialog.urlClass + '</label>' + '</td>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_URL_INPUT_WRAP + '">' + '<input class="' + Define.CLASS.HYPERLINK_TYPE_URL_CLASS_INPUT + '" type="text" value=""/></td>' +
	                    '</tr>' +
	                '</tbody>' +
	            '</table>' +
	        '</div>' +

	        '<div class="' + Define.CLASS.HYPERLINK_TYPE_BOOKMARK_WRAP + '">' +
	            '<table>' +
	                '<tbody>' +
	                    '<tr>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_BOOKMARK_LABEL_WRAP + '">' + '<label class="' + Define.CLASS.HYPERLINK_TYPE_BOOKMARK_LIST_LABEL + '">' + Resource.hyperlinkDialog.bookmarkList + '</label>' + '</td>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_BOOKMARK_INPUT_WRAP + '">' +
	                            '<select class="' + Define.CLASS.HYPERLINK_TYPE_BOOKMARK_LIST_SELECT + '">' + '</select>' +
	                        '</td>' +
	                    '</tr>' +
	                    '<tr>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_BOOKMARK_LABEL_WRAP + '">' + '<label class="' + Define.CLASS.HYPERLINK_TYPE_BOOKMARK_TEXT_LABEL + '">' + Resource.hyperlinkDialog.bookmarkTitle + '</label>' + '</td>' +
	                        '<td class="' + Define.CLASS.HYPERLINK_TYPE_BOOKMARK_INPUT_WRAP + '">' + '<input class="' + Define.CLASS.HYPERLINK_TYPE_BOOKMARK_TEXT_INPUT + '" type="text" value=""/></td>' +
	                    '</tr>' +
	                '</tbody>' +
	            '</table>' +
	        '</div>';
	};

	HeperlinkDialog.prototype.initHyperlinkControlButton = function(){
	    var _this = this;

	    this.$linkType = this.$dNode.find('.' + Define.CLASS.HYPERLINK_TYPE_SELECT);
	    this.$urlWrap = this.$dNode.find('.' + Define.CLASS.HYPERLINK_TYPE_URL_WRAP);
	    this.$bookmarkWrap = this.$dNode.find('.' + Define.CLASS.HYPERLINK_TYPE_BOOKMARK_WRAP);

	    this.$urlInput = this.$urlWrap.find('.' + Define.CLASS.HYPERLINK_TYPE_URL_INPUT);
	    this.$urlTextInput = this.$urlWrap.find('.' + Define.CLASS.HYPERLINK_TYPE_URL_TEXT_INPUT);
	    this.$urlTitleInput = this.$urlWrap.find('.' + Define.CLASS.HYPERLINK_TYPE_URL_TITLE_INPUT);
	    this.$urlTargetSelect = this.$urlWrap.find('.' + Define.CLASS.HYPERLINK_TYPE_URL_TARGET_SELECT);
	    this.$urlIdInput = this.$urlWrap.find('.' + Define.CLASS.HYPERLINK_TYPE_URL_ID_INPUT);
	    this.$urlClassInput = this.$urlWrap.find('.' + Define.CLASS.HYPERLINK_TYPE_URL_CLASS_INPUT);

	    this.$bookmarkTextInput = this.$bookmarkWrap.find('.' + Define.CLASS.HYPERLINK_TYPE_BOOKMARK_TEXT_INPUT);
	    this.$bookmarkListSelect = this.$bookmarkWrap.find('.' + Define.CLASS.HYPERLINK_TYPE_BOOKMARK_LIST_SELECT);
	};

	HeperlinkDialog.prototype.setHyperlinkClearInput = function(){
	    this.$linkType[0].selectedIndex = 0;
	    this.$urlWrap.show();
	    this.$bookmarkWrap.hide();

	    this.$urlInput.val('http://');
	    this.$urlTextInput.val('');
	    this.$urlTitleInput.val('');
	    this.$urlTargetSelect[0].selectedIndex = 0;
	    this.$urlIdInput.val('');
	    this.$urlClassInput.val('');

	    this.$bookmarkTextInput.val('');

	    var bookmarkViews = this.editorElement.find('.' + Define.CLASS.KK_BOOKMARK_VIEW);

	    var optionHTML = '';

	    for (var i = 0, length = bookmarkViews.length ; i < length ; i++) {
	        var bookmark = bookmarkViews[i];

	        optionHTML += '<option val="' + bookmark.id + '">' + bookmark.id + '</option>';
	    }

	    // if (optionHTML) {
	        this.$bookmarkListSelect.html(optionHTML);
	        this.$bookmarkListSelect[0].selectedIndex = 0;
	    // }
	};

	HeperlinkDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("."+Define.CLASS.DIALOG_DIALOG_MAIN).hide();
	    var $dialog = this.$dialogNode.find("."+Define.CLASS.DIALOG_HYPERLINK);
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setHyperlinkClearInput();

	    this.setSelectionRange();

	    var $selected = this.editorElement.find("." + Define.CLASS.SELECTED);

	    var $hyperlinkNode = null;

	    if (!$selected.length) {

	        var range = this.$dom.selection.getOpNode(this.selectionRange.p[0], this.selectionRange.r[0]);

	        $hyperlinkNode = $(range.container).closest('[href]');

	        if ($hyperlinkNode.length) {
	            $selected = $hyperlinkNode.parent('span');
	            this.$dom.selection.applyRangeOfSelectedClass($hyperlinkNode);
	        }
	    }

	    if ($selected.length > 0){
	        $selected[0].normalize();

	        var $hyperlinkNodes = $selected.find("[href]");

	        if ($hyperlinkNodes.length) {

	            var $firstHyperlink = $selected.first().find("[href]");

	            if ($firstHyperlink.length && $firstHyperlink[0] === $hyperlinkNodes[0]) {

	                $hyperlinkNode = $hyperlinkNodes.eq(0);

	                this.$dom.selection.removeSelected();

	                this.$dom.selection.applyRangeOfSelectedClass($hyperlinkNode);

	                this.$urlTextInput.val($hyperlinkNode.text());
	                this.$bookmarkTextInput.val($hyperlinkNode.text());

	                var href = $hyperlinkNodes.attr("href");

	                if (href.indexOf('#') === 0) {
	                    //TODO : Bookmark Link
	                    this.$linkType.val('bookmark');
	                    this.$urlWrap.hide();
	                    this.$bookmarkWrap.show();

	                    href = href.slice(1, href.length);
	                    this.$bookmarkListSelect.val(href);

	                } else {
	                    this.$urlInput.val(href);

	                    var title = $hyperlinkNode.attr(Define.ATTR.TITLE) || '';
	                    var target = $hyperlinkNode.attr(Define.ATTR.TARGET) || 'none';
	                    var id = $hyperlinkNode.attr(Define.ATTR.ID) || '';
	                    var className = $hyperlinkNode.attr(Define.ATTR.CLASS) || '';

	                    className = className.replace(Define.CLASS.SELECTED, '');

	                    this.$urlTitleInput.val(title);
	                    this.$urlTargetSelect.val(target);
	                    this.$urlIdInput.val(id);
	                    this.$urlClassInput.val(className);
	                }
	            }
	        } else {
	            var selectedTEXT = $selected.text();

	            this.$urlTextInput.val(selectedTEXT);
	            this.$bookmarkTextInput.val(selectedTEXT);
	        }
	    }

	    this.setDialogPosition($dialog);
	};

	HeperlinkDialog.prototype.isValidURL = function (value){
	    return /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
	};

	module.exports = HeperlinkDialog;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	function AbstractDialog(){
	    this.contentArea = null;
	}

	AbstractDialog.prototype.stopEvent = function(e) {
	    if(e.preventDefault) {e.preventDefault();}
	    if(e.stopPropagation) {e.stopPropagation();}

	    e.returnValue = false;
	    e.cancelBubble = true;
	    e.stopped = true;
	};

	AbstractDialog.prototype.setMoveEvent = function() {
	    var _this = this;

	    var selected = null,
	        x_pos = 0, y_pos = 0,
	        x_elem = 0, y_elem = 0;

	    var mouseup = function (e){
	        selected = null;

	        $(document).off('mouseup', mouseup).off('mousemove', mousemove);

	        return false;
	    };

	    var mousemove = function(e){
	        if (selected !== null) {
	            var $window = $(window);

	            var buffer = 20;

	            x_pos = document.all ? window.event.clientX : e.pageX;
	            y_pos = document.all ? window.event.clientY : e.pageY;

	            var left = (x_pos - x_elem);
	            var top = (y_pos - y_elem);

	            var selected_width = _this.$dNode.width() + buffer;
	            var selected_height = _this.$dNode.height() + buffer;

	            var window_width = $window.width();
	            var window_height = $window.height();

	            if (selected_width + left > window_width) {
	                left = window_width - selected_width;
	            }

	            if (selected_height + top > window_height) {
	                top = window_height - selected_height;
	            }

	            if (left < 0) {
	                left = 0;
	            }

	            if (top < 0) {
	                top = 0;
	            }

	            selected.style.left = left + 'px';
	            selected.style.top = top + 'px';
	        }

	        _this.stopEvent(e);

	        return false;
	    };

	    this.$dNode.on('mousedown', function(e){
	        var $target = $(e.target);

	        if ($target.hasClass(Define.CLASS.DIALOG_HEADER) || $target.closest('.' + Define.CLASS.DIALOG_HEADER).length) {
	            selected = _this.$dNode[0];

	            x_pos = document.all ? window.event.clientX : e.pageX;
	            y_pos = document.all ? window.event.clientY : e.pageY;

	            x_elem = x_pos - selected.offsetLeft;
	            y_elem = y_pos - selected.offsetTop;

	            $(document).on('mouseup', mouseup).on('mousemove', mousemove);
	        }
	    });
	};

	AbstractDialog.prototype.setDialogPosition = function($dialog) {
	    $dialog.css('visibility', 'hidden');
	    $dialog.show();
	    this.$dialogNode.show();

	    this.setAccordion($dialog);

	    $dialog.css("top", Math.max(0, ((this.editorElement.height() - $dialog.height()) / 2) + $(window).scrollTop()) + "px");
	    $dialog.css("left", Math.max(0, ((this.editorElement.width() - $dialog.width()) / 2) + $(window).scrollLeft()) + "px");

	    $dialog.css('visibility', '');
	};

	AbstractDialog.prototype.setAccordion = function($dialog) {
	    var $accordionFields = $dialog.find('.' + Define.CLASS.ACCORDION_FIELD);

	    if ($accordionFields.length) {
	        for (var idx = 0, length = $accordionFields.length; idx < length; idx++) {
	            var $accordionField = $accordionFields.eq(idx);
	            var $accordionWrap = $accordionField.parent();
	            var $accordionBar = $accordionWrap.find('.' + Define.CLASS.ACCORDION_BAR);

	            if (!$accordionWrap.hasClass(Define.CLASS.ACCORDION_WRAP)) {
	                $accordionWrap = $('<div class="' + Define.CLASS.ACCORDION_WRAP + '"/>');

	                $accordionField.before($accordionWrap);
	                $accordionWrap.append($accordionField);

	                $accordionBar = $('<div class="' + Define.CLASS.ACCORDION_BAR + '"/>');
	                $accordionWrap.append($accordionBar);

	                (function($bar, $field){
	                    $bar.on('click', function(){
	                        $field.slideToggle( "slow", function() {
	                            if ($field.css('display') == 'none') {
	                                $bar.html('▼ Open');
	                            } else {
	                                $bar.html('▲ Close');
	                            }
	                        });
	                    });
	                })($accordionBar, $accordionField);
	            }

	            if ($accordionField.hasClass(Define.CLASS.DEFAULT_OPEN_FIELD)) {
	                $accordionBar.html('▲ Close');
	                $accordionField.show();
	            } else {
	                $accordionBar.html('▼ Open');
	                $accordionField.hide();
	            }
	        }
	    }
	};

	AbstractDialog.prototype.closeDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();
	    this.$dialogNode.hide();
	};

	AbstractDialog.prototype.setSelectionRange = function(){
	    this.selectionRange = this.$dom.selection.get();
	    this.windowRange = this.$dom.selection.getRange();

	    if (!this.contentArea) {
	        this.contentArea = $(this.editorElement).find('.' + Define.CLASS.CONTENTS);
	    }

	    this.contentArea.attr(Define.ATTR.CONTENT_EDIT_ABLE, 'false');
	};

	AbstractDialog.prototype.setCloseButton = function(){
	    this.closeNode = this.$dNode.find('.' + Define.CLASS.DIALOG_CLOSE);

	    var _this = this;
	    this.closeNode.on('click', function(){
	        _this.closeDialog();
	    });
	};

	module.exports = AbstractDialog;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var WidgetItems = __webpack_require__(58);
	var Resource = __webpack_require__(13);

	var bufferSize = 10;

	function SymbolsDialog(editorElement, $domObject, router) {
	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.router = router;

	    this.$dialogNode = this.editorElement.find("."+Define.CLASS.DIALOG);
	    this.symbolsContents = null;
	    this.$dNode = null;

	    this.templateHTML = '' +
	        '<div class="'+Define.CLASS.DIALOG_DIALOG_MAIN+" "+Define.CLASS.DIALOG_SYMBOLS+'">' +
	            '<div class="'+Define.CLASS.DIALOG_HEADER+'">' +
	                '<div class="'+Define.CLASS.DIALOG_TITLE+'">'+ Resource.symbolsDialog.title +'</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_CONTENTS+'">' +
	                '<div class="symbols_contents_wrap">' +
	                    '<div class="symbols_contents"></div>' +
	                    '<div class="symbols_footer">' +
	                        '<label>' + Resource.symbolsDialog.selectSymbol + ' : </label>' +
	                        '<input type="text" class="' + Define.CLASS.SELECTED_SYMBOL + '" value="" />' +
	                        '<div class="' + Define.CLASS.SELECTED_SYMBOL_TEXT + '" ></div>' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_FOOTER+'">' +
	                '<ul class="'+Define.CLASS.DIALOG_BUTTONS+'">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(SymbolsDialog.prototype, new AbstractDialog());

	SymbolsDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.symbol = this.$dNode.find('.' + Define.CLASS.SELECTED_SYMBOL);
	    this.symbolText = this.$dNode.find('.' + Define.CLASS.SELECTED_SYMBOL_TEXT);

	    if($.browser.msie) {
	        this.symbolText.css('font-size', '13px');
	    }

	    var maxCnt = 0;
	    $.each(WidgetItems.symbols, function(){
	        var length = this.length;
	        if (maxCnt < length) {
	            maxCnt = length;
	        }
	    });

	    var ulNode = $("<ul></ul>")[0];
	    for(var symbol in WidgetItems.symbols){
	        var items = $('<li class="symbol_items"></li>')[0];
	        var $itemButton = $('<a class="symbol_item"><span>'+Resource.symbolsDialog[symbol]+'</span></a>');
	        var $itemListNode = $('<div class="symbol_item_list"></div>');
	        var cnt = 0;
	        var itemContents = $('<div class="symbol_item_contents"></div>')[0];
	        for (var c = 0; c < maxCnt; c++) {
	            var _item = WidgetItems.symbols[symbol][cnt];
	            if (!_item) {
	                _item = "&nbsp;";
	            }
	            itemContents.appendChild($('<div class="item"><span>' + _item + '</span></div>')[0]);
	            cnt++;
	        }

	        $itemListNode.append(itemContents);
	        items.appendChild($itemButton[0]);
	        items.appendChild($itemListNode[0]);

	        ulNode.appendChild(items);
	    }

	    this.$dNode.find(".symbols_contents").append(ulNode);
	    this.$dNode.find(".symbols_contents").find(".symbol_item").bind("mousedown", function(){
	        _this._hideSymbolTab();
	        _this._showSymbolTab($(this).parents(".symbol_items")[0]);
	    });

	    this.$dNode.find(".symbols_contents").find(".symbol_item_contents").find(".item").bind("mousedown", function(e){
	        var character = $(this).find("span")[0].innerHTML;

	        if (!(character == " " || character == "&nbsp;")) {
	            var $selectedInput = _this.symbol;

	            _this.symbolText.text($selectedInput[0].value + character);

	            if (_this.symbolText.width() > $selectedInput.width() - bufferSize) {
	                return;
	            }

	            // if ($selectedInput[0].value.length >= this.MAX_LENGTH) {
	            //     return;
	            // }

	            $selectedInput[0].value = $selectedInput[0].value + character;
	        }
	    });

	    this.$dNode.find("." + Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){

	                var value = $(_this.$dNode).find("." + Define.CLASS.SELECTED_SYMBOL).val();

	                if (value && value.length > 0){

	                    var selInfo = _this.selectionRange;

	                    if (!selInfo) {
	                        _this.$dom.selection.setOp({
	                            p : [0,0],
	                            r : [0,0]
	                        });

	                        _this.selectionRange = selInfo = _this.$dom.selection.get();
	                    }

	                    _this.router.doOperation({
	                        type:"create",
	                        name:"symbol",
	                        value: value,
	                        range : {
	                            p : selInfo.p,
	                            r : selInfo.r,
	                            s : "text"
	                        }
	                    });
	                }

	                _this.closeDialog();
	                //적용
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    _this._showSymbolTab(this.$dNode.find(".symbol_items")[0]);
	    return this;
	};

	SymbolsDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("."+Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("."+Define.CLASS.DIALOG_SYMBOLS);
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.symbol.val("");
	    this.symbolText.text("");

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	SymbolsDialog.prototype._showSymbolTab = function(node){
	    $(node).find(".symbol_item").addClass("active");
	    $(node).find(".symbol_item_list").show();
	};

	SymbolsDialog.prototype._hideSymbolTab = function(){
	    this.$dialogNode.find(".symbol_item").removeClass("active");
	    this.$dialogNode.find(".symbol_item_list").hide();
	};

	module.exports = SymbolsDialog;

/***/ }),
/* 58 */
/***/ (function(module, exports) {

	module.exports = {
	    heading: [
	        {name: "기본값", value: "default"},
	        {name: "Heading(h1)", value: "h1"},
	        {name: "Heading(h2)", value: "h2"},
	        {name: "Heading(h3)", value: "h3"},
	        {name: "Heading(h4)", value: "h4"},
	        {name: "Heading(h5)", value: "h5"},
	        {name: "Heading(h6)", value: "h6"}
	    ],

	    fontFamily: [
	        {name: "나눔 고딕", value: "나눔고딕, NanumGothic"},
	        {name: "굴림", value: "굴림"},
	        {name: "돋움", value: "돋움"},
	        {name: "바탕", value: "바탕"},
	        {name: "궁서", value: "궁서"},
	        {name: "맑은 고딕", value: "맑은 고딕"},
	        {name: "Arial", value: "Arial"},
	        {name: "Courier New", value: "Courier New"},
	        {name: "Georgia", value: "Geirgia"},
	        {name: "Tahoma", value: "Tahoma"},
	        {name: "Times New Roman", value: "Times New Roman"},
	        {name: "Verdana", value: "Verdana"}
	    ],

	    fontSize: [
	        {name: "8px", value: 8},
	        {name: "9px", value: 9},
	        {name: "10px", value: 10},
	        {name: "11px", value: 11},
	        {name: "12px", value: 12},
	        {name: "13px", value: 13},
	        {name: "14px", value: 14},
	        {name: "16px", value: 16},
	        {name: "18px", value: 18},
	        {name: "20px", value: 20},
	        {name: "22px", value: 22},
	        {name: "24px", value: 24},
	        {name: "26px", value: 26},
	        {name: "36px", value: 36},
	        {name: "54px", value: 54},
	        {name: "72px", value: 72}
	    ],

	    numbered_list : [
	        {name: "숫자 (1,2,3...)", value: "decimal", css: ""},
	        {name: "숫자 (01,02,03...)", value: "decimal_leading_zero", css: ""},
	        {name: "알파벳 소문자 (a,b,c...)", value: "lower_alpha", css: ""},
	        {name: "알파벳 대문자 (A,B,C...)", value: "upper_alpha", css: ""},
	        {name: "로마 소문자 (ⅰ,ⅱ,ⅲ...)", value: "lower_roman", css: ""},
	        {name: "로마 대문자 (Ⅰ,Ⅱ,Ⅲ)", value: "upper_roman", css: ""},
	        {name: "그리스 소문자 (α,β,γ...)", value: "lower_greek", css: ""}

	    ],

	    bullet_list : [
	        {name: "● 채워진 원", value: "disc", css: ""},
	        {name: "○ 비어있는 원", value: "circle", css: ""},
	        {name: "■ 사각형", value: "square", css: ""}
	    ],

	    line_height: [
	        {name: "1.0", value: "1", css: ""},
	        {name: "1.2", value: "1.2", css: ""},
	        {name: "1.5", value: "1.5", css: ""},
	        {name: "2.0", value: "2", css: ""},
	        {name: "3.0", value: "3", css: ""}
	    ],

	    symbols: {
	        symbols_general: ["！", "＇", "，", "．", "／", "：", "；", "？", "＾", "＿", "｀", "｜", "、", "。", "·", "‥", "…", "¨", "〃", "­", "―", "∥", "＼", "∼", "´", "～", "ˇ", "˘", "˝", "˚", "˙", "¸", "˛", "¡", "¿", "ː", "＂", "（", "）", "［", "］", "｛", "｝", "‘", "’", "“", "”", "〔", "〕", "〈", "〉", "《", "》", "「", "」", "『", "』", "【", "】", "＋", "－", "＜", "＝", "＞", "±", "×", "÷", "≠", "≤", "≥", "∞", "∴", "♂", "♀", "∠", "⊥", "⌒", "∂", "∇", "≡", "≒", "≪", "≫", "√", "∽", "∝", "∵", "∫", "∬", "∈", "∋", "⊆", "⊇", "⊂", "⊃", "∪", "∩", "∧", "∨", "￢", "⇒", "⇔", "∀", "∃", "∮", "∑", "∏", "＃", "＆", "＊", "＠", "§", "※", "☆", "★", "○", "●", "◎", "◇", "◆", "□", "■", "△", "▲", "▽", "▼", "→", "←", "↑", "↓", "↔", "〓", "◁", "◀", "▷", "▶", "♤", "♠", "♡", "♥", "♧", "♣", "⊙", "◈", "▣", "◐", "◑", "▒", "▤", "▥", "▨", "▧", "▦", "▩", "♨", "☏", "☎", "☜", "☞", "¶", "†", "‡", "↕", "↗", "↙", "↖", "↘", "♩", "♪", "♬", "㉿", "㈜", "№", "㏇", "™", "㏂", "㏘", "℡", "ª", "º", "＄", "％", "￦"],
	        symbols_number: ["０", "１", "２", "３", "４", "５", "６", "７", "８", "９", "ⅰ", "ⅱ", "ⅲ", "ⅳ", "ⅴ", "ⅵ", "ⅶ", "ⅷ", "ⅸ", "ⅹ", "Ⅰ", "Ⅱ", "Ⅲ", "Ⅳ", "Ⅴ", "Ⅵ", "Ⅶ", "Ⅷ", "Ⅸ", "Ⅹ", "½", "⅓", "⅔", "¼", "¾", "⅛", "⅜", "⅝", "⅞", "¹", "²", "³", "⁴", "ⁿ", "₁", "₂", "₃", "₄", "＄", "％", "￦", "Ｆ", "′", "″", "℃", "A", "￠", "￡", "￥", "¤", "℉", "‰", "㎕", "㎖", "㎗", "ℓ", "㎘", "㏄", "㎣", "㎤", "㎥", "㎦", "㎙", "㎚", "㎛", "㎜", "㎝", "㎞", "㎟", "㎠", "㎡", "㎢", "㏊", "㎍", "㎎", "㎏", "㏏", "㎈", "㎉", "㏈", "㎧", "㎨", "㎰", "㎱", "㎲", "㎳", "㎴", "㎵", "㎶", "㎷", "㎸", "㎹", "㎀", "㎁", "㎂", "㎃", "㎺", "㎻", "㎼", "㎽", "㎾", "㎿", "㎐", "㎑", "㎒", "㎓", "㎔", "Ω", "㏀", "㏁", "㎊", "㎋", "㎌", "㏖", "㏅", "㎭", "㎮", "㎯", "㏛", "㎩", "㎪", "㎫", "㎬", "㏝", "㏐", "㏃", "㏉", "㏜", "㏆"],
	        symbols_regrar: ["─", "│", "┌", "┐", "┘", "└", "├", "┬", "┤", "┴", "┼", "━", "┃", "┏", "┓", "┛", "┗", "┣", "┳", "┫", "┻", "╋", "┠", "┯", "┨", "┷", "┿", "┝", "┰", "┥", "┸", "╂", "┒", "┑", "┚", "┙", "┖", "┕", "┎", "┍", "┞", "┟", "┡", "┢", "┦", "┧", "┩", "┪", "┭", "┮", "┱", "┲", "┵", "┶", "┹", "┺", "┽", "┾", "╀", "╁", "╃", "╄", "╅", "╆", "╇", "╈", "╉", "╊"],
	        symbols_circleChar: ["㉠", "㉡", "㉢", "㉣", "㉤", "㉥", "㉦", "㉧", "㉨", "㉩", "㉪", "㉫", "㉬", "㉭", "㉮", "㉯", "㉰", "㉱", "㉲", "㉳", "㉴", "㉵", "㉶", "㉷", "㉸", "㉹", "㉺", "㉻", "㈀", "㈁", "㈂", "㈃", "㈄", "㈅", "㈆", "㈇", "㈈", "㈉", "㈊", "㈋", "㈌", "㈍", "㈎", "㈏", "㈐", "㈑", "㈒", "㈓", "㈔", "㈕", "㈖", "㈗", "㈘", "㈙", "㈚", "㈛", "ⓐ", "ⓑ", "ⓒ", "ⓓ", "ⓔ", "ⓕ", "ⓖ", "ⓗ", "ⓘ", "ⓙ", "ⓚ", "ⓛ", "ⓜ", "ⓝ", "ⓞ", "ⓞ", "ⓟ", "ⓠ", "ⓡ", "ⓢ", "ⓣ", "ⓤ", "ⓥ", "ⓦ", "ⓧ", "ⓨ", "ⓩ", "①", "②", "③", "④", "⑤", "⑥", "⑦", "⑧", "⑨", "⑩", "⑪", "⑫", "⑬", "⑭", "⑮", "⒜", "⒝", "⒞", "⒟", "⒠", "⒡", "⒢", "⒣", "⒤", "⒥", "⒦", "⒧", "⒨", "⒩", "⒪", "⒫", "⒬", "⒭", "⒮", "⒯", "⒰", "⒱", "⒲", "⒳", "⒴", "⒵", "⑴", "⑵", "⑶", "⑷", "⑸", "⑹", "⑺", "⑻", "⑼", "⑽", "⑾", "⑿", "⒀", "⒁", "⒂"],
	        symbols_kor: ["ㄱ", "ㄲ", "ㄳ", "ㄴ", "ㄵ", "ㄶ", "ㄷ", "ㄸ", "ㄹ", "ㄺ", "ㄻ", "ㄼ", "ㄽ", "ㄾ", "ㄿ", "ㅀ", "ㅁ", "ㅂ", "ㅃ", "ㅄ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅉ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ", "ㅏ", "ㅐ", "ㅑ", "ㅒ", "ㅓ", "ㅔ", "ㅕ", "ㅖ", "ㅗ", "ㅘ", "ㅙ", "ㅚ", "ㅛ", "ㅜ", "ㅝ", "ㅞ", "ㅟ", "ㅠ", "ㅡ", "ㅢ", "ㅣ", "ㅥ", "ㅦ", "ㅧ", "ㅨ", "ㅩ", "ㅪ", "ㅫ", "ㅬ", "ㅭ", "ㅮ", "ㅯ", "ㅰ", "ㅱ", "ㅲ", "ㅲ", "ㅳ", "ㅴ", "ㅵ", "ㅶ", "ㅷ", "ㅸ", "ㅹ", "ㅺ", "ㅻ", "ㅼ", "ㅽ", "ㅾ", "ㅿ", "ㆀ", "ㆁ", "ㆂ", "ㆃ", "ㆄ", "ㆅ", "ㆆ", "ㆇ", "ㆈ", "ㆉ", "ㆊ", "ㆋ", "ㆌ", "ㆍ", "ㆎ"],
	        symbols_latini: ["Α", "Β", "Γ", "Δ", "Ε", "Ζ", "Η", "Θ", "Ι", "Κ", "Λ", "Μ", "Ν", "Ξ", "Ο", "Π", "Ρ", "Σ", "Τ", "Υ", "Φ", "Χ", "Ψ", "Ω", "α", "β", "γ", "δ", "ε", "ζ", "η", "θ", "ι", "κ", "λ", "μ", "ν", "ξ", "ο", "π", "ρ", "σ", "τ", "υ", "φ", "χ", "ψ", "ω", "Æ", "Ð", "Ħ", "Ĳ", "Ŀ", "Ł", "Ø", "Œ", "Þ", "Ŧ", "Ŋ", "æ", "đ", "ð", "ħ", "ı", "ĳ", "ĸ", "ŀ", "ł", "ø", "œ", "ß", "þ", "ŧ", "ŋ", "ŉ", "А", "Б", "В", "Г", "Д", "Е", "Ё", "Ж", "З", "И", "Й", "К", "Л", "М", "Н", "О", "П", "Р", "С", "Т", "У", "Ф", "Х", "Ц", "Ч", "Ш", "Щ", "Ъ", "Ы", "Ь", "Э", "Ю", "Я", "а", "б", "в", "г", "д", "е", "ё", "ж", "з", "и", "й", "к", "л", "м", "н", "о", "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ъ", "ы", "ь", "э", "ю", "я"],
	        symbols_jap: ["ぁ", "あ", "ぃ", "い", "ぅ", "う", "ぇ", "え", "ぉ", "お", "か", "が", "き", "ぎ", "く", "ぐ", "け", "ぉ", "こ", "ご", "さ", "ざ", "し", "じ", "す", "ず", "せ", "ぜ", "そ", "ぞ", "た", "だ", "ち", "ぢ", "っ", "つ", "づ", "て", "で", "と", "ど", "な", "に", "ぬ", "ね", "の", "は", "ば", "ぱ", "ひ", "び", "ぴ", "ふ", "ぶ", "ぷ", "へ", "べ", "ぺ", "ほ", "ぼ", "ぽ", "ま", "み", "め", "も", "ゃ", "や", "ゅ", "ゆ", "ょ", "よ", "ら", "り", "る", "れ", "ろ", "ゎ", "わ", "ゐ", "ゑ", "を", "ん", "ァ", "ア", "ィ", "イ", "ゥ", "ウ", "ェ", "エ", "ォ", "オ", "カ", "ガ", "キ", "ギ", "ク", "グ", "ケ", "ゲ", "コ", "ゴ", "サ", "ザ", "シ", "ジ", "ス", "ズ", "セ", "ゼ", "ソ", "ゾ", "タ", "ダ", "チ", "ヂ", "ッ", "ツ", "ヅ", "テ", "デ", "ト", "ド", "ナ", "ニ", "ヌ", "ネ", "ノ", "ハ", "バ", "パ", "ヒ", "ビ", "ピ", "フ", "ブ", "プ", "ヘ", "ベ", "ペ", "ホ", "ボ", "ポ", "マ", "ミ", "ム", "メ", "モ", "ャ", "ヤ", "ュ", "ユ", "ョ", "ヨ", "ラ", "リ", "ル", "レ", "ロ", "ヮ", "ワ", "ヰ", "ヱ", "ヲ", "ン", "ヴ", "ヵ", "ヶ"],
	        symbols_normal: ["Ａ", "Ｂ", "Ｃ", "Ｄ", "Ｅ", "Ｆ", "Ｇ", "Ｈ", "Ｉ", "Ｊ", "Ｋ", "Ｌ", "Ｍ", "Ｎ", "Ｏ", "Ｐ", "Ｑ", "Ｒ", "Ｓ", "Ｔ", "Ｕ", "Ｖ", "Ｗ", "Ｘ", "Ｙ", "Ｚ", "ａ", "ｂ", "ｃ", "ｄ", "ｅ", "ｆ", "ｇ", "ｈ", "ｉ", "ｊ", "ｋ", "ｌ", "ｍ", "ｎ", "ｏ", "ｐ", "ｑ", "ｒ", "ｓ", "ｔ", "ｕ", "ｖ", "ｗ", "ｘ", "ｙ", "ｚ", "０", "１", "２", "３", "４", "５", "６", "７", "８", "９", "！", "＠", "＃", "＄", "％", "＾", "＆", "＊", "（", "）", "－", "＿", "＋", "＝", "｜", "￦", "＜", "＞", "［", "］", "｛", "｝", "＇", "＂", "：", "；", "？", "，", "．", "／", "｀", "∼"]
	    },


	    cell_border_size: [
	        {name: "0.75pt", value: "0.75pt"},
	        {name: "1.25pt", value: "1.25pt"},
	        {name: "2.25pt", value: "2.25pt"},
	        {name: "3pt", value: "3pt"},
	        {name: "3.25pt", value: "3.75pt"},
	        {name: "4.25pt", value: "4.25pt"},
	        {name: "5.25pt", value: "5.25pt"},
	        {name: "6pt", value: "6pt"}
	    ],

	    cell_border_style: [
	        {name: "테두리 없음", value: "none"},
	        {name: "Solid", value: "solid"},
	        {name: "Dotted", value: "dotted"},
	        {name: "Dashed", value: "dashed"},
	        {name: "double", value: "double"}
	    ],

	    imageOutline: [
	        {
	            name: "",
	            value: "simple|none",
	            css: "imageOutlineNone",
	            type: "image",
	            key: "borderStyleCompound|borderStyleDashed"
	        },
	        {
	            name: "",
	            value: "simple|solid",
	            css: "imageOutlineSolid",
	            type: "image",
	            key: "borderStyleCompound|borderStyleDashed"
	        },
	        {
	            name: "",
	            value: "simple|dashed",
	            css: "imageOutlineDash",
	            type: "image",
	            key: "borderStyleCompound|borderStyleDashed"
	        },
	        {
	            name: "",
	            value: "simple|dotted",
	            css: "imageOutlineDot",
	            type: "image",
	            key: "borderStyleCompound|borderStyleDashed"
	        },
	        {
	            name: "",
	            value: "double|double",
	            css: "imageOutlineDouble",
	            type: "image",
	            key: "borderStyleCompound|borderStyleDashed"
	        }
	    ],

	    imageLineWidth: [
	        {name: "1px", value: "1", css: "", type: "image", key: "borderWidth"},
	        {name: "2px", value: "2", css: "", type: "image", key: "borderWidth"},
	        {name: "3px", value: "3", css: "", type: "image", key: "borderWidth"},
	        {name: "4px", value: "4", css: "", type: "image", key: "borderWidth"},
	        {name: "5px", value: "5", css: "", type: "image", key: "borderWidth"},
	        {name: "6px", value: "6", css: "", type: "image", key: "borderWidth"}
	    ]
	};

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);
	var HyperlinkDialog = __webpack_require__(55);
	var _AbstractUploadDialog = __webpack_require__(60);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);

	function ImageDialog(editorElement, $domObject, router) {
	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.selInfo = null;

	    this.defaultImageSet = null;

	    this.defaultErrorImageSrc = "";

	    this.dialogContentHTML = this.getDialogContents();

	    this.templateHTML = '' +
	        '<div class="' + Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_IMAGE + '">' +
	            '<div class="' + Define.CLASS.DIALOG_HEADER + '">' +
	                '<div class="' + Define.CLASS.DIALOG_TITLE + '">' + Resource.imageDialog.insert_title + '</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_CONTENTS + '">' +
	                '<div class="' + Define.CLASS.IMAGE_DIALOG_TAB_MENUS + '">' +
	                    '<div class="' + Define.CLASS.IMAGE_DIALOG_TAB_MENU_ITEM + ' ' + Define.CLASS.IMAGE_DIALOG_TAB_MENU_COMMON + ' ' + Define.CLASS.IMAGE_DIALOG_TAB_MENU_ON + '">' + Resource.imageDialog.tab_common + '</div>' +
	                    '<div class="' + Define.CLASS.IMAGE_DIALOG_TAB_MENU_ITEM + ' ' + Define.CLASS.IMAGE_DIALOG_TAB_MENU_HYPERLINK + '">' + Resource.imageDialog.tab_hyperlink + '</div>' +
	                '</div>' +
	                '<div class="' + Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS + '">' +
	                    '<div class="' + Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_COMMON + ' ' +  Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_ON + '">' +
	                        '<div class="' + Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_PATH_PROPERTY_FIELD + '">' +
	                            '<table class="' + Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_PATH_TABLE_SET + '">' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:80%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">' + Resource.imageDialog.image_url_path + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' +
	                                            '<input type="text" class="' + Define.CLASS.FILE_OPEN_PATH_INPUT + '">' +
	                                            '<label class="' + Define.CLASS.FILE_OPEN_INPUT_LABEL + '">' + Resource.imageDialog.file_input_label  + '</label>' +

	                                            (typeof window.FormData === 'undefined' ? '<form class="' + Define.CLASS.UPLOAD_FORM + '" method="post" enctype="multipart/form-data" action="">' : '') +
	                                            '<input name="' + Define.NAME.UPLOAD_IMAGE_TYPE + '" type="file" accept="'  + '.' + Define.IMAGE_TYPE_FILES.join(',.') + '" class="' + Define.CLASS.FILE_OPEN_INPUT + '">' +
	                                            (typeof window.FormData === 'undefined' ? '</form>' : '') +

	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_title + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_TITLE_INPUT + '" /></td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_alt + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_ALT_INPUT + '" /></td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                        '<div class="' + Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_STYLE_PROPERTY_FIELD + '">' +
	                            '<table class="' + Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_STYLE_TABLE_SET + '">' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_width + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_WIDTH_INPUT + '" /> px</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_height + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_HEIGHT_INPUT + '" /> px</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_margin_left + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_MARGIN_LEFT_INPUT + '" /> px</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_margin_right + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_MARGIN_RIGHT_INPUT + '" /> px</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_margin_top + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_MARGIN_TOP_INPUT + '" /> px</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_margin_bottom + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_MARGIN_BOTTOM_INPUT + '" /> px</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_align + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' +
	                                            '<select class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_ALIGN_SELECT + '">' +
	                                                '<option value="baseline">' + Resource.imageDialog.align_baseline + '</option>' +
	                                                '<option value="left">' + Resource.imageDialog.align_left + '</option>' +
	                                                '<option value="top">' + Resource.imageDialog.align_top + '</option>' +
	                                                '<option value="middle">' + Resource.imageDialog.align_middle + '</option>' +
	                                                '<option value="bottom">' + Resource.imageDialog.align_bottom + '</option>' +
	                                                '<option value="texttop">' + Resource.imageDialog.align_texttop + '</option>' +
	                                                '<option value="absmiddle">' + Resource.imageDialog.align_absmiddle + '</option>' +
	                                                '<option value="absbottom">' + Resource.imageDialog.align_absbottom + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_border + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' +
	                                            '<select class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_BORDER_SELECT + '">' +
	                                                '<option value="none">' +   Resource.imageDialog.image_border_none + '</option>' +
	                                                '<option value="solid">' +  Resource.imageDialog.image_border_solid + '</option>' +
	                                                '<option value="dotted">' + Resource.imageDialog.image_border_dotted + '</option>' +
	                                                '<option value="dashed">' + Resource.imageDialog.image_border_dashed + '</option>' +
	                                                '<option value="double">' + Resource.imageDialog.image_border_double + '</option>' +
	                                                '<option value="groove">' + Resource.imageDialog.image_border_groove + '</option>' +
	                                                '<option value="ridge">' +  Resource.imageDialog.image_border_ridge + '</option>' +
	                                                '<option value="inset">' +  Resource.imageDialog.image_border_inset + '</option>' +
	                                                '<option value="outset">' + Resource.imageDialog.image_border_outset + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_line_color + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' + '<div class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_BORDER_COLOR_PICKER + '"/>' + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_line_width + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_BORDER_WIDTH_INPUT + '" /> px</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_id + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_ID_INPUT + '" /></td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '">'  + Resource.imageDialog.image_class + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_CLASS_INPUT + '" /></td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '" colspan="2">'  + '<label><input class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_ORIGINAL_SIZE_CHECK + '" type="checkbox">' + Resource.imageDialog.image_original_size + '</label>' + '</td>' +
	                                        '<td class="' + Define.CLASS.IMAGE_DIALOG_TABLE_TD_LABEL + '" colspan="2">'  + '<label><input class="' + Define.CLASS.IMAGE_DIALOG_IMAGE_NEXT_INSERT_CHECK + '" type="checkbox">' + Resource.imageDialog.image_next_insert + '</label>' + '</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                    '</div>' +
	                    '<div class="' + Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_HYPERLINK + '">' +
	                        this.dialogContentHTML +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_FOOTER + '">' +
	                '<ul class="' + Define.CLASS.DIALOG_BUTTONS + '">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(ImageDialog.prototype, new AbstractDialog());
	$.extend(ImageDialog.prototype, new _AbstractUploadDialog());

	ImageDialog.prototype.getDialogContents = HyperlinkDialog.prototype.getDialogContents;
	ImageDialog.prototype.initHyperlinkControlButton = HyperlinkDialog.prototype.initHyperlinkControlButton;
	ImageDialog.prototype.setHyperlinkClearInput = HyperlinkDialog.prototype.setHyperlinkClearInput;
	ImageDialog.prototype.isValidURL = HyperlinkDialog.prototype.isValidURL;

	ImageDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    //TAB Element
	    this.titleNode = this.$dNode.find('.' + Define.CLASS.DIALOG_TITLE);

	    this.tabCommon = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_TAB_MENU_COMMON);
	    this.tabHyperlink = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_TAB_MENU_HYPERLINK);

	    this.tabCommonContents = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_COMMON);
	    this.tabHyperlinkContents = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_HYPERLINK);

	    this.$fileInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT);
	    this.imageFileInputLable = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT_LABEL);
	    this.$pathInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_PATH_INPUT);

	    this.imageTitleInput = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_TITLE_INPUT);
	    this.imageAltInput = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_ALT_INPUT);

	    this.widthInput = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_WIDTH_INPUT);
	    this.heightInput = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_HEIGHT_INPUT);

	    this.marginLeftInput = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_MARGIN_LEFT_INPUT);
	    this.marginRightInput = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_MARGIN_RIGHT_INPUT);
	    this.marginTopInput = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_MARGIN_TOP_INPUT);
	    this.marginBottomInput = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_MARGIN_BOTTOM_INPUT);

	    this.alignSelect = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_ALIGN_SELECT);
	    this.borderTypeSelect = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_BORDER_SELECT);

	    this.borderWidthInput = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_BORDER_WIDTH_INPUT);

	    this.imageIdInput = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_ID_INPUT);
	    this.imageClassNameInput = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_CLASS_INPUT);

	    this.defaultSizeCheck = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_ORIGINAL_SIZE_CHECK);
	    this.nextInsertCheck = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_NEXT_INSERT_CHECK);


	    this.borderColorPicker = this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_IMAGE_BORDER_COLOR_PICKER);

	    this.borderColorPicker.kkColorPicker({
	        callback : function(e, data){
	            _this.borderColorPicker.css("background-color", "#" + data.color);
	            _this.borderColorPicker.find("." + Define.WIDGET_CLASS.UI_COLOR_PICKER).hide();
	            _this.defaultImageSet.borderColor = "#" + data.color;
	        }
	    });


	    this.$dNode.find("." + Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                // console.log(_this.defaultImageSet);

	                var imageInsertProcess = function() {
	                    var type = _this.$linkType.val();

	                    if (_this.tabHyperlink.hasClass(Define.CLASS.IMAGE_DIALOG_TAB_MENU_ON)) {
	                        if (type === 'url') {
	                            if (!_this.defaultImageSet.hyperlink.url || !_this.isValidURL(_this.defaultImageSet.hyperlink.url)) {
	                                alert(Resource.imageDialog.msg_invalid_hyperlink);
	                                return;
	                            }

	                        } else if (type === 'bookmark') {
	                            if (!_this.defaultImageSet.hyperlink.url) {
	                                alert(Resource.imageDialog.msg_invalid_bookmark);
	                                return;
	                            }
	                        }

	                    } else {
	                        if (!_this.defaultImageSet.imageSrc) {
	                            alert(Resource.imageDialog.msg_empty_url);
	                            return;
	                        }

	                        if (type === 'url') {
	                            if (_this.defaultImageSet.hyperlink.url && !_this.isValidURL(_this.defaultImageSet.hyperlink.url)) {
	                                alert(Resource.imageDialog.msg_invalid_hyperlink);
	                                return;
	                            }
	                        }
	                    }


	                    var isModify = _this.defaultImageSet.isModify;

	                    var opSources = [];

	                    var selInfo = _this.selectionRange;

	                    if (!selInfo) {
	                        _this.$dom.selection.setOp({
	                            p : [0,0],
	                            r : [0,0]
	                        });

	                        _this.selectionRange = selInfo = _this.$dom.selection.get();
	                    }

	                    if (!isModify) {
	                        var $selectedNodes = _this.editorElement.find("." + Define.CLASS.SELECTED);

	                        if ($selectedNodes.length) {
	                            var deleteOpSource = {
	                                type : "delete",
	                                name : "text",
	                                value : {
	                                    keyName : "delete"
	                                },
	                                range : {
	                                    p : selInfo.p,
	                                    r : selInfo.r,
	                                    s : "text"
	                                }
	                            };

	                            opSources.push(deleteOpSource);

	                            selInfo = {
	                                p : [selInfo.p[0],selInfo.p[0]],
	                                r : [selInfo.r[0],selInfo.r[0]]
	                            }
	                        }
	                    }

	                    var opSource = {
	                        type : isModify ? "update" : "create",
	                        name : "image",
	                        value : _this.defaultImageSet,
	                        range : {
	                            p : [selInfo.p[0],selInfo.p[0]],
	                            r : [selInfo.r[0],selInfo.r[0]],
	                            s : "text"
	                        }
	                    };

	                    opSources.push(opSource);

	                    _this.router.doOperation(opSources);
	                    _this.router.setRedoHistory();

	                    if (_this.nextInsertCheck[0].checked) {
	                        _this.resetFields();
	                    } else {
	                        _this.closeDialog();
	                    }
	                };

	                if (_this.defaultImageSet.imageSrc) {
	                    $("<img/>").on('load', function(){
	                        imageInsertProcess();
	                    }).on('error', function(){
	                        alert(Resource.imageDialog.msg_invalid_image);
	                    }).attr('src', _this.defaultImageSet.imageSrc);
	                } else {
	                    imageInsertProcess();
	                }
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                var isModify = _this.defaultImageSet.isModify;

	                if (isModify) {
	                    _this.$dom.selection.removeModifyTargetNode();
	                }

	                _this.closeDialog();
	            });
	        }
	    });


	    this.$dNode.find('.' + Define.CLASS.IMAGE_DIALOG_TAB_MENU_ITEM).on('click', function(e){
	        var $target = $(e.target);

	        if ($target.hasClass(Define.CLASS.IMAGE_DIALOG_TAB_MENU_COMMON)) {
	            _this.tabCommon.addClass(Define.CLASS.IMAGE_DIALOG_TAB_MENU_ON);
	            _this.tabHyperlink.removeClass(Define.CLASS.IMAGE_DIALOG_TAB_MENU_ON);

	            _this.tabCommonContents.addClass(Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_ON);
	            _this.tabHyperlinkContents.removeClass(Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_ON);

	        } else if ($target.hasClass(Define.CLASS.IMAGE_DIALOG_TAB_MENU_HYPERLINK)) {
	            _this.tabCommon.removeClass(Define.CLASS.IMAGE_DIALOG_TAB_MENU_ON);
	            _this.tabHyperlink.addClass(Define.CLASS.IMAGE_DIALOG_TAB_MENU_ON);

	            _this.tabCommonContents.removeClass(Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_ON);
	            _this.tabHyperlinkContents.addClass(Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_ON);
	        }
	    });

	    this.initHyperlinkControlButton();

	    this.setInputEvent();
	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	ImageDialog.prototype.parseIntValue = function(properties, name, inputNode) {

	    var value = inputNode.val();

	    var intValue = parseInt(value);

	    if (isNaN(intValue)) {
	        properties[name] = null;
	        inputNode.val('');
	    } else {
	        properties[name] = intValue;
	        inputNode.val(intValue);
	    }
	};

	ImageDialog.prototype.setInputEvent = function() {
	    var _this = this;


	    ///////////////////// FileUpload Start //////////////////////

	    var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        if(data && !data.isError && data.statusText !== "error") {
	            _this.$pathInput.val(data.url);
	            _this.defaultImageSet.imageSrc = data.url;
	        } else {
	            alert(data.msg || Resource.imageDialog.image_upload_error);
	        }

	        _this.$pathInput.attr('style', '');
	    };

	    this.$fileInput.on('change', function(e){
	        _this.doFileUpload(Define.NAME.UPLOAD_IMAGE_TYPE, url, callbackFn);
	    });

	    ///////////////////// FileUpload End //////////////////////




	    this.imageFileInputLable.on('click', function(e){
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	    });

	    this.$pathInput.on('input', function(e){
	        _this.defaultImageSet.imageSrc = _this.$pathInput.val();
	    });

	    this.imageTitleInput.on('input', function(e){
	        _this.defaultImageSet.imageTitle = _this.imageTitleInput.val();
	    });

	    this.imageAltInput.on('input', function(e){
	        _this.defaultImageSet.imageAlt = _this.imageAltInput.val();
	    });

	    this.widthInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet, 'width', _this.widthInput);
	    });

	    this.heightInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet, 'height', _this.heightInput);
	    });

	    this.marginLeftInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet.margin, 'left', _this.marginLeftInput);
	    });

	    this.marginRightInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet.margin, 'right', _this.marginRightInput);
	    });

	    this.marginTopInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet.margin, 'top', _this.marginTopInput);
	    });

	    this.marginBottomInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet.margin, 'bottom', _this.marginBottomInput);
	    });

	    this.alignSelect.on('change', function(){
	        _this.defaultImageSet.align = _this.alignSelect.val();
	    });

	    this.borderTypeSelect.on('change', function(){
	        _this.defaultImageSet.borderType = _this.borderTypeSelect.val();
	    });

	    this.borderWidthInput.on('input', function(){
	        _this.parseIntValue(_this.defaultImageSet, 'borderWidth', _this.borderWidthInput);
	    });

	    this.imageIdInput.on('input', function(e){
	        _this.defaultImageSet.id = _this.imageIdInput.val();
	    });

	    this.imageClassNameInput.on('input', function(e){
	        _this.defaultImageSet.className = _this.imageClassNameInput.val();
	    });

	    this.defaultSizeCheck.on('change', function(e){

	        _this.widthInput.val('');
	        _this.heightInput.val('');

	        if (_this.defaultSizeCheck[0].checked) {

	            _this.widthInput[0].disabled = true;
	            _this.heightInput[0].disabled = true;

	            _this.widthInput.attr('title', Resource.imageDialog.tooltip_status_image_default_size);
	            _this.heightInput.attr('title', Resource.imageDialog.tooltip_status_image_default_size);

	            _this.defaultImageSet.width = -1;
	            _this.defaultImageSet.height = -1;
	        } else {
	            _this.widthInput[0].disabled = false;
	            _this.heightInput[0].disabled = false;

	            _this.widthInput.removeAttr('title');
	            _this.heightInput.removeAttr('title');

	            _this.defaultImageSet.width = null;
	            _this.defaultImageSet.height = null;
	        }
	    });

	    this.setHyperlinkEvent();
	};

	ImageDialog.prototype.setHyperlinkEvent = function() {
	    var _this = this;

	    var setHyperlinkInput = function() {
	        var type = _this.$linkType.val();

	        if (type === 'url') {
	            _this.defaultImageSet.hyperlink.type = type;
	            _this.defaultImageSet.hyperlink.text = _this.$urlTextInput.val();
	            _this.defaultImageSet.hyperlink.url = _this.$urlInput.val();

	            _this.defaultImageSet.hyperlink.title = _this.$urlTitleInput.val();
	            _this.defaultImageSet.hyperlink.target = _this.$urlTargetSelect.val();
	            _this.defaultImageSet.hyperlink.id = _this.$urlIdInput.val();
	            _this.defaultImageSet.hyperlink.className = _this.$urlClassInput.val();

	            if (_this.defaultImageSet.hyperlink.url === '' || _this.defaultImageSet.hyperlink.url == 'http://' || _this.defaultImageSet.hyperlink.url == 'https://') {
	                _this.defaultImageSet.hyperlink.url = '';
	            }

	        } else if (type === 'bookmark') {
	            _this.defaultImageSet.hyperlink.type = type;
	            _this.defaultImageSet.hyperlink.text = _this.$bookmarkTextInput.val();
	            _this.defaultImageSet.hyperlink.url = _this.$bookmarkListSelect.val();

	            if (!_this.defaultImageSet.hyperlink.url) {
	                _this.defaultImageSet.hyperlink = {};
	            }
	        } else {
	            _this.defaultImageSet.hyperlink = {};
	        }
	    };

	    this.$bookmarkTextInput.on('input', setHyperlinkInput);
	    this.$bookmarkListSelect.on('change', setHyperlinkInput);

	    this.$urlTextInput.on('input', setHyperlinkInput);
	    this.$urlInput.on('input', setHyperlinkInput);
	    this.$urlTitleInput.on('input', setHyperlinkInput);
	    this.$urlTargetSelect.on('change', setHyperlinkInput);
	    this.$urlIdInput.on('input', setHyperlinkInput);
	    this.$urlClassInput.on('input', setHyperlinkInput);

	    this.$linkType.on('change', function(){
	        var linkType = _this.$linkType.val();

	        if (linkType === 'url') {
	            _this.$urlWrap.show();
	            _this.$bookmarkWrap.hide();

	            if (_this.defaultImageSet.hyperlink.type) {
	                setHyperlinkInput();
	            }
	        } else if (linkType === 'bookmark'){
	            _this.$urlWrap.hide();
	            _this.$bookmarkWrap.show();
	            setHyperlinkInput();
	        }
	    });
	};

	ImageDialog.prototype.setCommonClearInput = function() {
	    this.titleNode.html(Resource.imageDialog.insert_title);

	    this.tabCommon.addClass(Define.CLASS.IMAGE_DIALOG_TAB_MENU_ON);
	    this.tabHyperlink.removeClass(Define.CLASS.IMAGE_DIALOG_TAB_MENU_ON);
	    this.tabCommonContents.addClass(Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_ON);
	    this.tabHyperlinkContents.removeClass(Define.CLASS.IMAGE_DIALOG_TAB_CONTENTS_ON);

	    this.$fileInput.val('');
	    this.$pathInput.val('');

	    this.imageTitleInput.val('');
	    this.imageAltInput.val('');

	    this.widthInput.val('');
	    this.heightInput.val('');

	    this.marginLeftInput.val('');
	    this.marginRightInput.val('');
	    this.marginTopInput.val('');
	    this.marginBottomInput.val('');

	    this.alignSelect[0].selectedIndex = 0;
	    this.borderTypeSelect[0].selectedIndex = 0;

	    this.borderColorPicker.css('backgroundColor', '');
	    this.borderWidthInput.val('');

	    this.imageIdInput.val('');
	    this.imageClassNameInput.val('');

	    this.defaultSizeCheck[0].checked = false;
	    this.nextInsertCheck[0].checked = false;
	    this.nextInsertCheck.parent().show();
	};

	ImageDialog.prototype.setDefaultPropertiesData = function(initData) {
	    this.defaultImageSet = {
	        isModify : false,
	        imageSrc : '',
	        imageTitle : '',
	        imageAlt : '',
	        width : null,
	        height : null,
	        margin : {
	            // left : 0,
	            // right : 0,
	            // top : 0,
	            // bottom : 0
	        },
	        align : null,
	        borderType : null,
	        borderWidth : null,
	        borderColor : null,
	        id : null,
	        className : null,

	        //Option
	        hyperlink : {
	            // type : '', // url || bookmark
	            // text : '',
	            // url : '',
	            //
	            // title : '',
	            // target : '',
	            // id : '',
	            // className : ''
	        }
	    };

	    if (initData) {
	        this.titleNode.html(Resource.imageDialog.title_modify);

	        if (initData.type === 'modify') {
	            this.defaultImageSet.isModify = true;
	        }

	        if (initData.imageSrc) {
	            this.$pathInput.val(initData.imageSrc);
	            this.defaultImageSet.imageSrc = initData.imageSrc;
	        }

	        if (initData.imageTitle) {
	            this.imageTitleInput.val(initData.imageTitle);
	        }

	        if (initData.imageAlt) {
	            this.imageAltInput.val(initData.imageAlt);
	        }

	        if (initData.width) {
	            this.widthInput.val(initData.width);
	            this.defaultImageSet.width = initData.width;
	        }

	        if (initData.height) {
	            this.heightInput.val(initData.height);
	            this.defaultImageSet.height = initData.height;
	        }

	        if (initData.margin) {
	            if (initData.margin.left) {
	                this.marginLeftInput.val(initData.margin.left);
	            }

	            if (initData.margin.right) {
	                this.marginRightInput.val(initData.margin.right);
	            }

	            if (initData.margin.top) {
	                this.marginTopInput.val(initData.margin.top);
	            }

	            if (initData.margin.bottom) {
	                this.marginBottomInput.val(initData.margin.bottom);
	            }
	        }

	        if (initData.align) {
	            this.alignSelect.val(initData.align);
	        }

	        if (initData.borderType) {
	            this.borderTypeSelect.val(initData.borderType);
	        }

	        if (initData.borderWidth) {
	            this.borderWidthInput.val(initData.borderWidth);
	        }

	        if (initData.borderColor) {
	            this.borderColorPicker.css('backgroundColor', initData.borderColor);
	        }

	        if (initData.id) {
	            this.imageIdInput.val(initData.id);
	        }

	        if (initData.className) {
	            this.imageClassNameInput.val(initData.className);
	        }

	        if (initData.hyperlink) {
	            if (initData.hyperlink.type == 'bookmark') {
	                this.$linkType.val('bookmark');
	                this.$urlWrap.hide();
	                this.$bookmarkWrap.show();

	                if (initData.hyperlink.text) {
	                    this.$bookmarkTextInput.val(initData.hyperlink.text);
	                }

	                if (initData.hyperlink.url) {
	                    this.$bookmarkListSelect.val(initData.hyperlink.url);
	                }
	            } else if (initData.hyperlink.type == 'url'){
	                this.$linkType.val('url');
	                this.$urlWrap.show();
	                this.$bookmarkWrap.hide();

	                if (initData.hyperlink.text) {
	                    this.$urlTextInput.val(initData.hyperlink.text);
	                }

	                if (initData.hyperlink.url) {
	                    this.$urlInput.val(initData.hyperlink.url);
	                }

	                if (initData.hyperlink.title) {
	                    this.$urlTitleInput.val(initData.hyperlink.title);
	                }

	                if (initData.hyperlink.target) {
	                    this.$urlTargetSelect.val(initData.hyperlink.target);
	                }

	                if (initData.hyperlink.id) {
	                    this.$urlIdInput.val(initData.hyperlink.id);
	                }

	                if (initData.hyperlink.className) {
	                    this.$urlClassInput.val(initData.hyperlink.className);
	                }
	            }
	        }

	        this.nextInsertCheck.parent().hide();
	    }
	};

	ImageDialog.prototype.resetFields = function(initData) {
	    this.widthInput[0].disabled = false;
	    this.heightInput[0].disabled = false;

	    this.setCommonClearInput();
	    this.setHyperlinkClearInput();

	    this.$urlTextInput.closest('tr').hide();
	    this.$bookmarkTextInput.closest('tr').hide();

	    this.setDefaultPropertiesData(initData);
	};

	ImageDialog.prototype.openDialog = function(initData){
	    this.$dialogNode.find("."+Define.CLASS.DIALOG_DIALOG_MAIN).hide();
	    var $dialog = this.$dialogNode.find("."+Define.CLASS.DIALOG_IMAGE);
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.resetFields(initData);

	    this.setDialogPosition($dialog);
	};

	module.exports = ImageDialog;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);
	var Resource = __webpack_require__(13);

	function _AbstractUploadDialog(){}

	_AbstractUploadDialog.prototype.ie_ajax_upload = function ($iframe, $form, $fileInput, url, callbackFn){

	    var _this = this;
	    _this.$loadingImage.show();

	    $form.attr("action", url);
	    $form.attr("method", "post");

	    $form.attr("encoding", "multipart/form-data");
	    $form.attr("enctype", "multipart/form-data");

	    $form.attr("target", Define.NAME.POST_IFRAME);
	    $form.attr("file", $fileInput.val());
	    $form.submit();

	    $iframe.on('load', function(){
	        setTimeout(function(){
	            if (callbackFn) {
	                try {
	                    var jsonData = JSON.parse($iframe[0].contentWindow.document.body.innerHTML);
	                    callbackFn(jsonData);

	                } catch (exception) {
	                    callbackFn({
	                        isError : true,
	                        msg : Resource.alertMessage.uploadUnknownErrorMessage
	                    });
	                }
	            } else {
	                $iframe.remove();
	            }

	            _this.$loadingImage.hide();
	            $form[0].reset();
	        }, 500);
	    });

	    return false;
	};

	_AbstractUploadDialog.prototype.setUpload = function(inputNode, uploadType, file, url, successFn, errorFn) {
	    var percentage = 0;

	    var progressStyleFn = this.getProgressStyleFunction(inputNode);

	    var xhrFn = function () {
	        var xhr = $.ajaxSettings.xhr();
	        xhr.onprogress = function (e) {
	            // For downloads
	            if (e.lengthComputable) {
	                // console.log(e.loaded / e.total);
	            }
	        };

	        xhr.upload.onprogress = function (e) {
	            // For uploads
	            if (e.lengthComputable) {
	                if (e.loaded / e.total === 1 && percentage === 0) {
	                    var interval = setInterval(function(){
	                        percentage += 10;

	                        progressStyleFn(percentage);

	                        if (percentage > 100) {
	                            clearInterval(interval);
	                        }
	                    }, 50);
	                } else {
	                    percentage = (e.loaded / e.total) * 100;
	                    progressStyleFn(percentage);
	                }
	            }
	        };

	        return xhr;
	    };

	    var formData = new FormData();

	    formData.append(uploadType, file);

	    Util.doUploadData(url, formData, successFn, errorFn, xhrFn);

	    this.$fileInput.val('');
	};

	_AbstractUploadDialog.prototype.doFileUpload = function(uploadType, url, callbackFn) {
	    var _this = this;

	    if (typeof window.FormData === 'undefined' ){

	        if (!this.$loadingImage) {
	            this.$loadingImage = $('<img class="' + Define.CLASS.UPLOAD_LOADING + '" />');
	            this.$dNode.append(this.$loadingImage);
	        }

	        this.$loadingImage.hide();

	        var IE_AJAX_UPLOAD = function(){
	            var $iframe = $('<iframe name="' + Define.NAME.POST_IFRAME + '" class="' + Define.CLASS.POST_IFRAME + '" style="display: none"></iframe>');

	            if (!_this.$form) {
	                _this.$form = _this.$dNode.find('.' + Define.CLASS.UPLOAD_FORM);
	            }

	            $("body").append($iframe);

	            setTimeout(function(){
	                try {
	                    _this.ie_ajax_upload($iframe, _this.$form, _this.$fileInput, url, function(data){
	                        $iframe.remove();
	                        callbackFn(data);
	                    });
	                } catch (exception) {
	                    $iframe.remove();
	                    alert(Resource.alertMessage.uploadUnknownErrorMessage);
	                }

	            }, 10);
	        };

	        IE_AJAX_UPLOAD();

	    } else {
	        if (!_this.$fileInput[0].files.length) {
	            return;
	        }

	        var file = _this.$fileInput[0].files[0];

	        var fileName = file.name;

	        var splits = fileName.split('.');
	        var ext = splits[splits.length - 1];

	        switch (uploadType) {
	            case Define.NAME.UPLOAD_IMAGE_TYPE:
	                if ($.inArray(ext, Define.IMAGE_TYPE_FILES) == -1) {
	                    alert(Define.IMAGE_TYPE_FILES.join(",") + Resource.alertMessage.fileTypeErrorMessage);
	                    return;
	                }

	                break;

	            case Define.NAME.UPLOAD_VIDEO_TYPE:
	                if ($.inArray(ext, Define.VIDEO_TYPE_FILES) == -1) {
	                    alert(Define.VIDEO_TYPE_FILES.join(",") + Resource.alertMessage.fileTypeErrorMessage);
	                    return;
	                }

	                break;

	            case Define.NAME.UPLOAD_FILE_TYPE:
	                if ($.inArray(ext, Define.FILE_TYPE_FILES) == -1) {
	                    alert(Define.FILE_TYPE_FILES.join(",") + Resource.alertMessage.fileTypeErrorMessage);
	                    return;
	                }

	                break;

	            default:
	                alert(Resource.alertMessage.invalidFileErrorMessage);
	                return;

	                break;
	        }


	        var size = file.size;

	        if (size > Define.BYTE_LIMIT_SIZE) {
	            alert(Define.LIMIT_SIZE_TEXT + Resource.alertMessage.fileLimitErrorMessage);
	            return;
	        }

	        _this.setUpload(_this.$pathInput, uploadType, file, url, callbackFn, callbackFn);
	    }
	};





	_AbstractUploadDialog.prototype.getProgressStyleFunction = function(inputNode) {
	    return function(percentage){
	        var black = percentage;
	        var white = 0;

	        var style = '';

	        if (black <= 100) {
	            style += '' +
	                'background: -webkit-linear-gradient(left, #dddddd ' + black + '%, #ffffff ' + white + '%);' +
	                'background: -moz-linear-gradient(left, #dddddd ' + black + '%, #ffffff ' + white + '%);' +
	                'background: -ms-linear-gradient(left, #dddddd ' + black + '%, #ffffff ' + white + '%);' +
	                'background: linear-gradient(left, #dddddd ' + black + '%, #ffffff ' + white + '%);';
	        }

	        inputNode.attr('style', style);
	    };
	};

	module.exports = _AbstractUploadDialog;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);
	var _AbstractUploadDialog = __webpack_require__(60);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);

	function BackgroundImageDialog(editorElement, $domObject, router) {
	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.$contents = this.editorElement.find("." + Define.CLASS.CONTENTS);
	    this.$preview = this.editorElement.find("." + Define.CLASS.PRE_VIEW);

	    this.router = router;
	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.selInfo = null;

	    this.defaultImageSet = null;

	    this.defaultErrorImageSrc = "";

	    this.templateHTML = '' +
	        '<div class="' + Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_BACKGROUND_IMAGE + '">' +
	            '<div class="' + Define.CLASS.DIALOG_HEADER + '">' +
	                '<div class="' + Define.CLASS.DIALOG_TITLE + '">' + Resource.backgroundImageDialog.title + '</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_CONTENTS + '">' +
	                '<div class="' + Define.CLASS.BACKGROUND_DIALOG_WRAPPER + '">' +
	                    '<div class="' + Define.CLASS.BACKGROUND_DIALOG_PROPERTY_FIELD + '">' +
	                        '<table class="' + Define.CLASS.BACKGROUND_DIALOG_SET + '">' +
	                            '<colgroup>' +
	                                '<col style="width:20%;">' +
	                                '<col style="width:30%;">' +
	                                '<col style="width:20%;">' +
	                                '<col style="width:30%;">' +
	                            '</colgroup>' +
	                            '<tbody>' +
	                                '<tr>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_LABEL + '">' + Resource.backgroundImageDialog.background_image + '</td>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_INPUT + '" colspan="3">' +
	                                        '<input type="text" class="' + Define.CLASS.FILE_OPEN_PATH_INPUT + '">' + '<label class="' + Define.CLASS.FILE_OPEN_INPUT_LABEL + '">' + Resource.backgroundImageDialog.file_input_label  + '</label>' +

	                                        (typeof window.FormData === 'undefined' ? '<form class="' + Define.CLASS.UPLOAD_FORM + '" method="post" enctype="multipart/form-data" action="">' : '') +
	                                        '<input name="' + Define.NAME.UPLOAD_IMAGE_TYPE + '" type="file" accept="' + '.' + Define.IMAGE_TYPE_FILES.join(',.') + '" class="' + Define.CLASS.FILE_OPEN_INPUT + '">' +
	                                        (typeof window.FormData === 'undefined' ? '</form>' : '') +

	                                    '</td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_LABEL + '">'  + Resource.backgroundImageDialog.background_attachment + '</td>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_INPUT + '">' +
	                                        '<select class="' + Define.CLASS.BACKGROUND_DIALOG_ATTACHMENT_SELECT + '">' +
	                                            '<option value="default">' + Resource.backgroundImageDialog.attachment_default + '</option>' +
	                                            '<option value="scroll">' + Resource.backgroundImageDialog.attachment_scroll + '</option>' +
	                                            '<option value="fixed">' + Resource.backgroundImageDialog.attachment_fixed + '</option>' +
	                                        '</select>' +
	                                    '</td>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_LABEL + '">'  + Resource.backgroundImageDialog.background_position_x + '</td>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.BACKGROUND_DIALOG_POSITION_X_INPUT + '" /> px</td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_LABEL + '">'  + Resource.backgroundImageDialog.background_repeat_label + '</td>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_INPUT + '">' +
	                                        '<select class="' + Define.CLASS.BACKGROUND_DIALOG_REPEAT_SELECT + '">' +
	                                            '<option value="default">' + Resource.backgroundImageDialog.background_repeat_default + '</option>' +
	                                            '<option value="no-repeat">' + Resource.backgroundImageDialog.background_no_repeat + '</option>' +
	                                            '<option value="repeat">' + Resource.backgroundImageDialog.background_repeat + '</option>' +
	                                            '<option value="repeat-x">' + Resource.backgroundImageDialog.background_repeat_x + '</option>' +
	                                            '<option value="repeat-y">' + Resource.backgroundImageDialog.background_repeat_y + '</option>' +
	                                        '</select>' +
	                                    '</td>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_LABEL + '">'  + Resource.backgroundImageDialog.background_position_y + '</td>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.BACKGROUND_DIALOG_POSITION_Y_INPUT + '" /> px</td>' +
	                                '</tr>' +
	                                '<tr>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_LABEL + '">' + Resource.backgroundImageDialog.background_color + '</td>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_INPUT + '">' + '<div class="' + Define.CLASS.BACKGROUND_DIALOG_COLOR_PICKER + '"/>' + '</td>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_LABEL + '">' + Resource.backgroundImageDialog.background_clear + '</td>' +
	                                    '<td class="' + Define.CLASS.BACKGROUND_DIALOG_SET_TD_INPUT + '">' + '<label><input type="checkbox" value="" class="' + Define.CLASS.BACKGROUND_DIALOG_CLEAR_CHECKBOX + '" /></label>' + '</td>' +
	                                '</tr>' +
	                            '</tbody>' +
	                        '</table>' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_FOOTER + '">' +
	                '<ul class="' + Define.CLASS.DIALOG_BUTTONS + '">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(BackgroundImageDialog.prototype, new AbstractDialog());
	$.extend(BackgroundImageDialog.prototype, new _AbstractUploadDialog());

	BackgroundImageDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$dNode.find("." + Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                var imageInsertProcess = function() {
	                    if (_this.backgroundClearCheckBox[0].checked) {
	                        _this.$contents.css({
	                            'background-image' : '',
	                            'background-repeat' : '',
	                            'background-position-x' : '',
	                            'background-position-y' : '',
	                            'background-attachment' : '',
	                            'background-color' : ''
	                        });

	                        _this.$preview.css({
	                            'background-image' : '',
	                            'background-repeat' : '',
	                            'background-position-x' : '',
	                            'background-position-y' : '',
	                            'background-attachment' : '',
	                            'background-color' : ''
	                        });
	                    } else {
	                        if (_this.defaultBackgroundSet.image) {
	                            _this.$contents.css('background-image', 'url(' + _this.defaultBackgroundSet.image + ')');
	                            _this.$preview.css('background-image', 'url(' + _this.defaultBackgroundSet.image + ')');
	                        }

	                        if (_this.defaultBackgroundSet.attachment) {
	                            _this.$contents.css('background-attachment', _this.defaultBackgroundSet.attachment == 'default' ? '' : _this.defaultBackgroundSet.attachment);
	                            _this.$preview.css('background-attachment', _this.defaultBackgroundSet.attachment == 'default' ? '' : _this.defaultBackgroundSet.attachment);
	                        }

	                        if (_this.defaultBackgroundSet.repeat) {
	                            _this.$contents.css('background-repeat', _this.defaultBackgroundSet.repeat == 'default' ? '' : _this.defaultBackgroundSet.repeat);
	                            _this.$preview.css('background-repeat', _this.defaultBackgroundSet.repeat == 'default' ? '' : _this.defaultBackgroundSet.repeat);
	                        }

	                        if (_this.defaultBackgroundSet.positionX !== null) {
	                            _this.$contents.css('background-position-x', (_this.defaultBackgroundSet.positionX || 0) + 'px');
	                            _this.$preview.css('background-position-x', (_this.defaultBackgroundSet.positionX || 0) + 'px');
	                        }

	                        if (_this.defaultBackgroundSet.positionY !== null) {
	                            _this.$contents.css('background-position-y', (_this.defaultBackgroundSet.positionY || 0) + 'px');
	                            _this.$preview.css('background-position-y', (_this.defaultBackgroundSet.positionY || 0) + 'px');
	                        }

	                        if (_this.defaultBackgroundSet.backgroundColor !== null) {
	                            _this.$contents.css('background-color', _this.defaultBackgroundSet.backgroundColor);
	                            _this.$preview.css('background-color', _this.defaultBackgroundSet.backgroundColor);
	                        }
	                    }

	                    _this.closeDialog();
	                };

	                if (_this.defaultBackgroundSet.image) {
	                    $("<img/>").on('load', function(){
	                        imageInsertProcess();
	                    }).on('error', function(){
	                        alert(Resource.imageDialog.msg_invalid_image);
	                    }).attr('src', _this.defaultBackgroundSet.image);
	                } else {
	                    imageInsertProcess();
	                }
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setInputEvent();
	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	BackgroundImageDialog.prototype.setInputEvent = function() {
	    var _this = this;


	    ///////////////////// FileUpload Start //////////////////////

	    var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        if(data && !data.isError && data.statusText !== "error") {
	            _this.$pathInput.val(data.url);
	            _this.defaultBackgroundSet.image = data.url;
	        } else {
	            alert(data.msg || Resource.imageDialog.image_upload_error);
	        }

	        _this.$pathInput.attr('style', '');
	    };

	    this.$fileInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT).on('change', function(e){
	        _this.doFileUpload(Define.NAME.UPLOAD_IMAGE_TYPE, url, callbackFn);
	    });

	    ///////////////////// FileUpload End //////////////////////



	    this.imageFileInputLable = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT_LABEL).on('click', function(e){
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	    });

	    this.$pathInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_PATH_INPUT).on('input', function(e){
	        _this.defaultBackgroundSet.image = _this.$pathInput.val();
	    });

	    this.backgroundAttachment = this.$dNode.find('.' + Define.CLASS.BACKGROUND_DIALOG_ATTACHMENT_SELECT).on('change', $.proxy(this.selectChange, this));
	    this.backgroundRepeat = this.$dNode.find('.' + Define.CLASS.BACKGROUND_DIALOG_REPEAT_SELECT).on('change', $.proxy(this.selectChange, this));

	    this.backgroundPositionX = this.$dNode.find('.' + Define.CLASS.BACKGROUND_DIALOG_POSITION_X_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.backgroundPositionY = this.$dNode.find('.' + Define.CLASS.BACKGROUND_DIALOG_POSITION_Y_INPUT).on('input', $.proxy(this.inputChange, this));

	    this.backgroundColorPicker = this.$dNode.find('.' + Define.CLASS.BACKGROUND_DIALOG_COLOR_PICKER);

	    this.$dNode.find("." + Define.CLASS.BACKGROUND_DIALOG_COLOR_PICKER).kkColorPicker({
	        callback : function(e, data){
	            _this.backgroundColorPicker.css("background-color", "#" + data.color);
	            _this.backgroundColorPicker.find("." + Define.WIDGET_CLASS.UI_COLOR_PICKER).hide();

	            _this.defaultBackgroundSet.backgroundColor = "#" + data.color;
	        }
	    });

	    this.backgroundClearCheckBox = this.$dNode.find('.' + Define.CLASS.BACKGROUND_DIALOG_CLEAR_CHECKBOX).on('change', function(e){
	        var isClearCheck = _this.backgroundClearCheckBox[0].checked;

	        if (isClearCheck) {
	            _this.resetFields();
	        }
	    });
	};

	BackgroundImageDialog.prototype.selectChange = function(e){
	    var $element = $(e.target);

	    if ($element.hasClass(Define.CLASS.BACKGROUND_DIALOG_ATTACHMENT_SELECT)) {
	        this.defaultBackgroundSet.attachment = $element.val();

	    } else if ($element.hasClass(Define.CLASS.BACKGROUND_DIALOG_REPEAT_SELECT)) {
	        this.defaultBackgroundSet.repeat = $element.val();

	    }
	};

	BackgroundImageDialog.prototype.inputChange = function(e){
	    var $element = $(e.target);
	    var value = parseInt($element.val());

	    if ($element.hasClass(Define.CLASS.BACKGROUND_DIALOG_POSITION_X_INPUT)) {
	        if (!isNaN(value)) {
	            this.defaultBackgroundSet.positionX = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultBackgroundSet.positionX || '');
	            }
	        }

	    } else if ($element.hasClass(Define.CLASS.BACKGROUND_DIALOG_POSITION_Y_INPUT)) {
	        if (!isNaN(value)) {
	            this.defaultBackgroundSet.positionY = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultBackgroundSet.positionY || '');
	            }
	        }

	    }
	};

	BackgroundImageDialog.prototype.resetFields = function(){
	    this.$pathInput.val('');
	    this.$fileInput.val('');

	    this.backgroundAttachment[0].selectedIndex = 0;
	    this.backgroundRepeat[0].selectedIndex = 0;

	    this.backgroundPositionX.val('');
	    this.backgroundPositionY.val('');

	    this.backgroundColorPicker.css('backgroundColor', '');

	    this.defaultBackgroundSet = {
	        image : null,
	        attachment : null,
	        repeat : null,
	        positionX : null,
	        positionY : null,
	        backgroundColor :null
	    };
	};

	BackgroundImageDialog.prototype.initBackgroundInfomation = function(){
	    var backgroundImageURL = this.$contents.css('background-image');
	    var backgroundImageRepeat = this.$contents.css('background-repeat');
	    var backgroundImagePositionX = this.$contents.css('background-position-x') || '';
	    var backgroundImagePositionY = this.$contents.css('background-position-y') || '';
	    var backgroundImageAttachment = this.$contents.css('background-attachment');
	    var backgroundImageColor = this.$contents.css('background-color');

	    backgroundImageURL = backgroundImageURL.slice(4, -1).replace(/"/gi,'') || null;

	    backgroundImagePositionX = backgroundImagePositionX.replace(/px/gi,'').replace(/%/gi,'');
	    backgroundImagePositionY = backgroundImagePositionY.replace(/px/gi,'').replace(/%/gi,'');

	    if (backgroundImageURL) {
	        this.$pathInput.val(backgroundImageURL);
	    }

	    if (backgroundImageColor) {
	        this.backgroundColorPicker.css('backgroundColor', backgroundImageColor);
	    }

	    if (backgroundImageAttachment) {
	        this.backgroundAttachment.val(backgroundImageAttachment);
	    }

	    if (backgroundImageRepeat) {
	        this.backgroundRepeat.val(backgroundImageRepeat);
	    }

	    if (backgroundImagePositionX) {
	        this.backgroundPositionX.val(backgroundImagePositionX);
	    }

	    if (backgroundImagePositionY) {
	        this.backgroundPositionY.val(backgroundImagePositionY);
	    }
	};

	BackgroundImageDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("."+Define.CLASS.DIALOG_DIALOG_MAIN).hide();
	    var $dialog = this.$dialogNode.find("."+Define.CLASS.DIALOG_BACKGROUND_IMAGE);
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();
	    this.resetFields();
	    this.initBackgroundInfomation();

	    this.setDialogPosition($dialog);
	};

	module.exports = BackgroundImageDialog;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);
	var _AbstractUploadDialog = __webpack_require__(60);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);

	function VideoDialog(editorElement, $domObject, router) {

	    //TODO : Video Upload시 서버로부터 Return되는 Response 결과값에 대한 논의 필요.

	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.selInfo = null;

	    this.defaultVideoSet = null;

	    this.templateHTML = '' +
	        '<div class="' + Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_VIDEO + '">' +
	            '<div class="' + Define.CLASS.DIALOG_HEADER + '">' +
	                '<div class="' + Define.CLASS.DIALOG_TITLE + '">' + Resource.videoDialog.insert_title + '</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_CONTENTS + '">' +
	                '<div class="' + Define.CLASS.VIDEO_TYPE_WRAP + '">' +
	                    '<label class="' + Define.CLASS.VIDEO_TYPE_LABEL + '">' + Resource.videoDialog.linkType + '</label>' +
	                    '<select class="' + Define.CLASS.VIDEO_TYPE_SELECT + '">' +
	                        '<option value="file">' + Resource.videoDialog.fileType + '</option>' +
	                        '<option value="source">' + Resource.videoDialog.sourceType + '</option>' +
	                    '</select>' +
	                '</div>' +
	                '<div class="' + Define.CLASS.VIDEO_TYPE_FILE_CONTENTS + ' ' + Define.CLASS.VIDEO_CONTENTS_ON + '">' +
	                    '<table class="' + Define.CLASS.VIDEO_TYPE_FILE_CONTENTS_SET + '">' +
	                        '<colgroup>' +
	                            '<col style="width:20%;">' +
	                            '<col style="width:30%;">' +
	                            '<col style="width:20%;">' +
	                            '<col style="width:30%;">' +
	                        '</colgroup>' +
	                        '<tbody>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_LABEL_WRAP + '">' +  Resource.videoDialog.video_url_path + '</td>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_INPUT_WRAP + '" colspan="3">' +
	                                    '<input type="text" class="' + Define.CLASS.FILE_OPEN_PATH_INPUT + '">' +
	                                    '<label class="' + Define.CLASS.FILE_OPEN_INPUT_LABEL + '">' + Resource.videoDialog.file_input_label  + '</label>' +

	                                    (typeof window.FormData === 'undefined' ? '<form class="' + Define.CLASS.UPLOAD_FORM + '" method="post" enctype="multipart/form-data" action="">' : '') +
	                                    '<input name="' + Define.NAME.UPLOAD_VIDEO_TYPE + '" type="file" accept="' + '.' + Define.VIDEO_TYPE_FILES.join(',.') + '" class="' + Define.CLASS.FILE_OPEN_INPUT + '">' +
	                                    (typeof window.FormData === 'undefined' ? '</form>' : '') +

	                                '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_LABEL_WRAP + '">'  + Resource.videoDialog.video_width + '</td>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_INPUT_WRAP + '">' + '<input type="text" value="" class="' + Define.CLASS.VIDEO_WIDTH_INPUT + '" /> px</td>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_LABEL_WRAP + '">'  + Resource.videoDialog.video_height + '</td>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_INPUT_WRAP + '">' + '<input type="text" value="" class="' + Define.CLASS.VIDEO_HEIGHT_INPUT + '" /> px</td>' +
	                            '</tr>' +
	                        '</tbody>' +
	                    '</table>' +
	                    '<div class="' + Define.CLASS.VIDEO_TYPE_FILE_CONTENTS_SEPARATE + '"></div>' +

	                    '<table class="' + Define.CLASS.VIDEO_TYPE_FILE_OPTIONS_SET + '">' +
	                        '<colgroup>' +
	                            '<col style="width:50%;">' +
	                            '<col style="width:50%;">' +
	                        '</colgroup>' +
	                        '<tbody>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_OPTIONS_CHECK_INPUT_WRAP + '">' + '<label><input class="' + Define.CLASS.VIDEO_AUTO_PLAY_CHECK + '" type="checkbox">' + Resource.videoDialog.video_auto_play + '</label>' + '</td>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_OPTIONS_CHECK_INPUT_WRAP + '">' + '<label><input class="' + Define.CLASS.VIDEO_INFINITY_LOOP_CHECK + '" type="checkbox">' + Resource.videoDialog.video_infinity_loop + '</label>' + '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_OPTIONS_CHECK_INPUT_WRAP + '">' + '<label><input class="' + Define.CLASS.VIDEO_SHOW_DISPLAY_CHECK + '" type="checkbox">' + Resource.videoDialog.video_show_display + '</label>' + '</td>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_OPTIONS_CHECK_INPUT_WRAP + '">' + '<label><input class="' + Define.CLASS.VIDEO_SHOW_STATUS_CHECK + '" type="checkbox">' + Resource.videoDialog.video_show_status + '</label>' + '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_OPTIONS_CHECK_INPUT_WRAP + '">' + '<label><input class="' + Define.CLASS.VIDEO_SHOW_CONTROLS_CHECK + '" type="checkbox">' + Resource.videoDialog.video_show_controls + '</label>' + '</td>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_OPTIONS_CHECK_INPUT_WRAP + '">' + '<label><input class="' + Define.CLASS.VIDEO_SHOW_VOLUME_CHECK + '" type="checkbox">' + Resource.videoDialog.video_show_volume + '</label>' + '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_OPTIONS_CHECK_INPUT_WRAP + '">' + '<label><input class="' + Define.CLASS.VIDEO_SHOW_TRACKER_CHECK + '" type="checkbox">' + Resource.videoDialog.video_show_tracker + '</label>' + '</td>' +
	                                '<td class="' + Define.CLASS.VIDEO_TYPE_FILE_OPTIONS_CHECK_INPUT_WRAP + '">' + '<label><input class="' + Define.CLASS.VIDEO_SHOW_POSITION_CHECK + '" type="checkbox">' + Resource.videoDialog.video_show_position + '</label>' + '</td>' +
	                            '</tr>' +
	                        '</tbody>' +
	                    '</table>' +
	                '</div>' +
	                '<div class="' + Define.CLASS.VIDEO_TYPE_SOURCE_CONTENTS + '">' +
	                    '<div class="' + Define.CLASS.VIDEO_TYPE_SOURCE_SET + '">' +
	                        '<p>' + Resource.videoDialog.video_source_type_notice1 + '</p>' +
	                        '<p>' + Resource.videoDialog.video_source_type_notice2 + '</p>' +
	                        '<p>' + Resource.videoDialog.video_source_type_notice3 + '</p>' +
	                    '</div>' +
	                    '<textarea class="' + Define.CLASS.VIDEO_TYPE_SOURCE_TEXTAREA + '"></textarea>' +
	                '</div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_FOOTER + '">' +
	                '<ul class="' + Define.CLASS.DIALOG_BUTTONS + '">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(VideoDialog.prototype, new AbstractDialog());
	$.extend(VideoDialog.prototype, new _AbstractUploadDialog());


	VideoDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    //TAB Element
	    this.titleNode = this.$dNode.find('.' + Define.CLASS.DIALOG_TITLE);
	    
	    this.videoTypeSelect = this.$dNode.find('.' + Define.CLASS.VIDEO_TYPE_SELECT);

	    this.fileContents = this.$dNode.find('.' + Define.CLASS.VIDEO_TYPE_FILE_CONTENTS);
	    this.sourceContents = this.$dNode.find('.' + Define.CLASS.VIDEO_TYPE_SOURCE_CONTENTS);

	    this.$fileInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT);
	    this.videoFileInputLable = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT_LABEL);
	    this.$pathInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_PATH_INPUT);

	    this.videoWidthInput = this.$dNode.find('.' + Define.CLASS.VIDEO_WIDTH_INPUT);
	    this.videoHeightInput = this.$dNode.find('.' + Define.CLASS.VIDEO_HEIGHT_INPUT);

	    this.videoAutoPlayCheck = this.$dNode.find('.' + Define.CLASS.VIDEO_AUTO_PLAY_CHECK);
	    this.videoShowDisplayCheck = this.$dNode.find('.' + Define.CLASS.VIDEO_SHOW_DISPLAY_CHECK);
	    this.videoInfinityLoopCheck = this.$dNode.find('.' + Define.CLASS.VIDEO_INFINITY_LOOP_CHECK);
	    this.videoShowStatusCheck = this.$dNode.find('.' + Define.CLASS.VIDEO_SHOW_STATUS_CHECK);

	    this.videoShowControlsCheck = this.$dNode.find('.' + Define.CLASS.VIDEO_SHOW_CONTROLS_CHECK);
	    this.videoShowTrackerCheck = this.$dNode.find('.' + Define.CLASS.VIDEO_SHOW_TRACKER_CHECK);
	    this.videoShowVolumeCheck = this.$dNode.find('.' + Define.CLASS.VIDEO_SHOW_VOLUME_CHECK);
	    this.videoShowPositionCheck = this.$dNode.find('.' + Define.CLASS.VIDEO_SHOW_POSITION_CHECK);

	    this.videoSourceTextarea = this.$dNode.find('.' + Define.CLASS.VIDEO_TYPE_SOURCE_TEXTAREA);

	    this.$dNode.find("." + Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                _this.defaultVideoSet.videoType = _this.videoTypeSelect.val();

	                if (_this.defaultVideoSet.videoType === 'file' && !_this.defaultVideoSet.videoUrl) {
	                    alert(Resource.videoDialog.msg_invalid_file_url);
	                    return;
	                } else  if (_this.defaultVideoSet.videoType === 'source' && !_this.defaultVideoSet.videoSource){
	                    alert(Resource.videoDialog.msg_invalid_source);
	                    return
	                }

	                var isModify = _this.defaultVideoSet.isModify;

	                var opSources = [];

	                var selInfo = _this.selectionRange;

	                if (!selInfo) {
	                    _this.$dom.selection.setOp({
	                        p : [0,0],
	                        r : [0,0]
	                    });

	                    _this.selectionRange = selInfo = _this.$dom.selection.get();
	                }

	                if (!isModify) {
	                    var $selectedNodes = _this.editorElement.find("." + Define.CLASS.SELECTED);

	                    if ($selectedNodes.length) {
	                        var deleteOpSource = {
	                            type : "delete",
	                            name : "text",
	                            value : {
	                                keyName : "delete"
	                            },
	                            range : {
	                                p : selInfo.p,
	                                r : selInfo.r,
	                                s : "text"
	                            }
	                        };

	                        opSources.push(deleteOpSource);

	                        selInfo = {
	                            p : [selInfo.p[0],selInfo.p[0]],
	                            r : [selInfo.r[0],selInfo.r[0]]
	                        }
	                    }
	                }

	                if (_this.defaultVideoSet.videoType === 'source') {
	                    var $source = $(_this.defaultVideoSet.videoSource);

	                    var width = $source.css('width') || 300;
	                    _this.defaultVideoSet.width = parseInt(width);

	                    var height = $source.css('height') || 300;
	                    _this.defaultVideoSet.height = parseInt(height);
	                } else {
	                    var isAutostart = _this.videoAutoPlayCheck[0].checked;
	                    var isLoop = _this.videoInfinityLoopCheck[0].checked;
	                    var isShowtracker = _this.videoShowTrackerCheck[0].checked;
	                    var isShowstatusbar = _this.videoShowStatusCheck[0].checked;
	                    var isShowcontrols = _this.videoShowControlsCheck[0].checked;
	                    var isShowaudiocontrols = _this.videoShowVolumeCheck[0].checked;
	                    var isShowdisplay = _this.videoShowDisplayCheck[0].checked;
	                    var isShowpositioncontrols = _this.videoShowPositionCheck[0].checked;

	                    var isPlay = false;
	                    var isMenu = false;
	                    var isAllowfullscreen = false;

	                    if (_this.defaultVideoSet.videoExt == "swf") {
	                        isPlay = true;
	                        isMenu = true;
	                        isAllowfullscreen = true;
	                    }

	                    _this.defaultVideoSet.isAutostart = isAutostart;
	                    _this.defaultVideoSet.isLoop = isLoop;
	                    _this.defaultVideoSet.isShowdisplay = isShowdisplay;
	                    _this.defaultVideoSet.isShowstatusbar = isShowstatusbar;

	                    _this.defaultVideoSet.isShowcontrols = isShowcontrols;
	                    _this.defaultVideoSet.isShowaudiocontrols = isShowaudiocontrols;
	                    _this.defaultVideoSet.isShowtracker = isShowtracker;
	                    _this.defaultVideoSet.isShowpositioncontrols = isShowpositioncontrols;
	                    _this.defaultVideoSet.isPlay = isPlay;
	                    _this.defaultVideoSet.isMenu = isMenu;
	                    _this.defaultVideoSet.isAllowfullscreen = isAllowfullscreen;

	                    if (!_this.defaultVideoSet.isShowcontrols) {
	                        _this.defaultVideoSet.isShowaudiocontrols = false;
	                        _this.defaultVideoSet.isShowtracker = false;
	                        _this.defaultVideoSet.isShowpositioncontrols = false;
	                    }
	                }

	                if (!_this.defaultVideoSet.width) {
	                    _this.defaultVideoSet.width = 300;
	                }

	                if (!_this.defaultVideoSet.height) {
	                    _this.defaultVideoSet.height = 300;
	                }

	                var opSource = {
	                    type : isModify ? "update" : "create",
	                    name : "video",
	                    value : _this.defaultVideoSet,
	                    range : {
	                        p : [selInfo.p[0],selInfo.p[0]],
	                        r : [selInfo.r[0],selInfo.r[0]],
	                        s : "text"
	                    }
	                };

	                opSources.push(opSource);

	                _this.router.doOperation(opSources);
	                _this.router.setRedoHistory();

	                _this.closeDialog();
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setInputEvent();
	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	VideoDialog.prototype.parseIntValue = function(properties, name, inputNode) {

	    var value = inputNode.val();

	    var intValue = parseInt(value);

	    if (isNaN(intValue)) {
	        properties[name] = null;
	        inputNode.val('');
	    } else {
	        properties[name] = intValue;
	        inputNode.val(intValue);
	    }
	};

	VideoDialog.prototype.setInputEvent = function() {
	    var _this = this;


	    ///////////////////// FileUpload Start //////////////////////

	    var url = _this.router.options.videoUploadURL || _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        if(data && !data.isError && data.statusText !== "error") {
	            var urlValue = data.url;

	            _this.$pathInput.val(urlValue);
	            _this.defaultVideoSet.videoUrl = urlValue;

	            if (data.fileExt) {
	                _this.defaultVideoSet.videoExt = data.fileExt;
	            } else {
	                var _lastDot = urlValue.lastIndexOf('.');

	                if (_lastDot > -1) {
	                    var _fileExt = urlValue.substring(_lastDot + 1, urlValue.length).toLowerCase();
	                    _this.defaultVideoSet.videoExt = _fileExt;

	                } else {
	                    _this.defaultVideoSet.videoExt = "";
	                }
	            }
	        } else {
	            alert(data.msg || Resource.videoDialog.video_upload_error);
	        }

	        _this.$pathInput.attr('style', '');
	    };

	    this.$fileInput.on('change', function(e){
	        _this.doFileUpload(Define.NAME.UPLOAD_VIDEO_TYPE, url, callbackFn);

	    });

	    ///////////////////// FileUpload End //////////////////////






	    this.videoFileInputLable.on('click', function(e){
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	    });

	    this.$pathInput.on('input', function(e){
	        var urlValue = _this.$pathInput.val();
	        var _fileExt = '';

	        _this.defaultVideoSet.videoUrl = urlValue;

	        var _lastDot = urlValue.lastIndexOf('.');

	        if (_lastDot > -1) {
	            _fileExt = urlValue.substring(_lastDot + 1, urlValue.length).toLowerCase();
	            _this.defaultVideoSet.videoExt = _fileExt;
	        }

	        _this.defaultVideoSet.videoExt = _fileExt;
	    });

	    this.videoTypeSelect.on('change', function(){
	        if (_this.videoTypeSelect.val() === 'file') {
	            _this.fileContents.addClass(Define.CLASS.VIDEO_CONTENTS_ON);
	            _this.sourceContents.removeClass(Define.CLASS.VIDEO_CONTENTS_ON);

	        } else {
	            _this.fileContents.removeClass(Define.CLASS.VIDEO_CONTENTS_ON);
	            _this.sourceContents.addClass(Define.CLASS.VIDEO_CONTENTS_ON);
	        }
	    });

	    this.videoWidthInput.on('input', function(){
	        _this.parseIntValue(_this.defaultVideoSet, 'width', _this.videoWidthInput);
	    });

	    this.videoHeightInput.on('input', function(){
	        _this.parseIntValue(_this.defaultVideoSet, 'height', _this.videoHeightInput);
	    });

	    this.videoAutoPlayCheck.on('change', function(){
	        _this.defaultVideoSet.isAutostart = _this.videoAutoPlayCheck[0].checked;
	    });

	    this.videoInfinityLoopCheck.on('change', function(){
	        _this.defaultVideoSet.isLoop = _this.videoInfinityLoopCheck[0].checked;
	    });

	    this.videoShowDisplayCheck.on('change', function(){
	        _this.defaultVideoSet.isShowdisplay = _this.videoShowDisplayCheck[0].checked;
	    });

	    this.videoShowStatusCheck.on('change', function(){
	        _this.defaultVideoSet.isShowstatusbar = _this.videoShowStatusCheck[0].checked;
	    });

	    this.videoShowControlsCheck.on('change', function(){
	        if (!_this.videoShowControlsCheck[0].checked) {
	            _this.videoShowVolumeCheck[0].checked = _this.defaultVideoSet.isShowaudiocontrols = false;
	            _this.videoShowTrackerCheck[0].checked = _this.defaultVideoSet.isShowtracker = false;
	            _this.videoShowPositionCheck[0].checked = _this.defaultVideoSet.isShowpositioncontrols = false;
	        }

	        _this.defaultVideoSet.isShowcontrols = _this.videoShowControlsCheck[0].checked;
	    });

	    this.videoShowVolumeCheck.on('change', function(){
	        if(_this.videoShowVolumeCheck[0].checked && !_this.videoShowControlsCheck[0].checked) {
	            alert(Resource.videoDialog.msg_invalid_control_check);
	            _this.videoShowControlsCheck[0].checked = _this.defaultVideoSet.isShowcontrols = true;
	        }

	        _this.defaultVideoSet.isShowaudiocontrols = _this.videoShowVolumeCheck[0].checked;
	    });

	    this.videoShowTrackerCheck.on('change', function(){
	        if(_this.videoShowTrackerCheck[0].checked && !_this.videoShowControlsCheck[0].checked) {
	            alert(Resource.videoDialog.msg_invalid_control_check);
	            _this.videoShowControlsCheck[0].checked = _this.defaultVideoSet.isShowcontrols = true;
	        }

	        _this.defaultVideoSet.isShowtracker = _this.videoShowTrackerCheck[0].checked;
	    });

	    this.videoShowPositionCheck.on('change', function(){
	        if(_this.videoShowPositionCheck[0].checked && !_this.videoShowControlsCheck[0].checked) {
	            alert(Resource.videoDialog.msg_invalid_control_check);
	            _this.videoShowControlsCheck[0].checked = _this.defaultVideoSet.isShowcontrols = true;
	        }

	        _this.defaultVideoSet.isShowpositioncontrols = _this.videoShowPositionCheck[0].checked;
	    });

	    this.videoSourceTextarea.on('input', function(){
	        _this.defaultVideoSet.videoSource = _this.videoSourceTextarea.val();
	    });
	};

	VideoDialog.prototype.setCommonClearInput = function() {
	    this.titleNode.html(Resource.videoDialog.insert_title);

	    this.videoTypeSelect[0].selectedIndex = 0;
	    
	    this.fileContents.addClass(Define.CLASS.VIDEO_CONTENTS_ON);
	    this.sourceContents.removeClass(Define.CLASS.VIDEO_CONTENTS_ON);
	    
	    this.$fileInput.val('');
	    this.$pathInput.val('');

	    this.videoWidthInput.val('');
	    this.videoHeightInput.val('');
	    
	    this.videoAutoPlayCheck[0].checked = false;
	    this.videoInfinityLoopCheck[0].checked = false;
	    this.videoShowTrackerCheck[0].checked = false;
	    this.videoShowStatusCheck[0].checked = false;
	    this.videoShowControlsCheck[0].checked = false;
	    this.videoShowVolumeCheck[0].checked = false;
	    this.videoShowDisplayCheck[0].checked = false;
	    this.videoShowPositionCheck[0].checked = false;

	    this.videoSourceTextarea.val('');
	};

	VideoDialog.prototype.setDefaultPropertiesData = function(initData) {
	    this.defaultVideoSet = {
	        isModify : false,
	        videoType : 'file', //or source
	        videoExt : '',
	        videoUrl : '',
	        videoSource : '',
	        
	        width : null,
	        height : null,

	        isAutostart : false,
	        isLoop : false,
	        isShowtracker : false,
	        isShowstatusbar : false,
	        isShowcontrols : false,
	        isShowaudiocontrols : false,
	        isShowdisplay : false,
	        isShowpositioncontrols : false,

	        isPlay : false,
	        isMenu : false,
	        isAllowfullscreen : false
	    };

	    if (initData) {
	        this.titleNode.html(Resource.videoDialog.title_modify);

	        if (initData.type === 'modify') {
	            this.defaultVideoSet.isModify = true;
	        }

	        if (initData.videoType) {
	            this.videoTypeSelect.val(initData.videoType);

	            if (initData.videoType === 'file') {
	                this.fileContents.addClass(Define.CLASS.VIDEO_CONTENTS_ON);
	                this.sourceContents.removeClass(Define.CLASS.VIDEO_CONTENTS_ON);
	            } else {
	                this.fileContents.removeClass(Define.CLASS.VIDEO_CONTENTS_ON);
	                this.sourceContents.addClass(Define.CLASS.VIDEO_CONTENTS_ON);
	            }
	        }

	        if (initData.videoUrl) {
	            this.$pathInput.val(initData.videoUrl);
	            this.defaultVideoSet.videoUrl = initData.videoUrl;
	        }

	        if (initData.videoExt) {
	            this.defaultVideoSet.videoExt = initData.videoExt;
	        }

	        if (initData.videoSource) {
	            this.videoSourceTextarea.val(initData.videoSource);
	            this.defaultVideoSet.videoSource = initData.videoSource;
	        }

	        if (initData.width) {
	            this.videoWidthInput.val(initData.width);
	            this.defaultVideoSet.width = initData.width;
	        }

	        if (initData.height) {
	            this.videoHeightInput.val(initData.height);
	            this.defaultVideoSet.height = initData.height;
	        }

	        if (initData.isAutostart) {
	            this.videoAutoPlayCheck[0].checked = initData.isAutostart;
	        }

	        if (initData.isLoop) {
	            this.videoInfinityLoopCheck[0].checked = initData.isLoop;
	        }

	        if (initData.isShowtracker) {
	            this.videoShowTrackerCheck[0].checked = initData.isShowtracker;
	        }

	        if (initData.isShowstatusbar) {
	            this.videoShowStatusCheck[0].checked = initData.isShowstatusbar;
	        }

	        if (initData.isShowcontrols) {
	            this.videoShowControlsCheck[0].checked = initData.isShowcontrols;
	        }

	        if (initData.isShowaudiocontrols) {
	            this.videoShowVolumeCheck[0].checked = initData.isShowaudiocontrols;
	        }

	        if (initData.isShowdisplay) {
	            this.videoShowDisplayCheck[0].checked = initData.isShowdisplay;
	        }

	        if (initData.isShowpositioncontrols) {
	            this.videoShowPositionCheck[0].checked = initData.isShowpositioncontrols;
	        }

	        if (initData.isPlay) {
	            this.defaultVideoSet.isPlay = initData.isPlay;
	        }

	        if (initData.isMenu) {
	            this.defaultVideoSet.isMenu = initData.isMenu;
	        }

	        if (initData.isAllowfullscreen) {
	            this.defaultVideoSet.isAllowfullscreen = initData.isAllowfullscreen;
	        }
	    }
	};

	VideoDialog.prototype.resetFields = function(initData) {
	    this.setCommonClearInput();
	    this.setDefaultPropertiesData(initData);
	};

	VideoDialog.prototype.openDialog = function(initData){
	    this.$dialogNode.find("."+Define.CLASS.DIALOG_DIALOG_MAIN).hide();
	    var $dialog = this.$dialogNode.find("."+Define.CLASS.DIALOG_VIDEO);
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.resetFields(initData);

	    this.setDialogPosition($dialog);
	};

	module.exports = VideoDialog;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);
	var _AbstractUploadDialog = __webpack_require__(60);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);

	function FileDialog(editorElement, $domObject, router) {

	    //TODO : Video Upload시 서버로부터 Return되는 Response 결과값에 대한 논의 필요.

	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.selInfo = null;

	    this.templateHTML = '' +
	        '<div class="' + Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_FILE + '">' +
	            '<div class="' + Define.CLASS.DIALOG_HEADER + '">' +
	                '<div class="' + Define.CLASS.DIALOG_TITLE + '">' + Resource.fileDialog.insert_title + '</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_CONTENTS + '">' +
	                '<div class="' + Define.CLASS.FILE_DIALOG_CONTENTS + '">' +
	                    '<table class="' + Define.CLASS.FILE_CONTENTS_SET + '">' +
	                        '<colgroup>' +
	                            '<col style="width:20%;">' +
	                            '<col style="width:30%;">' +
	                            '<col style="width:20%;">' +
	                            '<col style="width:30%;">' +
	                        '</colgroup>' +
	                        '<tbody>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.FILE_LABEL_WRAP + '">' +  Resource.fileDialog.file_url_path + '</td>' +
	                                '<td class="' + Define.CLASS.FILE_INPUT_WRAP + '" colspan="3">' +
	                                    '<input type="text" class="' + Define.CLASS.FILE_OPEN_PATH_INPUT + '">' +
	                                    '<label class="' + Define.CLASS.FILE_OPEN_INPUT_LABEL + '">' + Resource.fileDialog.file_input_label  + '</label>' +

	                                    (typeof window.FormData === 'undefined' ? '<form class="' + Define.CLASS.UPLOAD_FORM + '" method="post" enctype="multipart/form-data" action="">' : '') +
	                                    '<input name="' + Define.NAME.UPLOAD_FILE_TYPE + '" type="file" accept="' + '.' + Define.FILE_TYPE_FILES.join(',.') + '" class="' + Define.CLASS.FILE_OPEN_INPUT + '">' +
	                                    (typeof window.FormData === 'undefined' ? '</form>' : '') +

	                                '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.FILE_LABEL_WRAP + '">'  + Resource.fileDialog.file_text + '</td>' +
	                                '<td class="' + Define.CLASS.FILE_INPUT_WRAP + '" colspan="3">' + '<input type="text" value="" class="' + Define.CLASS.FILE_DIALOG_TEXT_INPUT + '" /></td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.FILE_LABEL_WRAP + '">'  + Resource.fileDialog.file_title + '</td>' +
	                                '<td class="' + Define.CLASS.FILE_INPUT_WRAP + '" colspan="3">' + '<input type="text" value="" class="' + Define.CLASS.FILE_DIALOG_TITLE_INPUT + '" /></td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.FILE_LABEL_WRAP + '">'  + Resource.fileDialog.file_id + '</td>' +
	                                '<td class="' + Define.CLASS.FILE_INPUT_WRAP + '">' + '<input type="text" value="" class="' + Define.CLASS.FILE_DIALOG_ID_INPUT + '" /></td>' +
	                                '<td class="' + Define.CLASS.FILE_LABEL_WRAP + '">'  + Resource.fileDialog.file_class + '</td>' +
	                                '<td class="' + Define.CLASS.FILE_INPUT_WRAP + '">' + '<input type="text" value="" class="' + Define.CLASS.FILE_DIALOG_CLASS_INPUT + '" /></td>' +
	                            '</tr>' +
	                        '</tbody>' +
	                    '</table>' +
	                '</div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_FOOTER + '">' +
	                '<ul class="' + Define.CLASS.DIALOG_BUTTONS + '">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(FileDialog.prototype, new AbstractDialog());
	$.extend(FileDialog.prototype, new _AbstractUploadDialog());


	FileDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    //TAB Element
	    this.titleNode = this.$dNode.find('.' + Define.CLASS.DIALOG_TITLE);
	    
	    this.$fileInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT);
	    this.fileInputLable = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT_LABEL);
	    this.$pathInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_PATH_INPUT);

	    this.fileTextInput = this.$dNode.find('.' + Define.CLASS.FILE_DIALOG_TEXT_INPUT);
	    this.fileTitleInput = this.$dNode.find('.' + Define.CLASS.FILE_DIALOG_TITLE_INPUT);
	    this.fileIdInput = this.$dNode.find('.' + Define.CLASS.FILE_DIALOG_ID_INPUT);
	    this.fileClassInput = this.$dNode.find('.' + Define.CLASS.FILE_DIALOG_CLASS_INPUT);

	    this.$dNode.find("." + Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){

	                var urlInputValue = _this.$pathInput.val();
	                var textInputValue = _this.fileTextInput.val();
	                var titleInputValue = _this.fileTitleInput.val();
	                var targetSelectValue = "_blank";
	                var idInputValue = _this.fileIdInput.val();
	                var classInputValue = _this.fileClassInput.val();

	                if (!urlInputValue) {
	                    alert(Resource.fileDialog.empty_invalid_file_url);
	                    return;
	                }

	                _this.router.doOperation({
	                    type:"create",
	                    name:"hyperlink",
	                    value: {
	                        type : 'url',
	                        text : textInputValue || urlInputValue,
	                        url : urlInputValue,
	                        title : titleInputValue,
	                        target : targetSelectValue,
	                        id : idInputValue,
	                        className : classInputValue,
	                        fileType : true,
	                    },
	                    range : _this.selectionRange
	                });

	                _this.router.setRedoHistory();

	                _this.closeDialog();
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setInputEvent();
	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	FileDialog.prototype.setInputEvent = function() {
	    var _this = this;


	    ///////////////////// FileUpload Start //////////////////////

	    var url = _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        if(data && !data.isError && data.statusText !== "error") {
	            var urlValue = data.url;

	            _this.$pathInput.val(urlValue);
	        } else {
	            alert(data.msg || Resource.fileDialog.file_upload_error);
	        }

	        _this.$pathInput.attr('style', '');
	    };

	    this.$fileInput.on('change', function(e){
	        _this.doFileUpload(Define.NAME.UPLOAD_FILE_TYPE, url, callbackFn);
	    });

	    ///////////////////// FileUpload End //////////////////////


	    this.fileInputLable.on('click', function(e){
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	    });
	};

	FileDialog.prototype.setCommonClearInput = function() {
	    this.titleNode.html(Resource.fileDialog.insert_title);

	    this.$fileInput.val('');
	    this.$pathInput.val('');

	    this.fileTextInput.val('');
	    this.fileTitleInput.val('');
	    this.fileIdInput.val('');
	    this.fileClassInput.val('');

	};

	FileDialog.prototype.resetFields = function() {
	    this.setCommonClearInput();

	    var $selected = this.editorElement.find("." + Define.CLASS.SELECTED);
	    var $hyperlinkNode = null;

	    if (!$selected.length) {
	        var range = this.$dom.selection.getOpNode(this.selectionRange.p[0], this.selectionRange.r[0]);

	        $hyperlinkNode = $(range.container).closest('[href]');

	        if ($hyperlinkNode.length) {
	            $selected = $hyperlinkNode.parent('span');
	            this.$dom.selection.applyRangeOfSelectedClass($hyperlinkNode);
	        }
	    }

	    if ($selected.length > 0){
	        var $hyperlinkNodes = $selected.find("[href]");

	        if ($hyperlinkNodes.length && $hyperlinkNodes.attr(Define.ATTR.FILE_TYPE)) {
	            $hyperlinkNode = $hyperlinkNodes.eq(0);
	            this.$dom.selection.removeSelected();

	            this.$dom.selection.applyRangeOfSelectedClass($hyperlinkNode);

	            this.fileTextInput.val($hyperlinkNode.text());

	            var href = $hyperlinkNodes.attr("href");

	            this.$pathInput.val(href);

	            var title = $hyperlinkNode.attr(Define.ATTR.TITLE) || '';
	            var id = $hyperlinkNode.attr(Define.ATTR.ID) || '';
	            var className = $hyperlinkNode.attr(Define.ATTR.CLASS) || '';

	            className = className.replace(Define.CLASS.SELECTED, '');

	            this.fileTitleInput.val(title);
	            this.fileIdInput.val(id);
	            this.fileClassInput.val(className);
	        } else {
	            var selectedTEXT = $selected.text();

	            this.fileTextInput.val(selectedTEXT);
	        }
	    }
	};

	FileDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("."+Define.CLASS.DIALOG_FILE);
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.resetFields();

	    this.setDialogPosition($dialog);
	};

	module.exports = FileDialog;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);
	var Util = __webpack_require__(6);

	function LayoutDialog(editorElement, $domObject, router, api) {
	    this.editorElement = $(editorElement);
	    this.contentArea = this.editorElement.find('.' + Define.CLASS.CONTENTS);
	    this.router = router;
	    this.$dom = $domObject;
	    this.api = api;

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="'+ Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_LAYOUT + '">' +
	            '<div class="'+Define.CLASS.DIALOG_HEADER+'">' +
	                '<div class="'+Define.CLASS.DIALOG_TITLE+'">'+ Resource.layoutDialog.title +'</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_CONTENTS+'">' +
	                '<div class="' + Define.CLASS.DIALOG_LAYOUT_ITEM_WRAPPER + '">' +
	                    '<div class="' + Define.CLASS.DIALOG_LAYOUT_ITEM_LIST + '">' +
	                        this.getTemplateTableStyle() +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_FOOTER+'">' +
	                '<ul class="'+Define.CLASS.DIALOG_BUTTONS+'">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(LayoutDialog.prototype, new AbstractDialog());

	LayoutDialog.prototype.getLayoutHTML = function(type) {

	    var layoutHTML = '';

	    var tableStyle = 'word-break: break-all; word-wrap: break-word; border-collapse: collapse; border: 1px none rgb(0, 0, 0);';
	    var tdStyle = 'vertical-align: middle; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);';
	    var tableWidth = this.editorElement.width() - 35;

	    switch (type) {
	        case "0" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 100 + 'px;">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + Resource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 400 + 'px;">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 100 + 'px;">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;

	        case "1" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 100 + 'px;" colspan="2">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + Resource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 50 + 'px;" colspan="2">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;

	        case "2" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 100 + 'px;" >' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + Resource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 500 + 'px;" >' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;

	        case "3" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 100 + 'px;" colspan="3">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + Resource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 500 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 500 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 500 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;

	        case "4" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 100 + 'px;" colspan="3">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + Resource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 50 + 'px;" colspan="3">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;

	        case "5" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 300 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 300 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 300 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 300 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;
	        case "6" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 200 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 600 + 'px; width: ' + (tableWidth * 0.3) + 'px; " rowspan="2">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 400 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;
	        case "7" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 600 + 'px; width: ' + (tableWidth * 0.3) + 'px; " rowspan="2">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 200 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 400 + 'px; width: ' + (tableWidth * 0.3) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;
	        case "8" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;
	        case "9" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 600 + 'px; width: ' + (tableWidth * 0.3) + 'px; " rowspan="4">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + Resource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.7) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;
	        case "10" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + tableWidth + 'px; " colspan="2">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + Resource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + tableWidth + 'px; " colspan="2">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;
	        case "11" :
	            layoutHTML = '' +
	                '<table style="' + tableStyle + ' width: ' + tableWidth + 'px;">' +
	                    '<tbody>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 150 + 'px; width: ' + tableWidth + 'px; " colspan="2">' +
	                                '<h1 style="text-align: center;">' +
	                                    '<span class="" style="font-weight: bold; font-size: 24px;">' + Resource.layoutDialog.subjectLabel + '&nbsp;</span>' +
	                                '</h1>' +
	                            '</td>' +
	                        '</tr>' +
	                        '<tr>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                            '<td style="' + tdStyle + ' height: ' + 450 + 'px; width: ' + (tableWidth * 0.5) + 'px; ">' +
	                                '<p style="text-align: center;">' +
	                                    '<span class="">' + Resource.layoutDialog.descLabel + '&nbsp;</span>' +
	                                '</p>' +
	                            '</td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>';
	            break;

	    }


	    return layoutHTML;
	};

	LayoutDialog.prototype.getTemplateTableStyle = function() {
	    var tableStyle = '';

	    for(var i = 0, length = 12; i < length; i++) {
	        tableStyle += '<div class="' + Define.CLASS.DIALOG_LAYOUT_ITEM + ' ' + (Define.CLASS.DIALOG_LAYOUT_ITEM_SEQ + i ) + '"></div>';
	    }

	    return tableStyle;
	};

	LayoutDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$dNode.find("." + Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                //TODO : Table Layout 적용 로직 예정

	                var type = _this.$layoutItems.filter('.' + Define.CLASS.DIALOG_LAYOUT_ITEM_SELECTED).index();

	                var isNext = false;

	                if (Util.isCheckEmpty(_this.contentArea)) {
	                    isNext = true;
	                } else {
	                    isNext = confirm(Resource.layoutDialog.layoutAcceptConfirm);
	                }

	                if (isNext) {
	                    var layoutHTML = _this.getLayoutHTML(type + '');

	                    _this.router.setClearAllHistories();
	                    _this.router.changedUndoRedoButtonEnable();

	                    var $contents = _this.editorElement.find("." + Define.CLASS.CONTENTS);

	                    $contents.html(layoutHTML);

	                    _this.closeDialog();
	                }
	            });
	        } else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.$layoutItems = this.$dNode.find("." + Define.CLASS.DIALOG_LAYOUT_ITEM).on('click',function(e){
	        var $target = $(e.target);

	        if (!$target.hasClass(Define.CLASS.DIALOG_LAYOUT_ITEM)){
	            $target = $target.closest('.' + Define.CLASS.DIALOG_LAYOUT_ITEM);
	        }

	        if ($target.length) {
	            _this.$layoutItems.removeClass(Define.CLASS.DIALOG_LAYOUT_ITEM_SELECTED);
	            $target.addClass(Define.CLASS.DIALOG_LAYOUT_ITEM_SELECTED);
	        }
	    });


	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	LayoutDialog.prototype.resetFields = function(){
	    this.$layoutItems.removeClass(Define.CLASS.DIALOG_LAYOUT_ITEM_SELECTED);
	    this.$layoutItems.first().addClass(Define.CLASS.DIALOG_LAYOUT_ITEM_SELECTED);
	};

	LayoutDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_LAYOUT);

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.resetFields();

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	module.exports = LayoutDialog;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);

	function EmoticonDialog(editorElement, $domObject, router) {

	    //TODO : Video Upload시 서버로부터 Return되는 Response 결과값에 대한 논의 필요.

	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.selInfo = null;

	    this.templateHTML = '' +
	        '<div class="' + Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_EMOTICON + '">' +
	            '<div class="' + Define.CLASS.DIALOG_HEADER + '">' +
	                '<div class="' + Define.CLASS.DIALOG_TITLE + '">' + Resource.emoticonDialog.insert_title + '</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_CONTENTS + '">' +
	                '<div class="' + Define.CLASS.EMOTICON_WRAPPER + '">' +
	                '</div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_FOOTER + '">' +
	                '<ul class="' + Define.CLASS.DIALOG_BUTTONS + '">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(EmoticonDialog.prototype, new AbstractDialog());


	EmoticonDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$emoticonWrapper = this.$dNode.find('.' + Define.CLASS.EMOTICON_WRAPPER);

	    this.$dNode.find("." + Define.CLASS.DIALOG_BUTTON).each(function(){
	        $(this).on("click", function(){
	            _this.closeDialog();
	        });
	    });

	    this.$emoticonWrapper.on('click', function(e){
	        if (e.target == _this.$emoticonWrapper[0]) {
	            return;
	        }

	        var $target = $(e.target);

	        if ($target.is('.' + Define.CLASS.EMOTICON_ITEM)){
	            $target = $target.find('img');
	        }

	        if ($target.is('img')) {
	            var $selectedNodes = _this.editorElement.find("." + Define.CLASS.SELECTED);

	            var opSources = [];

	            var selInfo = _this.selectionRange;

	            if (!selInfo) {
	                _this.$dom.selection.setOp({
	                    p : [0,0],
	                    r : [0,0]
	                });

	                _this.selectionRange = selInfo = _this.$dom.selection.get();
	            }

	            if ($selectedNodes.length) {
	                var deleteOpSource = {
	                    type : "delete",
	                    name : "text",
	                    value : {
	                        keyName : "delete"
	                    },
	                    range : {
	                        p : selInfo.p,
	                        r : selInfo.r,
	                        s : "text"
	                    }
	                };

	                opSources.push(deleteOpSource);
	            }

	            var $cloneTarget = $target.clone();
	            $cloneTarget.css({
	                width:'25px',
	                height:'25px'
	            });

	            var pasteOpSource = {
	                type : "create",
	                name : "paste",
	                value : {
	                    html : $cloneTarget[0].outerHTML,
	                    pasteType : "image"
	                },
	                range : {
	                    p : [selInfo.p[0], selInfo.p[0]],
	                    r : [selInfo.r[0], selInfo.r[0]],
	                    s : "text"
	                }
	            };

	            opSources.push(pasteOpSource);

	            _this.router.doOperation(opSources);
	            _this.router.setRedoHistory();
	        }

	        _this.closeDialog();
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	EmoticonDialog.prototype.setEmoticonItem = function(){
	    this.$emoticonWrapper.html('');

	    var emoticonList = this.router.options.emoticonList;

	    var emoticonHTML = '';

	    for(var i = 0, length = emoticonList.length; i < length; i++) {
	        emoticonHTML += '<div class="' + Define.CLASS.EMOTICON_ITEM + '">' + '<img src="' + emoticonList[i] + '">'  + '</div>' ;
	    }
	    this.$emoticonWrapper.html(emoticonHTML);
	};

	EmoticonDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_EMOTICON);
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.setEmoticonItem();

	    this.setDialogPosition($dialog);
	};

	module.exports = EmoticonDialog;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);
	var Filter = __webpack_require__(44);

	function TextPasteDialog(editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObject;
	    this.clientFilter = new Filter(router.options);

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="'+ Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_TEXT_PASTE + '">' +
	            '<div class="'+Define.CLASS.DIALOG_HEADER+'">' +
	                '<div class="'+Define.CLASS.DIALOG_TITLE+'">'+ Resource.textPasteDialog.title +'</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_CONTENTS+'">' +
	                '<textarea class="' + Define.CLASS.TEXT_PASTE_CONTENTS + '">' +
	                '</textarea>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_FOOTER+'">' +
	                '<ul class="'+Define.CLASS.DIALOG_BUTTONS+'">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(TextPasteDialog.prototype, new AbstractDialog());

	TextPasteDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$dNode.find("."+Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                var $textArea = _this.$dNode.find('.' + Define.CLASS.TEXT_PASTE_CONTENTS);
	                var value = $textArea.val();

	                if (value == '') {
	                    alert(Resource.textPasteDialog.msg_no_text);
	                    return;
	                }


	                var plain = value;
	                plain = plain.replace(/\u000a\u000d/gi, "</span></p>" + Define.DEFAULT_PARAGRAPH_HTML + "<p><span>");
	                plain = plain.replace(/\u000a/gi, "</span></p><p><span>");

	                var plainText = "<p><span>" + plain + "</span></p>";
	                var pasteHTML = _this.clientFilter.doSimpleTreeChange(plainText);

	                var $selectedNodes = _this.editorElement.find("." + Define.CLASS.SELECTED);

	                var opSources = [];

	                var selInfo = _this.selectionRange;

	                if (!selInfo) {
	                    _this.$dom.selection.setOp({
	                        p : [0,0],
	                        r : [0,0]
	                    });

	                    _this.selectionRange = selInfo = _this.$dom.selection.get();
	                }

	                if ($selectedNodes.length) {
	                    var deleteOpSource = {
	                        type : "delete",
	                        name : "text",
	                        value : {
	                            keyName : "delete"
	                        },
	                        range : {
	                            p : selInfo.p,
	                            r : selInfo.r,
	                            s : "text"
	                        }
	                    };

	                    opSources.push(deleteOpSource);
	                }

	                var pasteOpSource = {
	                    type : "create",
	                    name : "paste",
	                    value : {
	                        html : pasteHTML,
	                        pasteType : "html"
	                    },
	                    range : {
	                        p : [selInfo.p[0],selInfo.p[1]],
	                        r : [selInfo.r[0],selInfo.r[1]],
	                        s : "text"
	                    }
	                };

	                opSources.push(pasteOpSource);

	                _this.router.doOperation(opSources);
	                _this.router.setRedoHistory();

	                _this.closeDialog();
	                //적용
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	TextPasteDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_TEXT_PASTE);

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    var $textArea = $dialog.find('.' + Define.CLASS.TEXT_PASTE_CONTENTS);
	    $textArea.val("");

	    this.setDialogPosition($dialog);
	};

	module.exports = TextPasteDialog;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);
	var Filter = __webpack_require__(44);

	function ParagraphDialog(editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObject;
	    this.clientFilter = new Filter(router.options);

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;

	    this.marginLeft = null;
	    this.marginRight = null;
	    this.marginTop = null;
	    this.marginBottom = null;
	    this.letterSpacing = null;
	    this.wordSpacing = null;

	    this.templateHTML = '' +
	        '<div class="'+ Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_PARAGRAPH + '">' +
	            '<div class="'+Define.CLASS.DIALOG_HEADER+'">' +
	                '<div class="'+Define.CLASS.DIALOG_TITLE+'">'+ Resource.paragraphDialog.title +'</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_CONTENTS+'">' +
	                '<table>' +
	                    '<colgroup>' +
	                        '<col style="width:100px;">' +
	                        '<col style="width:200px;">' +
	                    '</colgroup>' +
	                    '<tbody>' +
	                        '<tr style="height: 40px;">' +
	                            '<td>' + Resource.paragraphDialog.margin_left + '</td>' +
	                            '<td><input type="text" id="" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.PARAGRAPH_MARGIN_LEFT + '" style="ime-mode:disabled" /></td>' +
	                        '</tr>' +
	                        '<tr style="height: 40px;">' +
	                            '<td>' + Resource.paragraphDialog.margin_right + '</td>' +
	                            '<td><input type="text" id="" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.PARAGRAPH_MARGIN_RIGHT + '" style="ime-mode:disabled" /></td>' +
	                        '</tr>' +
	                        '<tr style="height: 40px;">' +
	                            '<td>' + Resource.paragraphDialog.margin_top + '</td>' +
	                            '<td><input type="text" id="" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.PARAGRAPH_MARGIN_TOP + '" style="ime-mode:disabled" /></td>' +
	                        '</tr>' +
	                        '<tr style="height: 40px;">' +
	                            '<td>' + Resource.paragraphDialog.margin_bottom + '</td>' +
	                            '<td><input type="text" id="" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.PARAGRAPH_MARGIN_BOTTOM + '" style="ime-mode:disabled" /></td>' +
	                        '</tr>' +
	                        '<tr style="">' +
	                            '<td colspan="2"><hr></td>' +
	                        '</tr>' +
	                        '<tr style="height: 40px;">' +
	                            '<td>' + Resource.paragraphDialog.letter_spacing + '</td>' +
	                            '<td><input type="text" id="" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.PARAGRAPH_LETTER_SPACING + '" style="ime-mode:disabled" /></td>' +
	                        '</tr>' +
	                        '<tr style="height: 40px;">' +
	                            '<td>' + Resource.paragraphDialog.word_spacing + '</td>' +
	                            '<td><input type="text" id="" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.PARAGRAPH_WORD_SPACING + '" style="ime-mode:disabled" /></td>' +
	                        '</tr>' +
	                    '</tbody>' +
	                '</table>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_FOOTER+'">' +
	                '<ul class="'+Define.CLASS.DIALOG_BUTTONS+'">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(ParagraphDialog.prototype, new AbstractDialog());

	ParagraphDialog.prototype.reset = function() {
	    this.marginLeft[0].reset('0');
	    this.marginRight[0].reset('0');
	    this.marginTop[0].reset('0');
	    this.marginBottom[0].reset('0');
	    this.letterSpacing[0].reset('0');
	    this.wordSpacing[0].reset('0');
	};

	ParagraphDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.marginLeft = this.$dNode.find('.' + Define.CLASS.PARAGRAPH_MARGIN_LEFT).spinit({ height: 25, width: 130, min: 0, initValue: 0, max: 255 }); //mask: 'Red', callback: onred
	    this.marginRight = this.$dNode.find('.' + Define.CLASS.PARAGRAPH_MARGIN_RIGHT).spinit({ height: 25, width: 130, min: 0, initValue: 0, max: 255 });
	    this.marginTop = this.$dNode.find('.' + Define.CLASS.PARAGRAPH_MARGIN_TOP).spinit({ height: 25, width: 130, min: 0, initValue: 0, max: 255 });
	    this.marginBottom = this.$dNode.find('.' + Define.CLASS.PARAGRAPH_MARGIN_BOTTOM).spinit({ height: 25, width: 130, min: 0, initValue: 0, max: 255 });
	    this.letterSpacing = this.$dNode.find('.' + Define.CLASS.PARAGRAPH_LETTER_SPACING).spinit({ height: 25, width: 130, min: 0, initValue: 0, max: 255 });
	    this.wordSpacing = this.$dNode.find('.' + Define.CLASS.PARAGRAPH_WORD_SPACING).spinit({ height: 25, width: 130, min: 0, initValue: 0, max: 255 });


	    var keydownEvent = function(event){
	        event = event || window.event;

	        var target = event.target;
	        var keyID = (event.which) ? event.which : event.keyCode;

	        if(keyID == 8 || keyID == 46 || (keyID >= 48 && keyID <= 57 ) || (keyID >= 96 && keyID <= 105) ) {
	            return;
	        } else {
	            _this.stopEvent(event);
	            target.value = target.value.replace(/[\ㄱ-ㅎㅏ-ㅣ가-힣]/g, '');
	            event.resultValue = false;
	            return false;
	        }
	    };

	    var keyupEvent = function(event){
	        event = event || window.event;

	        var target = event.target;
	        var value = parseInt(target.value);

	        target.reset(value);
	    };


	    this.$dNode.find('.' + Define.CLASS.SMART_SPINNER).on('keydown', keydownEvent).on('keyup', keyupEvent);

	    this.reset();

	    this.$dNode.find("." + Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){

	                var selInfo = _this.selectionRange;

	                if (!selInfo) {
	                    _this.$dom.selection.setOp({
	                        p : [1,1],
	                        r : [0,0]
	                    });

	                    _this.selectionRange = selInfo = _this.$dom.selection.get();
	                }

	                var marginLeft = _this.marginLeft.val();
	                var marginRight = _this.marginRight.val();
	                var marginTop = _this.marginTop.val();
	                var marginBottom = _this.marginBottom.val();
	                var letterSpacing = _this.letterSpacing.val();
	                var wordSpacing = _this.wordSpacing.val();

	                var opList = [
	                    {type : "update", name : 'marginLeft', value : marginLeft, range : selInfo},
	                    {type : "update", name : 'marginRight', value : marginRight, range : selInfo},
	                    {type : "update", name : 'marginTop', value : marginTop, range : selInfo},
	                    {type : "update", name : 'marginBottom', value : marginBottom, range : selInfo},
	                    {type : "update", name : 'letterSpacing', value : letterSpacing, range : selInfo},
	                    {type : "update", name : 'wordSpacing', value : wordSpacing, range : selInfo}
	                ];

	                _this.router.doOperation(opList);
	                _this.router.setRedoHistory();

	                _this.closeDialog();
	                //적용
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	ParagraphDialog.prototype.openDialog = function(paragraphMarginDatas){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_PARAGRAPH);

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.reset();

	    if (paragraphMarginDatas){
	        if (paragraphMarginDatas.marginLeft) {
	            this.marginLeft[0].reset(paragraphMarginDatas.marginLeft);
	        }

	        if (paragraphMarginDatas.marginRight) {
	            this.marginRight[0].reset(paragraphMarginDatas.marginRight);
	        }

	        if (paragraphMarginDatas.marginTop) {
	            this.marginTop[0].reset(paragraphMarginDatas.marginTop);
	        }

	        if (paragraphMarginDatas.marginBottom) {
	            this.marginBottom[0].reset(paragraphMarginDatas.marginBottom);
	        }

	        if (paragraphMarginDatas.letterSpacing) {
	            this.letterSpacing[0].reset(paragraphMarginDatas.letterSpacing);
	        }

	        if (paragraphMarginDatas.wordSpacing) {
	            this.wordSpacing[0].reset(paragraphMarginDatas.wordSpacing);
	        }
	    }

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	module.exports = ParagraphDialog;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);
	var Util = __webpack_require__(6);
	var Filter = __webpack_require__(44);

	function FileOpenDialog(editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.contentArea = this.editorElement.find('.' + Define.CLASS.CONTENTS);

	    this.router = router;
	    this.$dom = $domObject;
	    this.clientFilter = new Filter(router.options);

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="'+ Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_FILE_OPEN + '">' +
	            '<div class="'+Define.CLASS.DIALOG_HEADER+'">' +
	                '<div class="'+Define.CLASS.DIALOG_TITLE+'">'+ Resource.openFileDialog.title +'</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_CONTENTS+'">' +
	                '<div class="' + Define.CLASS.FILE_OPEN_PATH_WRAPPER + '">' +
	                    '<label class="' + Define.CLASS.FILE_OPEN_PATH_LABEL + '">' +
	                        Resource.openFileDialog.file_path_label  +
	                    '</label>' +
	                    '<input type="text" disabled="true" class="' + Define.CLASS.FILE_OPEN_PATH_INPUT + '">' +
	                    '<label class="' + Define.CLASS.FILE_OPEN_INPUT_LABEL + '">' +
	                        Resource.openFileDialog.file_input_label  +
	                    '</label>' +
	                    '<input type="file" accept="'  + '.' + Define.HTML_TYPE_FILES.join(',.') + '" class="' + Define.CLASS.FILE_OPEN_INPUT + '">' +
	                '<div class="' + Define.CLASS.FILE_OPEN_ENCODING_WRAPPER + '">' +
	                    '<label class="' + Define.CLASS.FILE_OPEN_ENCODING_LABEL + '">' +
	                        Resource.openFileDialog.file_encoding_label  +
	                    '</label>' +
	                    '<select class="' + Define.CLASS.FILE_OPEN_ENCODING_SELECTION + '">' +
	                        (function(){
	                            var encodingTypes = Resource.settingDialog.encodingTypes;

	                            var options = '';

	                            for (var key in encodingTypes){
	                                if (key != 'user') {
	                                    options += '<option value="' + key + '">' + encodingTypes[key] + '</option>';
	                                }
	                            }

	                            return options;
	                        })() +
	                    '</select>' +
	                    '</div>' +
	                '</div>' +
	                '<div class="' + Define.CLASS.FILE_OPEN_VALID_WRAPPER + '">' +
	                    Resource.openFileDialog.file_valid_info  +
	                '</div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_FOOTER+'">' +
	                '<ul class="'+Define.CLASS.DIALOG_BUTTONS+'">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(FileOpenDialog.prototype, new AbstractDialog());

	FileOpenDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$fileInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT);
	    this.$pathInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_PATH_INPUT);
	    this.$okButton = this.$dNode.find('.' + Define.CLASS.OK_BUTTON);
	    this.$encodingSelection = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_ENCODING_SELECTION);

	    this.$dNode.find("." + Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){

	                if ($button.hasClass(Define.CLASS.DIALOG_BUTTON_DISABLED)) {
	                    return;
	                }

	                var input = _this.$fileInput[0];

	                if (input.files && input.files.length && input.files[0]) {

	                    var isPass = false;

	                    if (Util.isCheckEmpty(_this.contentArea)) {
	                        isPass = true;
	                    } else {
	                        isPass = window.confirm('정말로 적용하시겠습니까? \n현재 입력된 내용들은 제거됩니다.');
	                    }

	                    if (isPass) {
	                        var reader = new FileReader();

	                        reader.onload = function(){
	                            var htmlText = reader.result;
	                            htmlText = htmlText.replace(/\u000a\u000d/gi, "");
	                            htmlText = htmlText.replace(/\u000a/gi, "");
	                            htmlText = htmlText.replace(/\u000d/gi, "");

	                            var htmlContents = _this.clientFilter.doSimpleTreeChange(htmlText);

	                            htmlContents = htmlContents || Define.DEFAULT_PARAGRAPH_HTML;

	                            var $contents = _this.editorElement.find('.' + Define.CLASS.CONTENTS);

	                            $contents.html(htmlContents);

	                            $contents.attr('contenteditable', 'true');

	                            _this.router.setClearAllHistories();
	                            _this.router.changedUndoRedoButtonEnable();

	                            _this.$dom.selection.$paragraph = null;

	                            _this.$dom.selection.set({
	                                p : [0, 0],
	                                r : [0, 0]
	                            });

	                            _this.$fileInput.val('');
	                            reader.abort();
	                            _this.closeDialog();
	                        };

	                        var encoding = _this.$encodingSelection.val();

	                        if (encoding == 'user') {
	                            encoding = '';
	                        }

	                        reader.readAsText(input.files[0], encoding);
	                    }

	                    // _this.router.doOperation(opSources);
	                    // _this.router.setRedoHistory();
	                } else {
	                    _this.closeDialog();
	                }

	                //적용
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.$fileInput.on('change', function(e){
	        _this.stopEvent(e);

	        var file = this.files[0];

	        var fileName = this.files[0].name;

	        var splits = fileName.split('.');
	        var ext = splits[splits.length - 1];

	        if ($.inArray(ext, Define.HTML_TYPE_FILES) == -1) {
	            _this.$okButton.addClass(Define.CLASS.DIALOG_BUTTON_DISABLED);

	            alert(Define.HTML_TYPE_FILES.join(",") + " 파일만 가능합니다.");

	            return;
	        }

	        var size = file.size;

	        if (size > Define.BYTE_LIMIT_SIZE) {
	            alert(Define.LIMIT_SIZE_TEXT + " 이하 파일만 사용 가능합니다.");
	            return;
	        }

	        _this.$okButton.removeClass(Define.CLASS.DIALOG_BUTTON_DISABLED);

	        var filePath = _this.$fileInput.val();
	        _this.$pathInput.val(filePath);
	    });

	    this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT_LABEL).on('click', function(e){
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	FileOpenDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_FILE_OPEN);

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.$okButton.addClass(Define.CLASS.DIALOG_BUTTON_DISABLED);
	    this.$pathInput.val('');
	    this.$fileInput.val('');
	    this.$encodingSelection.val(0);

	    this.setDialogPosition($dialog);
	};

	module.exports = FileOpenDialog;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);
	var Util = __webpack_require__(6);

	function AutoSaveLoadDialog(editorElement, $domObject, router, api) {
	    this.editorElement = $(editorElement);
	    this.contentArea = this.editorElement.find('.' + Define.CLASS.CONTENTS);

	    this.router = router;
	    this.$dom = $domObject;
	    this.api = api;

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="'+ Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_AUTO_SAVE_LOAD_OPEN + '">' +
	            '<div class="'+Define.CLASS.DIALOG_HEADER+'">' +
	                '<div class="'+Define.CLASS.DIALOG_TITLE+'">'+ Resource.autoSaveLoadDialog.title +'</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_CONTENTS+'">' +
	                '<div class="'+Define.CLASS.AUTO_SAVE_LOAD_INFO_WRAPPER+'">' +
	                    '<div class="'+Define.CLASS.AUTO_SAVE_LOAD_INFO_LIST+'">' +
	                        '<div class="'+Define.CLASS.AUTO_SAVE_LOAD_INFO_LIST_NAME+'">' + Resource.autoSaveLoadDialog.save_time +'</div>' +
	                        '<div class="'+Define.CLASS.AUTO_SAVE_LOAD_INFO_LIST_ITEM_WRAPPER+'">' + '</div>' +
	                    '</div>' +
	                    '<div class="'+Define.CLASS.AUTO_SAVE_LOAD_INFO_PREVIEW+'">' +

	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_FOOTER+'">' +
	                '<ul class="'+Define.CLASS.DIALOG_BUTTONS+'">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.autoSaveLoadDialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.DELETE_BUTTON + '"><span>' + Resource.autoSaveLoadDialog.deleteButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.autoSaveLoadDialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(AutoSaveLoadDialog.prototype, new AbstractDialog());

	AutoSaveLoadDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$dNode.find("."+Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                if (!$(this).hasClass(Define.CLASS.AUTO_SAVE_LOAD_DISABLED_BUTTON)) {

	                    var isTrue = false;

	                    if (Util.isCheckEmpty(_this.contentArea)) {
	                        isTrue = true;
	                    } else {
	                        isTrue = window.confirm(Resource.autoSaveLoadDialog.autoSaveLoadAcceptConfirm);
	                    }

	                    if (isTrue) {
	                        var $selected_save_item = _this.$dNode.find('.' + Define.CLASS.AUTO_SAVE_LOAD_INFO_LIST_ITEM_SELECTED);

	                        var itemIndex = $selected_save_item.index();

	                        if (window.isAutoSave && window.autoSaveList.length) {
	                            var autoSaveInfo = window.autoSaveList[itemIndex];

	                            _this.api.SetEditorContent(autoSaveInfo.html);
	                        }

	                        _this.closeDialog();
	                    }

	                }
	            });
	        } else if($button.hasClass(Define.CLASS.DELETE_BUTTON)){
	            $button.on("click", function(){
	                if (!$(this).hasClass(Define.CLASS.AUTO_SAVE_LOAD_DISABLED_BUTTON)) {

	                    var $selected_save_item = _this.$dNode.find('.' + Define.CLASS.AUTO_SAVE_LOAD_INFO_LIST_ITEM_SELECTED);

	                    var itemIndex = $selected_save_item.index();

	                    if (window.isAutoSave && window.autoSaveList.length) {

	                        window.autoSaveList.splice(itemIndex, 1);
	                        $selected_save_item.remove();

	                        _this.$previewNode.html('');

	                        _this.$okButtonNode.addClass(Define.CLASS.AUTO_SAVE_LOAD_DISABLED_BUTTON);
	                        _this.$deleteButtonNode.addClass(Define.CLASS.AUTO_SAVE_LOAD_DISABLED_BUTTON);
	                    }
	                }
	            });
	        } else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setInitButtons();
	    
	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	AutoSaveLoadDialog.prototype.setInitButtons = function(){
	    var _this = this;

	    this.$itmeWrapper = this.$dNode.find('.' + Define.CLASS.AUTO_SAVE_LOAD_INFO_LIST_ITEM_WRAPPER);
	    this.$previewNode = this.$dNode.find('.' + Define.CLASS.AUTO_SAVE_LOAD_INFO_PREVIEW);

	    this.$okButtonNode = this.$dNode.find('.' + Define.CLASS.OK_BUTTON);
	    this.$deleteButtonNode = this.$dNode.find('.' + Define.CLASS.DELETE_BUTTON);

	    this.$itmeWrapper.on('click', function(e){
	        var $target = $(e.target);

	        if ($target.is('.' + Define.CLASS.AUTO_SAVE_LOAD_INFO_LIST_ITEM)) {
	            if (!$target.hasClass(Define.CLASS.AUTO_SAVE_LOAD_INFO_LIST_ITEM_SELECTED)) {
	                _this.$itmeWrapper.find('.' + Define.CLASS.AUTO_SAVE_LOAD_INFO_LIST_ITEM_SELECTED).removeClass(Define.CLASS.AUTO_SAVE_LOAD_INFO_LIST_ITEM_SELECTED);

	                $target.addClass(Define.CLASS.AUTO_SAVE_LOAD_INFO_LIST_ITEM_SELECTED);

	                _this.$okButtonNode.removeClass(Define.CLASS.AUTO_SAVE_LOAD_DISABLED_BUTTON);
	                _this.$deleteButtonNode.removeClass(Define.CLASS.AUTO_SAVE_LOAD_DISABLED_BUTTON);

	                var itemIndex = $target.index();

	                if (window.isAutoSave && window.autoSaveList.length) {
	                    var autoSaveInfo = window.autoSaveList[itemIndex];
	                    _this.$previewNode.html(autoSaveInfo.html);
	                }
	            }
	        }
	    });
	};

	AutoSaveLoadDialog.prototype.resetSaveInfo = function(){
	    this.$itmeWrapper.html('');
	    this.$previewNode.html('');

	    this.$okButtonNode.addClass(Define.CLASS.AUTO_SAVE_LOAD_DISABLED_BUTTON);
	    this.$deleteButtonNode.addClass(Define.CLASS.AUTO_SAVE_LOAD_DISABLED_BUTTON);

	    if (window.isAutoSave && window.autoSaveList.length) {
	        var autoSaveItemHTML = '';

	        for(var i = 0, length = window.autoSaveList.length; i < length; i++) {
	            autoSaveItemHTML += '<div class="' + Define.CLASS.AUTO_SAVE_LOAD_INFO_LIST_ITEM + '">' + window.autoSaveList[i].timestamp + '</div>';
	        }

	        this.$itmeWrapper.html(autoSaveItemHTML);
	    }
	};

	AutoSaveLoadDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_AUTO_SAVE_LOAD_OPEN);

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.resetSaveInfo();

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	module.exports = AutoSaveLoadDialog;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);
	var Util = __webpack_require__(6);

	function TemplateDialog(editorElement, $domObject, router, api) {
	    this.editorElement = $(editorElement);
	    this.contentArea = this.editorElement.find('.' + Define.CLASS.CONTENTS);

	    this.router = router;
	    this.$dom = $domObject;
	    this.api = api;

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="'+ Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_TEMPLATE + '">' +
	            '<div class="' + Define.CLASS.DIALOG_HEADER+'">' +
	                '<div class="' + Define.CLASS.DIALOG_TITLE+'">'+ Resource.templateDialog.title +'</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_CONTENTS+'">' +
	                '<div class="' + Define.CLASS.DIALOG_TEMPLATE_WRAPPER+'">' +
	                    '<div class="' + Define.CLASS.DIALOG_TEMPLATE_CATEGORY+'">' +
	                        '<div class="'+Define.CLASS.DIALOG_TEMPLATE_CATEGORY_TITLE+'">' + Resource.templateDialog.category_title +'</div>' +
	                        '<div class="' + Define.CLASS.DIALOG_TEMPLATE_CATEGORY_LIST+'">' +
	                            // '<div class="' + Define.CLASS.DIALOG_TEMPLATE_CATEGORY_NAME + ' ' + Define.CLASS.DIALOG_TEMPLATE_CATEGORY_SELECTED + '">' +
	                            '<div class="' + Define.CLASS.DIALOG_TEMPLATE_CATEGORY_NAME + '">' +
	                                'SAMPLE CATEGORY' +
	                            '</div>' +
	                        '</div>' +
	                    '</div>' +
	                    '<div class="' + Define.CLASS.DIALOG_TEMPLATE_LIST + '">' +
	                        '<div class="' + Define.CLASS.DIALOG_TEMPLATE_ITEM_TITLE + '">' + Resource.templateDialog.item_title +'</div>' +
	                        '<div class="' + Define.CLASS.DIALOG_TEMPLATE_ITEM_LIST + '">' +
	                            // '<div class="' + Define.CLASS.DIALOG_TEMPLATE_ITEM + ' ' + Define.CLASS.DIALOG_TEMPLATE_ITEM_SELECTED + '">' +
	                            '<div class="' + Define.CLASS.DIALOG_TEMPLATE_ITEM + '">' +
	                                'SAMPLE ITEM' +
	                            '</div>' +
	                        '</div>' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_FOOTER+'">' +
	                '<ul class="' + Define.CLASS.DIALOG_BUTTONS+'">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(TemplateDialog.prototype, new AbstractDialog());

	TemplateDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$categoriList = this.$dNode.find('.' + Define.CLASS.DIALOG_TEMPLATE_CATEGORY_LIST);
	    this.$itemList = this.$dNode.find('.' + Define.CLASS.DIALOG_TEMPLATE_ITEM_LIST);

	    this.$categoriList.html('');
	    this.$itemList.html('');

	    this.$dNode.find("."+Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){

	                var categorySelected = _this.$categoriList.find('.' + Define.CLASS.DIALOG_TEMPLATE_CATEGORY_SELECTED);
	                var itemSelected = _this.$itemList.find('.' + Define.CLASS.DIALOG_TEMPLATE_ITEM_SELECTED);

	                if (!itemSelected.length) {
	                    alert(Resource.templateDialog.notSelectedTemplateMsg);

	                    return;
	                }

	                var categoryIndex = categorySelected.index();
	                var itemIndex = itemSelected.index();

	                console.log(categoryIndex, itemIndex);


	                var templateList = _this.router.options.templateList;

	                var category = templateList[categoryIndex];

	                if (!(category && category.items && category.items.length && category.items[itemIndex])) {
	                    alert(Resource.templateDialog.invalidCategory);

	                    return;
	                } else{
	                    var item = category.items[itemIndex];

	                    if (item.type == 'url') {
	                        $.get(item.value).done(function(data) {

	                            var isNext = false;

	                            if (Util.isCheckEmpty(_this.contentArea)) {
	                                isNext = true;
	                            } else {
	                                isNext = confirm(Resource.templateDialog.htmlAcceptConfirm);
	                            }

	                            if (isNext) {
	                                _this.api.SetEditorContent(data);

	                                _this.router.setClearAllHistories();
	                                _this.router.changedUndoRedoButtonEnable();

	                                _this.closeDialog();
	                            }
	                        }).error(function(){
	                            alert(Resource.templateDialog.invalidURL);

	                            return;
	                        });

	                    } else if (item.type == 'html') {

	                        var html = item.value;

	                        var isNext = false;

	                        if (Util.isCheckEmpty(_this.contentArea)) {
	                            isNext = true;
	                        } else {
	                            isNext = confirm(Resource.templateDialog.htmlAcceptConfirm);
	                        }

	                        if (isNext) {
	                            _this.api.SetEditorContent(html);

	                            _this.router.setClearAllHistories();
	                            _this.router.changedUndoRedoButtonEnable();

	                            _this.closeDialog();
	                        }
	                    } else {
	                        alert(Resource.templateDialog.invalidItemType);

	                        return;
	                    }
	                }
	            });
	        } else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.$categoriList.on('click', function(e){
	        try {
	            var $target = $(e.target);

	            if ($target.is('.' + Define.CLASS.DIALOG_TEMPLATE_CATEGORY_NAME)) {
	                if (!$target.hasClass(Define.CLASS.DIALOG_TEMPLATE_CATEGORY_SELECTED)) {
	                    _this.$categoriList.find('.' + Define.CLASS.DIALOG_TEMPLATE_CATEGORY_SELECTED).removeClass(Define.CLASS.DIALOG_TEMPLATE_CATEGORY_SELECTED);
	                    $target.addClass(Define.CLASS.DIALOG_TEMPLATE_CATEGORY_SELECTED);
	                    _this.$itemList.html('');

	                    var itemIndex = $target.index();

	                    var templateList = _this.router.options.templateList;

	                    var templateCategory = templateList[itemIndex];

	                    if (templateCategory) {
	                        var items = templateCategory.items;

	                        if (items && items.length) {
	                            var itemHTML = '';

	                            for (var i = 0, length = items.length; i < length; i++) {
	                                itemHTML += '<div class="' + Define.CLASS.DIALOG_TEMPLATE_ITEM + '">' + items[i].name + '</div>';
	                            }

	                            _this.$itemList.html(itemHTML);
	                        }
	                    }
	                }
	            }
	        } catch (e) {
	            _this.$categoriList.html('');
	            _this.$itemList.html('');
	        }
	    });

	    this.$itemList.on('click', function(e){
	        try {
	            var $target = $(e.target);

	            if ($target.is('.' + Define.CLASS.DIALOG_TEMPLATE_ITEM)) {
	                if (!$target.hasClass(Define.CLASS.DIALOG_TEMPLATE_ITEM_SELECTED)) {
	                    _this.$itemList.find('.' + Define.CLASS.DIALOG_TEMPLATE_ITEM_SELECTED).removeClass(Define.CLASS.DIALOG_TEMPLATE_ITEM_SELECTED);
	                    $target.addClass(Define.CLASS.DIALOG_TEMPLATE_ITEM_SELECTED);
	                }
	            }
	        } catch (e) { }
	    });


	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	TemplateDialog.prototype.resetTemplateItems = function(){
	    this.$categoriList.html('');
	    this.$itemList.html('');

	    var templateList = this.router.options.templateList;

	    if (templateList && templateList.length) {
	        var categoryHTML = '';

	        for (var i = 0, length = templateList.length; i < length; i++) {
	            categoryHTML += '<div class="' + Define.CLASS.DIALOG_TEMPLATE_CATEGORY_NAME + '">' + templateList[i].name + '</div>';
	        }

	        this.$categoriList.html(categoryHTML);
	    }

	};

	TemplateDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_TEMPLATE);

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.resetTemplateItems();

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	module.exports = TemplateDialog;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);
	var Filter = __webpack_require__(44);

	function DateFormatDialog(editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObject;
	    this.clientFilter = new Filter(router.options);

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;

	    this.dateFormats = [
	        'hh:mm:ss a/p'
	        , 'HH:mm:ss'
	        , 'dd/MM/yy'
	        , 'dd/MM/yyyy'
	        , 'yyyy/MM/dd'
	        , 'yy/MM/dd'
	        , 'yy-MM-dd'
	        , 'yyyy-MM-dd'
	        , 'yyyy.MM.dd'
	        , 'MM. dd. yyyy'
	        , 'a/p hh시'
	        , 'yyyy년 MM월 dd일'
	        , 'yyyy년 MM월 dd일 E'
	        , 'yy년 MM월 dd일'
	        , 'yy년 MM월 dd일 E'
	    ];

	    this.templateHTML = '' +
	        '<div class="'+ Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_DATE_FORMAT + '">' +
	            '<div class="'+Define.CLASS.DIALOG_HEADER+'">' +
	                '<div class="'+Define.CLASS.DIALOG_TITLE+'">'+ Resource.dateFormatDialog.title +'</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_CONTENTS+'">' +
	                '<ul class="'+Define.CLASS.DATE_FORMAT_LIST+'">' +
	                '</ul>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_FOOTER+'">' +
	                '<ul class="'+Define.CLASS.DIALOG_BUTTONS+'">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(DateFormatDialog.prototype, new AbstractDialog());

	DateFormatDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);
	    var $dateFormatList = this.$dNode.find("." + Define.CLASS.DATE_FORMAT_LIST);

	    this.$okButton = this.$dNode.find('.' + Define.CLASS.OK_BUTTON);

	    this.$dNode.find("."+Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                if ($button.hasClass(Define.CLASS.DIALOG_BUTTON_DISABLED)) {
	                    return;
	                }

	                var $selectedItem = $dateFormatList.find('.' + Define.CLASS.DATE_FORMAT_ITEM_SELECTED);

	                if ($selectedItem.length) {
	                    var $selectedNodes = _this.editorElement.find("." + Define.CLASS.SELECTED);

	                    var opSources = [];

	                    var selInfo = _this.selectionRange;

	                    if (!selInfo) {
	                        _this.$dom.selection.setOp({
	                            p : [0,0],
	                            r : [0,0]
	                        });

	                        _this.selectionRange = selInfo = _this.$dom.selection.get();
	                    }

	                    if ($selectedNodes.length) {
	                        var deleteOpSource = {
	                            type : "delete",
	                            name : "text",
	                            value : {
	                                keyName : "delete"
	                            },
	                            range : {
	                                p : selInfo.p,
	                                r : selInfo.r,
	                                s : "text"
	                            }
	                        };

	                        opSources.push(deleteOpSource);
	                    }

	                    var pasteOpSource = {
	                        type : "create",
	                        name : "symbol",
	                        value : $selectedItem.html(),
	                        range : {
	                            p : [selInfo.p[0],selInfo.p[0]],
	                            r : [selInfo.r[0],selInfo.r[0]],
	                            s : "text"
	                        }
	                    };

	                    // var pasteOpSource = {
	                    //     type : "create",
	                    //     name : "paste",
	                    //     value : {
	                    //         html : '<p><span>' + $selectedItem.html() + '</span></p>',
	                    //         pasteType : "text"
	                    //     },
	                    //     range : {
	                    //         p : [selInfo.p[0],selInfo.p[1]],
	                    //         r : [selInfo.r[0],selInfo.r[1]],
	                    //         s : "text",
	                    //         section : _this.$dom.selection.getSection()
	                    //     }
	                    // };

	                    opSources.push(pasteOpSource);

	                    _this.router.doOperation(opSources);
	                    _this.router.setRedoHistory();
	                }

	                _this.closeDialog();
	                //적용
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    $dateFormatList.on('click', function(e) {
	        var target = e.target;
	        $dateFormatList.find('.' + Define.CLASS.DATE_FORMAT_ITEM_SELECTED).removeClass(Define.CLASS.DATE_FORMAT_ITEM_SELECTED);
	        $(target).addClass(Define.CLASS.DATE_FORMAT_ITEM_SELECTED);
	        _this.$okButton.removeClass(Define.CLASS.DIALOG_BUTTON_DISABLED);
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	DateFormatDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_DATE_FORMAT);

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.$okButton.addClass(Define.CLASS.DIALOG_BUTTON_DISABLED);

	    this.setSelectionRange();

	    this.createDateList();

	    this.setDialogPosition($dialog);
	};

	DateFormatDialog.prototype.createDateList = function(){
	    var $formatList = this.$dialogNode.find("." + Define.CLASS.DATE_FORMAT_LIST);

	    var formatListHtmlString = '';

	    var dateObject = new Date();

	    for (var i = 0, length = this.dateFormats.length; i < length; i++) {
	        var dateFormat = this.dateFormats[i];

	        formatListHtmlString += '<li class="' + Define.CLASS.DATE_FORMAT_ITEM + '">' + dateObject.format(dateFormat) + '</li>';
	    }

	    $formatList.html(formatListHtmlString);
	};

	module.exports = DateFormatDialog;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);
	var Util = __webpack_require__(6);

	function BookmarkDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;

	    this.bookmarkInput = null;

	    this.templateHTML = '' +
	        '<div class="'+ Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_BOOKMARK + '">' +
	            '<div class="'+Define.CLASS.DIALOG_HEADER+'">' +
	                '<div class="'+Define.CLASS.DIALOG_TITLE+'">'+ Resource.bookmarkDialog.title +'</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_CONTENTS+'">' +
	                '<div class="'+Define.CLASS.BOOKMARK_EDIT_AREA+'">' +
	                    '<div class="'+Define.CLASS.BOOKMARK_EDIT_AREA_WRAP+'">' +
	                        '<div style="">' +
	                            '<label class="' + Define.CLASS.BOOKMARK_EDIT_LABEL + '">' + Resource.bookmarkDialog.bookmark_edit_label + '</label>' +
	                            '<input type="text" class="' + Define.CLASS.BOOKMARK_EDIT_INPUT + '" maxlength="30">' +
	                        '</div>' +
	                        '<div style="">' +
	                            '<div class="' + Define.CLASS.BOOKMARK_BUTTON + ' ' + Define.CLASS.BOOKMARK_BUTTON_ADD + '">' + Resource.bookmarkDialog.bookmark_add + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_BUTTON + ' ' + Define.CLASS.BOOKMARK_BUTTON_MODIFY + '">' + Resource.bookmarkDialog.bookmark_modify + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_BUTTON + ' ' + Define.CLASS.BOOKMARK_BUTTON_DELETE + '">' + Resource.bookmarkDialog.bookmark_delete + '</div>' +
	                        '</div>' +
	                    '</div>' +
	                '</div>' +
	                '<div class="'+Define.CLASS.BOOKMARK_LIST_AREA+'">' +
	                    '<div class="'+Define.CLASS.BOOKMARK_LIST_AREA_WRAP+'">' +
	                        '<div class="'+Define.CLASS.BOOKMARK_LIST_AREA_LABEL_WRAP+'">' +
	                            '<span>' + Resource.bookmarkDialog.bookmark_list_label + '</span>' +
	                        '</div>' +
	                        '<div class="' + Define.CLASS.BOOKMARK_LIST + '">' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                            '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + 'TEST' + '</div>' +
	                        '</div>' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_FOOTER+'">' +
	                '<ul class="'+Define.CLASS.DIALOG_BUTTONS+'">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.bookmarkDialog.closeButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(BookmarkDialog.prototype, new AbstractDialog());

	BookmarkDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.bookmarkInput = this.$dNode.find('.' + Define.CLASS.BOOKMARK_EDIT_INPUT);

	    var $addButton = this.$dNode.find('.' + Define.CLASS.BOOKMARK_BUTTON_ADD);
	    var $modifyButton = this.$dNode.find('.' + Define.CLASS.BOOKMARK_BUTTON_MODIFY);
	    var $deleteButton = this.$dNode.find('.' + Define.CLASS.BOOKMARK_BUTTON_DELETE);

	    this.$dNode.find("."+Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	                //적용
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });


	    this.$dNode.find("." + Define.CLASS.BOOKMARK_BUTTON).on('click', function(e){
	        var $target = $(e.target);

	        if (!$target.hasClass(Define.CLASS.BOOKMARK_BUTTON_DISABLED)){
	            var inputValue = _this.bookmarkInput.val();

	            if ($target.hasClass(Define.CLASS.BOOKMARK_BUTTON_ADD)) {

	                if (!inputValue.length) {
	                    alert(Resource.bookmarkDialog.bookmark_non_text);
	                    return;
	                } else if (!inputValue.trim().length){
	                    alert(Resource.bookmarkDialog.bookmark_non_only_space);
	                    return;
	                } else {
	                    inputValue = inputValue.trim();
	                    _this.bookmarkInput.val(inputValue)
	                }

	                if (Util.hasSpecialText(inputValue)) {
	                    alert(Resource.bookmarkDialog.bookmark_not_use_special_character);
	                    return;
	                }

	                if (_this.editorElement.find('#' + inputValue).length) {
	                    alert(Resource.bookmarkDialog.bookmark_already_bookmark);

	                    return;
	                }

	                var selInfo = _this.selectionRange;
	                var range = { };

	                if (!selInfo) {
	                    _this.$dom.selection.set({
	                        p : [0,0],
	                        r : [0,0]
	                    });

	                    range = {
	                        p : [0, 0],
	                        r : [0, 0]
	                    };
	                } else {
	                    _this.$dom.selection.set({
	                        p : [selInfo.p[0],selInfo.p[0]],
	                        r : [selInfo.r[0],selInfo.r[0]]
	                    });

	                    range = {
	                        p : [selInfo.p[0],selInfo.p[0]],
	                        r : [selInfo.r[0],selInfo.r[0]]
	                    };
	                }

	                range.s = "text";

	                var opSource = {
	                    type : "create",
	                    name : "bookmark",
	                    value : inputValue,
	                    range : range
	                };

	                _this.router.doOperation([opSource]);
	                _this.router.setRedoHistory();

	                _this.setBookmarkList();
	                // _this.closeDialog();
	            } else if ($target.hasClass(Define.CLASS.BOOKMARK_BUTTON_MODIFY)) {
	                var $selectedBookmark = _this.$dNode.find('.' + Define.CLASS.SELECTED_BOOKMARK);

	                if (Util.hasSpecialText(inputValue)) {
	                    alert(Resource.bookmarkDialog.bookmark_not_use_special_character);
	                    return;
	                }

	                if (_this.editorElement.find('#' + inputValue).length) {
	                    alert(Resource.bookmarkDialog.bookmark_already_bookmark);

	                    return;
	                }

	                var opSource = {
	                    type : "update",
	                    name : "bookmark",
	                    value : {
	                        originalBookmark : $selectedBookmark.html(),
	                        changeBookmark : inputValue
	                    }
	                };

	                _this.router.doOperation([opSource]);
	                _this.router.setRedoHistory();

	                $selectedBookmark.html(inputValue);
	            } else if ($target.hasClass(Define.CLASS.BOOKMARK_BUTTON_DELETE)) {
	                var $selectedBookmark = _this.$dNode.find('.' + Define.CLASS.SELECTED_BOOKMARK);

	                var bookmarkValue = $selectedBookmark.html();
	                var bool = confirm('[' + bookmarkValue + ']' + ' ' + Resource.bookmarkDialog.bookmark_delete_confirm_message);

	                if (bool){
	                    var opSource = {
	                        type : "delete",
	                        name : "bookmark",
	                        value : bookmarkValue
	                    };

	                    _this.router.doOperation([opSource]);
	                    _this.router.setRedoHistory();

	                    $selectedBookmark.remove();
	                    _this.bookmarkInput.val('');

	                    $addButton.removeClass(Define.CLASS.BOOKMARK_BUTTON_DISABLED);
	                    $modifyButton.addClass(Define.CLASS.BOOKMARK_BUTTON_DISABLED);
	                    $deleteButton.addClass(Define.CLASS.BOOKMARK_BUTTON_DISABLED);
	                }
	            }
	        }
	    });

	    this.$dNode.find("." + Define.CLASS.BOOKMARK_LIST).on('click', function(e){
	        var $target = $(e.target);

	        if ($target.hasClass(Define.CLASS.BOOKMARK_LIST_ITEM)){

	            if ($target.hasClass(Define.CLASS.SELECTED_BOOKMARK)) {
	                $target.removeClass(Define.CLASS.SELECTED_BOOKMARK);

	                $addButton.removeClass(Define.CLASS.BOOKMARK_BUTTON_DISABLED);
	                $modifyButton.addClass(Define.CLASS.BOOKMARK_BUTTON_DISABLED);
	                $deleteButton.addClass(Define.CLASS.BOOKMARK_BUTTON_DISABLED);

	                _this.bookmarkInput.val("");
	            } else {
	                var bookmarkItems = _this.$dNode.find('.' + Define.CLASS.BOOKMARK_LIST_ITEM);
	                bookmarkItems.removeClass(Define.CLASS.SELECTED_BOOKMARK);
	                $target.addClass(Define.CLASS.SELECTED_BOOKMARK);

	                $addButton.addClass(Define.CLASS.BOOKMARK_BUTTON_DISABLED);
	                $modifyButton.removeClass(Define.CLASS.BOOKMARK_BUTTON_DISABLED);
	                $deleteButton.removeClass(Define.CLASS.BOOKMARK_BUTTON_DISABLED);

	                var bookmarkID = $target.html();
	                _this.bookmarkInput.val(bookmarkID);
	            }
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	BookmarkDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    this.setSelectionRange();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_BOOKMARK);

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setBookmarkList($dialog);

	    this.setDialogPosition($dialog);
	};

	BookmarkDialog.prototype.setBookmarkList = function($dialog) {

	    if (!$dialog) {
	        $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_BOOKMARK);

	        if(!$dialog[0]){
	            $dialog = this.$dNode;
	            this.$dialogNode.append(this.$dNode[0]);
	        }
	    }

	    var $bookmarkList = $dialog.find('.' + Define.CLASS.BOOKMARK_LIST);

	    $bookmarkList.html('');

	    this.bookmarkInput.val("");
	    this.bookmarkInput.focus();

	    $dialog.find('.' + Define.CLASS.BOOKMARK_BUTTON).addClass(Define.CLASS.BOOKMARK_BUTTON_DISABLED);
	    $dialog.find('.' + Define.CLASS.BOOKMARK_BUTTON_ADD).removeClass(Define.CLASS.BOOKMARK_BUTTON_DISABLED);

	    var bookmarkNodes = this.editorElement.find('.' + Define.CLASS.CONTENTS).find('.' + Define.CLASS.KK_BOOKMARK_VIEW);

	    var bookmarkItemHTML = '';

	    for(var i = 0, length = bookmarkNodes.length; i < length; i++) {
	        var id = bookmarkNodes[i].id;
	        bookmarkItemHTML += '<div class="' + Define.CLASS.BOOKMARK_LIST_ITEM + '">' + id + '</div>';
	    }

	    $bookmarkList.html(bookmarkItemHTML);
	};

	module.exports = BookmarkDialog;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);
	var _AbstractUploadDialog = __webpack_require__(60);

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);
	var Resource = __webpack_require__(13);

	function TableDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;

	    this.templateHTML = '' +
	        '<div class="' + Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_TABLE + '">' +
	            '<div class="' + Define.CLASS.DIALOG_HEADER + '">' +
	                '<div class="' + Define.CLASS.DIALOG_TITLE + '">' + Resource.tableDialog.title_insert + '</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_CONTENTS + '">' +
	                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_MENUS + '">' +
	                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_MENU_ITEM + ' ' + Define.CLASS.TABLE_DIALOG_TAB_MENU_COMMON + ' ' + Define.CLASS.TABLE_DIALOG_TAB_MENU_ON + '">' + Resource.tableDialog.tab_common + '</div>' +
	                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_MENU_ITEM + ' ' + Define.CLASS.TABLE_DIALOG_TAB_MENU_BACKGROUND + '">' + Resource.tableDialog.tab_background + '</div>' +
	                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_MENU_ITEM + ' ' + Define.CLASS.TABLE_DIALOG_TAB_MENU_TAMPLATE + '">' + Resource.tableDialog.tab_template + '</div>' +
	                '</div>' +
	                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS + '">' +
	                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON + ' ' +  Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON + '">' +
	                        '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_PROPERTY_FIELD +  ' ' + Define.CLASS.ACCORDION_FIELD + ' ' + Define.CLASS.DEFAULT_OPEN_FIELD + '">' +
	                            '<table class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_SET + '">' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_LABEL + '">' + Resource.tableDialog.row_count + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_INPUT + '">' + '<input type="text" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.SMART_SPINNER_CUSTOM + ' '  + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_COL_INPUT + '" /></td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_LABEL + '">'  + Resource.tableDialog.col_count + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_INPUT + '">' + '<input type="text" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.SMART_SPINNER_CUSTOM + ' '  + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ROW_INPUT + '" /></td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_LABEL + '">'  + Resource.tableDialog.width_count + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_WIDTH_INPUT + '" /> px</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_LABEL + '">'  + Resource.tableDialog.height_count + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_HEIGHT_INPUT + '" /> px</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_LABEL + '">'  + Resource.tableDialog.margin_left_count + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_MARGIN_LEFT_INPUT + '" /> px</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_LABEL + '">'  + Resource.tableDialog.align_count + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_INPUT + '">' +
	                                            '<select class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ALIGN_SELECT + '">' +
	                                                '<option value="default">' + Resource.tableDialog.align_default + '</option>' +
	                                                '<option value="left">' + Resource.tableDialog.align_left + '</option>' +
	                                                '<option value="center">' + Resource.tableDialog.align_center + '</option>' +
	                                                '<option value="right">' + Resource.tableDialog.align_right + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_LABEL + '">' + Resource.tableDialog.id_label + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ID_INPUT + '" /></td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_LABEL + '">'  + Resource.tableDialog.class_label + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_CLASS_INPUT + '" /></td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_TD_CHECK + '" colspan="4">' + '<label><input class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_SEPARATE_CHECK + '" type="checkbox">' + Resource.tableDialog.border_separate + '</label></td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                        '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_BORDER_FIELD +  ' ' + Define.CLASS.ACCORDION_FIELD + '">' +
	                            '<table class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_SET + '">' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_LABEL + '">' + Resource.tableDialog.border_type + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_INPUT + '" colspan="3">' +
	                                            '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_WRAP + '">' +
	                                                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM + ' ' + Define.CLASS.BORDER_ITEM_SELECTED + '">' +
	                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_SOLID + '"/>' +
	                                                '</div>' +
	                                                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM + '">' +
	                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOUBLE + '"/>' +
	                                                '</div>' +
	                                                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM + '">' +
	                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DASHED + '"/>' +
	                                                '</div>' +
	                                                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM + '">' +
	                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOTTED + '"/>' +
	                                                '</div>' +
	                                                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM + '">' +
	                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE + '"/>' +
	                                                    '<span class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE_LABEL + '">' + Resource.tableDialog.border_none_type + '</span>' +
	                                                '</div>' +
	                                            '</div>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_LABEL + '">' + Resource.tableDialog.border_color + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_INPUT + '">' + '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BORDER_COLOR_PICKER + '"/>' + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_LABEL + '">' + Resource.tableDialog.border_width + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_INPUT + '">' + '<input type="text" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.SMART_SPINNER_CUSTOM + ' '  + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BORDER_WIDTH_INPUT + '" />' + '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_LABEL + '">' + Resource.tableDialog.border_cell_spacing_width + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_INPUT + '">' + '<input type="text" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.SMART_SPINNER_CUSTOM + ' '  + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_CELL_SPACING_INPUT + '" />' + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_LABEL + '">' + Resource.tableDialog.border_cell_padding + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_INPUT + '">' + '<input type="text" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.SMART_SPINNER_CUSTOM + ' '  + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_CELL_PADDING_INPUT + '" />' + '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_LABEL + '">' + Resource.tableDialog.border_option + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_INPUT + '" colspan="3">' +
	                                            '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_WRAP + '">' +
	                                                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU + '">' +
	                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ITEM +'">' +
	                                                        '<table class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_OUTLINE + '">' +
	                                                            '<colgroup>' +
	                                                                '<col style="width:50%;">' +
	                                                                '<col style="width:50%;">' +
	                                                            '</colgroup>' +
	                                                            '<tbody>' +
	                                                                '<tr><td></td><td></td></tr>' +
	                                                                '<tr><td></td><td></td></tr>' +
	                                                            '</tbody>' +
	                                                        '</table>' +
	                                                        '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_LABEL + '">' + Resource.tableDialog.border_outline + '</div>' +
	                                                    '</div>' +
	                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ITEM + '">' +
	                                                        '<table class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_INNER + '">' +
	                                                            '<colgroup>' +
	                                                                '<col style="width:50%;">' +
	                                                                '<col style="width:50%;">' +
	                                                            '</colgroup>' +
	                                                            '<tbody>' +
	                                                                '<tr><td style="border-right: 1px solid #989898;border-bottom: 1px solid #989898;"></td><td style="border-left: 1px solid #989898;border-bottom: 1px solid #989898;"></td></tr>' +
	                                                                '<tr><td style="border-top: 1px solid #989898;border-right: 1px solid #989898;"></td><td style="border-top: 1px solid #989898;border-left: 1px solid #989898;"></td></tr>' +
	                                                            '</tbody>' +
	                                                        '</table>' +
	                                                        '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_LABEL + '">' + Resource.tableDialog.border_inner + '</div>' +
	                                                    '</div>' +
	                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ITEM + '">' +
	                                                        '<table class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ALL + '">' +
	                                                            '<colgroup>' +
	                                                                '<col style="width:50%;">' +
	                                                                '<col style="width:50%;">' +
	                                                            '</colgroup>' +
	                                                            '<tbody>' +
	                                                                '<tr><td style="border-right: 1px solid #989898;border-bottom: 1px solid #989898;"></td><td style="border-left: 1px solid #989898;border-bottom: 1px solid #989898;"></td></tr>' +
	                                                                '<tr><td style="border-top: 1px solid #989898;border-right: 1px solid #989898;"></td><td style="border-top: 1px solid #989898;border-left: 1px solid #989898;"></td></tr>' +
	                                                            '</tbody>' +
	                                                        '</table>' +
	                                                        '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_LABEL + '">' + Resource.tableDialog.border_all + '</div>' +
	                                                    '</div>' +
	                                                '</div>' +
	                                                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER + '">' +
	                                                    '<table class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_WRAP + '">' +
	                                                        '<colgroup>' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                        '</colgroup>' +
	                                                        '<tbody>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;"></td>' +
	                                                                '<td></td>' +
	                                                                '<td></td>' +
	                                                                '<td></td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;">' +
	                                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS + ' ' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_TOP + '">' + '―' + '</div>' +
	                                                                '</td>' +
	                                                                '<td colspan="4" rowspan="3">' +
	                                                                    '<table class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_TABLE + '">' +
	                                                                        '<colgroup>' +
	                                                                            '<col style="width:50%;">' +
	                                                                            '<col style="width:50%;">' +
	                                                                        '</colgroup>' +
	                                                                        '<tbody>' +
	                                                                            '<tr><td></td><td></td></tr>' +
	                                                                            '<tr><td></td><td></td></tr>' +
	                                                                        '</tbody>' +
	                                                                    '</table>' +
	                                                                '</td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;">' +
	                                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS + ' ' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_MIDDLE + '">' + '―' + '</div>' +
	                                                                '</td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;">' +
	                                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS + ' ' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_BOTTOM + '">' + '―' + '</div>' +
	                                                                '</td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;"></td>' +
	                                                                '<td>' +
	                                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS + ' ' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_LEFT + '">' + ' | ' + '</div>' +
	                                                                '</td>' +
	                                                                '<td>' +
	                                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS + ' ' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_CENTER + '">' + ' | ' + '</div>' +
	                                                                '</td>' +
	                                                                '<td>' +
	                                                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS + ' ' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_RIGHT + '">' + ' | ' + '</div>' +
	                                                                '</td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                        '</tbody>' +
	                                                    '</table>' +
	                                                '</div>' +
	                                            '</div>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                        '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_CAPTION_FIELD + '">' +
	                            '<table class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_CAPTION_TABLE_SET + '">' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_CAPTION_TABLE_TD_LABEL + '">' + Resource.tableDialog.table_caption + '<div class="' + Define.CLASS.WEB_ACCESSIBILITY_ICON + '"/>' + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_CAPTION_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TABLE_CAPTION_INPUT + '" /></td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_CAPTION_TABLE_TD_LABEL + '">'  + Resource.tableDialog.table_summary + '<div class="' + Define.CLASS.WEB_ACCESSIBILITY_ICON + '"/>' + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_CAPTION_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TABLE_SUMMARY_INPUT + '" /></td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                    '</div>' +
	                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND + '">' +
	                        '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_PROPERTY_FIELD + '">' +
	                            '<table class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_SET + '">' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_LABEL + '">' + Resource.tableDialog.table_background_image + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_INPUT + '" colspan="3">' +
	                                            '<input type="text" class="' + Define.CLASS.FILE_OPEN_PATH_INPUT + '">' + '<label class="' + Define.CLASS.FILE_OPEN_INPUT_LABEL + '">' + Resource.tableDialog.file_input_label  + '</label>' +

	                                            (typeof window.FormData === 'undefined' ? '<form class="' + Define.CLASS.UPLOAD_FORM + '" method="post" enctype="multipart/form-data" action="">' : '') +
	                                            '<input name="' + Define.NAME.UPLOAD_IMAGE_TYPE + '" type="file" accept="' + '.' + Define.IMAGE_TYPE_FILES.join(',.') + '" class="' + Define.CLASS.FILE_OPEN_INPUT + '">' +
	                                            (typeof window.FormData === 'undefined' ? '</form>' : '') +

	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_LABEL + '">'  + Resource.tableDialog.table_background_attachment + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_INPUT + '">' +
	                                            '<select class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_ATTACHMENT_SELECT + '">' +
	                                                '<option value="default">' + Resource.tableDialog.attachment_default + '</option>' +
	                                                '<option value="scroll">' + Resource.tableDialog.attachment_scroll + '</option>' +
	                                                '<option value="fixed">' + Resource.tableDialog.attachment_fixed + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_LABEL + '">'  + Resource.tableDialog.table_background_position_x + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_X_INPUT + '" /> px</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_LABEL + '">'  + Resource.tableDialog.table_background_repeat_label + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_INPUT + '">' +
	                                            '<select class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_REPEAT_SELECT + '">' +
	                                                '<option value="none">' + Resource.tableDialog.table_background_repeat_default + '</option>' +
	                                                '<option value="no-repeat">' + Resource.tableDialog.table_background_no_repeat + '</option>' +
	                                                '<option value="repeat">' + Resource.tableDialog.table_background_repeat + '</option>' +
	                                                '<option value="repeat-x">' + Resource.tableDialog.table_background_repeat_x + '</option>' +
	                                                '<option value="repeat-y">' + Resource.tableDialog.table_background_repeat_y + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_LABEL + '">'  + Resource.tableDialog.table_background_position_y + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_Y_INPUT + '" /> px</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_LABEL + '">' + Resource.tableDialog.background_color + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_INPUT + '">' + '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BACKGROUND_COLOR_PICKER + '"/>' + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_LABEL + '">' + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_TD_INPUT + '">' + '</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                        '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_FIELD + ' ' + Define.CLASS.ACCORDION_FIELD + '">' +
	                            '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_SCOPE_WRAP + '">' +
	                                '<label><input class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_SCOPE_CHECK + '" type="checkbox">' + Resource.tableDialog.scope_setting +'</label>' +
	                            '</div>' +
	                            '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_WRAP + '">' +
	                                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM + ' ' + Define.CLASS.TABLE_BACKGROUND_HEADER_NONE + ' ' + Define.CLASS.TABLE_BACKGROUND_HEADER_ITEM_SELECTED + '">' +
	                                    '<table>' +
	                                        '<colgroup>' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                        '</colgroup>' +
	                                        '<tbody>' +
	                                            '<tr><td></td><td></td><td></td></tr>' +
	                                            '<tr><td></td><td></td><td></td></tr>' +
	                                            '<tr><td></td><td></td><td></td></tr>' +
	                                        '</tbody>' +
	                                    '</table>' +
	                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM_LABEL + '">' +
	                                        Resource.tableDialog.header_none +
	                                    '</div>' +
	                                '</div>' +
	                                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM + ' ' + Define.CLASS.TABLE_BACKGROUND_HEADER_LEFT + '">' +
	                                    '<table>' +
	                                        '<colgroup>' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                        '</colgroup>' +
	                                        '<tbody>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td></td><td></td></tr>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td></td><td></td></tr>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td></td><td></td></tr>' +
	                                        '</tbody>' +
	                                    '</table>' +
	                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM_LABEL + '">' +
	                                        Resource.tableDialog.header_left +
	                                    '</div>' +
	                                '</div>' +
	                                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM + ' ' + Define.CLASS.TABLE_BACKGROUND_HEADER_TOP + '">' +
	                                    '<table>' +
	                                        '<colgroup>' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                        '</colgroup>' +
	                                        '<tbody>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td style="background-color: #e5e5fd;"></td><td style="background-color: #e5e5fd;"></td></tr>' +
	                                            '<tr><td></td><td></td><td></td></tr>' +
	                                            '<tr><td></td><td></td><td></td></tr>' +
	                                        '</tbody>' +
	                                    '</table>' +
	                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM_LABEL + '">' +
	                                        Resource.tableDialog.header_top +
	                                    '</div>' +
	                                '</div>' +
	                                '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM + ' ' + Define.CLASS.TABLE_BACKGROUND_HEADER_LEFT_TOP + '">' +
	                                    '<table>' +
	                                        '<colgroup>' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                            '<col style="width:33%;">' +
	                                        '</colgroup>' +
	                                        '<tbody>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td style="background-color: #e5e5fd;"></td><td style="background-color: #e5e5fd;"></td></tr>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td></td><td></td></tr>' +
	                                            '<tr><td style="background-color: #e5e5fd;"></td><td></td><td></td></tr>' +
	                                        '</tbody>' +
	                                    '</table>' +
	                                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM_LABEL + '">' +
	                                        Resource.tableDialog.header_left_top +
	                                    '</div>' +
	                                '</div>' +
	                            '</div>' +
	                        '</div>' +
	                    '</div>' +
	                    '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE + '">' +
	                        '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_PROPERTY_FIELD + '">' +
	                            '<table class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_SET + '">' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_TD_LABEL + '">' + Resource.tableDialog.row_count + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_TD_INPUT + '">' + '<input type="text" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.SMART_SPINNER_CUSTOM + ' '  + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_COL_INPUT + '" /></td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_TD_LABEL + '">'  + Resource.tableDialog.col_count + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_TD_INPUT + '">' + '<input type="text" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.SMART_SPINNER_CUSTOM + ' '  + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_ROW_INPUT + '" /></td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_TD_LABEL + '">'  + Resource.tableDialog.width_count + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_WIDTH_INPUT + '" /> px</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_TD_LABEL + '">'  + Resource.tableDialog.height_count + '</td>' +
	                                        '<td class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_HEIGHT_INPUT + '" /> px</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                        '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_FIELD + ' ' + Define.CLASS.ACCORDION_FIELD + '">' +
	                            '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_SCOPE_WRAP + '">' +
	                                '<label><input class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_SCOPE_CHECK + '" type="checkbox">' + Resource.tableDialog.scope_setting +'</label>' +
	                            '</div>' +
	                            '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_WRAP + '">' +
	                                this.getTemplateTableStyle() +
	                            '</div>' +
	                        '</div>' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_FOOTER + '">' +
	                '<ul class="' + Define.CLASS.DIALOG_BUTTONS + '">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(TableDialog.prototype, new AbstractDialog());
	$.extend(TableDialog.prototype, new _AbstractUploadDialog());

	TableDialog.prototype.getTemplateTableStyle = function() {
	    var tableStyle = '';

	    for(var i = 0, length = 12; i < length; i++) {
	        tableStyle += '' +
	            '<div class="' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_ITEM + ' ' + (Define.CLASS.TABLE_TEMPLATE_HEADER_ITEM + i ) + '">' +
	                '<table>' +
	                    '<colgroup>' +
	                    '<col style="width:33%;">' +
	                    '<col style="width:33%;">' +
	                    '<col style="width:33%;">' +
	                '</colgroup>' +
	                '<tbody>' +
	                    '<tr><td></td><td></td><td></td></tr>' +
	                    '<tr><td></td><td></td><td></td></tr>' +
	                    '<tr><td></td><td></td><td></td></tr>' +
	                '</tbody>' +
	                '</table>' +
	            '</div>';
	    }

	    return tableStyle;
	};

	TableDialog.prototype.spinitChange = function(el, value) {
	    if (this.defaultTableSet) {
	        if (el.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ROW_INPUT)) {
	            this.defaultTableSet.row = value;

	        } else if (el.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_COL_INPUT)) {
	            this.defaultTableSet.col = value;

	        } else if (el.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_CELL_SPACING_INPUT)) {
	            if (!isNaN(value)) {
	                this.defaultTableSet.cellSpacing = value;
	            } else {
	                el[0].reset(this.defaultTableSet.cellSpacing || 0);
	            }

	        } else if (el.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_CELL_PADDING_INPUT)) {
	            if (!isNaN(value)) {
	                this.defaultTableSet.cellPadding = value;
	            } else {
	                el[0].reset(this.defaultTableSet.cellPadding || 1);
	            }
	        }
	    }
	};

	TableDialog.prototype.inputChange = function(e){
	    var $element = $(e.target);
	    var value = parseInt($element.val());

	    if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_WIDTH_INPUT)) {
	        if (!isNaN(value)) {
	            this.defaultTableSet.width = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultTableSet.width || '');
	            }
	        }

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_HEIGHT_INPUT)) {
	        if (!isNaN(value)) {
	            this.defaultTableSet.height = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultTableSet.height || '');
	            }
	        }

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_MARGIN_LEFT_INPUT)) {
	        if (!isNaN(value)) {
	            this.defaultTableSet.marginLeft = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultTableSet.marginLeft || '');
	            }
	        }

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ID_INPUT)) {
	        this.defaultTableSet.id = $element.val();

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_CLASS_INPUT)) {
	        this.defaultTableSet.className = $element.val();

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TABLE_CAPTION_INPUT)) {
	        this.defaultTableSet.caption = $element.val();

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TABLE_SUMMARY_INPUT)) {
	        this.defaultTableSet.summary = $element.val();

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_X_INPUT)) {
	        if (!isNaN(value)) {
	            this.defaultTableSet.positionX = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultTableSet.positionX || '');
	            }
	        }

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_Y_INPUT)) {
	        if (!isNaN(value)) {
	            this.defaultTableSet.positionY = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultTableSet.positionY || '');
	            }
	        }

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_WIDTH_INPUT)) {
	        if (!isNaN(value)) {
	            $element.val(value);
	        } else {
	            $element.val('');
	        }

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_HEIGHT_INPUT)) {
	        if (!isNaN(value)) {
	            $element.val(value);
	        } else {
	            $element.val('');
	        }
	    }
	};

	TableDialog.prototype.selectChange = function(e){
	    console.log("selectChange");

	    var $element = $(e.target);

	    if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ALIGN_SELECT)) {
	        this.defaultTableSet.align = $element.val();

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_ATTACHMENT_SELECT)) {
	        this.defaultTableSet.attachment = $element.val();

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_REPEAT_SELECT)) {
	        this.defaultTableSet.repeat = $element.val();
	    }
	};

	TableDialog.prototype.checkChange = function(e){
	    // console.log("checkChange");

	    var $element = $(e.target);

	    if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_SEPARATE_CHECK)) {
	        this.defaultTableSet.borderSeparate = $element[0].checked;

	    } else if ($element.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_SCOPE_CHECK)) {
	        this.defaultTableSet.scope = $element[0].checked;

	    }
	};

	TableDialog.prototype.borderLineClick = function(e){
	    var $target = $(e.target);

	    var $selectedBorderTypeItem = this.borderTypeItems.filter('.' + Define.CLASS.BORDER_ITEM_SELECTED);
	    var $borderType = $selectedBorderTypeItem.children().first();
	    var borderType = 'solid';
	    var borderWidth = this.borderWidth.val();
	    var borderColor = Util.getRgbToHex(this.borderColorPicker.css('backgroundColor')) || '#000000';

	    var $tds = this.borderLineTable.find('td');

	    if ($borderType.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_SOLID)) {
	        borderType = 'solid';

	    } else if ($borderType.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOUBLE)) {
	        borderType = 'double';

	    } else if ($borderType.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DASHED)) {
	        borderType = 'dashed';

	    } else if ($borderType.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOTTED)) {
	        borderType = 'dotted';

	    } else if ($borderType.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE)) {
	        borderType = 'none';
	    }

	    var borderString = borderWidth + 'px ' + borderType + ' ' + borderColor;

	    if ($target.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_TOP)) {
	        $tds.eq(0).css('border-top', borderString);
	        $tds.eq(1).css('border-top', borderString);

	        this.defaultTableSet.border.top = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_MIDDLE)) {
	        $tds.eq(0).css('border-bottom', borderString);
	        $tds.eq(1).css('border-bottom', borderString);
	        $tds.eq(2).css('border-top', borderString);
	        $tds.eq(3).css('border-top', borderString);

	        this.defaultTableSet.border.middle = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_BOTTOM)) {
	        $tds.eq(2).css('border-bottom', borderString);
	        $tds.eq(3).css('border-bottom', borderString);

	        this.defaultTableSet.border.bottom = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_LEFT)) {
	        $tds.eq(0).css('border-left', borderString);
	        $tds.eq(2).css('border-left', borderString);

	        this.defaultTableSet.border.left = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_CENTER)) {
	        $tds.eq(0).css('border-right', borderString);
	        $tds.eq(1).css('border-left', borderString);
	        $tds.eq(2).css('border-right', borderString);
	        $tds.eq(3).css('border-left', borderString);

	        this.defaultTableSet.border.center = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_RIGHT)) {
	        $tds.eq(1).css('border-right', borderString);
	        $tds.eq(3).css('border-right', borderString);

	        this.defaultTableSet.border.right = { width : borderWidth, type : borderType, color : borderColor };
	    }
	};

	TableDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    //TAB Element
	    this.titleNode = this.$dNode.find('.' + Define.CLASS.DIALOG_TITLE);

	    this.tabCommon = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_MENU_COMMON);
	    this.tabBackground = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_MENU_BACKGROUND);
	    this.tabTemplate = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_MENU_TAMPLATE);

	    this.tabCommonContents = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON);
	    this.tabBackgroundContents = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND);
	    this.tabTemplateContents = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE);


	    //Table Common Setting Elements
	    this.rowInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ROW_INPUT).spinit({ height: 15, width: 45, min: 1, initValue: 3, max: 255, callback : $.proxy(this.spinitChange, this) }); //mask: 'Red', callback: onred
	    this.colInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_COL_INPUT).spinit({ height: 15, width: 45, min: 1, initValue: 3, max: 255, callback : $.proxy(this.spinitChange, this) });
	    this.widthInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_WIDTH_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.heigthInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_HEIGHT_INPUT).on('input', $.proxy(this.inputChange, this));

	    this.marginLeftInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_MARGIN_LEFT_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.alignSelect = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ALIGN_SELECT).on('change', $.proxy(this.selectChange, this));

	    this.idInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_ID_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.classInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_CLASS_INPUT).on('input', $.proxy(this.inputChange, this));

	    this.borderSeparateCheck = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_COMMON_TABLE_SEPARATE_CHECK).on('change', $.proxy(this.checkChange, this));

	    this.borderTypeItems = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM).on('click', function(e){
	        var $target = $(e.target);

	        if (!$target.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM)){
	            $target = $target.closest('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM);
	        }

	        if ($target.length) {
	            _this.borderTypeItems.removeClass(Define.CLASS.BORDER_ITEM_SELECTED);
	            $target.addClass(Define.CLASS.BORDER_ITEM_SELECTED);

	            if ($target.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOUBLE).length) {
	                _this.borderWidth[0].reset(3);
	            }
	        }
	    });

	    this.borderLineTable = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_TABLE);

	    this.borderLineControlButtons = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS).on('click', $.proxy(this.borderLineClick, this));

	    this.borderLineControlLeftTop = this.borderLineControlButtons.filter('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_TOP);
	    this.borderLineControlLeftMiddle = this.borderLineControlButtons.filter('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_MIDDLE);
	    this.borderLineControlLeftBottom = this.borderLineControlButtons.filter('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_BOTTOM);
	    this.borderLineControlBottomLeft = this.borderLineControlButtons.filter('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_LEFT);
	    this.borderLineControlBottomCenter = this.borderLineControlButtons.filter('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_CENTER);
	    this.borderLineControlBottomRight = this.borderLineControlButtons.filter('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_RIGHT);

	    this.borderColorPicker = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BORDER_COLOR_PICKER);

	    this.borderWidth = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BORDER_WIDTH_INPUT).spinit({ height: 15, width: 45, min: 0, initValue: 1, max: 10 });
	    this.cellSpacing = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_CELL_SPACING_INPUT).spinit({ height: 15, width: 45, min: 0, initValue: 0, max: 10, callback : $.proxy(this.spinitChange, this) });
	    this.cellPadding = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_CELL_PADDING_INPUT).spinit({ height: 15, width: 45, min: 0, initValue: 1, max: 10, callback : $.proxy(this.spinitChange, this)  });

	    this.captionInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TABLE_CAPTION_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.summaryInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TABLE_SUMMARY_INPUT).on('input', $.proxy(this.inputChange, this));




	    ///////////////////// FileUpload Start //////////////////////

	    var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        if(data && !data.isError && data.statusText !== "error") {
	            _this.$pathInput.val(data.url);
	            _this.defaultTableSet.image = data.url;
	        } else {
	            alert(Resource.imageDialog.image_upload_error);
	        }

	        _this.$pathInput.attr('style', '');
	    };

	    //Table Background Setting Elements
	    this.$fileInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT).on('change', function(e){
	        _this.doFileUpload(Define.NAME.UPLOAD_IMAGE_TYPE, url, callbackFn);
	    });

	    ///////////////////// FileUpload End //////////////////////




	    this.imageFileInputLable = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT_LABEL).on('click', function(e){
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	    });

	    this.$pathInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_PATH_INPUT).on('input', function(e){
	        _this.defaultTableSet.image = _this.$pathInput.val();
	    });

	    this.$borderItems = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ITEM).on('click', function(e){
	        var $borderTypeNode = $(this.childNodes[0]);

	        if ($borderTypeNode.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_OUTLINE)){
	            _this.borderLineClick({target : _this.borderLineControlLeftTop});
	            _this.borderLineClick({target : _this.borderLineControlLeftBottom});
	            _this.borderLineClick({target : _this.borderLineControlBottomLeft});
	            _this.borderLineClick({target : _this.borderLineControlBottomRight});

	        } else if ($borderTypeNode.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_INNER)){
	            _this.borderLineClick({target : _this.borderLineControlLeftMiddle});
	            _this.borderLineClick({target : _this.borderLineControlBottomCenter});

	        } else if ($borderTypeNode.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ALL)){
	            _this.borderLineClick({target : _this.borderLineControlLeftTop});
	            _this.borderLineClick({target : _this.borderLineControlLeftMiddle});
	            _this.borderLineClick({target : _this.borderLineControlLeftBottom});
	            _this.borderLineClick({target : _this.borderLineControlBottomLeft});
	            _this.borderLineClick({target : _this.borderLineControlBottomCenter});
	            _this.borderLineClick({target : _this.borderLineControlBottomRight});
	        }
	    });

	    this.backgroundAttachment = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_ATTACHMENT_SELECT).on('change', $.proxy(this.selectChange, this));
	    this.backgroundRepeat = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_REPEAT_SELECT).on('change', $.proxy(this.selectChange, this));

	    this.backgroundPositionX = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_X_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.backgroundPositionY = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_Y_INPUT).on('input', $.proxy(this.inputChange, this));

	    this.backgroundColorPicker = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BACKGROUND_COLOR_PICKER);

	    this.backgroundScope = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_SCOPE_CHECK).on('change', $.proxy(this.checkChange, this));

	    this.backgroundHeaderItems = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM).on('click', function(e){
	        var $target = $(e.target);

	        if (!$target.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM)){
	            $target = $target.closest('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM);
	        }

	        if ($target.length) {
	            _this.backgroundHeaderItems.removeClass(Define.CLASS.TABLE_BACKGROUND_HEADER_ITEM_SELECTED);
	            $target.addClass(Define.CLASS.TABLE_BACKGROUND_HEADER_ITEM_SELECTED);

	            if ($target.hasClass(Define.CLASS.TABLE_BACKGROUND_HEADER_NONE)) {
	                _this.defaultTableSet.headerType = 'none';

	            } else if ($target.hasClass(Define.CLASS.TABLE_BACKGROUND_HEADER_LEFT)) {
	                _this.defaultTableSet.headerType = 'left';

	            } else if ($target.hasClass(Define.CLASS.TABLE_BACKGROUND_HEADER_TOP)) {
	                _this.defaultTableSet.headerType = 'top';

	            } else if ($target.hasClass(Define.CLASS.TABLE_BACKGROUND_HEADER_LEFT_TOP)) {
	                _this.defaultTableSet.headerType = 'left_top';

	            }
	        }
	    });



	    this.$dNode.find("." + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BORDER_COLOR_PICKER).kkColorPicker({
	        callback : function(e, data){
	            _this.borderColorPicker.css("background-color", "#" + data.color);
	            _this.borderColorPicker.find("." + Define.WIDGET_CLASS.UI_COLOR_PICKER).hide();
	        }
	    });

	    this.$dNode.find("." + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BORDER_TABLE_BACKGROUND_COLOR_PICKER).kkColorPicker({
	        callback : function(e, data){
	            _this.backgroundColorPicker.css("background-color", "#" + data.color);
	            _this.backgroundColorPicker.find("." + Define.WIDGET_CLASS.UI_COLOR_PICKER).hide();

	            _this.defaultTableSet.backgroundColor = "#" + data.color;
	        }
	    });



	    //Template Setting
	    this.templateRowInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_ROW_INPUT).spinit({ height: 15, width: 45, min: 1, initValue: 3, max: 255, callback : null }); //mask: 'Red', callback: onred
	    this.templateColInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_COL_INPUT).spinit({ height: 15, width: 45, min: 1, initValue: 3, max: 255, callback : null });
	    this.templateWidthInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_WIDTH_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.templateHeigthInput = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_TABLE_HEIGHT_INPUT).on('input', $.proxy(this.inputChange, this));

	    this.templateScope = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_SCOPE_CHECK);

	    this.templateHeaderItems = this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_ITEM).on('click', function(e){
	        var $target = $(e.target);

	        if (!$target.hasClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_ITEM)){
	            $target = $target.closest('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_TEMPLATE_HEADER_ITEM);
	        }

	        if ($target.length) {
	            _this.templateHeaderItems.removeClass(Define.CLASS.TABLE_TEMPLATE_ITEM_SELECTED);
	            $target.addClass(Define.CLASS.TABLE_TEMPLATE_ITEM_SELECTED);
	        }
	    });



	    this.$dNode.find("."+Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                _this.defaultTableSet.image = _this.$pathInput.val();

	                if (_this.tabTemplate.hasClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON)) {
	                    _this.clearTableSet();

	                    _this.defaultTableSet.template = {
	                        type : _this.templateHeaderItems.filter('.' + Define.CLASS.TABLE_TEMPLATE_ITEM_SELECTED).index()
	                    };

	                    _this.defaultTableSet.row = _this.templateRowInput.val() || 3;
	                    _this.defaultTableSet.col = _this.templateColInput.val() || 3;

	                    _this.defaultTableSet.width = _this.templateWidthInput.val() || null;
	                    _this.defaultTableSet.height = _this.templateHeigthInput.val() || null;

	                    _this.defaultTableSet.scope = _this.templateScope[0].checked;

	                    if (_this.defaultTableSet.scope) {
	                        _this.defaultTableSet.headerType = "left_top";
	                    } else {
	                        _this.defaultTableSet.headerType = null;
	                    }
	                }

	                var isModify = _this.defaultTableSet.isModify;

	                var opSources = [];

	                var selInfo = _this.selectionRange;

	                if (!selInfo) {
	                    _this.$dom.selection.setOp({
	                        p : [0,0],
	                        r : [0,0]
	                    });

	                    _this.selectionRange = selInfo = _this.$dom.selection.get();
	                }

	                if (_this.windowRange) {
	                    _this.$dom.selection.setRange(_this.windowRange);
	                }

	                if (!isModify) {
	                    var $selectedNodes = _this.editorElement.find("." + Define.CLASS.SELECTED);

	                    if ($selectedNodes.length) {
	                        var deleteOpSource = {
	                            type : "delete",
	                            name : "text",
	                            value : {
	                                keyName : "delete"
	                            },
	                            range : {
	                                p : selInfo.p,
	                                r : selInfo.r,
	                                s : "text"
	                            }
	                        };

	                        opSources.push(deleteOpSource);

	                        selInfo = {
	                            p : [selInfo.p[0],selInfo.p[0]],
	                            r : [selInfo.r[0],selInfo.r[0]]
	                        }
	                    }

	                    if (_this.defaultTableSet.width === null) {
	                        var currentNode = _this.$dom.selection.getOpNode(_this.selectionRange.p[0], _this.selectionRange.r[0]);

	                        var parentBlock = $(currentNode.container).closest('.' + Define.CLASS.CONTENTS + ' ' + Define.BLOCK_NODES.join(', .' + Define.CLASS.CONTENTS + ' '));

	                        if (parentBlock.length) {
	                            _this.defaultTableSet.width = parentBlock.width();
	                        } else {
	                            var $contents = _this.editorElement.find("." + Define.CLASS.CONTENTS);
	                            _this.defaultTableSet.width  = $contents.width();
	                        }
	                    }
	                }

	                var opSource = {
	                    type : isModify ? "update" : "create",
	                    name : "table",
	                    value : _this.defaultTableSet,
	                    range : {
	                        p : [selInfo.p[0],selInfo.p[0]],
	                        r : [selInfo.r[0],selInfo.r[0]],
	                        s : "text"
	                    }
	                };

	                opSources.push(opSource);

	                _this.router.doOperation(opSources);
	                _this.router.setRedoHistory();

	                _this.closeDialog();
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });


	    var keydownEvent = function(event){
	        event = event || window.event;

	        var target = event.target;
	        var keyID = (event.which) ? event.which : event.keyCode;

	        if(keyID == 8 || keyID == 46 || (keyID >= 48 && keyID <= 57 ) || (keyID >= 96 && keyID <= 105) ) {
	            return;
	        } else {
	            _this.stopEvent(event);
	            target.value = target.value.replace(/[\ㄱ-ㅎㅏ-ㅣ가-힣]/g, '');
	            event.resultValue = false;
	            return false;
	        }
	    };

	    var keyupEvent = function(event){
	        event = event || window.event;

	        var target = event.target;
	        var value = parseInt(target.value);

	        target.reset(value);
	    };


	    this.$dNode.find('.' + Define.CLASS.SMART_SPINNER).on('keydown', keydownEvent).on('keyup', keyupEvent);

	    this.$dNode.find('.' + Define.CLASS.TABLE_DIALOG_TAB_MENU_ITEM).on('click', function(e){
	        var $target = $(e.target);

	        if ($target.hasClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_COMMON)) {
	            _this.tabCommon.addClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON);
	            _this.tabBackground.removeClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON);
	            _this.tabTemplate.removeClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON);

	            _this.tabCommonContents.addClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON);
	            _this.tabBackgroundContents.removeClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON);
	            _this.tabTemplateContents.removeClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON);

	        } else if ($target.hasClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_BACKGROUND)) {
	            _this.tabCommon.removeClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON);
	            _this.tabBackground.addClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON);
	            _this.tabTemplate.removeClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON);

	            _this.tabCommonContents.removeClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON);
	            _this.tabBackgroundContents.addClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON);
	            _this.tabTemplateContents.removeClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON);

	        } else if ($target.hasClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_TAMPLATE)) {
	            _this.tabCommon.removeClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON);
	            _this.tabBackground.removeClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON);
	            _this.tabTemplate.addClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON);

	            _this.tabCommonContents.removeClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON);
	            _this.tabBackgroundContents.removeClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON);
	            _this.tabTemplateContents.addClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON);
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	TableDialog.prototype.clearTableSet = function(){
	    this.defaultTableSet = {
	        isModify : false,
	        row : 3,
	        col : 3,
	        width : null,
	        height : null,
	        marginLeft : null,
	        align : null,
	        id : null,
	        className : null,
	        borderSeparate : null,
	        border : {
	            // defaultBorder : { width : 0, type : 'solid', color : '#000000' },
	            // top : { width : 0, type : 'solid', color : '#000000' },
	            // middle : { width : 0, type : 'solid', color : '#000000' },
	            // bottom : { width : 0, type : 'solid', color : '#000000' },
	            // left : { width : 0, type : 'solid', color : '#000000' },
	            // center : { width : 0, type : 'solid', color : '#000000' },
	            // right : { width : 0, type : 'solid', color : '#000000' }
	        },
	        cellSpacing : null,
	        cellPadding : null,
	        caption : null,
	        summary : null,


	        image : null,

	        attachment : null,
	        repeat : null,
	        positionX : null,
	        positionY : null,

	        backgroundColor :null,
	        scope : null,
	        headerType : null,

	        template : null
	    };
	};

	TableDialog.prototype.resetFields = function(initData){

	    this.titleNode.html(Resource.tableDialog.title_insert);


	    //Default Tab Reset Setting
	    this.tabCommon.addClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON);
	    this.tabBackground.removeClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON);
	    this.tabTemplate.removeClass(Define.CLASS.TABLE_DIALOG_TAB_MENU_ON).show();

	    this.tabCommonContents.addClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON);
	    this.tabBackgroundContents.removeClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON);
	    this.tabTemplateContents.removeClass(Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_ON);


	    //Default Common Setting Items
	    this.rowInput[0].reset(3);
	    this.rowInput.css('width', '45px');
	    this.colInput[0].reset(3);
	    this.colInput.css('width', '45px');

	    this.templateRowInput[0].reset(3);
	    this.templateRowInput.css('width', '45px');
	    this.templateColInput[0].reset(3);
	    this.templateColInput.css('width', '45px');

	    this.rowInput.addClass(Define.CLASS.SMART_SPINNER);
	    this.rowInput.addClass(Define.CLASS.SMART_SPINNER_CUSTOM);
	    this.colInput.addClass(Define.CLASS.SMART_SPINNER);
	    this.colInput.addClass(Define.CLASS.SMART_SPINNER_CUSTOM);


	    this.templateRowInput.addClass(Define.CLASS.SMART_SPINNER);
	    this.templateRowInput.addClass(Define.CLASS.SMART_SPINNER_CUSTOM);
	    this.templateColInput.addClass(Define.CLASS.SMART_SPINNER);
	    this.templateColInput.addClass(Define.CLASS.SMART_SPINNER_CUSTOM);


	    this.rowInput.removeAttr('readonly');
	    this.colInput.removeAttr('readonly');
	    this.templateRowInput.removeAttr('readonly');
	    this.templateColInput.removeAttr('readonly');

	    this.widthInput.val('');
	    this.heigthInput.val('');
	    this.marginLeftInput.val('');
	    this.alignSelect[0].selectedIndex = 0;
	    this.idInput.val('');
	    this.classInput.val('');


	    this.templateWidthInput.val('');
	    this.templateHeigthInput.val('');


	    this.borderSeparateCheck[0].checked = false;

	    this.borderTypeItems.removeClass(Define.CLASS.BORDER_ITEM_SELECTED);
	    this.borderTypeItems.first().addClass(Define.CLASS.BORDER_ITEM_SELECTED);

	    this.borderColorPicker.css('backgroundColor', '');
	    this.borderWidth[0].reset(1);
	    this.cellSpacing[0].reset(0);
	    this.cellPadding[0].reset(1);

	    this.borderLineTable.find('td').css('border', '');

	    this.captionInput.val('');
	    this.summaryInput.val('');


	    //Default Background Setting Items
	    this.$pathInput.val('');
	    this.$fileInput.val('');

	    this.backgroundAttachment[0].selectedIndex = 0;
	    this.backgroundRepeat[0].selectedIndex = 0;

	    this.backgroundPositionX.val('');
	    this.backgroundPositionY.val('');

	    this.backgroundColorPicker.css('backgroundColor', '');

	    this.backgroundScope[0].checked = false;

	    this.backgroundHeaderItems.removeClass(Define.CLASS.TABLE_BACKGROUND_HEADER_ITEM_SELECTED);
	    this.backgroundHeaderItems.first().addClass(Define.CLASS.TABLE_BACKGROUND_HEADER_ITEM_SELECTED);

	    this.templateHeaderItems.removeClass(Define.CLASS.TABLE_TEMPLATE_ITEM_SELECTED);
	    this.templateHeaderItems.first().addClass(Define.CLASS.TABLE_TEMPLATE_ITEM_SELECTED);

	    this.templateScope[0].checked = false;

	    this.clearTableSet();

	    if (initData) {
	        if (initData.type == 'modify') {
	            this.titleNode.html(Resource.tableDialog.title_modify);
	            this.defaultTableSet.isModify = true;

	            this.tabTemplate.hide();
	        }

	        if (initData.row) {
	            this.rowInput.css('width', '55px');
	            var row = parseInt(initData.row);
	            this.rowInput[0].reset(row);

	            this.rowInput.attr('readonly', 'true');
	            this.rowInput.removeClass(Define.CLASS.SMART_SPINNER);
	        }

	        if (initData.col) {
	            this.colInput.css('width', '55px');
	            var col = parseInt(initData.col);
	            this.colInput[0].reset(col);

	            this.colInput.attr('readonly', 'true');
	            this.colInput.removeClass(Define.CLASS.SMART_SPINNER);
	        }

	        if (initData.width) {
	            var width = parseInt(initData.width) || "";
	            this.widthInput.val(width);
	        }

	        if (initData.height) {
	            var height = parseInt(initData.height) || "";
	            this.heigthInput.val(height);
	        }

	        if (initData.marginLeft) {
	            var marginLeft = parseInt(initData.marginLeft) || "";
	            this.marginLeftInput.val(marginLeft);
	        }

	        if (initData.align) {
	            this.alignSelect.val(initData.align);
	        }

	        if (initData.id) {
	            this.idInput.val(initData.id);
	        }

	        if (initData.className) {
	            this.classInput.val(initData.className);
	        }

	        if (initData.image) {
	            this.$pathInput.val(initData.image);
	        }

	        if (initData.borderSeparate) {
	            this.borderSeparateCheck[0].checked = true;
	        }

	        if (initData.border) {
	            this.defaultTableSet.border = initData.border;
	        }

	        if (initData.cellSpacing) {
	            this.cellSpacing[0].reset(parseInt(initData.cellSpacing) || 0);
	        }

	        if (initData.cellPadding) {
	            this.cellPadding[0].reset(parseInt(initData.cellPadding) || 1);
	        }

	        if (initData.caption) {
	            this.captionInput.val(initData.caption);
	        }

	        if (initData.summary) {
	            this.summaryInput.val(initData.summary);
	        }

	        if (initData.backgroundColor) {
	            this.backgroundColorPicker.css('backgroundColor', initData.backgroundColor);
	        }

	        if (initData.attachment) {
	            this.backgroundAttachment.val(initData.attachment);
	        }

	        if (initData.repeat) {
	            this.backgroundRepeat.val(initData.repeat);
	        }

	        if (initData.positionX) {
	            this.backgroundPositionX.val(initData.positionX);
	        }

	        if (initData.positionY) {
	            this.backgroundPositionY.val(initData.positionY);
	        }

	        if (initData.scope) {
	            this.backgroundScope[0].checked = true;
	        }

	        if (initData.headerType) {

	            this.backgroundHeaderItems.removeClass(Define.CLASS.TABLE_BACKGROUND_HEADER_ITEM_SELECTED);
	            // this.backgroundHeaderItems.first().addClass(Define.CLASS.TABLE_BACKGROUND_HEADER_ITEM_SELECTED);

	            var headerClass = Define.CLASS.TABLE_BACKGROUND_HEADER_NONE;

	            if (initData.headerType ==='left') {
	                headerClass = Define.CLASS.TABLE_BACKGROUND_HEADER_LEFT;

	            } else if (initData.headerType === 'top') {
	                headerClass = Define.CLASS.TABLE_BACKGROUND_HEADER_TOP;

	            } else if (initData.headerType === 'left_top') {
	                headerClass = Define.CLASS.TABLE_BACKGROUND_HEADER_LEFT_TOP;

	            }

	            var $header = this.backgroundHeaderItems.find('.' + headerClass);
	            $header = $header.closest('.' + Define.CLASS.TABLE_DIALOG_TAB_CONTENTS_BACKGROUND_HEADER_ITEM);
	            $header.addClass(Define.CLASS.TABLE_BACKGROUND_HEADER_ITEM_SELECTED);
	        }
	    }
	};

	TableDialog.prototype.getCell = function() {
	    var range = this.$dom.selection.get();
	    var cell = range.startContainer;
	    if(cell.nodeName != "TD"){
	        cell = Util.findParentNode(range.startContainer, "td");
	    }
	    return cell;
	};

	TableDialog.prototype.openDialog = function(initData){
	    this.$dialogNode.find("."+Define.CLASS.DIALOG_DIALOG_MAIN).hide();
	    var $dialog = this.$dialogNode.find("."+Define.CLASS.DIALOG_TABLE);
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.resetFields(initData);

	    this.setDialogPosition($dialog);
	};

	module.exports = TableDialog;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);
	var _AbstractUploadDialog = __webpack_require__(60);

	var Define = __webpack_require__(3);
	var Util = __webpack_require__(6);
	var Resource = __webpack_require__(13);

	function CellDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;

	    this.templateHTML = '' +
	        '<div class="' + Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_CELL + '">' +
	            '<div class="' + Define.CLASS.DIALOG_HEADER + '">' +
	                '<div class="' + Define.CLASS.DIALOG_TITLE + '">' + Resource.cellDialog.title_modify + '</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_CONTENTS + '">' +
	                '<div class="' + Define.CLASS.CELL_DIALOG_TAB_MENUS + '">' +
	                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_MENU_ITEM + ' ' + Define.CLASS.CELL_DIALOG_TAB_MENU_COMMON + ' ' + Define.CLASS.CELL_DIALOG_TAB_MENU_ON + '">' + Resource.cellDialog.tab_common + '</div>' +
	                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_MENU_ITEM + ' ' + Define.CLASS.CELL_DIALOG_TAB_MENU_BACKGROUND + '">' + Resource.cellDialog.tab_background + '</div>' +
	                '</div>' +
	                '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS + '">' +
	                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON + ' ' +  Define.CLASS.CELL_DIALOG_TAB_CONTENTS_ON + '">' +
	                        '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_PROPERTY_FIELD + '">' +
	                            '<table class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_SET + '">' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_TD_LABEL + '">'  + Resource.cellDialog.vertical_align_count + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_TD_INPUT + '">' +
	                                            '<select class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_VERTICAL_ALIGN_SELECT + '">' +
	                                                '<option value="default">' + Resource.cellDialog.vertical_align_default + '</option>' +
	                                                '<option value="baseline">' + Resource.cellDialog.vertical_align_baseline + '</option>' +
	                                                '<option value="top">' + Resource.cellDialog.vertical_align_top + '</option>' +
	                                                '<option value="middle">' + Resource.cellDialog.vertical_align_middle + '</option>' +
	                                                '<option value="bottom">' + Resource.cellDialog.vertical_align_bottom + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_TD_LABEL + '">'  + Resource.cellDialog.align_count + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_TD_INPUT + '">' +
	                                            '<select class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_ALIGN_SELECT + '">' +
	                                                '<option value="default">' + Resource.cellDialog.align_default + '</option>' +
	                                                '<option value="left">' + Resource.cellDialog.align_left + '</option>' +
	                                                '<option value="center">' + Resource.cellDialog.align_center + '</option>' +
	                                                '<option value="right">' + Resource.cellDialog.align_right + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_TD_LABEL + '">'  + Resource.cellDialog.white_space_label + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_TD_INPUT + '">' +
	                                            '<select class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_WHITE_SPACE_SELECT + '">' +
	                                                '<option value="default">' + Resource.cellDialog.white_space_default + '</option>' +
	                                                '<option value="normal">' + Resource.cellDialog.white_space_normal + '</option>' +
	                                                '<option value="nowrap">' + Resource.cellDialog.white_space_nowrap + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_TD_LABEL + '"></td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_TD_INPUT + '"></td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +

	                        '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_HEADER_FIELD + '">' +
	                            '<table class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_SET + '">' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_TD_LABEL + '">'  + Resource.cellDialog.header_label + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_TD_INPUT + '">' +
	                                            '<select class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_HEADER_SELECT + '">' +
	                                                '<option value="default">' + Resource.cellDialog.header_default + '</option>' +
	                                                '<option value="td">' + Resource.cellDialog.header_none + '</option>' +
	                                                '<option value="th">' + Resource.cellDialog.header_hr + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_TD_LABEL + '">'  + Resource.cellDialog.scope_label + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_TD_INPUT + '">' +
	                                            '<select class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_SCOPE_SELECT + '">' +
	                                                '<option value="default">' + Resource.cellDialog.scope_default + '</option>' +
	                                                '<option value="none">' + Resource.cellDialog.scope_none + '</option>' +
	                                                '<option value="row">' + Resource.cellDialog.scope_row + '</option>' +
	                                                '<option value="col">' + Resource.cellDialog.scope_col + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +

	                        '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_BORDER_FIELD + ' ' + Define.CLASS.ACCORDION_FIELD + '">' +
	                            '<table class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_SET + '">' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_LABEL + '">' + Resource.cellDialog.border_type + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_INPUT + '" colspan="3">' +
	                                            '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_WRAP + '">' +
	                                                '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM + ' ' + Define.CLASS.CELL_BORDER_ITEM_SELECTED + '">' +
	                                                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_SOLID + '"/>' +
	                                                '</div>' +
	                                                '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM + '">' +
	                                                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOUBLE + '"/>' +
	                                                '</div>' +
	                                                '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM + '">' +
	                                                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DASHED + '"/>' +
	                                                '</div>' +
	                                                '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM + '">' +
	                                                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOTTED + '"/>' +
	                                                '</div>' +
	                                                '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM + '">' +
	                                                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE + '"/>' +
	                                                    '<span class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE_LABEL + '">' + Resource.cellDialog.border_none_type + '</span>' +
	                                                '</div>' +
	                                            '</div>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_LABEL + '">' + Resource.cellDialog.border_color + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_INPUT + '">' + '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BORDER_COLOR_PICKER + '"/>' + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_LABEL + '">' + Resource.cellDialog.border_width + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_INPUT + '">' + '<input type="text" class="' + Define.CLASS.SMART_SPINNER + ' '  + Define.CLASS.SMART_SPINNER_CUSTOM + ' '  + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BORDER_WIDTH_INPUT + '" />' + '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_LABEL + '">' + Resource.cellDialog.border_option + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_INPUT + '" colspan="3">' +
	                                            '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_WRAP + '">' +
	                                                '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU + '">' +
	                                                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ITEM +'">' +
	                                                        '<table class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_OUTLINE + '">' +
	                                                            '<colgroup>' +
	                                                                '<col style="width:50%;">' +
	                                                                '<col style="width:50%;">' +
	                                                            '</colgroup>' +
	                                                            '<tbody>' +
	                                                                '<tr><td></td><td></td></tr>' +
	                                                                '<tr><td></td><td></td></tr>' +
	                                                            '</tbody>' +
	                                                        '</table>' +
	                                                        '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_LABEL + '">' + Resource.cellDialog.border_outline + '</div>' +
	                                                    '</div>' +
	                                                '</div>' +
	                                                '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER + '">' +
	                                                    '<table class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_WRAP + '">' +
	                                                        '<colgroup>' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                            '<col style="width:20%;">' +
	                                                        '</colgroup>' +
	                                                        '<tbody>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;"></td>' +
	                                                                '<td></td>' +
	                                                                '<td></td>' +
	                                                                '<td></td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;">' +
	                                                                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS + ' ' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_TOP + '">' + '―' + '</div>' +
	                                                                '</td>' +
	                                                                '<td colspan="4" rowspan="3">' +
	                                                                    '<table class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_CELL + '">' +
	                                                                        '<colgroup>' +
	                                                                            '<col style="width:100%;">' +
	                                                                        '</colgroup>' +
	                                                                        '<tbody>' +
	                                                                            '<tr><td></td></tr>' +
	                                                                        '</tbody>' +
	                                                                    '</table>' +
	                                                                '</td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;"></td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;">' +
	                                                                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS + ' ' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_BOTTOM + '">' + '―' + '</div>' +
	                                                                '</td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                            '<tr>' +
	                                                                '<td style="height:10px;"></td>' +
	                                                                '<td>' +
	                                                                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS + ' ' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_LEFT + '">' + ' | ' + '</div>' +
	                                                                '</td>' +
	                                                                '<td></td>' +
	                                                                '<td>' +
	                                                                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS + ' ' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_RIGHT + '">' + ' | ' + '</div>' +
	                                                                '</td>' +
	                                                                '<td></td>' +
	                                                            '</tr>' +
	                                                        '</tbody>' +
	                                                    '</table>' +
	                                                '</div>' +
	                                            '</div>' +
	                                        '</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                    '</div>' +

	                    '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND + '">' +
	                        '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_PROPERTY_FIELD + '">' +
	                            '<table class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_SET + '">' +
	                                '<colgroup>' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                    '<col style="width:20%;">' +
	                                    '<col style="width:30%;">' +
	                                '</colgroup>' +
	                                '<tbody>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_LABEL + '">' + Resource.cellDialog.table_background_image + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_INPUT + '" colspan="3">' +
	                                            '<input type="text" class="' + Define.CLASS.FILE_OPEN_PATH_INPUT + '">' + '<label class="' + Define.CLASS.FILE_OPEN_INPUT_LABEL + '">' + Resource.cellDialog.file_input_label  + '</label>' +

	                                            (typeof window.FormData === 'undefined' ? '<form class="' + Define.CLASS.UPLOAD_FORM + '" method="post" enctype="multipart/form-data" action="">' : '') +
	                                            '<input name="' + Define.NAME.UPLOAD_IMAGE_TYPE + '" type="file" accept="' + '.' + Define.IMAGE_TYPE_FILES.join(',.') + '" class="' + Define.CLASS.FILE_OPEN_INPUT + '">' +
	                                            (typeof window.FormData === 'undefined' ? '</form>' : '') +

	                                        '</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_LABEL + '">'  + Resource.cellDialog.table_background_attachment + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_INPUT + '">' +
	                                            '<select class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_ATTACHMENT_SELECT + '">' +
	                                                '<option value="default">' + Resource.cellDialog.attachment_default + '</option>' +
	                                                '<option value="scroll">' + Resource.cellDialog.attachment_scroll + '</option>' +
	                                                '<option value="fixed">' + Resource.cellDialog.attachment_fixed + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_LABEL + '">'  + Resource.cellDialog.table_background_position_x + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_X_INPUT + '" /> px</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_LABEL + '">'  + Resource.cellDialog.table_background_repeat_label + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_INPUT + '">' +
	                                            '<select class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_REPEAT_SELECT + '">' +
	                                                '<option value="default">' + Resource.cellDialog.table_background_repeat_default + '</option>' +
	                                                '<option value="no-repeat">' + Resource.cellDialog.table_background_no_repeat + '</option>' +
	                                                '<option value="repeat">' + Resource.cellDialog.table_background_repeat + '</option>' +
	                                                '<option value="repeat-x">' + Resource.cellDialog.table_background_repeat_x + '</option>' +
	                                                '<option value="repeat-y">' + Resource.cellDialog.table_background_repeat_y + '</option>' +
	                                            '</select>' +
	                                        '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_LABEL + '">'  + Resource.cellDialog.table_background_position_y + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_CELL_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_Y_INPUT + '" /> px</td>' +
	                                    '</tr>' +
	                                    '<tr>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_LABEL + '">' + Resource.cellDialog.background_color + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_INPUT + '">' + '<div class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BACKGROUND_COLOR_PICKER + '"/>' + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_LABEL + '">' + '</td>' +
	                                        '<td class="' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_TD_INPUT + '">' + '</td>' +
	                                    '</tr>' +
	                                '</tbody>' +
	                            '</table>' +
	                        '</div>' +
	                    '</div>' +
	                '</div>' +
	            '</div>' +

	            '<div class="' + Define.CLASS.DIALOG_FOOTER + '">' +
	                '<ul class="' + Define.CLASS.DIALOG_BUTTONS + '">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(CellDialog.prototype, new AbstractDialog());
	$.extend(CellDialog.prototype, new _AbstractUploadDialog());

	CellDialog.prototype.inputChange = function(e){
	    var $element = $(e.target);
	    var value = parseInt($element.val());

	    if ($element.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_X_INPUT)) {
	        if (!isNaN(value)) {
	            this.defaultCellSet.positionX = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultCellSet.positionX || '');
	            }
	        }

	    } else if ($element.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_Y_INPUT)) {
	        if (!isNaN(value)) {
	            this.defaultCellSet.positionY = value;
	            $element.val(value);
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultCellSet.positionY || '');
	            }
	        }

	    }
	};

	CellDialog.prototype.selectChange = function(e){
	    console.log("selectChange");

	    var $element = $(e.target);

	    if ($element.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_VERTICAL_ALIGN_SELECT)) {
	        this.defaultCellSet.verticalAlign = $element.val() === 'default' ? null : $element.val();

	    } else if ($element.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_ALIGN_SELECT)) {
	        this.defaultCellSet.align = $element.val() === 'default' ? null : $element.val();

	    } else if ($element.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_WHITE_SPACE_SELECT)) {
	        this.defaultCellSet.whiteSpace = $element.val() === 'default' ? null : $element.val();

	    } else if ($element.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_HEADER_SELECT)) {
	        this.defaultCellSet.headerType = $element.val() === 'default' ? null : $element.val();

	    } else if ($element.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_SCOPE_SELECT)) {
	        this.defaultCellSet.scopeType = $element.val() === 'default' ? null : $element.val();

	    } else if ($element.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_ATTACHMENT_SELECT)) {
	        this.defaultCellSet.attachment = $element.val() === 'default' ? null : $element.val();

	    } else if ($element.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_REPEAT_SELECT)) {
	        this.defaultCellSet.repeat = $element.val() === 'default' ? null : $element.val();

	    }
	};

	CellDialog.prototype.borderLineClick = function(e){
	    var $target = $(e.target);

	    var $selectedBorderTypeItem = this.borderTypeItems.filter('.' + Define.CLASS.CELL_BORDER_ITEM_SELECTED);
	    var $borderType = $selectedBorderTypeItem.children().first();
	    var borderType = 'solid';
	    var borderWidth = this.borderWidth.val();
	    var borderColor = Util.getRgbToHex(this.borderColorPicker.css('backgroundColor')) || '#000000';

	    var $tds = this.borderLineTable.find('td');

	    if ($borderType.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_SOLID)) {
	        borderType = 'solid';

	    } else if ($borderType.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOUBLE)) {
	        borderType = 'double';

	    } else if ($borderType.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DASHED)) {
	        borderType = 'dashed';

	    } else if ($borderType.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOTTED)) {
	        borderType = 'dotted';

	    } else if ($borderType.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_NONE)) {
	        borderType = 'none';
	    }

	    var borderString = borderWidth + 'px ' + borderType + ' ' + borderColor;

	    if ($target.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_TOP)) {
	        $tds.eq(0).css('border-top', borderString);

	        this.defaultCellSet.border.top = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_BOTTOM)) {
	        $tds.eq(0).css('border-bottom', borderString);

	        this.defaultCellSet.border.bottom = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_LEFT)) {
	        $tds.eq(0).css('border-left', borderString);

	        this.defaultCellSet.border.left = { width : borderWidth, type : borderType, color : borderColor };

	    } else if ($target.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_RIGHT)) {
	        $tds.eq(0).css('border-right', borderString);

	        this.defaultCellSet.border.right = { width : borderWidth, type : borderType, color : borderColor };
	    }
	};

	CellDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    var keydownEvent = function(event){
	        event = event || window.event;

	        var target = event.target;
	        var keyID = (event.which) ? event.which : event.keyCode;

	        if(keyID == 8 || keyID == 46 || (keyID >= 48 && keyID <= 57 ) || (keyID >= 96 && keyID <= 105) ) {
	            return;
	        } else {
	            _this.stopEvent(event);
	            target.value = target.value.replace(/[\ㄱ-ㅎㅏ-ㅣ가-힣]/g, '');
	            event.resultValue = false;
	            return false;
	        }
	    };

	    var keyupEvent = function(event){
	        event = event || window.event;

	        var target = event.target;
	        var value = parseInt(target.value);

	        target.reset(value);
	    };


	    //TAB Element
	    this.tabCommon = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_MENU_COMMON);
	    this.tabBackground = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_MENU_BACKGROUND);

	    this.tabCommonContents = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON);
	    this.tabBackgroundContents = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND);

	    this.$dNode.find('.' + Define.CLASS.SMART_SPINNER).on('keydown', keydownEvent).on('keyup', keyupEvent);

	    //Cell Common Setting Elements
	    this.verticalAlignSelect = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_VERTICAL_ALIGN_SELECT).on('change', $.proxy(this.selectChange, this));
	    this.alignSelect = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_ALIGN_SELECT).on('change', $.proxy(this.selectChange, this));
	    this.whiteSpaceSelect = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_COMMON_CELL_WHITE_SPACE_SELECT).on('change', $.proxy(this.selectChange, this));

	    this.headerTypeSelect = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_HEADER_SELECT).on('change', $.proxy(this.selectChange, this));
	    this.scopeTypeSelect = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_HEADER_CELL_SCOPE_SELECT).on('change', $.proxy(this.selectChange, this));


	    //Cell Border Setting Elements
	    this.borderTypeItems = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM).on('click', function(e){
	        var $target = $(e.target);

	        if (!$target.hasClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM)){
	            $target = $target.closest('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_ITEM);
	        }

	        if ($target.length) {
	            _this.borderTypeItems.removeClass(Define.CLASS.CELL_BORDER_ITEM_SELECTED);
	            $target.addClass(Define.CLASS.CELL_BORDER_ITEM_SELECTED);

	            if ($target.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_TYPE_DOUBLE).length) {
	                _this.borderWidth[0].reset(3);
	            }
	        }
	    });

	    this.borderColorPicker = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BORDER_COLOR_PICKER);

	    this.borderWidth = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BORDER_WIDTH_INPUT).spinit({ height: 15, width: 45, min: 0, initValue: 1, max: 10 });

	    this.borderLineTable = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_CELL);

	    this.borderLineControlButtons = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BUTTONS).on('click', $.proxy(this.borderLineClick, this));

	    this.borderLineControlLeftTop = this.borderLineControlButtons.filter('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_TOP);
	    this.borderLineControlLeftBottom = this.borderLineControlButtons.filter('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_LEFT_BOTTOM);
	    this.borderLineControlBottomLeft = this.borderLineControlButtons.filter('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_LEFT);
	    this.borderLineControlBottomRight = this.borderLineControlButtons.filter('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_CONTROLLER_BOTTOM_RIGHT);

	    this.$borderItems = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_LINE_MENU_ITEM).on('click', function(e){
	        var $borderTypeNode = $(this.childNodes[0]);

	        _this.borderLineClick({target : _this.borderLineControlLeftTop});
	        _this.borderLineClick({target : _this.borderLineControlLeftBottom});
	        _this.borderLineClick({target : _this.borderLineControlBottomLeft});
	        _this.borderLineClick({target : _this.borderLineControlBottomRight});
	    });




	    ///////////////////// FileUpload Start //////////////////////

	    var url = _this.router.options.imageUploadURL || _this.router.options.fileUploadURL;

	    var callbackFn = function(data){
	        if(data && !data.isError && data.statusText !== "error") {
	            _this.$pathInput.val(data.url);
	            _this.defaultCellSet.image = data.url;
	        } else {
	            alert(Resource.imageDialog.image_upload_error);
	        }

	        _this.$pathInput.attr('style', '');
	    };

	    //Table Background Setting Elements
	    this.$fileInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT).on('change', function(e){
	        _this.doFileUpload(Define.NAME.UPLOAD_IMAGE_TYPE, url, callbackFn);
	    });

	    ///////////////////// FileUpload End //////////////////////




	    this.imageFileInputLable = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_INPUT_LABEL).on('click', function(e){
	        _this.$fileInput.val('');
	        _this.$fileInput.trigger("click");
	    });

	    this.$pathInput = this.$dNode.find('.' + Define.CLASS.FILE_OPEN_PATH_INPUT).on('input', function(e){
	        _this.defaultCellSet.image = _this.$pathInput.val();
	    });


	    this.backgroundAttachment = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_ATTACHMENT_SELECT).on('change', $.proxy(this.selectChange, this));
	    this.backgroundRepeat = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_REPEAT_SELECT).on('change', $.proxy(this.selectChange, this));

	    this.backgroundPositionX = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_X_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.backgroundPositionY = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BACKGROUND_POSITION_Y_INPUT).on('input', $.proxy(this.inputChange, this));

	    this.backgroundColorPicker = this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BACKGROUND_COLOR_PICKER);


	    this.$dNode.find("." + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BORDER_COLOR_PICKER).kkColorPicker({
	        callback : function(e, data){
	            _this.borderColorPicker.css("background-color", "#" + data.color);
	            _this.borderColorPicker.find("." + Define.WIDGET_CLASS.UI_COLOR_PICKER).hide();
	        }
	    });

	    this.$dNode.find("." + Define.CLASS.CELL_DIALOG_TAB_CONTENTS_BORDER_CELL_BACKGROUND_COLOR_PICKER).kkColorPicker({
	        callback : function(e, data){
	            _this.backgroundColorPicker.css("background-color", "#" + data.color);
	            _this.backgroundColorPicker.find("." + Define.WIDGET_CLASS.UI_COLOR_PICKER).hide();

	            _this.defaultCellSet.backgroundColor = "#" + data.color;
	        }
	    });





	    this.$dNode.find("."+Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                _this.defaultCellSet.image = _this.$pathInput.val();
	                _this.defaultCellSet.subType = 'cellModify';

	                var opSource = {
	                    type : "update",
	                    name : "table",
	                    value : _this.defaultCellSet
	                };

	                _this.router.doOperation([opSource]);
	                _this.router.setRedoHistory();

	                _this.closeDialog();
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.$dNode.find('.' + Define.CLASS.CELL_DIALOG_TAB_MENU_ITEM).on('click', function(e){
	        var $target = $(e.target);

	        if ($target.hasClass(Define.CLASS.CELL_DIALOG_TAB_MENU_COMMON)) {
	            _this.tabCommon.addClass(Define.CLASS.CELL_DIALOG_TAB_MENU_ON);
	            _this.tabBackground.removeClass(Define.CLASS.CELL_DIALOG_TAB_MENU_ON);

	            _this.tabCommonContents.addClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_ON);
	            _this.tabBackgroundContents.removeClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_ON);

	        } else {
	            _this.tabCommon.removeClass(Define.CLASS.CELL_DIALOG_TAB_MENU_ON);
	            _this.tabBackground.addClass(Define.CLASS.CELL_DIALOG_TAB_MENU_ON);

	            _this.tabCommonContents.removeClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_ON);
	            _this.tabBackgroundContents.addClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_ON);
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	CellDialog.prototype.resetFields = function(initData){

	    //Default Tab Reset Setting
	    this.tabCommon.addClass(Define.CLASS.CELL_DIALOG_TAB_MENU_ON);
	    this.tabBackground.removeClass(Define.CLASS.CELL_DIALOG_TAB_MENU_ON);
	    this.tabCommonContents.addClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_ON);
	    this.tabBackgroundContents.removeClass(Define.CLASS.CELL_DIALOG_TAB_CONTENTS_ON);


	    //Default Common Setting Items
	    this.verticalAlignSelect[0].selectedIndex = 0;
	    this.alignSelect[0].selectedIndex = 0;
	    this.whiteSpaceSelect[0].selectedIndex = 0;
	    
	    //Header Setting Items
	    this.headerTypeSelect[0].selectedIndex = 0;
	    this.scopeTypeSelect[0].selectedIndex = 0;
	    
	    
	    //Border Setting Items
	    this.borderTypeItems.removeClass(Define.CLASS.CELL_BORDER_ITEM_SELECTED);
	    this.borderTypeItems.first().addClass(Define.CLASS.CELL_BORDER_ITEM_SELECTED);

	    this.borderColorPicker.css('backgroundColor', '');
	    this.borderWidth[0].reset(1);

	    this.borderLineTable.find('td').css('border', '');


	    //Default Background Setting Items
	    this.$pathInput.val('');
	    this.$fileInput.val('');

	    this.backgroundAttachment[0].selectedIndex = 0;
	    this.backgroundRepeat[0].selectedIndex = 0;

	    this.backgroundPositionX.val('');
	    this.backgroundPositionY.val('');

	    this.backgroundColorPicker.css('backgroundColor', '');

	    
	    
	    this.defaultCellSet = {
	        align : null,
	        verticalAlign : null,
	        whiteSpace : null,

	        headerType : null,
	        scopeType : null,

	        border : {
	            // defaultBorder : { width : 0, type : 'solid', color : '#000000' },
	            // top : { width : 0, type : 'solid', color : '#000000' },
	            // bottom : { width : 0, type : 'solid', color : '#000000' },
	            // left : { width : 0, type : 'solid', color : '#000000' },
	            // right : { width : 0, type : 'solid', color : '#000000' }
	        },

	        image : null,
	        attachment : null,
	        repeat : null,
	        positionX : null,
	        positionY : null,
	        backgroundColor :null,
	    };

	    if (initData) {
	        if (initData.verticalAlign) {
	            this.verticalAlignSelect.val(initData.verticalAlign);
	        }

	        if (initData.align) {
	            this.alignSelect.val(initData.align);
	        }

	        if (initData.whiteSpace) {
	            this.whiteSpaceSelect.val(initData.whiteSpace);
	        }

	        if (initData.headerType) {
	            this.headerTypeSelect.val(initData.headerType);
	        }

	        if (initData.scopeType) {
	            this.scopeTypeSelect.val(initData.scopeType);
	        }

	        if (initData.image) {
	            this.$pathInput.val(initData.image);
	        }

	        if (initData.backgroundColor) {
	            this.backgroundColorPicker.css('backgroundColor', initData.backgroundColor);
	        }

	        if (initData.attachment) {
	            this.backgroundAttachment.val(initData.attachment);
	        }

	        if (initData.repeat) {
	            this.backgroundRepeat.val(initData.repeat);
	        }

	        if (initData.positionX) {
	            this.backgroundPositionX.val(initData.positionX);
	        }

	        if (initData.positionY) {
	            this.backgroundPositionY.val(initData.positionY);
	        }
	    }
	};

	CellDialog.prototype.getCell = function() {
	    var range = this.$dom.selection.get();
	    var cell = range.startContainer;
	    if(cell.nodeName != "TD"){
	        cell = Util.findParentNode(range.startContainer, "td");
	    }
	    return cell;
	};

	CellDialog.prototype.openDialog = function(initData){
	    this.$dialogNode.find("."+Define.CLASS.DIALOG_DIALOG_MAIN).hide();
	    var $dialog = this.$dialogNode.find("."+Define.CLASS.DIALOG_CELL);
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();
	    this.resetFields(initData);

	    this.setDialogPosition($dialog);
	};

	module.exports = CellDialog;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);
	var Util = __webpack_require__(6);
	var Filter = __webpack_require__(44);

	function SettingDialog(editorElement, $domObject, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObject;
	    this.clientFilter = new Filter(router.options);

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="'+ Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_SETTING + '">' +
	            '<div class="'+Define.CLASS.DIALOG_HEADER+'">' +
	                '<div class="'+Define.CLASS.DIALOG_TITLE+'">'+ Resource.settingDialog.title +'</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_CONTENTS+'">' +
	                '<div class="'+Define.CLASS.SETTING_PAGE_TITLE_WRAPPER+'">' +
	                    '<label class="' + Define.CLASS.SETTING_PAGE_TITLE_LABEL + '">' +
	                        Resource.settingDialog.pageTitleLabel  +
	                    '</label>' +
	                    '<input type="text" class="' + Define.CLASS.SETTING_PAGE_TITLE_INPUT + '">' +
	                '</div>' +
	                '<div class="'+Define.CLASS.SETTING_PAGE_ENCODING_WRAPPER+'">' +
	                    '<label class="' + Define.CLASS.SETTING_PAGE_ENCODING_LABEL + '">' +
	                        Resource.settingDialog.encodingLabel  +
	                    '</label>' +
	                    '<select class="'+Define.CLASS.SETTING_PAGE_ENCODING_SELECTION+'">' +
	                        (function(){
	                            var encodingTypes = Resource.settingDialog.encodingTypes;

	                            var options = '';

	                            for (var key in encodingTypes){
	                                options += '<option value="' + key + '">' + encodingTypes[key] + '</option>';
	                            }

	                            return options;
	                        })() +
	                    '</select>' +
	                    '<input type="text" class="' + Define.CLASS.SETTING_PAGE_ENCODING_INPUT + '">' +
	                '</div>' +
	                '<div class="'+Define.CLASS.SETTING_PAGE_LANGUAGE_WRAPPER+'">' +
	                    '<label class="' + Define.CLASS.SETTING_PAGE_LANGUAGE_LABEL + '">' +
	                        Resource.settingDialog.languageLabel  +
	                    '</label>' +
	                    '<select class="'+Define.CLASS.SETTING_PAGE_LANGUAGE_SELECTION+'">' +
	                        (function(){
	                            var languageTypes = Resource.settingDialog.languageTypes;

	                            var options = '';

	                            for (var key in languageTypes){
	                                options += '<option value="' + key + '">' + languageTypes[key] + '</option>';
	                            }

	                            return options;
	                        })() +
	                    '</select>' +
	                '</div>' +
	                '<div class="'+Define.CLASS.SETTING_PAGE_DOCUMENT_TYPE_WRAPPER+'">' +
	                    '<label class="' + Define.CLASS.SETTING_PAGE_DOCUMENT_TYPE_LABEL + '">' +
	                        Resource.settingDialog.documentTypeLabel  +
	                    '</label>' +
	                    '<select class="'+Define.CLASS.SETTING_PAGE_DOCUMENT_TYPE_SELECTION+'">' +
	                        (function(){
	                            var languageTypes = Resource.settingDialog.documentTypes;

	                            var options = '';

	                            for (var key in languageTypes){
	                                options += '<option value="' + key + '">' + languageTypes[key] + '</option>';
	                            }

	                            return options;
	                        })() +
	                    '</select>' +
	                '</div>' +
	                '<div class="'+Define.CLASS.SETTING_PAGE_AUTO_SAVE_WRAPPER+'">' +
	                    '<label class="' + Define.CLASS.SETTING_PAGE_AUTO_SAVE_LABEL + '">' +
	                        '<input type="checkbox" class="' + Define.CLASS.SETTING_PAGE_AUTO_SAVE_CHECKBOX + '">' + Resource.settingDialog.autoSaveLabel  +
	                    '</label>' +
	                    '<input type="text" class="' + Define.CLASS.SETTING_PAGE_AUTO_SAVE_MINUTE_INPUT + '">' + Resource.settingDialog.autoSaveMinuteLabel +
	                '</div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_FOOTER+'">' +
	                '<ul class="'+Define.CLASS.DIALOG_BUTTONS+'">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(SettingDialog.prototype, new AbstractDialog());

	SettingDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.pageTitleInput = this.$dNode.find('.' + Define.CLASS.SETTING_PAGE_TITLE_INPUT);
	    this.pageEncodingSelection = this.$dNode.find('.' + Define.CLASS.SETTING_PAGE_ENCODING_SELECTION);
	    this.pageEncodingInput = this.$dNode.find('.' + Define.CLASS.SETTING_PAGE_ENCODING_INPUT);
	    this.pageLanguageSelection = this.$dNode.find('.' + Define.CLASS.SETTING_PAGE_LANGUAGE_SELECTION);
	    this.pageTypeSelection = this.$dNode.find('.' + Define.CLASS.SETTING_PAGE_DOCUMENT_TYPE_SELECTION);
	    this.pageAutoSaveCheck = this.$dNode.find('.' + Define.CLASS.SETTING_PAGE_AUTO_SAVE_CHECKBOX);
	    this.pageAutoSaveMinuteInput = this.$dNode.find('.' + Define.CLASS.SETTING_PAGE_AUTO_SAVE_MINUTE_INPUT);

	    this.$dNode.find("."+Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){

	                var title = _this.pageTitleInput.val();
	                var encoding = _this.pageEncodingSelection.val();
	                encoding = encoding === 'user' ? _this.pageEncodingInput.val() : encoding;

	                var language = _this.pageLanguageSelection.val();
	                language = language === 'none' ? '' : language;

	                var isAutoSave = _this.pageAutoSaveCheck[0].checked;
	                var autoSaveMinute = _this.pageAutoSaveMinuteInput.val();

	                var $document =  $(document);

	                var $title = $document.find('title');
	                $title.html(title);

	                if (encoding) {
	                    var $head = $document.find('head');

	                    var metaHTML4Type = $('meta[http-equiv="content-type"]');

	                    if (metaHTML4Type.length) {
	                        metaHTML4Type.attr('content', 'text/html;charset=' + encoding);
	                    } else {
	                        metaHTML4Type = $('<meta http-equiv="Content-Type" content="text/html; charset=' + encoding + '">');
	                        $head.prepend(metaHTML4Type);
	                    }

	                    var metaHTML5Type = $('meta[charset]');

	                    if (metaHTML5Type.length) {
	                        metaHTML5Type.attr('charset', encoding);
	                    } else {
	                        metaHTML5Type = $('<meta charset="' + encoding + '">');
	                        $head.prepend(metaHTML5Type);
	                    }
	                }

	                $document.find('html').attr('lang', language).attr('xml:lang', language);

	                _this.setNewDocTypeAppend();


	                window.isAutoSave = isAutoSave;

	                if (window.isAutoSave) {
	                    window.autoSaveMinute = (autoSaveMinute * 60000) || 60000;
	                    window.autoSaveList = window.autoSaveList || [];

	                    window.autoSaveInterval = setInterval(function(){
	                        var dateObject = new Date();

	                        window.autoSaveList.push({
	                            timestamp : dateObject.format('yyyy-MM-dd HH:mm:ss'),
	                            html : _this.editorElement.find('.' + Define.CLASS.CONTENTS).html()
	                        });
	                    }, window.autoSaveMinute);
	                } else {
	                    window.autoSaveList = null;
	                    window.autoSaveMinute = 0;
	                    if (window.autoSaveInterval) {
	                        clearInterval(window.autoSaveInterval);
	                        window.autoSaveInterval = null;
	                    }
	                }

	                _this.closeDialog();
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.pageEncodingSelection.on('change', function(){
	        var encodingType = _this.pageEncodingSelection.val();

	        if (encodingType === 'user') {
	            encodingType = '';
	        }

	        _this.pageEncodingInput.val(encodingType);
	    });

	    this.setTitle();
	    this.setDocType();
	    this.setLanguageType();
	    this.setEncoding();
	    this.setAutoSave();

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	SettingDialog.prototype.setNewDocTypeAppend = function() {
	    var docType = 'html';
	    var publicId = '';
	    var systemId = '';

	    var docTypeValue = this.pageTypeSelection.val();

	    switch (docTypeValue) {
	        case "xhtml1.1" :
	            publicId = "-//W3C//DTD XHTML 1.1//EN";
	            systemId = "http://www.w3c.org/TR/xhtml11/DTD/xhtml11.dtd";

	            break;

	        case "xhtml1.0transitional" :
	            publicId = "-//W3C//DTD XHTML 1.0 Transitional//EN";
	            systemId = "http://www.w3c.org/TR/xhtml1/DTD/xhtml1-transitional.dtd";
	            break;

	        case "xhtml1.0strict" :
	            publicId = "-//W3C//DTD XHTML 1.0 Strict//EN";
	            systemId = "http://www.w3c.org/TR/xhtml1/DTD/xhtml1-strict.dtd";
	            break;

	        case "xhtml1.0frameset" :
	            publicId = "-//W3C//DTD XHTML 1.0 Frameset//EN";
	            systemId = "http://www.w3c.org/TR/xhtml1/DTD/xhtml1-frameset.dtd";
	            break;

	        case "html4.01transitional" :
	            publicId = "-//W3C//DTD HTML 4.01 Transitional//EN";
	            systemId = "http://www.w3c.org/TR/xhtml4/loose.dtd";
	            break;

	        case "html4.01strict" :
	            publicId = "-//W3C//DTD HTML 4.01//EN";
	            systemId = "http://www.w3c.org/TR/xhtml4/strict.dtd";
	            break;

	        case "html4.01frameset" :
	            publicId = "-//W3C//DTD HTML 4.01 Frameset//EN";
	            systemId = "http://www.w3c.org/TR/xhtml4/frameset.dtd";
	            break;

	        case "html3.2" :
	            publicId = "-//W3C//DTD HTML 3.2 Final//EN";
	            systemId = "";
	            break;

	        case "html2.0" :
	            publicId = "-//IETF//DTD HTML 3.2//EN";
	            systemId = "";

	            break;

	        case "html5" :
	            break;

	        default:
	            break;
	    }


	    var newDocType = document.implementation.createDocumentType(docType, publicId, systemId);
	    document.doctype.parentNode.replaceChild(newDocType,document.doctype);

	};

	SettingDialog.prototype.setDocType = function() {
	    var docType = Util.getHtmlDocType();

	    var publicId = docType ? docType.publicId : "";
	    var typeValue = 'default';

	    switch (publicId) {
	        case "-//W3C//DTD XHTML 1.1//EN" :
	            typeValue = "xhtml1.1";

	            break;

	        case "-//W3C//DTD XHTML 1.0 Transitional//EN" :
	            typeValue = "xhtml1.0transitional";

	            break;

	        case "-//W3C//DTD XHTML 1.0 Strict//EN" :
	            typeValue = "xhtml1.0strict";

	            break;

	        case "-//W3C//DTD XHTML 1.0 Frameset//EN" :
	            typeValue = "xhtml1.0frameset";

	            break;

	        case "-//W3C//DTD HTML 4.01 Transitional//EN" :
	            typeValue = "html4.01transitional";

	            break;

	        case "-//W3C//DTD HTML 4.01//EN" :
	            typeValue = "html4.01strict";

	            break;

	        case "-//W3C//DTD HTML 4.01 Frameset//EN" :
	            typeValue = "html4.01frameset";

	            break;

	        case "-//W3C//DTD HTML 3.2 Final//EN" :
	            typeValue = "html3.2";

	            break;

	        case "-//IETF//DTD HTML 3.2//EN" :
	            typeValue = "html2.0";

	            break;

	        case "" :
	            typeValue = "html5";

	            break;

	        default:
	            break;
	    }

	    this.pageTypeSelection.val(typeValue);
	};

	SettingDialog.prototype.setLanguageType = function() {
	    var htmlLanguage = Util.getHtmlLanguageType();

	    var langType = 'none';

	    if (htmlLanguage) {
	        htmlLanguage = htmlLanguage.toLowerCase();

	        var languageTypes = Resource.settingDialog.languageTypes;

	        for (var key in languageTypes){
	            if (key === htmlLanguage) {
	                langType = key;
	                break;
	            }
	        }
	    }

	    this.pageLanguageSelection.val(langType);
	};

	SettingDialog.prototype.setTitle = function() {
	    this.pageTitleInput.val(Util.getHtmlTitle());
	};

	SettingDialog.prototype.setEncoding = function() {
	    var metaTypes = Util.getHtmlEncoding();

	    var $metaTypeHTML4 = metaTypes.metaTypeHTML4;
	    var $metaTypeHTML5 = metaTypes.metaTypeHTML5;

	    var contentTypeValue = "user";

	    var charsetValue = "";

	    if ($metaTypeHTML4.length) {
	        var contentValue = $metaTypeHTML4.attr('content');

	        if (contentValue) {
	            contentValue = contentValue.toLowerCase();
	            var result = contentValue.match(/charset=([a-zA-Z0-9-]+)/);

	            if (result) {
	                charsetValue = result[1];
	            }
	        }
	    }

	    if ($metaTypeHTML5.length) {
	        var charset = $metaTypeHTML5.attr('charset');

	        if (charset) {
	            charsetValue = charset.toLowerCase();
	        }
	    }

	    if (charsetValue) {
	        var encodingTypes = Resource.settingDialog.encodingTypes;

	        for (var key in encodingTypes){
	            if (key === charsetValue) {
	                contentTypeValue = key;
	                break;
	            }
	        }
	    }

	    this.pageEncodingSelection.val(contentTypeValue);
	    this.pageEncodingInput.val(charsetValue);
	};

	SettingDialog.prototype.setAutoSave = function() {
	    this.pageAutoSaveCheck[0].checked = !!window.isAutoSave;
	    this.pageAutoSaveMinuteInput.val(window.autoSaveMinute / 60000 || "");
	};

	SettingDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_SETTING);

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	/*
	 $(document).find('meta');

	 $('meta[http-equiv="content-type"]');


	 $('html').attr('lang', 'ko');
	 $('html').attr('xml:lang', 'ko');


	 $('html').attr('xmlns', 'http://www.w3.org/1999/xhtml');

	 $('title').html('test');


	 var newDoctype = document.implementation.createDocumentType(
	 'html',
	 '-//W3C//DTD XHTML 1.0 Transitional//EN',
	 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'
	 );

	 document.doctype.parentNode.replaceChild(newDoctype,document.doctype);

	 */

	module.exports = SettingDialog;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);

	var licenseInfo = {
	    companyName : '(주)Kukudocs',
	    licenseName : '체험판 라이선스',
	    productKey : 'EXAMPLE_PRODUCT',
	    version : Define.EDITOR_INFO.VERSION,
	    homepage : Define.EDITOR_INFO.HOMEPAGE
	};

	function AboutDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="'+ Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_ABOUT + '">' +
	            '<div class="'+Define.CLASS.DIALOG_HEADER+'">' +
	                '<div class="'+Define.CLASS.DIALOG_TITLE+'">'+ Resource.aboutDialog.title +'</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_CONTENTS+'">' +
	                '<div class="'+Define.CLASS.ABOUT_EDITOR_INFORMATION_WRAPPER+'">' +
	                    '<table class="'+Define.CLASS.ABOUT_EDITOR_INFORMATION_TABLE+'">' +
	                        '<colgroup>' +
	                            '<col style="width:110px;">' +
	                            '<col style="width:200px;">' +
	                        '</colgroup>' +
	                        '<tbody>' +
	                            '<tr>' +
	                                '<td>' +
	                                    '<div class="' + Define.CLASS.ABOUT_LOGO + '">' +
	                                '</td>' +
	                                '<td>' +
	                                    '<p class="' + Define.CLASS.ABOUT_EDITOR_TITLE_COMPANY_NAME + '">' + '<span>' + Resource.aboutDialog.companyTitle + '</span></p>' +
	                                    '<p class="' + Define.CLASS.ABOUT_EDITOR_TITLE_SUB_NAME + '">' + '<span>' + Resource.aboutDialog.editorTitle + '</span></p>' +
	                                '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' +
	                                    Resource.aboutDialog.companyName +
	                                '</td>' +
	                                '<td >' +
	                                    licenseInfo.companyName +
	                                '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' +
	                                    Resource.aboutDialog.licenseName +
	                                '</td>' +
	                                '<td>' +
	                                    licenseInfo.licenseName +
	                                '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' +
	                                    Resource.aboutDialog.productkeyName +
	                                '</td>' +
	                                '<td>' +
	                                    licenseInfo.productKey +
	                                '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' +
	                                    Resource.aboutDialog.versionName +
	                                '</td>' +
	                                '<td>' +
	                                    licenseInfo.version +
	                                '</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td>' +
	                                    Resource.aboutDialog.homepage +
	                                '</td>' +
	                                '<td>' +
	                                    '<a href="' + licenseInfo.homepage + '" target="_blank">' + licenseInfo.homepage + '</a>' +
	                                '</td>' +
	                            '</tr>' +
	                        '</tbody>' +
	                    '</table>' +
	                    '<div class="'+Define.CLASS.ABOUT_EDITOR_INFORMATION_LINE+'">' +
	                    '</div>' +
	                '</div>' +
	                '<p>' + Resource.aboutDialog.copyright + '</p>' +
	                '<p>' + Resource.aboutDialog.reserved + '</p>' +
	            '</div>' +
	            '<div class="'+Define.CLASS.DIALOG_FOOTER+'">' +
	                '<ul class="'+Define.CLASS.DIALOG_BUTTONS+'">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.aboutDialog.closeButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(AboutDialog.prototype, new AbstractDialog());

	AboutDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.$dNode.find("."+Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	AboutDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_ABOUT);

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	module.exports = AboutDialog;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);

	function ConvertUpperLowerDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.templateHTML = '' +
	        '<div class="' + Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_UPPER_LOWER + '">' +
	            '<div class="' + Define.CLASS.DIALOG_HEADER + '">' +
	                '<div class="' + Define.CLASS.DIALOG_TITLE + '">' + Resource.upperLowerDialog.insert_title + '</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_CONTENTS + '">' +
	                '<div class="' + Define.CLASS.UPPER_LOWER_DIALOG_CONTENTS + '">' +
	                    '<ul style=""text-align:left>' +
	                        '<li><input type="radio" name="upper_lower" value="upper"><span>' + Resource.upperLowerDialog.upper + '</span></li>' +
	                        '<li><input type="radio" name="upper_lower" value="lower"><span>' + Resource.upperLowerDialog.lower + '</span></li>' +
	                        '<li><input type="radio" name="upper_lower" value="capitalize_first"><span>' + Resource.upperLowerDialog.capitalize_first + '</span></li>' +
	                    '</ul>' +
	                '</div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_FOOTER + '">' +
	                '<ul class="' + Define.CLASS.DIALOG_BUTTONS + '">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	                '</div>' +
	        '</div>';
	}

	$.extend(ConvertUpperLowerDialog.prototype, new AbstractDialog());

	ConvertUpperLowerDialog.prototype.initDialog = function(){
	    this.$dNode = $(this.templateHTML);

	    var $listItems = this.$dNode.find('li');
	    $listItems.on('click', function(e){
	        $(e.currentTarget).find('input').prop('checked', true);
	    });

	    this.$dNode.find('li > input').first().prop('checked', true);

	    var _this = this;
	    this.$dNode.find("." + Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){
	                var $selectedChecked = _this.$dNode.find('input[type="radio"]:checked');

	                var value = $selectedChecked.val();

	                if (! value || value == ''){
	                    value = 'upper';
	                }

	                _this.router.doOperation({
	                    type:"create",
	                    name:"upperLower",
	                    value: value,
	                    range : _this.selectionRange
	                });

	                _this.router.setRedoHistory();

	                _this.closeDialog();
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	ConvertUpperLowerDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_UPPER_LOWER);

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();

	    this.setDialogPosition($dialog);
	};

	module.exports = ConvertUpperLowerDialog;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);
	var classClicked = 'clicked';

	function BlockQuoteDialog(editorElement, $domObejct, router) {
	    this.editorElement = $(editorElement);
	    this.router = router;
	    this.$dom = $domObejct;

	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;

	    this.imagesContainer = 'imagesContainer';
	    this.templateHTML = '' +
	        '<div class="' + Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_BLOCK_QUOTE + '">' +
	            '<div class="' + Define.CLASS.DIALOG_HEADER + '">' +
	                '<div class="' + Define.CLASS.DIALOG_TITLE + '">' + Resource.blockquoteDialog.insert_title + '</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_CONTENTS + '">' +
	                '<div class="' + Define.CLASS.BLOCKQUOTE_DIALOG_CONTENTS + '">' +
	                    '<p>' +
	                        '<img style="background-position: 5px 3px;" type="quote1">' +
	                        '<img style="background-position: -62px 3px;" type="quote2">' +
	                        '<img style="background-position: -126px 3px;" type="quote3">' +
	                        '<img style="background-position: -189px 3px;" type="quote4">' +
	                        '<img style="background-position: -252px 3px;" type="quote5">' +
	                        '<img style="background-position: -318px 3px;" type="quote6">' +
	                        '<img style="background-position: -383px 3px;" type="quote7">' +
	                        '<img style="background-position: -445px 3px;" type="quote8">' +
	                    '</p>' +
	                '</div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_FOOTER + '">' +
	                '<ul class="' + Define.CLASS.DIALOG_BUTTONS + '">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	                '</div>' +
	        '</div>';
	}

	$.extend(BlockQuoteDialog.prototype, new AbstractDialog());

	BlockQuoteDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    var $images = this.$dNode.find('img');
	    $images.on('click', function(e){
	        _this.$dNode.find('.' + classClicked).removeClass(classClicked);

	        $(e.currentTarget).addClass(classClicked);
	    });


	    this.$dNode.find("." + Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){

	                var value = _this.$dNode.find('.' + classClicked).attr('type');

	                _this.router.doOperation({
	                    type:"update",
	                    name:"blockquote",
	                    value: value,
	                    range : _this.selectionRange
	                });

	                _this.router.setRedoHistory();

	                _this.closeDialog();
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	BlockQuoteDialog.prototype.openDialog = function(){
	    this.$dialogNode.find("." + Define.CLASS.DIALOG_DIALOG_MAIN).hide();

	    var $dialog = this.$dialogNode.find("." + Define.CLASS.DIALOG_BLOCK_QUOTE);

	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    $dialog.find('img').removeClass(classClicked);
	    $dialog.find('img').first().addClass(classClicked);
	    this.setSelectionRange();
	    this.setDialogPosition($dialog);
	};

	module.exports = BlockQuoteDialog;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	var AbstractDialog = __webpack_require__(56);

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);

	function LayerDialog(editorElement, $domObject, router) {
	    this.$dom = $domObject;
	    this.editorElement = $(editorElement);
	    this.$contents = this.editorElement.find("." + Define.CLASS.CONTENTS);
	    this.$preview = this.editorElement.find("." + Define.CLASS.PRE_VIEW);

	    this.router = router;
	    this.$dialogNode = this.editorElement.find("." + Define.CLASS.DIALOG);
	    this.$dNode = null;
	    this.selInfo = null;

	    this.defaultLayerSet = null;

	    this.templateHTML = '' +
	        '<div class="' + Define.CLASS.DIALOG_DIALOG_MAIN + " " + Define.CLASS.DIALOG_LAYER + '">' +
	            '<div class="' + Define.CLASS.DIALOG_HEADER + '">' +
	                '<div class="' + Define.CLASS.DIALOG_TITLE + '">' + Resource.layerDialog.insert_title + '</div>' +
	                '<div class="' + Define.CLASS.DIALOG_CLOSE + '"></div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_CONTENTS + '">' +
	                '<div class="' + Define.CLASS.DIALOG_LAYER_WRAPPER + '">' +
	                    '<table class="' + Define.CLASS.DIALOG_LAYER_FIELD_SET + '">' +
	                        '<colgroup>' +
	                            '<col style="width:15%;">' +
	                            '<col style="width:35%;">' +
	                            '<col style="width:15%;">' +
	                            '<col style="width:35%;">' +
	                        '</colgroup>' +
	                        '<tbody>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.DIALOG_LAYER_SET_TD_LABEL + '">' + Resource.layerDialog.width + '</td>' +
	                                '<td class="' + Define.CLASS.DIALOG_LAYER_SET_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.DIALOG_LAYER_SET_WIDTH_INPUT + '" /> px</td>' +
	                                '<td class="' + Define.CLASS.DIALOG_LAYER_SET_TD_LABEL + '">' + Resource.layerDialog.height + '</td>' +
	                                '<td class="' + Define.CLASS.DIALOG_LAYER_SET_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.DIALOG_LAYER_SET_HEIGHT_INPUT + '" /> px</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.DIALOG_LAYER_SET_TD_LABEL + '">' + Resource.layerDialog.positionX + '</td>' +
	                                '<td class="' + Define.CLASS.DIALOG_LAYER_SET_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.DIALOG_LAYER_SET_POSITION_X_INPUT + '" /> px</td>' +
	                                '<td class="' + Define.CLASS.DIALOG_LAYER_SET_TD_LABEL + '">' + Resource.layerDialog.positionY + '</td>' +
	                                '<td class="' + Define.CLASS.DIALOG_LAYER_SET_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.DIALOG_LAYER_SET_POSITION_Y_INPUT + '" /> px</td>' +
	                            '</tr>' +
	                            '<tr>' +
	                                '<td class="' + Define.CLASS.DIALOG_LAYER_SET_TD_LABEL + '">' + Resource.layerDialog.id + '</td>' +
	                                '<td class="' + Define.CLASS.DIALOG_LAYER_SET_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.DIALOG_LAYER_SET_ID_INPUT + '" /></td>' +
	                                '<td class="' + Define.CLASS.DIALOG_LAYER_SET_TD_LABEL + '">' + Resource.layerDialog.className + '</td>' +
	                                '<td class="' + Define.CLASS.DIALOG_LAYER_SET_TD_INPUT + '">' + '<input type="text" value="" class="' + Define.CLASS.DIALOG_LAYER_SET_CLASS_INPUT + '" /></td>' +
	                            '</tr>' +
	                        '</tbody>' +
	                    '</table>' +
	                '</div>' +
	            '</div>' +
	            '<div class="' + Define.CLASS.DIALOG_FOOTER + '">' +
	                '<ul class="' + Define.CLASS.DIALOG_BUTTONS + '">' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.OK_BUTTON + '"><span>' + Resource.dialog.okButton + '</span></a></li>' +
	                    '<li><a class="' + Define.CLASS.DIALOG_BUTTON + ' ' + Define.CLASS.CANCEL_BUTTON + '"><span>' + Resource.dialog.cancelButton + '</span></a></li>' +
	                '</ul>' +
	            '</div>' +
	        '</div>';
	}

	$.extend(LayerDialog.prototype, new AbstractDialog());

	LayerDialog.prototype.initDialog = function(){
	    var _this = this;
	    this.$dNode = $(this.templateHTML);

	    this.titleNode = this.$dNode.find('.' + Define.CLASS.DIALOG_TITLE);
	    
	    this.$width = this.$dNode.find('.' + Define.CLASS.DIALOG_LAYER_SET_WIDTH_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.$height = this.$dNode.find('.' + Define.CLASS.DIALOG_LAYER_SET_HEIGHT_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.$positionX = this.$dNode.find('.' + Define.CLASS.DIALOG_LAYER_SET_POSITION_X_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.$positionY = this.$dNode.find('.' + Define.CLASS.DIALOG_LAYER_SET_POSITION_Y_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.$id = this.$dNode.find('.' + Define.CLASS.DIALOG_LAYER_SET_ID_INPUT).on('input', $.proxy(this.inputChange, this));
	    this.$class = this.$dNode.find('.' + Define.CLASS.DIALOG_LAYER_SET_CLASS_INPUT).on('input', $.proxy(this.inputChange, this));

	    this.$dNode.find("." + Define.CLASS.DIALOG_BUTTON).each(function(){
	        var $button = $(this);
	        if($button.hasClass(Define.CLASS.OK_BUTTON)){
	            $button.on("click", function(){

	                var isModify = _this.defaultLayerSet.isModify;

	                var opSources = [];

	                var selInfo = _this.selectionRange;

	                if (!selInfo) {
	                    _this.$dom.selection.setOp({
	                        p : [0,0],
	                        r : [0,0]
	                    });

	                    _this.selectionRange = selInfo = _this.$dom.selection.get();
	                }

	                if (_this.windowRange) {
	                    _this.$dom.selection.setRange(_this.windowRange);
	                }

	                if (!isModify) {
	                    var $selectedNodes = _this.editorElement.find("." + Define.CLASS.SELECTED);

	                    if ($selectedNodes.length) {
	                        var deleteOpSource = {
	                            type : "delete",
	                            name : "text",
	                            value : {
	                                keyName : "delete"
	                            },
	                            range : {
	                                p : selInfo.p,
	                                r : selInfo.r,
	                                s : "text"
	                            }
	                        };

	                        opSources.push(deleteOpSource);

	                        selInfo = {
	                            p : [selInfo.p[0],selInfo.p[0]],
	                            r : [selInfo.r[0],selInfo.r[0]]
	                        }
	                    }
	                }

	                var opSource = {
	                    type : isModify ? "update" : "create",
	                    name : "layer",
	                    value : _this.defaultLayerSet,
	                    range : {
	                        p : [selInfo.p[0],selInfo.p[0]],
	                        r : [selInfo.r[0],selInfo.r[0]],
	                        s : "text"
	                    }
	                };

	                opSources.push(opSource);

	                _this.router.doOperation(opSources);
	                _this.router.setRedoHistory();

	                _this.closeDialog();
	            });
	        }else if($button.hasClass(Define.CLASS.CANCEL_BUTTON)){
	            $button.on("click", function(){
	                _this.closeDialog();
	            });
	        }
	    });

	    this.setMoveEvent();
	    this.setCloseButton();

	    return this;
	};

	LayerDialog.prototype.inputChange = function(e){
	    var $element = $(e.target);
	    var inputValue = $element.val();
	    var intValue = parseInt(inputValue);

	    if ($element.hasClass(Define.CLASS.DIALOG_LAYER_SET_WIDTH_INPUT)) {
	        if (!isNaN(intValue)) {
	            this.defaultLayerSet.width = intValue;
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultLayerSet.width || '');
	            }
	        }

	    } else if ($element.hasClass(Define.CLASS.DIALOG_LAYER_SET_HEIGHT_INPUT)) {
	        if (!isNaN(intValue)) {
	            this.defaultLayerSet.height = intValue;
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultLayerSet.height || '');
	            }
	        }

	    } else if ($element.hasClass(Define.CLASS.DIALOG_LAYER_SET_POSITION_X_INPUT)) {
	        if (!isNaN(intValue)) {
	            this.defaultLayerSet.positionX = intValue;
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultLayerSet.positionX || '');
	            }
	        }

	    } else if ($element.hasClass(Define.CLASS.DIALOG_LAYER_SET_POSITION_Y_INPUT)) {
	        if (!isNaN(intValue)) {
	            this.defaultLayerSet.positionY = intValue;
	        } else {
	            if ($element.val() !== '') {
	                $element.val(this.defaultLayerSet.positionY || '');
	            }
	        }
	    } else if ($element.hasClass(Define.CLASS.DIALOG_LAYER_SET_ID_INPUT)) {
	        this.defaultLayerSet.id = $element.val();

	    } else if ($element.hasClass(Define.CLASS.DIALOG_LAYER_SET_CLASS_INPUT)) {
	        this.defaultLayerSet.className = $element.val();
	    }
	};

	LayerDialog.prototype.resetFields = function(initData){
	    this.defaultLayerSet = {
	        isModify : false,
	        width : null,
	        height : null,
	        positionX : null,
	        positionY : null,
	        id :null,
	        className :null
	    };

	    this.titleNode.html(Resource.layerDialog.title_insert);

	    this.$width.val('');
	    this.$height.val('');
	    this.$positionX.val('');
	    this.$positionY.val('');
	    this.$id.val('');
	    this.$class.val('');

	    if (initData) {
	        if (initData.type == 'modify') {
	            this.titleNode.html(Resource.tableDialog.modify_title);
	            this.defaultLayerSet.isModify = true;
	        }

	        if (initData.width) {
	            var width = parseInt(initData.width) || '';
	            this.$width.val(width);
	            this.defaultLayerSet.width = width;
	        }

	        if (initData.height) {
	            var height = parseInt(initData.height);
	            this.$height.val(height);
	            this.defaultLayerSet.height = height || '';
	        }

	        if (initData.positionX) {
	            var positionX = parseInt(initData.positionX) || '';
	            this.$positionX.val(positionX);
	            this.defaultLayerSet.positionX = positionX;
	        }

	        if (initData.positionY) {
	            var positionY = parseInt(initData.positionY) || '';
	            this.$positionY.val(positionY);
	            this.defaultLayerSet.positionY = positionY;
	        }

	        if (initData.id) {
	            var id = initData.id;
	            this.$id.val(id);
	            this.defaultLayerSet.id = id;
	        }

	        if (initData.className) {
	            var className = initData.className;
	            this.$class.val(className);
	            this.defaultLayerSet.className = className;
	        }
	    }

	};


	LayerDialog.prototype.openDialog = function(initData){
	    this.$dialogNode.find("."+Define.CLASS.DIALOG_DIALOG_MAIN).hide();
	    var $dialog = this.$dialogNode.find("."+Define.CLASS.DIALOG_LAYER);
	    if(!$dialog[0]){
	        $dialog = this.$dNode;
	        this.$dialogNode.append(this.$dNode[0]);
	    }

	    this.setSelectionRange();
	    this.resetFields(initData);

	    this.setDialogPosition($dialog);
	};

	module.exports = LayerDialog;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var WidgetItems = __webpack_require__(58);
	var Util = __webpack_require__(6);
	var Resource = __webpack_require__(13);

	function UI(editorElement, options) {
	    this.editorElement = null;
	    this.options = null;

	    this.init(editorElement, options);
	}

	UI.prototype.init = function(editorElement, options){
	    var _this = this;
	    this.editorElement = $(editorElement);
	    this.options = options;

	    //TODO : i18n 대응 준비중

	    var hideUiActiveWindow = function(node){
	        var $node = (node) ? $(node) : _this.editorElement;
	        $node.find("." + Define.WIDGET_CLASS.UI_ACTIVE).removeClass(Define.WIDGET_CLASS.UI_ACTIVE);
	        $node.find("." + Define.WIDGET_CLASS.UI_SELECT_LIST).hide();
	        $node.find("." + Define.WIDGET_CLASS.UI_COMBO_BOX).hide();
	        $node.find("." + Define.WIDGET_CLASS.UI_COLOR_PICKER).hide();
	        $node.find("." + Define.WIDGET_CLASS.UI_LIST_PICKER).hide();
	        $node.find("." + Define.WIDGET_CLASS.UI_TABLE_PICKER).hide();
	        $node.find("." + Define.WIDGET_CLASS.UI_CUSTOM_BOX).hide();
	    };

	    $.widget("ui.kkButton",{
	        options: {
	            _id : "",
	            type : "",
	            callback : null
	        },

	        _create: function() {
	            this._event();
	            this._id = this.element.attr("u-id");
	        },

	        _init : function(){

	        },

	        _event : function(){
	            var _this = this;
	            this._on( _this.element, {
	                "click" : function(e) {
	                    _this._trigger("callback", e, {"id":_this._id});
	                }
	            });
	        },

	        _destroy: function() {
	            this.element.remove();
	        },

	        setActive: function() {
	            this.unsetActive();
	            this.element.addClass("active");
	        },
	        unsetActive: function() {
	            this.element.removeClass("active");
	        },
	        setDisabled: function() {
	            this.unsetDisabled();
	            this.element.addClass("disabled");
	        },
	        unsetDisabled: function() {
	            this.element.removeClass("disabled");
	        }
	    });

	    // kkSelectBox
	    $.widget("ui.kkSelectBox",{
	        options:{
	            id : "",
	            label : "name2",
	            defaultVal : "value2",
	            currentVal : "value2",
	            callback  : null,
	            item: [],
	            mode: "select"
	        },

	        _create:function(){
	            var _this = this,
	                label = "",
	                strSelected = "",
	                css = "",
	                wrap = "";


	            this.options.id = this.element.attr("u-id");
	            this.options.mode = (this.element.attr("mode")) ? this.element.attr("mode") : "select";
	            this.options.defaultVal = this.element.attr("val");
	            this.options.currentVal = this.element.attr("val");
	            this.options.item = WidgetItems[this.options.id] || [];
	            if(_this.options.mode == "select"){
	                var iconClassType = "arrow_icon i-arrow-down";
	                wrap = '<div ui-type="'+ _this.options.id +'" ui-item-count="'+_this.options.item.length+'" class="ui_selectbox"><div class="arrow"><i class="' + iconClassType + '"></i></div>'+
	                    '<ul class="' + Define.WIDGET_CLASS.UI_SELECT_LIST + '">';
	                $.each(_this.options.item,function() {
	                    strSelected = "";

	                    if(_this.options.defaultVal == this.value){
	                        label = this.name;
	                        strSelected = "selected";
	                    }

	                    if (_this.options.id == "fontFamily"){
	                        wrap += '<li data-value="'+this.value+'" '+strSelected+'><span style="font-family: '+this.name+'">'+this.name+'</span></li>';
	                    // }else if (_this.options.id == "heading"){
	                    //     wrap += '<li data-value="'+this.value+'" '+strSelected+'><' + this.value + '>' + this.name + '</' + this.value + '>' + '</li>';
	                    }else{
	                        wrap += '<li data-value="'+this.value+'" '+strSelected+'>'+this.name+'</li>';
	                    }
	                });
	                wrap += '</ul><label class="btnDropdown" ui-type="'+ this.options.type +'" >'+label+'</label></div>';
	                this.element.html(wrap);
	            }else{
	                wrap = '<span class="arrow"></span><ul ui-type="'+ _this.options.id +'" ui-item-count="'+_this.options.item.length+'" class="' + Define.WIDGET_CLASS.UI_COMBO_BOX + ' ' + _this.options.id +'" >';
	                $.each(_this.options.item,function() {
	                    strSelected = "";
	                    if(_this.options.defaultVal == this.value){
	                        strSelected = "selected";
	                    }

	                    wrap += '<li data-value="'+this.value+'"';
	                    if (this.type) {
	                        wrap += "type='" + this.type + "'";
	                    }
	                    wrap += strSelected + " ";

	                    if (this.key) { wrap += "key='" + this.key + "'"; }
	                    if (this.cmd) { wrap += "cmd='" + this.cmd + "'"; }
	                    wrap += '>'+this.name+'</li>';
	                });
	                wrap += '</ul>';
	                this.element.append(wrap);
	            }

	            this.element.find("ul > li[type != 'label']").on("click", function (e) {
	                _this._toggle();

	                var $target = $(e.target);
	                if (!$target.is('li')) {
	                    $target = $target.parent();
	                }

	                _this.setValue(e, $target.attr("data-value"));
	                return false;
	            });

	            this._event();
	            if( this.options.hidden ){
	                this.element.hide();
	            }
	        },

	        _init : function() {

	        },

	        _destroy: function() {
	            this.element.remove();
	        },

	        _setOptions: function( options ) {
	            var that = this;
	            $.each( options, function( key, value ) {
	                that._setOption( key, value );
	            });
	        },
	        _setOption: function( key, value ) {
	            this._super( key, value );
	        },

	        _event : function(){
	            var _this = this;
	            this._on( _this.element, {
	                "click" : function(e) {
	                    _this._toggle();
	                }
	            });
	            if(_this.mode == "select") {
	                var cH = (_this.options.item.length * 25);
	                var pH = ($(window).height() - ($("." + Define.CLASS.EDITOR_TOOLBAR).height()));
	                if (cH > pH) {
	                    _this.element.find("ul").css("height", pH + "px");
	                }
	                $(window).resize(function () {
	                    pH = ($(window).height() - ($("." + Define.CLASS.EDITOR_TOOLBAR).height()));
	                    if (cH > pH) {
	                        _this.element.find("ul").css("height", pH + "px");
	                    }
	                });
	            }
	        },

	        _toggle : function(){
	            var _this = this;
	            var className = "";
	            if(_this.options.mode == "select") {
	                className = Define.WIDGET_CLASS.UI_SELECT_LIST;
	            }else {
	                className = Define.WIDGET_CLASS.UI_COMBO_BOX;
	            }

	            if(this.element.find("."+className).is(':hidden')){
	                var customBox = Util.findParentNode(this.element[0], "." + Define.WIDGET_CLASS.UI_CUSTOM_BOX);
	                if(customBox){
	                    hideUiActiveWindow(customBox);
	                }else{
	                    hideUiActiveWindow();
	                }

	                this.element.find("."+className).show();
	            }else{
	                this.element.find("."+className).hide();
	            }
	        },

	        setValue : function (e, value){
	            var _this = this;
	            this.currentVal = value;

	            this.element.find("li[selected]").removeAttr("selected");
	            var text = this.element.find("li[data-value='"+value+"']").attr("selected","selected").text();

	            // console.log(value, text);

	            if (!text) { text = value; }
	            this.element.find("label").html(text);

	            this._trigger("callback", e, {id:_this.options.id, mode:_this.options.mode,label:text,val:value});
	        }
	    });

	    // kkColorPicker
	    $.widget("ui.kkColorPicker",{
	        options: {
	            type : "",
	            defaultColor : "000000",
	            currentColor : "000000",
	            noAction : false,
	            colorParent : null,

	            label:{
	                standard: "표준 색",
	                thame: "테마 색"
	            },
	            pallete : {
	                defaultColor  : "000000",
	                noneColor  : "ffffff",
	                simpleColor   : ["ffffff", "000000", "eeece1", "1f497d", "4f81bd", "c0504d", "9bbb59", "8064a2", "4bacc6", "f79646"],
	                standardColor : ["f2f2f2", "808080", "ddd9c3", "c6d9f1", "dce6f2", "f2dcdb", "ebf1de", "e6e0ec", "dbeee0", "fdeada",
	                    "d9d9d9", "595959", "c4bd97", "8eb4e3", "b9cde5", "e6b9b8", "d7e4bd", "ccc1da", "b7dee8", "fcd5b5",
	                    "bfbfbf", "404040", "948a54", "558ed5", "95b3d7", "d99694", "c3d69b", "b3a2c7", "93cddd", "fac090",
	                    "a6a6a6", "262626", "4a452a", "17375e", "376092", "953735", "77933c", "604a7b", "31859c", "e46c0a",
	                    "808080", "0d0d0d", "1e1c11", "10243f", "254061", "632523", "4f6228", "403152", "215968", "984807"],
	                normalColor   : ["c00000", "ff0000", "ffc000", "ffff00", "92d050", "00b050", "00b0f0", "0070c0", "002060", "7030a0"]
	            },
	            callback  : null
	        },

	        _create: function() {
	            this.options.id = this.element.attr("u-id");
	            this.options.defaultColor = this.element.attr("color");

	            var wrap = '';
	                wrap += '<div class="' + Define.WIDGET_CLASS.UI_COLOR_PICKER + ' modeless">';
	                //wrap += '<ul class="ui_sub_default_color"><li color="'+this.options.pallete.defaultColor+'"><span class="ui_default_color"></span>'+this.options.label.default+'</li></ul>';
	                wrap += '<div class="ui_standard_color_text">'+this.options.label.thame+'</div>';
	                wrap += '<ul class="ui_default_color_palette">';
	                $.each(this.options.pallete.simpleColor, function(i,v) {
	                    wrap += '<li style="background-color:#'+v+'" color="'+v+'"></li>';
	                });
	                wrap += '</ul><ul class="ui_color_palette">';

	                $.each(this.options.pallete.standardColor, function(i,v) {
	                    wrap += '<li style="background-color:#'+v+'" color="'+v+'"></li>';
	                });
	                wrap += '</ul>'+
	                    '<div class="ui_standard_color_text">'+this.options.label.standard+'</div>'+
	                    '<ul class="ui_standard_color_palette">';
	                $.each(this.options.pallete.normalColor, function(i,v) {
	                    wrap += '<li style="background-color:#'+v+'" color="'+v+'"></li>';
	                });
	                wrap +='</ul>';
	                wrap +='</div>';

	            this.element.append(wrap);
	            this._event();
	        },

	        _init : function(){
	            var _this = this;
	            _this.element.find("a span.selectdColor").css("background-color","#"+_this.options.currentColor);			    // 선택된 색상 설정
	            _this.element.find("li > span.defaultColor").css("background-color","#"+_this.options.pallete.defaultColor);  	// 기본 색상 설정
	        },

	        _event : function(){
	            var _this = this;
	            this._on( _this.element, {
	                "click" : function(e) {
	                    _this._toggle();
	                }
	            });
	            this._setAction();
	        },


	        _destroy: function() {
	            this.element.find(".uiColorPicker").remove();
	        },

	        _setOptions: function( options ) {
	            var that = this;
	            $.each( options, function( key, value ) {
	                that._setOption( key, value );
	            });

	        },
	        _setOption: function( key, value ) {
	            this._super( key, value );
	        },

	        //Text Color Layer 실행
	        _toggle : function(){

	            var $colorPicker = this.element.find("." + Define.WIDGET_CLASS.UI_COLOR_PICKER);

	            if($colorPicker.is(':hidden')){
	                var customBox = Util.findParentNode(this.element[0], "." + Define.WIDGET_CLASS.UI_CUSTOM_BOX);
	                if(customBox){
	                    hideUiActiveWindow(customBox);
	                }else{
	                    hideUiActiveWindow();
	                }

	                var bufferSize = 20;
	                var overLeftSize = this.element[0].offsetLeft + $colorPicker.width() + bufferSize;
	                var windowSize = $(window).width();

	                $colorPicker.css('left', overLeftSize <= windowSize ? '' : -(overLeftSize - windowSize) + 'px');

	                var localToGlobal = function( _el ) {
	                    var target = _el,
	                        target_width = target.offsetWidth,
	                        target_height = target.offsetHeight,
	                        target_left = target.offsetLeft,
	                        target_top = target.offsetTop,
	                        gleft = 0,
	                        gtop = 0,
	                        rect = {};

	                    var moonwalk = function( _parent ) {
	                        if (!!_parent) {
	                            gleft += _parent.offsetLeft;
	                            gtop += _parent.offsetTop;
	                            moonwalk( _parent.offsetParent );
	                        } else {
	                            return rect = {
	                                top: target.offsetTop + gtop,
	                                left: target.offsetLeft + gleft,
	                                bottom: (target.offsetTop + gtop) + target_height,
	                                right: (target.offsetLeft + gleft) + target_width
	                            };
	                        }
	                    };
	                    moonwalk( target.offsetParent );
	                    return rect;
	                };

	                var rect = localToGlobal($colorPicker.parent()[0]);

	                var colorPickerBottom = rect.top + $colorPicker.parent().height() + $colorPicker.height();

	                if (colorPickerBottom > $(window).height()) {
	                    $colorPicker.css('top', (($colorPicker.height()) * -1) + 'px');
	                } else {
	                    $colorPicker.css('top', '');
	                }

	                $colorPicker.show();
	            }else{
	                $colorPicker.hide();
	            }
	        },

	        //리소스 삽입
	        _setAction : function(){
	            var _this = this;
	            this.element.find("ul > li").on("click", function (e) {
	                var color = $(this).attr("color");
	                _this.element.find(".btnCurrent").attr("value", color);
	                _this._trigger("callback", e,{id:_this.options.id,color:color});
	                _this._setValue(color);
	                return false;
	            });
	        },

	        _setValue : function (color){
	            var _this = this;
	            _this.options.currentColor = color;
	            this.element.find(".ui_semple").css("background-color","#"+color);
	            this.element.find("ul > li[selected]").removeAttr("selected");
	            this.element.find("ul > li[color='"+color+"']").attr("selected","selected");

	        },

	        //메뉴 아이템 현재값 가져오기
	        getParentMenuItemValue : function(){
	            return this.element.find("a  span.selectdColor").css("background-color");
	        }
	    });


	    $.widget("ui.kkTablePicker",{
	        options: {
	            id : "table",
	            label : "",
	            currentVal : "",
	            _uiSelectList : null,
	            cmd : 'insert',
	            type : 'table',
	            _subTable : null
	        },

	        _create: function() {
	            var wrap =  '<div class="' + Define.WIDGET_CLASS.UI_TABLE_PICKER + ' modeless"><div class="subTableSize">' +
	                '<label class="subTableWidth">0</label><span class="subTableX">x</span><label class="subTableHeight">0</label>' +
	                '</div>' +
	                '<div class="insertTableForm">' +
	                '<div>' +
	                '<span row="1" col="1"></span>' +
	                '<span row="1" col="2"></span>' +
	                '<span row="1" col="3"></span>' +
	                '<span row="1" col="4"></span>' +
	                '<span row="1" col="5"></span>' +
	                '<span row="1" col="6"></span>' +
	                '<span row="1" col="7"></span>' +
	                '<span row="1" col="8"></span>' +
	                '<span row="1" col="9"></span>' +
	                '<span row="1" col="10"></span>' +
	                '</div>' +
	                '<div>' +
	                '<span row="2" col="1"></span>' +
	                '<span row="2" col="2"></span>' +
	                '<span row="2" col="3"></span>' +
	                '<span row="2" col="4"></span>' +
	                '<span row="2" col="5"></span>' +
	                '<span row="2" col="6"></span>' +
	                '<span row="2" col="7"></span>' +
	                '<span row="2" col="8"></span>' +
	                '<span row="2" col="9"></span>' +
	                '<span row="2" col="10"></span>' +
	                '</div>' +
	                '<div>' +
	                '<span row="3" col="1"></span>' +
	                '<span row="3" col="2"></span>' +
	                '<span row="3" col="3"></span>' +
	                '<span row="3" col="4"></span>' +
	                '<span row="3" col="5"></span>' +
	                '<span row="3" col="6"></span>' +
	                '<span row="3" col="7"></span>' +
	                '<span row="3" col="8"></span>' +
	                '<span row="3" col="9"></span>' +
	                '<span row="3" col="10"></span>' +
	                '</div>' +
	                '<div>' +
	                '<span row="4" col="1"></span>' +
	                '<span row="4" col="2"></span>' +
	                '<span row="4" col="3"></span>' +
	                '<span row="4" col="4"></span>' +
	                '<span row="4" col="5"></span>' +
	                '<span row="4" col="6"></span>' +
	                '<span row="4" col="7"></span>' +
	                '<span row="4" col="8"></span>' +
	                '<span row="4" col="9"></span>' +
	                '<span row="4" col="10"></span>' +
	                '</div>' +
	                '<div>' +
	                '<span row="5" col="1"></span>' +
	                '<span row="5" col="2"></span>' +
	                '<span row="5" col="3"></span>' +
	                '<span row="5" col="4"></span>' +
	                '<span row="5" col="5"></span>' +
	                '<span row="5" col="6"></span>' +
	                '<span row="5" col="7"></span>' +
	                '<span row="5" col="8"></span>' +
	                '<span row="5" col="9"></span>' +
	                '<span row="5" col="10"></span>' +
	                '</div>' +
	                '<div>' +
	                '<span row="6" col="1"></span>' +
	                '<span row="6" col="2"></span>' +
	                '<span row="6" col="3"></span>' +
	                '<span row="6" col="4"></span>' +
	                '<span row="6" col="5"></span>' +
	                '<span row="6" col="6"></span>' +
	                '<span row="6" col="7"></span>' +
	                '<span row="6" col="8"></span>' +
	                '<span row="6" col="9"></span>' +
	                '<span row="6" col="10"></span>' +
	                '</div>' +
	                '<div>' +
	                '<span row="7" col="1"></span>' +
	                '<span row="7" col="2"></span>' +
	                '<span row="7" col="3"></span>' +
	                '<span row="7" col="4"></span>' +
	                '<span row="7" col="5"></span>' +
	                '<span row="7" col="6"></span>' +
	                '<span row="7" col="7"></span>' +
	                '<span row="7" col="8"></span>' +
	                '<span row="7" col="9"></span>' +
	                '<span row="7" col="10"></span>' +
	                '</div>' +
	                '<div>' +
	                '<span row="8" col="1"></span>' +
	                '<span row="8" col="2"></span>' +
	                '<span row="8" col="3"></span>' +
	                '<span row="8" col="4"></span>' +
	                '<span row="8" col="5"></span>' +
	                '<span row="8" col="6"></span>' +
	                '<span row="8" col="7"></span>' +
	                '<span row="8" col="8"></span>' +
	                '<span row="8" col="9"></span>' +
	                '<span row="8" col="10"></span>' +
	                '</div>' +
	                '<div>' +
	                '<span row="9" col="1"></span>' +
	                '<span row="9" col="2"></span>' +
	                '<span row="9" col="3"></span>' +
	                '<span row="9" col="4"></span>' +
	                '<span row="9" col="5"></span>' +
	                '<span row="9" col="6"></span>' +
	                '<span row="9" col="7"></span>' +
	                '<span row="9" col="8"></span>' +
	                '<span row="9" col="9"></span>' +
	                '<span row="9" col="10"></span>' +
	                '</div>' +
	                '<div>' +
	                '<span row="10" col="1"></span>' +
	                '<span row="10" col="2"></span>' +
	                '<span row="10" col="3"></span>' +
	                '<span row="10" col="4"></span>' +
	                '<span row="10" col="5"></span>' +
	                '<span row="10" col="6"></span>' +
	                '<span row="10" col="7"></span>' +
	                '<span row="10" col="8"></span>' +
	                '<span row="10" col="9"></span>' +
	                '<span row="10" col="10"></span>' +
	                '</div>' +
	                '</div>' +
	                '</div>';

	            this.element.append($('<div class="arrow_wrap"><span class="arrow"></span></div>')[0]);
	            this.element.append(wrap);
	            this._event();
	        },

	        _toggle : function(){
	            if(!this.element.hasClass("disabled")){
	                if(this.element.find("." + Define.WIDGET_CLASS.UI_TABLE_PICKER).is(':hidden')){
	                    var customBox = Util.findParentNode(this.element[0], "." + Define.WIDGET_CLASS.UI_CUSTOM_BOX);
	                    if(customBox){
	                        hideUiActiveWindow(customBox);
	                    }else{
	                        hideUiActiveWindow();
	                    }

	                    this._trigger("disableContent");

	                    this.element.find("." + Define.WIDGET_CLASS.UI_TABLE_PICKER).show();
	                }else{
	                    this._trigger("enableContent");
	                    this.element.find("." + Define.WIDGET_CLASS.UI_TABLE_PICKER).hide();
	                }
	            }
	        },

	        _event : function(){
	            var _this = this;
	            // this._on( _this.element, {
	            //     "click" : function(e) {
	            //         _this._toggle();
	            //     }
	            // });

	            this._on( _this.element.find(".i_table"), {
	                "click" : function(e) {
	                    hideUiActiveWindow();
	                    _this._trigger("callback", e, {"id": "tableInsertDialog"});
	                }
	            });

	            this._on( _this.element.find(".arrow_wrap"), {
	                "click" : function(e) {
	                    _this._toggle();
	                }
	            });

	            this._on( _this.element.find("." + Define.WIDGET_CLASS.UI_TABLE_PICKER ), {
	                "click" : function(e) {
	                    return false;
	                }
	            });

	            this._on( _this.element.find("." + Define.WIDGET_CLASS.UI_TABLE_PICKER + " .insertTableForm"), {
	                "mouseleave": function(e){
	                    _this.fillRowCol(0, 0);
	                }
	            });

	            this._on( _this.element.find("." + Define.WIDGET_CLASS.UI_TABLE_PICKER + " .insertTableForm span"), {
	                "mouseover" : function(e) {
	                    var row = $(e.target).attr('row');
	                    var col = $(e.target).attr('col');
	                    _this.fillRowCol(row, col);
	                },
	                "click" : function(e) {
	                    _this.setValue(e);
	                    return false;
	                }
	            });
	        },

	        updateTableSize : function(row, col){
	            this.element.find(".subTableHeight").html(row);
	            this.element.find(".subTableWidth").html(col);
	        },

	        fillRowCol : function(row, col){
	            var _this = this;
	            var cells = _this.element.find(".insertTableForm span");
	            cells.each(function(idx){
	                var _row = Number($(this).attr('row'));
	                var _col = Number($(this).attr('col'));
	                if( _row <= row && _col <= col){
	                    $(this).addClass("selected_form");
	                }else{
	                    $(this).removeClass("selected_form");
	                }
	            });
	            _this.updateTableSize(row, col);
	        },

	        setValue : function (e){
	            var _this = this;
	            var row = $(e.target).attr('row');
	            var col = $(e.target).attr('col');
	            this._trigger("callback", e, {"id":_this.options.id, "row":row, "col":col});
	        },

	        _setOptions: function( options ) {
	            var that = this;
	            $.each( options, function( key, value ) {
	                that._setOption( key, value );
	            });

	        },
	        _setOption: function( key, value ) {
	            this._super( key, value );
	        }
	    });


	    $.widget("ui.kkListPicker",{
	        options: {
	            id : "list",
	            label : "",
	            currentVal : "",
	            _uiSelectList : null,
	            cmd : 'insert',
	            type : 'list',
	            _subTable : null
	        },

	        _create: function() {

	            var isNumberedList = false;

	            if (this.element.attr('u-id') == 'numbered_list') {
	                isNumberedList = true;
	            }

	            var listStyleItems = isNumberedList ? Define.NUMBERED_LIST : Define.BULLET_LIST;

	            var listType = isNumberedList ? 'numbered' : 'bullet';
	            var listStyleHTML = '';

	            for (var i = 0; i < listStyleItems.length ; i++) {
	                var item = listStyleItems[i];

	                listStyleHTML += '<div class="list_type_item" list-type="' + listType + '" list-id="' + item.id + '"><div class="list_title ' + (item.className || '') + '">' + item.title + '</div><div class="list_name">' + item.name + '</div></div>'
	            }

	            var wrap =  '' +
	                '<div class="' + Define.WIDGET_CLASS.UI_LIST_PICKER + ' modeless">' +
	                    '<div class="listForm">' +
	                        listStyleHTML +
	                    '</div>' +
	                '</div>';

	            this.element.append($('<div class="arrow_wrap"><span class="arrow"></span></div>')[0]);
	            this.element.append(wrap);
	            this._event();
	        },

	        _toggle : function(){
	            if(!this.element.hasClass("disabled")){
	                if(this.element.find("." + Define.WIDGET_CLASS.UI_LIST_PICKER).is(':hidden')){
	                    hideUiActiveWindow();

	                    this._trigger("disableContent");
	                    this.element.find("." + Define.WIDGET_CLASS.UI_LIST_PICKER).show();
	                }else{
	                    this._trigger("enableContent");
	                    this.element.find("." + Define.WIDGET_CLASS.UI_LIST_PICKER).hide();
	                }
	            }
	        },

	        _event : function(){
	            var _this = this;

	            this._on( _this.element.find(".i_numbered_list"), {
	                "click" : function(e) {
	                    hideUiActiveWindow();
	                    _this._trigger("callback", e, { "id" : "numbered_list" });
	                }
	            });

	            this._on( _this.element.find(".i_bullet_list"), {
	                "click" : function(e) {
	                    hideUiActiveWindow();
	                    _this._trigger("callback", e, { "id" : "bullet_list" });
	                }
	            });

	            this._on( _this.element.find(".arrow_wrap"), {
	                "click" : function(e) {
	                    _this._toggle();
	                }
	            });

	            this._on( _this.element.find(".list_type_item"), {
	                "click" : function(e) {
	                    var currentTarget = e.currentTarget;

	                    var listId = currentTarget.getAttribute('list-id');

	                    _this._toggle();
	                    _this._trigger("callback", e, { "id" : listId });
	                }
	            });

	            this._on( _this.element.find("." + Define.WIDGET_CLASS.UI_LIST_PICKER ), {
	                "click" : function(e) {
	                    return false;
	                }
	            });
	        },

	        setValue : function (e){
	            var _this = this;
	            this._trigger("callback", e, {"id":_this.options.id, "row":row, "col":col});
	        },

	        _setOptions: function( options ) {
	            var that = this;
	            $.each( options, function( key, value ) {
	                that._setOption( key, value );
	            });

	        },
	        _setOption: function( key, value ) {
	            this._super( key, value );
	        }
	    });


	    $.widget("ui.kkCustomBox",{
	        options: {
	            label : "",
	            currentVal : "",
	            _uiSelectList : null,
	            cmd : 'update',
	            type : 'table_border_box',
	            _subTable : null,
	            currentColor : "",
	            currentSize : "",
	            currentStyle : "",
	            cellBorderStyle : null,
	            cellBorderType : null
	        },

	        _create: function() {
	            this.options.id = this.element.attr("u-id");
	            if(this.options.type=="table_border_box"){
	                var _this = this;
	                var wrap =  '' +
	                '<div class="' + Define.WIDGET_CLASS.UI_CUSTOM_BOX + '">' +
	                    '<div class="border_color">' +
	                        '<a u-id="table_border_color" class="menu_colorpicker">선색</a>' +
	                    '</div>' +
	                   '<div class="border_style">' +
	                        '<div u-id="cell_border_size" class="menu_selectbox" val="1.25pt" style="margin-bottom: 2px;"></div>' +
	                        '<div u-id="cell_border_style" class="menu_selectbox" val="solid" ></div>' +
	                    '</div>' +
	                    '<div class="border_type">' +
	                        //'<a u-id="tb_all" class="menu_button"><i class="i_icon i_tb_all"></i></a>' +
	                        //'<a u-id="tb_in" class="menu_button"><i class="i_icon i_tb_in"></i></a>' +
	                        '<a u-id="tb_out" class="menu_button"><i class="i_icon i_tb_out"></i></a>' +
	                        '<a u-id="tb_none" class="menu_button"><i class="i_icon i_tb_none"></i></a>' +
	                        '<a u-id="tb_top" class="menu_button"><i class="i_icon i_tb_top"></i></a>' +
	                        '<a u-id="tb_left" class="menu_button"><i class="i_icon i_tb_left"></i></a>' +
	                        '<a u-id="tb_right" class="menu_button"><i class="i_icon i_tb_right"></i></a>' +
	                        '<a u-id="tb_bottom" class="menu_button"><i class="i_icon i_tb_bottom"></i></a>' +
	                    '</div>' +
	                '</div>';

	                var $node = $(wrap);
	                $node.find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_COLORPICKER).kkColorPicker({
	                    callback : function(e, data){
	                        _this.options.currentColor = data.color;
	                        $node.find(".menu_colorpicker").css("color", "#"+data.color);
	                        $node.find("." + Define.WIDGET_CLASS.UI_COLOR_PICKER).hide();
	                    }
	                });

	                $node.find("." + Define.CLASS.EDITOR_TOOLBAR_MENU_SELECTBOX).kkSelectBox();

	                $node.find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_BUTTON).kkButton({
	                    callback : function(e, data){
	                        _this.setValue(e, data.id);
	                    }
	                });

	                this.options.cellBorderStyle = $node.find('[u-id="cell_border_style"]');
	                this.options.cellBorderSize = $node.find('[u-id="cell_border_size"]');

	                this.element.append($('<span class="arrow"></span>')[0]);
	                this.element.append($node[0]);
	            }

	            this._event();
	        },

	        _toggle : function(){
	            if(!this.element.hasClass("disabled")){

	                var $customBox = this.element.find("." + Define.WIDGET_CLASS.UI_CUSTOM_BOX);

	                if($customBox.is(':hidden')){
	                    hideUiActiveWindow();

	                    var bufferSize = 20;
	                    var overLeftSize = this.element[0].offsetLeft + $customBox.width() + bufferSize;
	                    var windowSize = $(window).width();

	                    $customBox.css('left', overLeftSize <= windowSize ? '' : -(overLeftSize - windowSize) + 'px');

	                    $customBox.show();
	                }else{
	                    $customBox.hide();
	                }
	            }
	        },

	        _event : function(){
	            var _this = this;
	            this._on( _this.element, {
	                "click" : function(e) {
	                    var target = e.target;
	                    if(!Util.findParentNode(target , "." + Define.WIDGET_CLASS.UI_CUSTOM_BOX)){
	                        _this._toggle();
	                    }

	                }
	            });
	        },

	        setValue : function (e, id){
	            var _this = this;

	            var style = this.options.cellBorderStyle.find("li[selected]").attr("data-value");
	            var size = this.options.cellBorderSize.find("li[selected]").attr("data-value");
	            var color = _this.options.currentColor || "000000";

	            this._trigger("callback", e, {"id":_this.options.id, "type":id, "size":size, "style" : style, "color" : color});
	        },

	        _setOptions: function( options ) {
	            var that = this;
	            $.each( options, function( key, value ) {
	                that._setOption( key, value );
	            });

	        },
	        _setOption: function( key, value ) {
	            this._super( key, value );
	        }
	    });

	    $.widget("ui.kkFindReplaceBox",{
	        options: {
	            id : null
	        },

	        _create: function() {
	            this.options.id = this.element.attr("u-id");
	            var _this = this;
	            var wrap =  '' +
	                '<div class="' + Define.WIDGET_CLASS.UI_FIND_REPLACE + '">' +
	                    '<div class="' + Define.CLASS.FIND_REPLACE_CONTENTS + '">' +
	                        '<ul>' +
	                            '<li class="' + Define.CLASS.FIND_REPLACE_ITEMS + '">' +
	                                '<a class="' + Define.CLASS.FIND_REPLACE_ITEM + ' find active"><span>' + Resource.findReplace.title + '</span></a>' +
	                                '<div>' +
	                                    '<table class="' + Define.CLASS.FIND_REPLACE_AREA + '">' +
	                                        '<tbody>' +
	                                            '<tr>' +
	                                                '<td class="' + Define.CLASS.FIND_LABEL_AREA + '">' +
	                                                    '<label class="' + Define.CLASS.FIND_INPUT_LABEL_CLASS + '" for="' + Define.CLASS.FIND_INPUT_CLASS + '">' + Resource.findReplace.find + ' : </label>' +
	                                                '</td>' +
	                                                '<td class="' + Define.CLASS.FIND_INPUT_AREA + '">' +
	                                                    '<input type="text" class="' + Define.CLASS.FIND_INPUT_CLASS + '" id="'  + Define.ID.FIND_INPUT_ID + '" value=""/>' +
	                                                '</td>' +
	                                                '<td class="' + Define.CLASS.FIND_BUTTON_AREA + '">' +
	                                                    '<button class="' + Define.CLASS.FIND_BUTTON_CLASS + '" id="' + Define.ID.FIND_BUTTON_ID + '">' + Resource.findReplace.find + '</button>' +
	                                                '</td>' +
	                                            '</tr>' +
	                                            '<tr>' +
	                                                '<td class="' + Define.CLASS.FIND_LABEL_AREA + '">' +
	                                                    '<label class="' + Define.CLASS.REPLACE_INPUT_LABEL_CLASS + '" for="' + Define.CLASS.REPLACE_INPUT_CLASS + '">' + Resource.findReplace.replace + ' : </label>' +
	                                                '</td>' +
	                                                '<td class="' + Define.CLASS.FIND_INPUT_AREA + '">' +
	                                                    '<input type="text" class="' + Define.CLASS.REPLACE_INPUT_CLASS + '" id="' + Define.ID.REPLACE_INPUT_ID + '" value=""/>' +
	                                                '</td>' +
	                                                '<td class="' + Define.CLASS.FIND_BUTTON_AREA + '">' +
	                                                    '<button class="' + Define.CLASS.REPLACE_BUTTON_CLASS + '" id="' + Define.ID.REPLACE_BUTTON_ID + '">' + Resource.findReplace.replace + '</button>' +
	                                                '</td>' +
	                                            '</tr>' +

	                                            '<tr>' +
	                                                '<td class="' + Define.CLASS.FIND_OPTION_LABEL_AREA  + '" colspan="2">' +
	                                                    '<label class="' + Define.CLASS.FIND_REPLACE_TEXT_CASE_WRAP + '"><input id="' + Define.ID.FIND_REPLACE_TEXT_CASE_CHECK + '" class="' + Define.CLASS.FIND_REPLACE_TEXT_CASE_CHECK + '" type="checkbox"><span class="' + Define.CLASS.FIND_TEXT_CASE + '">' + Resource.findReplace.textCase + '</span></label>' +
	                                                '</td>' +
	                                                '<td class="' + Define.CLASS.FIND_BUTTON_AREA + '">' +
	                                                    '<button class="' + Define.CLASS.FIND_REPLACE_ALL_BUTTON + '" id="replaceAll">' + Resource.findReplace.replaceAll + '</button>' +
	                                                '</td>' +
	                                            '</tr>' +
	                                            '<tr>' +
	                                                '<td class="' + Define.CLASS.FIND_OPTION_LABEL_AREA  + '" colspan="2">' +
	                                                    '<label class="' + Define.CLASS.FIND_REPLACE_RESTART_WRAP + '"><input id="' + Define.ID.FIND_REPLACE_RESTART_CHECK + '" class="' + Define.CLASS.FIND_REPLACE_RESTART_CHECK + '" type="checkbox" checked><span class="' + Define.CLASS.FIND_RESTART + '">' + Resource.findReplace.findRestart + '</span></label>' +
	                                                '</td>' +
	                                                '<td class=""></td>' +
	                                            '</tr>' +
	                                            '<tr>' +
	                                                '<td class="' + Define.CLASS.FIND_OPTION_LABEL_AREA  + '" colspan="2">' +
	                                                    '<label class="' + Define.CLASS.FIND_REPLACE_WORD_WRAP + '"><input id="' + Define.ID.FIND_REPLACE_WORD_CHECK + '" class="' + Define.CLASS.FIND_REPLACE_WORD_CHECK + '" type="checkbox"><span class="' + Define.CLASS.FIND_WORD + '">' + Resource.findReplace.findWord + '</span></label>' +
	                                                '</td>' +
	                                                '<td class=""></td>' +
	                                            '</tr>' +
	                                            '<tr>' +
	                                                '<td class="' + Define.CLASS.FIND_LABEL_AREA + '">' +
	                                                    '<label class="">' + Resource.findReplace.findDirectionLabel + ' : </label>' +
	                                                '</td>' +
	                                                '<td class="' + Define.CLASS.FIND_DIRECTION_LABEL_AREA  + '">' +
	                                                    '<label class="' + Define.CLASS.FIND_REPLACE_DIRECTION_WRAP + '"><input id="' + Define.ID.FIND_REPLACE_DIRECTION_UP_RADIO + '" class="' + Define.CLASS.FIND_REPLACE_DIRECTION_UP_RADIO + '" type="radio" name="' + Define.ATTR_VALUE.KK_FIND_DIRECTION + '" value="up"><span class="' + Define.CLASS.FIND_DIRECTION_UP + '">' + Resource.findReplace.findDirectionUp + '</span></label>' +
	                                                    '<label class="' + Define.CLASS.FIND_REPLACE_DIRECTION_WRAP + '"><input id="' + Define.ID.FIND_REPLACE_DIRECTION_DOWN_RADIO + '" class="' + Define.CLASS.FIND_REPLACE_DIRECTION_DOWN_RADIO + '" type="radio" name="' + Define.ATTR_VALUE.KK_FIND_DIRECTION + '" value="down" checked><span class="' + Define.CLASS.FIND_DIRECTION_DOWN + '">' + Resource.findReplace.findDirectionDown + '</span></label>' +
	                                                '</td>' +
	                                                '<td class=""></td>' +
	                                            '</tr>' +
	                                        '</tbody>' +
	                                    '</table>' +
	                                '</div>' +
	                                '<div class="closeWrap">' +
	                                    '<button class="' + Define.CLASS.FIND_REPLACE_CLOSE_BUTTON + '">' + Resource.findReplace.close + '</button>' +
	                                '</div>' +
	                            '</li>' +
	                        '</ul>' +
	                    '</div>' +
	                '</div>';

	            var $node = $(wrap);

	            this.element.append($('<span class="arrow"></span>')[0]);
	            this.element.append($node[0]);

	            this._event();
	        },

	        _toggle : function(){
	            var _this = this;
	            if(!this.element.hasClass("disabled")){

	                var $replaceBox = this.element.find("." + Define.WIDGET_CLASS.UI_FIND_REPLACE);

	                if ($replaceBox.is(':hidden')) {
	                    hideUiActiveWindow();

	                    var bufferSize = 20;
	                    var overLeftSize = this.element[0].offsetLeft + $replaceBox.width() + bufferSize;
	                    var windowSize = $(window).width();

	                    $replaceBox.css('left', overLeftSize <= windowSize ? '' : -(overLeftSize - windowSize) + 'px');

	                    $replaceBox.find('.' + Define.CLASS.FIND_INPUT_CLASS).val('');
	                    $replaceBox.find('.' + Define.CLASS.REPLACE_INPUT_CLASS).val('');

	                    var $caseCheck = _this.element.find("." + Define.CLASS.FIND_REPLACE_TEXT_CASE_CHECK);
	                    var $restartCheck = _this.element.find("." + Define.CLASS.FIND_REPLACE_RESTART_CHECK);
	                    var $wordCheck = _this.element.find("." + Define.CLASS.FIND_REPLACE_WORD_CHECK);
	                    var $directionUp = _this.element.find("." + Define.CLASS.FIND_REPLACE_DIRECTION_UP_RADIO);
	                    var $directionDown = _this.element.find("." + Define.CLASS.FIND_REPLACE_DIRECTION_DOWN_RADIO);

	                    $caseCheck[0].checked = false;
	                    $restartCheck[0].checked = true;
	                    $wordCheck[0].checked = false;

	                    $directionUp[0].checked = false;
	                    $directionDown[0].checked = true;

	                    this._trigger("getOp");

	                    $replaceBox.show();

	                } else {
	                    $replaceBox.hide();
	                }
	            }
	        },

	        _event : function(){
	            var _this = this;

	            var $findInputText = _this.element.find("." + Define.CLASS.FIND_INPUT_CLASS);
	            var $replaceInputText = _this.element.find("." + Define.CLASS.REPLACE_INPUT_CLASS);
	            var $caseCheck = _this.element.find("." + Define.CLASS.FIND_REPLACE_TEXT_CASE_CHECK);
	            var $restartCheck = _this.element.find("." + Define.CLASS.FIND_REPLACE_RESTART_CHECK);
	            var $wordCheck = _this.element.find("." + Define.CLASS.FIND_REPLACE_WORD_CHECK);
	            var $directionDown = _this.element.find("." + Define.CLASS.FIND_REPLACE_DIRECTION_DOWN_RADIO);

	            var execute = function(e, type) {
	                if ($findInputText.val() === "") {
	                    alert("검색할 단어를 입력하세요.");
	                    return;
	                }

	                _this._trigger("setOp");
	                _this._trigger("callback", e, {
	                    "id" : _this.options.id,
	                    "type" : type,
	                    value : {
	                        findText : $findInputText.val(),
	                        replaceText : $replaceInputText.val(),
	                        isCase : $caseCheck[0].checked,
	                        isRestart : $restartCheck[0].checked,
	                        isWord : $wordCheck[0].checked,
	                        directionDown : $directionDown[0].checked
	                    }
	                });
	            };

	            this._on( _this.element, {
	                "click" : function(e) {
	                    var target = e.target;
	                    if(!Util.findParentNode(target , "." + Define.WIDGET_CLASS.UI_FIND_REPLACE)){
	                        _this._toggle();
	                    }
	                }
	            });

	            $findInputText.on("mousedown", function(e){
	                _this._trigger("getOp");
	            });

	            $replaceInputText.on("mousedown", function(e){
	                _this._trigger("getOp");
	            });

	            _this.element.find(".closeButton").on("click", function(){
	                _this._toggle();
	            });

	            _this.element.find(".findButton, .replaceButton, .replaceAllButton").on("click", function(e){
	                execute(e, this.id);
	            });
	        },

	        setValue : function (e, id){
	            var _this = this;
	            this._trigger("callback", e, {"id" : _this.options.id, "type" : id });
	        },

	        _setOptions: function( options ) {
	            var that = this;
	            $.each( options, function( key, value ) {
	                that._setOption( key, value );
	            });

	        },
	        _setOption: function( key, value ) {
	            this._super( key, value );
	        }
	    });
	};

	module.exports = UI;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	
	var Define = __webpack_require__(3);


	function Toolbar(editorElement){
	    this.editorElement = null;
	    this.toolbarElement = null;
	    this.router = null;
	    this.menuController = null;
	    this.$dom = null;

	    this.editorElement = $(editorElement);
	    this.contentArea = this.editorElement.find('.' + Define.CLASS.CONTENTS);
	    this.toolbarElement = this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR);
	}

	Toolbar.prototype.init = function (menuController, $domObject){
	    this.menuController = menuController;
	    this.router = this.menuController.getRouter();
	    this.$dom = $domObject;

	    this.settingToolbar();
	};

	Toolbar.prototype.settingToolbar = function() {
	    var _this = this;

	    this.toolbarElement.find("."+Define.CLASS.EDITOR_TOOLBAR_MENU).each(function(){
	        var menu = this;
	        $(menu).find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_BUTTON).kkButton({
	            callback: function(e,data){
	                var isActive = $(e.target).hasClass("active") ? true : false;
	                _this.menuController.menuSwitch(data, {isActive : isActive, node : e.target});
	            }
	        });

	        $(menu).find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_SELECTBOX).kkSelectBox({
	            callback: function(e,data){
	                _this.menuController.menuSwitch(data);
	            }
	        });
	        $(menu).find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_COMBOBOX).kkSelectBox({
	            callback: function(e,data){
	                _this.menuController.menuSwitch(data);
	            }
	        });

	        $(menu).find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_COLORPICKER).kkColorPicker({
	            callback: function(e,data){
	                _this.menuController.menuSwitch(data);
	            }
	        });


	        $(menu).find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_LISTPICKER).kkListPicker({
	            enableContent : function (e,data) {
	                if ($.browser.msie) {
	                    _this.contentArea.attr(Define.ATTR.CONTENT_EDIT_ABLE, 'true');
	                }
	            },
	            disableContent : function (e,data) {
	                if ($.browser.msie) {
	                    _this.contentArea.attr(Define.ATTR.CONTENT_EDIT_ABLE, 'false');
	                }
	            },
	            callback: function(e,data){
	                var numberedList = ['numbered_decimal', 'numbered_alpha', 'numbered_upper_alpha', 'numbered_roman', 'numbered_upper_roman', 'numbered_lower_greek'];
	                var bulletList = ['bullet_disc', 'bullet_circle', 'bullet_square'];

	                if (numberedList.indexOf(data.id) > -1){
	                    data = {id : "numbered_list", value : {specificType : data.id}};
	                }else if (bulletList.indexOf(data.id) > -1){
	                    data = {id : "bullet_list", value : {specificType : data.id}};
	                }

	                _this.menuController.menuSwitch(data);
	            }
	        });


	        $(menu).find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_TABLEPICKER).kkTablePicker({
	            enableContent : function (e,data) {
	                if ($.browser.msie) {
	                    _this.contentArea.attr(Define.ATTR.CONTENT_EDIT_ABLE, 'true');
	                }
	            },
	            disableContent : function (e,data) {
	                if ($.browser.msie) {
	                    _this.contentArea.attr(Define.ATTR.CONTENT_EDIT_ABLE, 'false');
	                }
	            },
	            callback: function(e,data){
	                if (data.id === 'table') {
	                    data = {id : "table", value : {row : data.row , col : data.col}};
	                }

	                _this.menuController.menuSwitch(data);
	            }
	        });

	        $(menu).find("."+Define.CLASS.EDITOR_TOOLBAR_MENU_CUSTOMBOX).kkCustomBox({
	            callback: function(e,data){
	                _this.menuController.menuSwitch(data);
	            }
	        });

	        var backupFindReplaceOp = null;
	        $(menu).find("." + Define.CLASS.EDITOR_TOOLBAR_MENU_FINDREPLACEBOX).kkFindReplaceBox({
	            setOp : function() {
	                if (backupFindReplaceOp) {
	                    _this.$dom.selection.set(backupFindReplaceOp);
	                    _this.$dom.selection.setOp(backupFindReplaceOp);
	                    backupFindReplaceOp = null;
	                }
	            },
	            getOp : function() {
	                backupFindReplaceOp = _this.$dom.selection.get();

	                //console.log(backupFindReplaceOp);
	            },
	            callback: function(e,data){
	                _this.menuController.menuSwitch(data);
	            }
	        });
	    });
	};

	Toolbar.prototype.getToolbarElement = function () {
	    return this.toolbarElement;
	};

	Toolbar.prototype.setRouter = function (router) {
	    this.router = router;
	};

	Toolbar.prototype.getRouter = function () {
	    return this.router;
	};

	Toolbar.prototype.setMenuController = function (menuController) {
	    this.menuController = menuController;
	};

	Toolbar.prototype.getMenuController = function () {
	    return this.menuController;
	};

	module.exports = Toolbar;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);

	var _menuObject = {
	    // [파일]
	    'menuFile': {
	        name: '파일',
	        child: [
	            {name: '새 문서', id: 'new', thumb:'-300px -150px'},
	            {name: '파일 열기', id: 'file_open', thumb:'-30px -180px'},
	            {division:true},
	            {name: '저장', id: 'save', thumb:'-30px 0px'},
	            {name: '인쇄', id: 'print', thumb:'-60px 0px'},
	            {name: '자동 저장 불러오기', id: 'auto_save_load', thumb:'-360px -181px'},
	            {division:true},
	            {name: '템플릿', id: 'template', thumb:'-90px -211px'},
	            {name: '레이아웃', id: 'layout', thumb:'-30px -211px'},
	            {division:true},
	            {name: '페이지분할', id: 'page_break', thumb:'-60px -180px'}
	        ]
	    },

	    // [편집]
	    'menuEdit': {
	        name: '편집',
	        child: [
	            {name: '되돌리기', id: 'undo', thumb:'-90px 0px'},
	            {name: '다시실행', id: 'redo', thumb:'-120px 0px'},
	            {division:true},
	            {name: '복사', id: 'copy', thumb:'-150px 0px'},
	            {name: '잘라내기', id: 'cut', thumb:'-180px 0px'},
	            {name: '붙여넣기', id: 'paste', thumb:'-210px 0px'},
	            {name: '텍스트로 붙여넣기', id: 'text_paste', thumb:'-0px -180px'},
	            {division:true},
	            {name: '전체선택', id: 'all_select', thumb:'-330px -150px'},
	            {name: '찾기/바꾸기', id: 'find_replace', thumb:'-60px -60px'}
	        ]
	    },

	    // [보기]
	    'menuView': {
	        name: '보기',
	        child: [
	            {name: '전체화면', id: 'fullscreen', thumb:'-360px -150px'},
	            {name: 'HTML', id: 'html'},
	            {name: '미리보기', id: 'preview'},
	            {name: 'TEXT', id: 'text'}
	        ]
	    },

	    // [삽입]
	    'menuInsert': {
	        name: '삽입',
	        child: [
	            {name: '문서 배경 이미지', id: 'background_image', thumb:'-389px -180px'},
	            {division:true},
	            {name: '레이어 삽입', id: 'layer', thumb:'-60px -211px'},
	            {name: '파일 삽입', id: 'file', thumb:'-272px -123px'},
	            {name: '책갈피 삽입', id: 'bookmark', thumb:'-390px -150px'},
	            {name: '날짜/시간 삽입', id: 'date_format', thumb:'-210px -150px'},
	            {division:true},
	            {name: '하이퍼 링크', id: 'link', thumb:'-330px -30px'},
	            {name: '수평선', id: 'horizontal', thumb:'-60px -150px'},
	            {name: '특수문자', id: 'symbol', thumb:'-30px -60px'},
	            {name: '이모티콘', id: 'emoticon', thumb:'-300px -121px'}
	        ]
	    },

	    // [서식]
	    'menuStyle': {
	        name: '서식',
	        child: [
	            {name: '굵게', id: 'bold', thumb:'-270px 0px'},
	            {name: '이탤릭', id: 'italic', thumb:'-300px 0px'},
	            {name: '밑줄', id: 'underline', thumb:'-330px 0px'},
	            {name: '취소선', id: 'strike_through', thumb:'-360px 0px'},
	            {name: '위 첨자', id: 'super', thumb:'-0px -151px'},
	            {name: '아래 첨자', id: 'sub', thumb:'-30px -149px'},
	            {name: '글자 서식 제거', id: 'remove_format', thumb:'-390px 0px'},
	            {division:true},
	            {name: '글머리 번호', id: 'numbered_list', thumb:'-60px -30px', child: Define.NUMBERED_LIST},
	            {name: '글머리 기호', id: 'bullet_list', thumb:'-90px -30px', child: Define.BULLET_LIST},
	            {division:true},
	            {name: '들여 쓰기', id: 'indent', thumb:'-150px -30px'},
	            {name: '내어 쓰기', id: 'outdent', thumb:'-120px -30px'},
	            // {name: '수평 정렬', id: 'line_height', thumb:'-180px -30px', child:
	            //     [
	            //         {name: '1.0', id: 'line_height1'},
	            //         {name: '1.2', id: 'line_height2'},
	            //         {name: '1.5', id: 'line_height3'},
	            //         {name: '2.0', id: 'line_height4'},
	            //         {name: '3.0', id: 'line_height5'}
	            //     ]
	            // }
	        ]
	    },

	    // [표]
	    'menuTable': {
	        name: '표',
	        child: [
	            {name: '표 생성', id: 'tableInsertDialog', thumb:'0px -61px'},
	            {name: '가로줄 삽입', id: 'table_insert_row', child:[
	                {name: '상단 행 삽입', id: 'table_insert_top', thumb:'-120px -119px'},
	                {name: '하단 행 삽입', id: 'table_insert_bottom', thumb:'-180px -60px'}
	            ]},

	            {name: '세로줄 삽입', id: 'table_insert_col', child:[
	                {name: '왼쪽 열 삽입', id: 'table_insert_left', thumb:'-210px -60px'},
	                {name: '오른쪽 열 삽입', id: 'table_insert_right', thumb:'-240px -60px'}
	            ]},

	            {division:true},
	            {name: '열 삭제', id: 'table_remove_col', thumb:'-300px -60px'},
	            {name: '행 삭제', id: 'table_remove_row', thumb:'-270px -60px'},
	            {name: '테이블 삭제', id: 'table_remove_table', thumb:'-330px -60px'},
	            {division:true},
	            {name: '병합', id: 'table_merge', thumb:'-180px -90px'},
	            {name: '열 분할', id: 'table_split_col', thumb:'-210px -90px'},
	            {name: '행 분할', id: 'table_split_row', thumb:'-240px -90px'},
	            {division:true},
	            {name: '표 속성', id: 'tableModifyDialog', thumb : '0px -61px'},
	            {name: '셀 속성', id: 'cellModifyDialog', thumb : '-90px -180px'}
	        ]
	    },

	    // [도구]
	    'menuTool': {
	        name: '도구',
	        child: [
	            {name: '대/소문자 바꾸기', id: 'upper_lower', thumb:'-331px -121px'},
	            {name: '환경설정', id: 'setting', thumb:'-269px -181px'}
	        ]
	    },

	    // [도움말]
	    'menuHelp': {
	        name: '도움말',
	        child:
	            [
	                {name: '사용자 도움말', id: 'help', thumb:'-90px -150px'},
	                {name: '쿠쿠닥스 정보', id: 'about', thumb:'-120px -150px'}
	            ]
	    }
	};

	var innerDefine = {
	    editorMenuBar : 'kk_editor_menubar',
	    menuTabWrapper : 'menu-tab-wrapper',
	    menuTabItem : 'menu-tab-item',

	    menuTabOn : 'menu-tab-on',
	    menuItemWrapper : 'menu-item-wrapper',
	    menuItem : 'menu-item',
	    menuItemSubWrapper : 'menu-item-sub-wrapper',
	    menuItemSub : 'menu-item-sub',

	    disabled : 'disabled',

	    menuItemId : 'menu-item-id'
	};

	var removeClass = function(el, name){
	    var _removeClass = function(_el, _name){
	        var classNames = _el.className.split(' ');
	        var newClass = [];

	        for (var i=0, length=classNames.length; i<length; i++){
	            classNames[i] != _name && newClass.push(classNames[i]);
	        }

	        _el.className = newClass.join(' ');
	    };

	    if (el instanceof Node){
	        _removeClass(el, name);
	    }else if (el instanceof HTMLCollection || el instanceof Array){
	        for (var i=0, length=el.length; i<length; i++){ _removeClass(el[i], name); }
	    }
	};

	var addClass = function(el, name){
	    var className = el.className;

	    if (className.indexOf(name) == -1){
	        el.className = className + ' ' + name;
	    }
	};

	window.Element && function(ElementPrototype) {
	    ElementPrototype.matches = ElementPrototype.matches ||
	        ElementPrototype.matchesSelector ||
	        ElementPrototype.webkitMatchesSelector ||
	        ElementPrototype.msMatchesSelector ||
	        function(selector) {
	            var node = this, nodes = (node.parentNode || node.document).querySelectorAll(selector), i = -1;
	            while (nodes[++i] && nodes[i] != node);
	            return !!nodes[i];
	        }
	}(window.Element.prototype);

	// closest polyfill
	window.Element && function(ElementPrototype) {
	    ElementPrototype.closest = ElementPrototype.closest ||
	        function(selector) {
	            var el = this;
	            while (el.matches && !el.matches(selector)) el = el.parentNode;
	            return el.matches ? el : null;
	        }
	}(window.Element.prototype);

	function Menubar(editorElement){
	    this.editorElement = editorElement;
	    this.menubarElement = null;
	    this.router = null;
	    this.menuController = null;

	    this.editorElement = $(editorElement);

	    var toolBar = this.editorElement.find("." + Define.CLASS.EDITOR_TOOLBAR)[0];
	    var menuBar = document.createElement('div');

	    if (toolBar){
	        menuBar.className = innerDefine.editorMenuBar;
	        toolBar.insertBefore(menuBar, toolBar.firstChild);
	    }

	    this.menubarElement = menuBar;
	}

	Menubar.prototype.init = function (menuController, options){
	    this.menuController = menuController;
	    this.router = this.menuController.getRouter();
	    this.$dom = this.router.$dom;

	    this.options = options;

	    this.createMenubar();
	};

	Menubar.prototype.create = function(){

	};

	Menubar.prototype.createMenubar = function(){
	    var listItemHtml = '';
	    for (var id in _menuObject){
	        if (this.options.hiddenMenu.indexOf(id) < 0) {
	            listItemHtml += '<li id="' + id + '" class="' + innerDefine.menuTabItem + '">' + _menuObject[id].name + '</li>';
	        }
	    }

	    var menuTapHtml = '<ul class="' + innerDefine.menuTabWrapper +'">' +
	                          listItemHtml +
	                      '</ul>' +
	                      '<div class="menubar-dropdown-wrapper">' +
	                          '<div class="' + innerDefine.menuItemWrapper + '"></div>' +
	                          '<div class="' + innerDefine.menuItemSubWrapper + '"></div>' +
	                      '</div>';

	    this.menubarElement.innerHTML = menuTapHtml;

	    this.menuItemWrapper = document.getElementsByClassName(innerDefine.menuItemWrapper)[0];
	    this.menuItemSubWrapper = document.getElementsByClassName(innerDefine.menuItemSubWrapper)[0];

	    var _this = this;
	    var menubarDropdownWrapper = document.getElementsByClassName('menubar-dropdown-wrapper')[0];
	    var menuTapItems = [].slice.call(document.getElementsByClassName(innerDefine.menuTabItem));

	    for (var i=0,length=menuTapItems.length; i<length; i++){
	        menuTapItems[i].addEventListener('mouseover', function(e){
	            _this.menuItemSubWrapper.style.display = 'none';
	            // menubarDropdownWrapper.style.display = 'block';

	            var menuTabNodes = [].slice.call(document.getElementsByClassName(innerDefine.menuTabOn));

	            if (menuTabNodes.length > 0){
	                var curMenuTabId = menuTabNodes[0].getAttribute('id');

	                if (curMenuTabId == e.srcElement.getAttribute('id')){
	                    return ;
	                }
	            }

	            removeClass(menuTapItems, innerDefine.menuTabOn);
	            addClass(e.srcElement, innerDefine.menuTabOn);

	            _this.showMenubar(e.srcElement);
	        });

	        menuTapItems[i].addEventListener('click', function(e){
	            var display = menubarDropdownWrapper.style.display;

	            if (display == '' || display == 'none'){
	                menubarDropdownWrapper.style.display = 'block';
	            }else{
	                menubarDropdownWrapper.style.display = '';
	                var menuTabOnNode = [].slice.call(document.getElementsByClassName(innerDefine.menuTabOn));

	                removeClass(menuTabOnNode, innerDefine.menuTabOn);
	            }
	        });
	    }

	    document.addEventListener('click', function(e){
	        if (menuTapItems.indexOf(e.srcElement) == -1){
	            removeClass(menuTapItems, innerDefine.menuTabOn);
	            menubarDropdownWrapper.style.display = '';
	        }
	    });

	    this.menuItemWrapper.addEventListener('click', function(e){
	        _this.onMenuItemClickEvent.call(_this, e);
	    });
	    this.menuItemSubWrapper.addEventListener('click', function(e){
	        _this.onMenuItemClickEvent.call(_this, e);
	    });
	};

	Menubar.prototype.showMenubar = function(selectElement){
	    var _this = this;

	    var id = selectElement.getAttribute('id');
	    var group = _menuObject[id];

	    if (group.child){
	        var child = group.child;
	        var offsetTop = selectElement.offsetTop;
	        var offsetLeft = selectElement.offsetLeft;
	        var offsetHeight = selectElement.offsetHeight;

	        var menuTop = offsetTop + offsetHeight - 1;
	        _this.menuItemWrapper.innerHTML = this.createMenuItems(child);
	        _this.menuItemWrapper.style.top = menuTop + 'px';
	        _this.menuItemWrapper.style.left = offsetLeft + 'px';


	        var menuItemNodes = [].slice.call(document.getElementsByClassName(innerDefine.menuItem));

	        for (var i=0,length=menuItemNodes.length; i<length; i++){
	            var menuItemNode = menuItemNodes[i];
	            menuItemNode.addEventListener('mouseover', function(e){

	                var thisElement = e.srcElement;
	                if (e.srcElement.className.indexOf(innerDefine.menuItem) == -1){
	                    thisElement = e.srcElement.parentNode;
	                }

	                if (thisElement.className.indexOf(innerDefine.menuItemSub) > -1){
	                    _this.menuItemSubWrapper.style.display = 'block';
	                    _this.menuItemSubWrapper.style.top = (menuTop + thisElement.offsetTop + 1) + 'px';
	                    _this.menuItemSubWrapper.style.left = (_this.menuItemWrapper.offsetLeft + _this.menuItemWrapper.offsetWidth) + 'px';

	                    _this.showSubMenubar(thisElement);
	                }else{
	                    _this.menuItemSubWrapper.style.display = 'none';
	                }

	            });
	        }

	        this.statusHighlight(menuItemNodes);

	    }
	};

	Menubar.prototype.createMenuItems = function(child){

	    var menuItemHtml = '';

	    var isBeforeDivision = false;

	    for (var i=0, length=child.length; i<length; i++){

	        if (child[i].division){
	            if (menuItemHtml == '') {
	                continue;
	            }

	            if (!isBeforeDivision) {
	                menuItemHtml += '<div class="division"></div>';
	            }

	            isBeforeDivision = true;
	        }else{
	            if (this.options.hiddenMenu.indexOf(child[i].id) > -1) {
	                continue;
	            }

	            isBeforeDivision = false;

	            var className = innerDefine.menuItem;
	            var thumbStyle = '';
	            var moreHtml = '';

	            if (child[i].child){
	                className += ' ' + innerDefine.menuItemSub;

	                moreHtml = '<div class="more">></div>';
	            }

	            if (child[i].thumb){
	                thumbStyle = 'style="background-position:' + child[i].thumb + '"';
	            }else{
	                thumbStyle = 'style="background:none"';
	            }

	            menuItemHtml += '<div menu-item-id="' + child[i].id + '" class="' + className + '">' +
	                                '<div class="thumbnail" border="0" ' + thumbStyle + '></div>' +
	                                '<div class="text-content">' + child[i].name + '</div>' + moreHtml +
	                            '</div>';
	        }
	    }

	    return menuItemHtml;
	};

	Menubar.prototype.showSubMenubar = function(mainMenuElement){
	    var id = mainMenuElement.getAttribute(innerDefine.menuItemId);
	    var group = this.getGroupById(id);

	    var child = group.child;
	    this.menuItemSubWrapper.innerHTML = this.createMenuItems(child);

	    var menuItemNodes = [].slice.call(document.getElementsByClassName(innerDefine.menuItem));
	    this.statusHighlight(menuItemNodes);
	};

	Menubar.prototype.getGroupById = function(id){
	    var group = null;

	    for (var i in _menuObject){
	        var groups = _menuObject[i];
	        groups.child.forEach(function(mainGroup){
	            if (mainGroup.id == id){group = mainGroup; return false;}
	            if (mainGroup.child){
	                mainGroup.child.forEach(function(subGroup){
	                    if (subGroup.id == id){group = subGroup; return false;}
	                })
	            }
	        });
	    }

	    return group;
	};

	Menubar.prototype.onMenuItemClickEvent = function(e){
	    var thisElement = e.srcElement;

	    if (thisElement.className.indexOf(innerDefine.menuItem) == -1){
	        thisElement = thisElement.parentNode;
	    }

	    var className = thisElement.className;

	    if (className.indexOf(innerDefine.menuItemSub) > -1){
	        e.preventDefault();
	        e.stopPropagation();
	    }else{

	        this.doAction(thisElement);

	    }
	};

	Menubar.prototype.doAction = function(el){

	    if (el){

	        if ($(el).hasClass(innerDefine.disabled)) {
	            return
	        }

	        var menuItemId = el.getAttribute(innerDefine.menuItemId);

	        if (menuItemId && menuItemId != ''){

	            switch (menuItemId){
	                case "find_replace":
	                    var findReplaceNode = document.getElementsByClassName(Define.CLASS.EDITOR_TOOLBAR_MENU_FINDREPLACEBOX)[0];
	                    var findInputTextNode = document.getElementById('findInputText');

	                    findReplaceNode && findReplaceNode.click();
	                    findInputTextNode && findInputTextNode.focus();
	                    break;

	                case "html":
	                case "preview":
	                case "text":

	                    //EDITOR_FOOTER_MENU_HTML

	                    var triggerNode = null;

	                    if (menuItemId == 'html'){
	                        triggerNode = document.getElementsByClassName(Define.CLASS.EDITOR_FOOTER_MENU_HTML)[0];
	                    }else if (menuItemId == 'preview'){
	                        triggerNode = document.getElementsByClassName(Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW)[0];
	                    }else{
	                        triggerNode = document.getElementsByClassName(Define.CLASS.EDITOR_FOOTER_MENU_TEXT)[0];
	                    }

	                    triggerNode.click();

	                    break;

	                default :

	                    if (menuItemId == 'table'){
	                        menuItemId = 'tableModifyDialog';
	                    }

	                    this.menuController.menuSwitch({id : menuItemId});
	                    break;

	            }
	        }
	    }
	};

	Menubar.prototype.statusHighlight = function(menuItemNodes){
	    var opData = this.$dom.selection.getOpData();
	    var opNode = this.$dom.selection.getOpNode(opData.p[0], opData.r[0]);
	    var selectedNode = opNode.container.nodeType == 3 ? opNode.container.parentNode : opNode.container;

	    var isInTable = selectedNode.closest('table');
	    var isTableCellSelected = false;

	    if (isInTable){
	        isTableCellSelected = this.$dom.selection.getSelectedTd().length > 0;
	    }

	    for (var i=0,length=menuItemNodes.length; i<length; i++){
	        var menuItemNode = menuItemNodes[i];
	        var menuItemId = menuItemNode.getAttribute(innerDefine.menuItemId);

	        switch (menuItemId){
	            case 'tableInsertDialog':
	            case 'table_insert_row':
	            case 'table_insert_col':
	            case 'table_insert_top':
	            case 'table_insert_bottom':
	            case 'table_insert_left':
	            case 'table_insert_right':
	            case 'table_remove_col':
	            case 'table_remove_row':
	            case 'table_remove_table':
	            case 'table_merge':
	            case 'table_split_col':
	            case 'table_split_row':
	            case 'tableModifyDialog':
	            case 'cellModifyDialog':

	                if (! isInTable && menuItemId != 'tableInsertDialog'){
	                    addClass(menuItemNode, innerDefine.disabled);
	                } else{
	                    var tableCursorActionIds = ['tableInsertDialog', 'table_insert_row', 'table_insert_col', 'table_insert_top', 'table_insert_bottom', 'table_insert_left',
	                                                'table_insert_right', 'table_remove_col', 'table_remove_row', 'table_split_col', 'table_split_row'];
	                    if (isTableCellSelected && tableCursorActionIds.indexOf(menuItemId) > -1){
	                        addClass(menuItemNode, innerDefine.disabled);
	                    }else if (! isTableCellSelected && menuItemId == 'table_merge'){
	                        addClass(menuItemNode, innerDefine.disabled);
	                    }
	                }

	                break;

	            case 'page_break':
	                if (isInTable){
	                    addClass(menuItemNode, innerDefine.disabled);
	                }
	                break;

	            default :
	                var menuTabOnNode = document.getElementsByClassName(innerDefine.menuTabOn)[0];
	                var menuTabId = menuTabOnNode.getAttribute('id');

	                if (isTableCellSelected && menuTabId == 'menuInsert'){
	                    addClass(menuItemNode, innerDefine.disabled);
	                }

	                break;
	        }
	    }

	};

	module.exports = Menubar;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	var Define = __webpack_require__(3);
	var Resource = __webpack_require__(13);

	var Layout = {
	    menuGroups : {
	        fileGroup : [
	            { id : 'new', type : 'button', style : '', val : ''},
	            { id : 'file_open', type : 'button', style : '', val : ''},
	            { id : 'save', type : 'button', style : '', val : ''},
	            { id : 'print', type : 'button', style : '', val : ''},
	            { id : 'auto_save_load', type : 'button', style : '', val : ''},
	            { id : 'layout', type : 'button', style : '', val : ''},
	            { id : 'template', type : 'button', style : '', val : ''},
	        ],
	        editGroup : [
	            { id : 'undo', type : 'button', style : '', val : ''},
	            { id : 'redo', type : 'button', style : '', val : ''},
	            { id : 'menu_line', type : 'line', style : '', val : ''},
	            { id : 'copy', type : 'button', style : '', val : ''},
	            { id : 'paste', type : 'button', style : '', val : ''},
	            { id : 'cut', type : 'button', style : '', val : ''},
	            { id : 'text_paste', type : 'button', style : '', val : ''},
	            { id : 'menu_line', type : 'line', style : '', val : ''},
	            { id : 'all_select', type : 'button', style : '', val : ''},
	            { id : 'page_break', type : 'button', style : '', val : ''}
	        ],
	        headingGroup : [
	            { id : 'heading', type : 'selectbox', style : 'float:left; width:100px;', val : 'default'}
	        ],
	        fontFamilyGroup : [
	            { id : 'fontFamily', type : 'selectbox', style : 'float:left; width:115px;', val : '나눔고딕, NanumGothic'}
	        ],
	        fontSizeGroup : [
	            { id : 'fontSize', type : 'selectbox', style : 'float:left; width:60px;', val : 12}
	        ],
	        textFormatGroup : [
	            { id : 'bold', type : 'button', style : '', val : ''},
	            { id : 'italic', type : 'button', style : '', val : ''},
	            { id : 'underline', type : 'button', style : '', val : ''},
	            { id : 'strike_through', type : 'button', style : '', val : ''},

	            { id : 'super', type : 'button', style : '', val : ''},
	            { id : 'sub', type : 'button', style : '', val : ''},

	            { id : 'remove_format', type : 'button', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'color', type : 'colorpicker', style : '', val : ''},
	            { id : 'background_color', type : 'colorpicker', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'textFormatCopy', type : 'button', style : '', val : ''},
	            { id : 'textFormatPaste', type : 'button', style : '', val : ''}
	        ],
	        paragraphFormatGroup : [
	            { id : 'numbered_list', type : 'listpicker', style : '', val : ''},
	            { id : 'bullet_list', type : 'listpicker', style : '', val : ''},
	            { id : 'outdent', type : 'button', style : '', val : ''},
	            { id : 'indent', type : 'button', style : '', val : ''},
	            { id : 'line_height', type : 'combobox', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'paragraph_margin', type : 'button', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'align_left', type : 'button', style : '', val : ''},
	            { id : 'align_center', type : 'button', style : '', val : ''},
	            { id : 'align_right', type : 'button', style : '', val : ''},
	            { id : 'align_justify', type : 'button', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'paragraph_remove_format', type : 'button', style : '', val : ''},

	            { id : 'dir_ltr', type : 'button', style : '', val : ''},
	            { id : 'dir_rtl', type : 'button', style : '', val : ''}
	        ],
	        insertGroup : [
	            { id : 'link', type : 'button', style : '', val : ''},
	            { id : 'unlink', type : 'button', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'bookmark', type : 'button', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'horizontal', type : 'button', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'date_format', type : 'button', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'background_image', type : 'button', style : '', val : ''},

	            { id : 'image', type : 'button', style : '', val : ''},

	            { id : 'video', type : 'button', style : '', val : ''},

	            { id : 'file', type : 'button', style : '', val : ''},

	            { id : 'symbol', type : 'button', style : '', val : ''},

	            { id : 'emoticon', type : 'button', style : '', val : ''},

	            { id : 'upper_lower', type : 'button', style : '', val : ''},

	            { id : 'blockquote', type : 'button', style : '', val : ''},

	            { id : 'layer', type : 'button', style : '', val : ''}
	        ],
	        tableGroup : [
	            { id : 'table', type : 'tablepicker', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'table_insert_top', type : 'button', style : '', val : ''},
	            { id : 'table_insert_bottom', type : 'button', style : '', val : ''},
	            { id : 'table_insert_left', type : 'button', style : '', val : ''},
	            { id : 'table_insert_right', type : 'button', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'table_remove_col', type : 'button', style : '', val : ''},
	            { id : 'table_remove_row', type : 'button', style : '', val : ''},
	            { id : 'table_remove_table', type : 'button', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'table_merge', type : 'button', style : '', val : ''},
	            { id : 'table_split_col', type : 'button', style : '', val : ''},
	            { id : 'table_split_row', type : 'button', style : '', val : ''},

	            { id : 'menu_line', type : 'line', style : '', val : ''},

	            { id : 'table_background_color', type : 'colorpicker', style : '', val : ''},
	            { id : 'table_border_style', type : 'custombox', style : '', val : ''}
	        ],
	        toolGroup : [
	            { id : 'find_replace', type : 'findreplacebox', style : '', val : ''}
	        ],
	        viewGroup : [
	            { id : 'fullscreen', type : 'button', style : '', val : ''}
	        ],
	        helpGroup : [
	            { id : 'setting', type : 'button', style : '', val : ''},
	            { id : 'help', type : 'button', style : '', val : ''},
	            { id : 'about', type : 'button', style : '', val : ''}
	        ]
	    },

	    createLayout: function (rootElement, options) {
	        var $element = this.createRootLayout(rootElement, options);

	        var toolbarLayoutHTML = this.getToolbarLayoutHTML(options);
	        var editorLayoutHTML = this.getEditorLayoutHTML(options);
	        var footerLayoutHTML = this.getFooterLayoutHTML(options);

	        $element.html(toolbarLayoutHTML + editorLayoutHTML + footerLayoutHTML);

	        return $element;
	    },

	    createRootLayout: function (rootElement, options) {
	        var $baseElement = $(rootElement);

	        var $element = $('<div class="' + Define.CLASS.KKEDITOR  + '"/>').css({visibility : 'hidden'});

	        if ($baseElement[0].nodeName == 'TEXTAREA') {
	            $baseElement.hide();
	            $baseElement.after($element);
	        } else {
	            $baseElement.append($element);
	        }

	        // var height = $element.height();
	        // $element.height(height - Define.EDITOR_HEIGHT_BUFFER_SIZE);

	        // var width = $element.width();
	        // $element.width(width - Define.EDITOR_WIDTH_BUFFER_SIZE);

	        return $element;
	    },

	    getToolbarLayoutHTML : function(options) {
	        var hiddenMenu = options.hiddenMenu;

	        var isHiddenMenu = false;

	        var checkHiddenMenu = function(key){
	            var isHidden = false;

	            if (isHiddenMenu) {
	                if (hiddenMenu.indexOf(key) > -1) {
	                    isHidden = true;
	                }
	            }

	            return isHidden;
	        };

	        if (hiddenMenu && hiddenMenu.length) {
	            isHiddenMenu = true;
	        }

	        var toolbarMenuHTML = '';

	        for (var groupKey in this.menuGroups) {
	            if (checkHiddenMenu(groupKey)) {
	                continue;
	            }

	            var menuGroup = this.menuGroups[groupKey];

	            var menuHTML = '';

	            var prevMenu = null;

	            for (var menuKey in menuGroup) {
	                var menu = menuGroup[menuKey];

	                if (checkHiddenMenu(menu[Define.ATTR.ID])) {
	                    continue;
	                }

	                var menuType = menu.type;

	                if ((!prevMenu && menuType === 'line') || (prevMenu && prevMenu.type === 'line' && menuType === 'line')) {
	                    continue;
	                }

	                if (menuType === 'line') {
	                    menuHTML += '<a class="' + 'menu_' + menu.type + '">' +
	                                    '<span></span>' +
	                                '</a> ';
	                } else if (menuType === 'tablepicker') {
	                    menuHTML += '<a u-id="' + menu.id + '" class="' + 'menu_' + menu.type + '" title="' + (Resource.menuTitle[menu.id] || '' ) + '" >' +
	                                    '<i class="i_icon i_' + menu.id + '"></i>' +
	                                '</a> ';
	                } else if (menuType === 'combobox') {
	                    menuHTML += '<a u-id="' + menu.id + '" class="' + 'menu_' + menu.type + '" mode="combo" title="' + (Resource.menuTitle[menu.id] || '' ) + '" >' +
	                                    '<i class="i_icon i_' + menu.id + '"></i>' +
	                                '</a> ';
	                } else if (menuType === 'selectbox') {
	                    menuHTML += '<a u-id="' + menu.id + '" class="' + 'menu_' + menu.type + '" val="' + menu.val + '" style="' + menu.style + '" title="' + (Resource.menuTitle[menu.id] || '' ) + '" >' +
	                                    '<i class="i_icon i_' + menu.id + '"></i>' +
	                                '</a> ';
	                } else {
	                    //if (menu.type == 'button' || menu.type == 'colorpicker' || menu.type == 'combobox' || menu.type == 'custombox'  || menu.type == 'tablepicker' || menu.type == 'findreplacebox' ) {
	                    menuHTML += '<a u-id="' + menu.id + '" class="' + 'menu_' + menu.type + '" title="' + (Resource.menuTitle[menu.id] || '' ) + '" >' +
	                                    '<i class="i_icon i_' + menu.id + '"></i>' +
	                                '</a> ';
	                }

	                prevMenu = menu;
	            }

	            if (menuHTML) {
	                toolbarMenuHTML += '<li class="' + Define.CLASS.EDITOR_TOOLBAR_MENU + '">';
	                toolbarMenuHTML += menuHTML;
	                toolbarMenuHTML += '</li> ';
	            }
	        }

	        var toolbarHTML = '<div class="' + Define.CLASS.EDITOR_TOOLBAR + ($.browser.chrome ? ' chrome' : '') + '">';

	        if (toolbarMenuHTML) {
	            toolbarHTML += '<ul class ="' + Define.CLASS.EDITOR_TOOLBAR_MENUS + '">';
	            toolbarHTML += toolbarMenuHTML;
	            toolbarHTML += '</ul> ';
	        }

	        toolbarHTML += '<div class="' + Define.CLASS.EDITOR_TOOLBAR_DISABLED + '"></div>';
	        toolbarHTML += '</div>';

	        return toolbarHTML;
	    },

	    getEditorLayoutHTML : function(options) {
	        var useHtmlMode = options.useHtmlMode;
	        var useTextMode = options.useTextMode;
	        var usePreviewMode = options.usePreviewMode;

	        var editorLayoutHTML = '' +
	                            '<div class="' + Define.CLASS.EDITOR_VIEW + '">' +
	                                '<div class="' + Define.CLASS.MAIN_VIEW + ' ' + Define.CLASS.CONTENT_VIEW + '" style="">' +
	                                    '<div class="' + Define.CLASS.CONTENTS + '" contenteditable="true"></div>' +
	                                '</div>';

	        if (useHtmlMode) {
	            editorLayoutHTML += '<div class="' + Define.CLASS.MAIN_VIEW + ' ' + Define.CLASS.HTML_VIEW + ' ' + Define.CLASS.VIEW_HIDE + '" style="">' +
	                                    '<textarea class="' + Define.CLASS.HTML_CONTENTS + '"></textarea>' +
	                                '</div>'
	        }

	        if (useTextMode) {
	            editorLayoutHTML += '<div class="' + Define.CLASS.MAIN_VIEW + ' ' + Define.CLASS.TEXT_VIEW + ' ' + Define.CLASS.VIEW_HIDE + '" style="">' +
	                                    '<textarea class="' + Define.CLASS.TEXT_CONTENTS + '"></textarea>' +
	                                '</div>'
	        }

	        if (usePreviewMode) {
	            editorLayoutHTML += '<div class="' + Define.CLASS.MAIN_VIEW + ' ' + Define.CLASS.PRE_VIEW + ' ' + Define.CLASS.VIEW_HIDE + '" style="">' +
	                                    '<div class="' + Define.CLASS.PREVIEW_CONTENTS + '"></div>' +
	                                '</div>';
	        }
	                // '<textarea class="' + Define.CLASS.TEXT_CONTENTS + ' hide"></textarea>' +
	        editorLayoutHTML += '</div>';


	        editorLayoutHTML += '' +
	            '<div class="' + Define.CLASS.DIALOG + '" style="display : none;">' +
	            '</div>';

	        return editorLayoutHTML;
	    },

	    getFooterLayoutHTML : function(options) {
	        //TODO : i18n 대응 예정

	        var useHtmlMode = options.useHtmlMode;
	        var useTextMode = options.useTextMode;
	        var usePreviewMode = options.usePreviewMode;

	        var useEditorResize = options.useEditorResize;

	        var footerHTML = '<div class="' + Define.CLASS.EDITOR_FOOTER + (options.useFooterMenu ? '' : ' ' + Define.CLASS.EDITOR_FOOTER_DISABLED) + '">';

	        if (useEditorResize) {
	            footerHTML += '<div class="' + Define.CLASS.EDITOR_FOOTER_RESIZE_BAR + '">' + '에디터 크기 조절' + '</div>';
	        }

	        footerHTML += '<ul class="' + Define.CLASS.EDITOR_FOOTER_MENUS + '">';

	        footerHTML += '' +
	            '<li>' +
	                '<a class="' + Define.CLASS.EDITOR_FOOTER_MENU + ' ' + Define.CLASS.EDITOR_FOOTER_MENU_EDITOR + ' ' + Define.CLASS.EDITOR_FOOTER_MENU_ACTIVE + '">' +
	                    '<span>' +
	                        'Editor' +
	                    '</span>' +
	                '</a>' +
	            '</li>';

	        if (useHtmlMode) {
	            footerHTML += '' +
	                '<li>' +
	                    '<a class="' + Define.CLASS.EDITOR_FOOTER_MENU + ' ' + Define.CLASS.EDITOR_FOOTER_MENU_HTML + '">' +
	                        '<span>' +
	                        'HTML' +
	                        '</span>' +
	                    '</a>' +
	                '</li>';
	        }

	        if (useTextMode) {
	            footerHTML += '' +
	                '<li>' +
	                    '<a class="' + Define.CLASS.EDITOR_FOOTER_MENU + ' ' + Define.CLASS.EDITOR_FOOTER_MENU_TEXT + '">' +
	                        '<span>' +
	                            'TEXT' +
	                        '</span>' +
	                    '</a>' +
	                '</li>';
	        }

	        if (usePreviewMode) {
	            footerHTML += '' +
	                '<li>' +
	                    '<a class="' + Define.CLASS.EDITOR_FOOTER_MENU + ' ' + Define.CLASS.EDITOR_FOOTER_MENU_PREVIEW + '">' +
	                        '<span>' +
	                            'Preview' +
	                        '</span>' +
	                    '</a>' +
	                '</li>';
	        }

	        footerHTML += '</ul>';
	        footerHTML += '</div>';

	        return footerHTML;
	    }
	};

	module.exports = Layout;



/***/ })
/******/ ]);